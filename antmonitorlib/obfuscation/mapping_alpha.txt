android.support.v4.R -> android.support.v4.R:
    9:9:void <init>() -> <init>
com.google.android.gms.R -> com.google.android.gms.R:
    9:9:void <init>() -> <init>
com.google.android.gms.R$attr -> com.google.android.gms.R$attr:
    int adSize -> adSize
    int adSizes -> adSizes
    int adUnitId -> adUnitId
    int appTheme -> appTheme
    int buyButtonAppearance -> buyButtonAppearance
    int buyButtonHeight -> buyButtonHeight
    int buyButtonText -> buyButtonText
    int buyButtonWidth -> buyButtonWidth
    int cameraBearing -> cameraBearing
    int cameraTargetLat -> cameraTargetLat
    int cameraTargetLng -> cameraTargetLng
    int cameraTilt -> cameraTilt
    int cameraZoom -> cameraZoom
    int environment -> environment
    int fragmentMode -> fragmentMode
    int fragmentStyle -> fragmentStyle
    int mapType -> mapType
    int maskedWalletDetailsBackground -> maskedWalletDetailsBackground
    int maskedWalletDetailsButtonBackground -> maskedWalletDetailsButtonBackground
    int maskedWalletDetailsButtonTextAppearance -> maskedWalletDetailsButtonTextAppearance
    int maskedWalletDetailsHeaderTextAppearance -> maskedWalletDetailsHeaderTextAppearance
    int maskedWalletDetailsLogoImageType -> maskedWalletDetailsLogoImageType
    int maskedWalletDetailsLogoTextColor -> maskedWalletDetailsLogoTextColor
    int maskedWalletDetailsTextAppearance -> maskedWalletDetailsTextAppearance
    int uiCompass -> uiCompass
    int uiRotateGestures -> uiRotateGestures
    int uiScrollGestures -> uiScrollGestures
    int uiTiltGestures -> uiTiltGestures
    int uiZoomControls -> uiZoomControls
    int uiZoomGestures -> uiZoomGestures
    int useViewLifecycle -> useViewLifecycle
    int zOrderOnTop -> zOrderOnTop
    10:10:void <init>() -> <init>
    11:42:void <clinit>() -> <clinit>
com.google.android.gms.R$color -> com.google.android.gms.R$color:
    int common_action_bar_splitter -> common_action_bar_splitter
    int common_signin_btn_dark_text_default -> common_signin_btn_dark_text_default
    int common_signin_btn_dark_text_disabled -> common_signin_btn_dark_text_disabled
    int common_signin_btn_dark_text_focused -> common_signin_btn_dark_text_focused
    int common_signin_btn_dark_text_pressed -> common_signin_btn_dark_text_pressed
    int common_signin_btn_default_background -> common_signin_btn_default_background
    int common_signin_btn_light_text_default -> common_signin_btn_light_text_default
    int common_signin_btn_light_text_disabled -> common_signin_btn_light_text_disabled
    int common_signin_btn_light_text_focused -> common_signin_btn_light_text_focused
    int common_signin_btn_light_text_pressed -> common_signin_btn_light_text_pressed
    int common_signin_btn_text_dark -> common_signin_btn_text_dark
    int common_signin_btn_text_light -> common_signin_btn_text_light
    int wallet_bright_foreground_disabled_holo_light -> wallet_bright_foreground_disabled_holo_light
    int wallet_bright_foreground_holo_dark -> wallet_bright_foreground_holo_dark
    int wallet_bright_foreground_holo_light -> wallet_bright_foreground_holo_light
    int wallet_dim_foreground_disabled_holo_dark -> wallet_dim_foreground_disabled_holo_dark
    int wallet_dim_foreground_holo_dark -> wallet_dim_foreground_holo_dark
    int wallet_dim_foreground_inverse_disabled_holo_dark -> wallet_dim_foreground_inverse_disabled_holo_dark
    int wallet_dim_foreground_inverse_holo_dark -> wallet_dim_foreground_inverse_holo_dark
    int wallet_highlighted_text_holo_dark -> wallet_highlighted_text_holo_dark
    int wallet_highlighted_text_holo_light -> wallet_highlighted_text_holo_light
    int wallet_hint_foreground_holo_dark -> wallet_hint_foreground_holo_dark
    int wallet_hint_foreground_holo_light -> wallet_hint_foreground_holo_light
    int wallet_holo_blue_light -> wallet_holo_blue_light
    int wallet_link_text_light -> wallet_link_text_light
    int wallet_primary_text_holo_light -> wallet_primary_text_holo_light
    int wallet_secondary_text_holo_dark -> wallet_secondary_text_holo_dark
    44:44:void <init>() -> <init>
    45:71:void <clinit>() -> <clinit>
com.google.android.gms.R$drawable -> com.google.android.gms.R$drawable:
    int common_full_open_on_phone -> common_full_open_on_phone
    int common_ic_googleplayservices -> common_ic_googleplayservices
    int common_signin_btn_icon_dark -> common_signin_btn_icon_dark
    int common_signin_btn_icon_disabled_dark -> common_signin_btn_icon_disabled_dark
    int common_signin_btn_icon_disabled_focus_dark -> common_signin_btn_icon_disabled_focus_dark
    int common_signin_btn_icon_disabled_focus_light -> common_signin_btn_icon_disabled_focus_light
    int common_signin_btn_icon_disabled_light -> common_signin_btn_icon_disabled_light
    int common_signin_btn_icon_focus_dark -> common_signin_btn_icon_focus_dark
    int common_signin_btn_icon_focus_light -> common_signin_btn_icon_focus_light
    int common_signin_btn_icon_light -> common_signin_btn_icon_light
    int common_signin_btn_icon_normal_dark -> common_signin_btn_icon_normal_dark
    int common_signin_btn_icon_normal_light -> common_signin_btn_icon_normal_light
    int common_signin_btn_icon_pressed_dark -> common_signin_btn_icon_pressed_dark
    int common_signin_btn_icon_pressed_light -> common_signin_btn_icon_pressed_light
    int common_signin_btn_text_dark -> common_signin_btn_text_dark
    int common_signin_btn_text_disabled_dark -> common_signin_btn_text_disabled_dark
    int common_signin_btn_text_disabled_focus_dark -> common_signin_btn_text_disabled_focus_dark
    int common_signin_btn_text_disabled_focus_light -> common_signin_btn_text_disabled_focus_light
    int common_signin_btn_text_disabled_light -> common_signin_btn_text_disabled_light
    int common_signin_btn_text_focus_dark -> common_signin_btn_text_focus_dark
    int common_signin_btn_text_focus_light -> common_signin_btn_text_focus_light
    int common_signin_btn_text_light -> common_signin_btn_text_light
    int common_signin_btn_text_normal_dark -> common_signin_btn_text_normal_dark
    int common_signin_btn_text_normal_light -> common_signin_btn_text_normal_light
    int common_signin_btn_text_pressed_dark -> common_signin_btn_text_pressed_dark
    int common_signin_btn_text_pressed_light -> common_signin_btn_text_pressed_light
    int ic_plusone_medium_off_client -> ic_plusone_medium_off_client
    int ic_plusone_small_off_client -> ic_plusone_small_off_client
    int ic_plusone_standard_off_client -> ic_plusone_standard_off_client
    int ic_plusone_tall_off_client -> ic_plusone_tall_off_client
    int powered_by_google_dark -> powered_by_google_dark
    int powered_by_google_light -> powered_by_google_light
    73:73:void <init>() -> <init>
    74:105:void <clinit>() -> <clinit>
com.google.android.gms.R$id -> com.google.android.gms.R$id:
    int book_now -> book_now
    int buyButton -> buyButton
    int buy_now -> buy_now
    int buy_with_google -> buy_with_google
    int classic -> classic
    int grayscale -> grayscale
    int holo_dark -> holo_dark
    int holo_light -> holo_light
    int hybrid -> hybrid
    int match_parent -> match_parent
    int monochrome -> monochrome
    int none -> none
    int normal -> normal
    int production -> production
    int sandbox -> sandbox
    int satellite -> satellite
    int selectionDetails -> selectionDetails
    int strict_sandbox -> strict_sandbox
    int terrain -> terrain
    int wrap_content -> wrap_content
    107:107:void <init>() -> <init>
    108:127:void <clinit>() -> <clinit>
com.google.android.gms.R$integer -> com.google.android.gms.R$integer:
    int google_play_services_version -> google_play_services_version
    129:129:void <init>() -> <init>
    130:130:void <clinit>() -> <clinit>
com.google.android.gms.R$string -> com.google.android.gms.R$string:
    int accept -> accept
    int common_android_wear_notification_needs_update_text -> common_android_wear_notification_needs_update_text
    int common_android_wear_update_text -> common_android_wear_update_text
    int common_android_wear_update_title -> common_android_wear_update_title
    int common_google_play_services_enable_button -> common_google_play_services_enable_button
    int common_google_play_services_enable_text -> common_google_play_services_enable_text
    int common_google_play_services_enable_title -> common_google_play_services_enable_title
    int common_google_play_services_error_notification_requested_by_msg -> common_google_play_services_error_notification_requested_by_msg
    int common_google_play_services_install_button -> common_google_play_services_install_button
    int common_google_play_services_install_text_phone -> common_google_play_services_install_text_phone
    int common_google_play_services_install_text_tablet -> common_google_play_services_install_text_tablet
    int common_google_play_services_install_title -> common_google_play_services_install_title
    int common_google_play_services_invalid_account_text -> common_google_play_services_invalid_account_text
    int common_google_play_services_invalid_account_title -> common_google_play_services_invalid_account_title
    int common_google_play_services_needs_enabling_title -> common_google_play_services_needs_enabling_title
    int common_google_play_services_network_error_text -> common_google_play_services_network_error_text
    int common_google_play_services_network_error_title -> common_google_play_services_network_error_title
    int common_google_play_services_notification_needs_installation_title -> common_google_play_services_notification_needs_installation_title
    int common_google_play_services_notification_needs_update_title -> common_google_play_services_notification_needs_update_title
    int common_google_play_services_notification_ticker -> common_google_play_services_notification_ticker
    int common_google_play_services_unknown_issue -> common_google_play_services_unknown_issue
    int common_google_play_services_unsupported_text -> common_google_play_services_unsupported_text
    int common_google_play_services_unsupported_title -> common_google_play_services_unsupported_title
    int common_google_play_services_update_button -> common_google_play_services_update_button
    int common_google_play_services_update_text -> common_google_play_services_update_text
    int common_google_play_services_update_title -> common_google_play_services_update_title
    int common_open_on_phone -> common_open_on_phone
    int common_signin_button_text -> common_signin_button_text
    int common_signin_button_text_long -> common_signin_button_text_long
    int create_calendar_message -> create_calendar_message
    int create_calendar_title -> create_calendar_title
    int decline -> decline
    int store_picture_message -> store_picture_message
    int store_picture_title -> store_picture_title
    int wallet_buy_button_place_holder -> wallet_buy_button_place_holder
    132:132:void <init>() -> <init>
    133:167:void <clinit>() -> <clinit>
com.google.android.gms.R$style -> com.google.android.gms.R$style:
    int Theme_IAPTheme -> Theme_IAPTheme
    int WalletFragmentDefaultButtonTextAppearance -> WalletFragmentDefaultButtonTextAppearance
    int WalletFragmentDefaultDetailsHeaderTextAppearance -> WalletFragmentDefaultDetailsHeaderTextAppearance
    int WalletFragmentDefaultDetailsTextAppearance -> WalletFragmentDefaultDetailsTextAppearance
    int WalletFragmentDefaultStyle -> WalletFragmentDefaultStyle
    169:169:void <init>() -> <init>
    170:174:void <clinit>() -> <clinit>
com.google.android.gms.R$styleable -> com.google.android.gms.R$styleable:
    int[] AdsAttrs -> AdsAttrs
    int AdsAttrs_adSize -> AdsAttrs_adSize
    int AdsAttrs_adSizes -> AdsAttrs_adSizes
    int AdsAttrs_adUnitId -> AdsAttrs_adUnitId
    int[] MapAttrs -> MapAttrs
    int MapAttrs_cameraBearing -> MapAttrs_cameraBearing
    int MapAttrs_cameraTargetLat -> MapAttrs_cameraTargetLat
    int MapAttrs_cameraTargetLng -> MapAttrs_cameraTargetLng
    int MapAttrs_cameraTilt -> MapAttrs_cameraTilt
    int MapAttrs_cameraZoom -> MapAttrs_cameraZoom
    int MapAttrs_mapType -> MapAttrs_mapType
    int MapAttrs_uiCompass -> MapAttrs_uiCompass
    int MapAttrs_uiRotateGestures -> MapAttrs_uiRotateGestures
    int MapAttrs_uiScrollGestures -> MapAttrs_uiScrollGestures
    int MapAttrs_uiTiltGestures -> MapAttrs_uiTiltGestures
    int MapAttrs_uiZoomControls -> MapAttrs_uiZoomControls
    int MapAttrs_uiZoomGestures -> MapAttrs_uiZoomGestures
    int MapAttrs_useViewLifecycle -> MapAttrs_useViewLifecycle
    int MapAttrs_zOrderOnTop -> MapAttrs_zOrderOnTop
    int[] WalletFragmentOptions -> WalletFragmentOptions
    int WalletFragmentOptions_appTheme -> WalletFragmentOptions_appTheme
    int WalletFragmentOptions_environment -> WalletFragmentOptions_environment
    int WalletFragmentOptions_fragmentMode -> WalletFragmentOptions_fragmentMode
    int WalletFragmentOptions_fragmentStyle -> WalletFragmentOptions_fragmentStyle
    int[] WalletFragmentStyle -> WalletFragmentStyle
    int WalletFragmentStyle_buyButtonAppearance -> WalletFragmentStyle_buyButtonAppearance
    int WalletFragmentStyle_buyButtonHeight -> WalletFragmentStyle_buyButtonHeight
    int WalletFragmentStyle_buyButtonText -> WalletFragmentStyle_buyButtonText
    int WalletFragmentStyle_buyButtonWidth -> WalletFragmentStyle_buyButtonWidth
    int WalletFragmentStyle_maskedWalletDetailsBackground -> WalletFragmentStyle_maskedWalletDetailsBackground
    int WalletFragmentStyle_maskedWalletDetailsButtonBackground -> WalletFragmentStyle_maskedWalletDetailsButtonBackground
    int WalletFragmentStyle_maskedWalletDetailsButtonTextAppearance -> WalletFragmentStyle_maskedWalletDetailsButtonTextAppearance
    int WalletFragmentStyle_maskedWalletDetailsHeaderTextAppearance -> WalletFragmentStyle_maskedWalletDetailsHeaderTextAppearance
    int WalletFragmentStyle_maskedWalletDetailsLogoImageType -> WalletFragmentStyle_maskedWalletDetailsLogoImageType
    int WalletFragmentStyle_maskedWalletDetailsLogoTextColor -> WalletFragmentStyle_maskedWalletDetailsLogoTextColor
    int WalletFragmentStyle_maskedWalletDetailsTextAppearance -> WalletFragmentStyle_maskedWalletDetailsTextAppearance
    176:176:void <init>() -> <init>
    177:212:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.AntMonitorActivity -> edu.uci.calit2.antmonitor.lib.AntMonitorActivity:
    void onVpnStateChanged(edu.uci.calit2.antmonitor.lib.vpn.VpnState) -> onVpnStateChanged
edu.uci.calit2.antmonitor.lib.BuildConfig -> edu.uci.calit2.antmonitor.lib.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    6:6:void <init>() -> <init>
edu.uci.calit2.antmonitor.lib.R -> edu.uci.calit2.antmonitor.lib.R:
    10:10:void <init>() -> <init>
edu.uci.calit2.antmonitor.lib.R$attr -> edu.uci.calit2.antmonitor.lib.R$attr:
    int adSize -> adSize
    int adSizes -> adSizes
    int adUnitId -> adUnitId
    int appTheme -> appTheme
    int buyButtonAppearance -> buyButtonAppearance
    int buyButtonHeight -> buyButtonHeight
    int buyButtonText -> buyButtonText
    int buyButtonWidth -> buyButtonWidth
    int cameraBearing -> cameraBearing
    int cameraTargetLat -> cameraTargetLat
    int cameraTargetLng -> cameraTargetLng
    int cameraTilt -> cameraTilt
    int cameraZoom -> cameraZoom
    int environment -> environment
    int fragmentMode -> fragmentMode
    int fragmentStyle -> fragmentStyle
    int mapType -> mapType
    int maskedWalletDetailsBackground -> maskedWalletDetailsBackground
    int maskedWalletDetailsButtonBackground -> maskedWalletDetailsButtonBackground
    int maskedWalletDetailsButtonTextAppearance -> maskedWalletDetailsButtonTextAppearance
    int maskedWalletDetailsHeaderTextAppearance -> maskedWalletDetailsHeaderTextAppearance
    int maskedWalletDetailsLogoImageType -> maskedWalletDetailsLogoImageType
    int maskedWalletDetailsLogoTextColor -> maskedWalletDetailsLogoTextColor
    int maskedWalletDetailsTextAppearance -> maskedWalletDetailsTextAppearance
    int uiCompass -> uiCompass
    int uiRotateGestures -> uiRotateGestures
    int uiScrollGestures -> uiScrollGestures
    int uiTiltGestures -> uiTiltGestures
    int uiZoomControls -> uiZoomControls
    int uiZoomGestures -> uiZoomGestures
    int useViewLifecycle -> useViewLifecycle
    int zOrderOnTop -> zOrderOnTop
    11:11:void <init>() -> <init>
    19:297:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$color -> edu.uci.calit2.antmonitor.lib.R$color:
    int black -> black
    int common_action_bar_splitter -> common_action_bar_splitter
    int common_signin_btn_dark_text_default -> common_signin_btn_dark_text_default
    int common_signin_btn_dark_text_disabled -> common_signin_btn_dark_text_disabled
    int common_signin_btn_dark_text_focused -> common_signin_btn_dark_text_focused
    int common_signin_btn_dark_text_pressed -> common_signin_btn_dark_text_pressed
    int common_signin_btn_default_background -> common_signin_btn_default_background
    int common_signin_btn_light_text_default -> common_signin_btn_light_text_default
    int common_signin_btn_light_text_disabled -> common_signin_btn_light_text_disabled
    int common_signin_btn_light_text_focused -> common_signin_btn_light_text_focused
    int common_signin_btn_light_text_pressed -> common_signin_btn_light_text_pressed
    int common_signin_btn_text_dark -> common_signin_btn_text_dark
    int common_signin_btn_text_light -> common_signin_btn_text_light
    int wallet_bright_foreground_disabled_holo_light -> wallet_bright_foreground_disabled_holo_light
    int wallet_bright_foreground_holo_dark -> wallet_bright_foreground_holo_dark
    int wallet_bright_foreground_holo_light -> wallet_bright_foreground_holo_light
    int wallet_dim_foreground_disabled_holo_dark -> wallet_dim_foreground_disabled_holo_dark
    int wallet_dim_foreground_holo_dark -> wallet_dim_foreground_holo_dark
    int wallet_dim_foreground_inverse_disabled_holo_dark -> wallet_dim_foreground_inverse_disabled_holo_dark
    int wallet_dim_foreground_inverse_holo_dark -> wallet_dim_foreground_inverse_holo_dark
    int wallet_highlighted_text_holo_dark -> wallet_highlighted_text_holo_dark
    int wallet_highlighted_text_holo_light -> wallet_highlighted_text_holo_light
    int wallet_hint_foreground_holo_dark -> wallet_hint_foreground_holo_dark
    int wallet_hint_foreground_holo_light -> wallet_hint_foreground_holo_light
    int wallet_holo_blue_light -> wallet_holo_blue_light
    int wallet_link_text_light -> wallet_link_text_light
    int wallet_primary_text_holo_light -> wallet_primary_text_holo_light
    int wallet_secondary_text_holo_dark -> wallet_secondary_text_holo_dark
    int white -> white
    299:299:void <init>() -> <init>
    300:328:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$dimen -> edu.uci.calit2.antmonitor.lib.R$dimen:
    int activity_horizontal_margin -> activity_horizontal_margin
    int activity_vertical_margin -> activity_vertical_margin
    330:330:void <init>() -> <init>
    331:332:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$drawable -> edu.uci.calit2.antmonitor.lib.R$drawable:
    int action_hash -> action_hash
    int check_mark -> check_mark
    int common_full_open_on_phone -> common_full_open_on_phone
    int common_ic_googleplayservices -> common_ic_googleplayservices
    int common_signin_btn_icon_dark -> common_signin_btn_icon_dark
    int common_signin_btn_icon_disabled_dark -> common_signin_btn_icon_disabled_dark
    int common_signin_btn_icon_disabled_focus_dark -> common_signin_btn_icon_disabled_focus_dark
    int common_signin_btn_icon_disabled_focus_light -> common_signin_btn_icon_disabled_focus_light
    int common_signin_btn_icon_disabled_light -> common_signin_btn_icon_disabled_light
    int common_signin_btn_icon_focus_dark -> common_signin_btn_icon_focus_dark
    int common_signin_btn_icon_focus_light -> common_signin_btn_icon_focus_light
    int common_signin_btn_icon_light -> common_signin_btn_icon_light
    int common_signin_btn_icon_normal_dark -> common_signin_btn_icon_normal_dark
    int common_signin_btn_icon_normal_light -> common_signin_btn_icon_normal_light
    int common_signin_btn_icon_pressed_dark -> common_signin_btn_icon_pressed_dark
    int common_signin_btn_icon_pressed_light -> common_signin_btn_icon_pressed_light
    int common_signin_btn_text_dark -> common_signin_btn_text_dark
    int common_signin_btn_text_disabled_dark -> common_signin_btn_text_disabled_dark
    int common_signin_btn_text_disabled_focus_dark -> common_signin_btn_text_disabled_focus_dark
    int common_signin_btn_text_disabled_focus_light -> common_signin_btn_text_disabled_focus_light
    int common_signin_btn_text_disabled_light -> common_signin_btn_text_disabled_light
    int common_signin_btn_text_focus_dark -> common_signin_btn_text_focus_dark
    int common_signin_btn_text_focus_light -> common_signin_btn_text_focus_light
    int common_signin_btn_text_light -> common_signin_btn_text_light
    int common_signin_btn_text_normal_dark -> common_signin_btn_text_normal_dark
    int common_signin_btn_text_normal_light -> common_signin_btn_text_normal_light
    int common_signin_btn_text_pressed_dark -> common_signin_btn_text_pressed_dark
    int common_signin_btn_text_pressed_light -> common_signin_btn_text_pressed_light
    int deny_mark -> deny_mark
    int ic_plusone_medium_off_client -> ic_plusone_medium_off_client
    int ic_plusone_small_off_client -> ic_plusone_small_off_client
    int ic_plusone_standard_off_client -> ic_plusone_standard_off_client
    int ic_plusone_tall_off_client -> ic_plusone_tall_off_client
    int powered_by_google_dark -> powered_by_google_dark
    int powered_by_google_light -> powered_by_google_light
    334:334:void <init>() -> <init>
    335:369:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$id -> edu.uci.calit2.antmonitor.lib.R$id:
    int book_now -> book_now
    int buyButton -> buyButton
    int buy_now -> buy_now
    int buy_with_google -> buy_with_google
    int classic -> classic
    int grayscale -> grayscale
    int holo_dark -> holo_dark
    int holo_light -> holo_light
    int hybrid -> hybrid
    int match_parent -> match_parent
    int monochrome -> monochrome
    int none -> none
    int normal -> normal
    int production -> production
    int sandbox -> sandbox
    int satellite -> satellite
    int selectionDetails -> selectionDetails
    int strict_sandbox -> strict_sandbox
    int terrain -> terrain
    int wrap_content -> wrap_content
    371:371:void <init>() -> <init>
    372:391:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$integer -> edu.uci.calit2.antmonitor.lib.R$integer:
    int google_play_services_version -> google_play_services_version
    393:393:void <init>() -> <init>
    394:394:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$mipmap -> edu.uci.calit2.antmonitor.lib.R$mipmap:
    int ic_launcher -> ic_launcher
    int shield -> shield
    396:396:void <init>() -> <init>
    397:398:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$raw -> edu.uci.calit2.antmonitor.lib.R$raw:
    int certificate -> certificate
    400:400:void <init>() -> <init>
    401:401:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$string -> edu.uci.calit2.antmonitor.lib.R$string:
    int accept -> accept
    int app -> app
    int app_name -> app_name
    int common_android_wear_notification_needs_update_text -> common_android_wear_notification_needs_update_text
    int common_android_wear_update_text -> common_android_wear_update_text
    int common_android_wear_update_title -> common_android_wear_update_title
    int common_google_play_services_enable_button -> common_google_play_services_enable_button
    int common_google_play_services_enable_text -> common_google_play_services_enable_text
    int common_google_play_services_enable_title -> common_google_play_services_enable_title
    int common_google_play_services_error_notification_requested_by_msg -> common_google_play_services_error_notification_requested_by_msg
    int common_google_play_services_install_button -> common_google_play_services_install_button
    int common_google_play_services_install_text_phone -> common_google_play_services_install_text_phone
    int common_google_play_services_install_text_tablet -> common_google_play_services_install_text_tablet
    int common_google_play_services_install_title -> common_google_play_services_install_title
    int common_google_play_services_invalid_account_text -> common_google_play_services_invalid_account_text
    int common_google_play_services_invalid_account_title -> common_google_play_services_invalid_account_title
    int common_google_play_services_needs_enabling_title -> common_google_play_services_needs_enabling_title
    int common_google_play_services_network_error_text -> common_google_play_services_network_error_text
    int common_google_play_services_network_error_title -> common_google_play_services_network_error_title
    int common_google_play_services_notification_needs_installation_title -> common_google_play_services_notification_needs_installation_title
    int common_google_play_services_notification_needs_update_title -> common_google_play_services_notification_needs_update_title
    int common_google_play_services_notification_ticker -> common_google_play_services_notification_ticker
    int common_google_play_services_unknown_issue -> common_google_play_services_unknown_issue
    int common_google_play_services_unsupported_text -> common_google_play_services_unsupported_text
    int common_google_play_services_unsupported_title -> common_google_play_services_unsupported_title
    int common_google_play_services_update_button -> common_google_play_services_update_button
    int common_google_play_services_update_text -> common_google_play_services_update_text
    int common_google_play_services_update_title -> common_google_play_services_update_title
    int common_open_on_phone -> common_open_on_phone
    int common_signin_button_text -> common_signin_button_text
    int common_signin_button_text_long -> common_signin_button_text_long
    int create_calendar_message -> create_calendar_message
    int create_calendar_title -> create_calendar_title
    int decline -> decline
    int no_service -> no_service
    int notification_detail_text_vpnservice_connected -> notification_detail_text_vpnservice_connected
    int notification_detail_text_vpnservice_connecting -> notification_detail_text_vpnservice_connecting
    int notification_detail_text_vpnservice_disconnected -> notification_detail_text_vpnservice_disconnected
    int notification_detail_text_vpnservice_scheduled_connect -> notification_detail_text_vpnservice_scheduled_connect
    int notification_title_vpnservice -> notification_title_vpnservice
    int store_picture_message -> store_picture_message
    int store_picture_title -> store_picture_title
    int wallet_buy_button_place_holder -> wallet_buy_button_place_holder
    403:403:void <init>() -> <init>
    404:446:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$style -> edu.uci.calit2.antmonitor.lib.R$style:
    int Theme_IAPTheme -> Theme_IAPTheme
    int WalletFragmentDefaultButtonTextAppearance -> WalletFragmentDefaultButtonTextAppearance
    int WalletFragmentDefaultDetailsHeaderTextAppearance -> WalletFragmentDefaultDetailsHeaderTextAppearance
    int WalletFragmentDefaultDetailsTextAppearance -> WalletFragmentDefaultDetailsTextAppearance
    int WalletFragmentDefaultStyle -> WalletFragmentDefaultStyle
    448:448:void <init>() -> <init>
    449:453:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$styleable -> edu.uci.calit2.antmonitor.lib.R$styleable:
    int[] AdsAttrs -> AdsAttrs
    int AdsAttrs_adSize -> AdsAttrs_adSize
    int AdsAttrs_adSizes -> AdsAttrs_adSizes
    int AdsAttrs_adUnitId -> AdsAttrs_adUnitId
    int[] MapAttrs -> MapAttrs
    int MapAttrs_cameraBearing -> MapAttrs_cameraBearing
    int MapAttrs_cameraTargetLat -> MapAttrs_cameraTargetLat
    int MapAttrs_cameraTargetLng -> MapAttrs_cameraTargetLng
    int MapAttrs_cameraTilt -> MapAttrs_cameraTilt
    int MapAttrs_cameraZoom -> MapAttrs_cameraZoom
    int MapAttrs_mapType -> MapAttrs_mapType
    int MapAttrs_uiCompass -> MapAttrs_uiCompass
    int MapAttrs_uiRotateGestures -> MapAttrs_uiRotateGestures
    int MapAttrs_uiScrollGestures -> MapAttrs_uiScrollGestures
    int MapAttrs_uiTiltGestures -> MapAttrs_uiTiltGestures
    int MapAttrs_uiZoomControls -> MapAttrs_uiZoomControls
    int MapAttrs_uiZoomGestures -> MapAttrs_uiZoomGestures
    int MapAttrs_useViewLifecycle -> MapAttrs_useViewLifecycle
    int MapAttrs_zOrderOnTop -> MapAttrs_zOrderOnTop
    int[] WalletFragmentOptions -> WalletFragmentOptions
    int WalletFragmentOptions_appTheme -> WalletFragmentOptions_appTheme
    int WalletFragmentOptions_environment -> WalletFragmentOptions_environment
    int WalletFragmentOptions_fragmentMode -> WalletFragmentOptions_fragmentMode
    int WalletFragmentOptions_fragmentStyle -> WalletFragmentOptions_fragmentStyle
    int[] WalletFragmentStyle -> WalletFragmentStyle
    int WalletFragmentStyle_buyButtonAppearance -> WalletFragmentStyle_buyButtonAppearance
    int WalletFragmentStyle_buyButtonHeight -> WalletFragmentStyle_buyButtonHeight
    int WalletFragmentStyle_buyButtonText -> WalletFragmentStyle_buyButtonText
    int WalletFragmentStyle_buyButtonWidth -> WalletFragmentStyle_buyButtonWidth
    int WalletFragmentStyle_maskedWalletDetailsBackground -> WalletFragmentStyle_maskedWalletDetailsBackground
    int WalletFragmentStyle_maskedWalletDetailsButtonBackground -> WalletFragmentStyle_maskedWalletDetailsButtonBackground
    int WalletFragmentStyle_maskedWalletDetailsButtonTextAppearance -> WalletFragmentStyle_maskedWalletDetailsButtonTextAppearance
    int WalletFragmentStyle_maskedWalletDetailsHeaderTextAppearance -> WalletFragmentStyle_maskedWalletDetailsHeaderTextAppearance
    int WalletFragmentStyle_maskedWalletDetailsLogoImageType -> WalletFragmentStyle_maskedWalletDetailsLogoImageType
    int WalletFragmentStyle_maskedWalletDetailsLogoTextColor -> WalletFragmentStyle_maskedWalletDetailsLogoTextColor
    int WalletFragmentStyle_maskedWalletDetailsTextAppearance -> WalletFragmentStyle_maskedWalletDetailsTextAppearance
    459:459:void <init>() -> <init>
    474:1050:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.R$xml -> edu.uci.calit2.antmonitor.lib.R$xml:
    int app_tracker_config -> app_tracker_config
    int ga_global_config -> ga_global_config
    455:455:void <init>() -> <init>
    456:457:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.ConnectionFinder -> edu.uci.calit2.antmonitor.lib.logging.ConnectionFinder:
    java.util.HashMap map -> a
    android.content.pm.PackageManager pm -> b
    edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover connectionRemover -> c
    java.lang.String TAG -> d
    java.util.ArrayList getConnections() -> getConnections
    boolean init() -> init
    30:64:void <init>(android.content.Context) -> <init>
    74:79:void putConnection(int,edu.uci.calit2.antmonitor.lib.logging.ConnectionValue,boolean) -> a
    88:92:edu.uci.calit2.antmonitor.lib.logging.ConnectionValue getConnection(int) -> a
    99:103:java.util.Set getSet() -> a
    111:114:void removeConnection(int) -> b
    122:156:void findConnections() -> b
    201:210:java.lang.String getAppName(int) -> c
    218:219:void shutdown() -> c
    43:44:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover -> edu.uci.calit2.antmonitor.lib.logging.a:
    edu.uci.calit2.antmonitor.lib.logging.ConnectionFinder finder -> b
    java.util.concurrent.ScheduledThreadPoolExecutor exec -> a
    java.lang.String TAG -> c
    23:36:void <init>(edu.uci.calit2.antmonitor.lib.logging.ConnectionFinder) -> <init>
    39:55:void checkStatuses() -> b
    61:62:void shutdown() -> a
    16:16:void access$000(edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover) -> a
edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover$1 -> edu.uci.calit2.antmonitor.lib.logging.a$1:
edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover$statusChecker -> edu.uci.calit2.antmonitor.lib.logging.a$a:
    edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover this$0 -> a
    25:25:void <init>(edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover) -> <init>
    28:29:void run() -> run
    25:25:void <init>(edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover,edu.uci.calit2.antmonitor.lib.logging.ConnectionRemover$1) -> <init>
edu.uci.calit2.antmonitor.lib.logging.ConnectionValue -> edu.uci.calit2.antmonitor.lib.logging.ConnectionValue:
    int timer -> a
    java.lang.String appName -> b
    java.lang.String versionNumber -> c
    62:66:void <init>(java.lang.String,java.lang.String) -> <init>
    68:68:java.lang.String getAppName() -> getAppName
    69:69:java.lang.String getVersionNum() -> getVersionNum
    74:74:void resetTimer() -> resetTimer
    78:78:java.lang.String toString() -> toString
edu.uci.calit2.antmonitor.lib.logging.ConnectionValue$MappingErrors -> edu.uci.calit2.antmonitor.lib.logging.ConnectionValue$MappingErrors:
    java.lang.String PREFIX -> PREFIX
    java.lang.String NOT_FOUND -> NOT_FOUND
    java.lang.String MALFORMED_PACKET -> MALFORMED_PACKET
    java.lang.String INVALID_TUPLE -> INVALID_TUPLE
    java.lang.String INVALID_PROTOCOL -> INVALID_PROTOCOL
    edu.uci.calit2.antmonitor.lib.logging.ConnectionValue CV_NOT_FOUND -> CV_NOT_FOUND
    edu.uci.calit2.antmonitor.lib.logging.ConnectionValue CV_MALFORMED_PACKET -> CV_MALFORMED_PACKET
    edu.uci.calit2.antmonitor.lib.logging.ConnectionValue CV_INVALID_TUPLE -> CV_INVALID_TUPLE
    33:39:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.DeviceInfo -> edu.uci.calit2.antmonitor.lib.logging.b:
    28:33:java.lang.String getDeviceName() -> a
    39:46:java.lang.String capitalize(java.lang.String) -> b
    57:71:java.lang.String getMACAddress(java.lang.String) -> a
    81:101:java.lang.String getIPAddress(boolean) -> a
    112:143:java.lang.String getRunningInterfaceName() -> b
edu.uci.calit2.antmonitor.lib.logging.DumperFileStateManager -> edu.uci.calit2.antmonitor.lib.logging.c:
    java.lang.String TAG -> a
    android.content.Context mContext -> b
    android.util.Pair files -> c
    long maxFileSize -> d
    29:33:void <init>(android.content.Context) -> <init>
    40:41:void setFiles(android.util.Pair) -> a
    49:62:edu.uci.calit2.antmonitor.lib.util.PcapngFile getExistingFile(edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType) -> a
    71:79:edu.uci.calit2.antmonitor.lib.util.PcapngFile getFileForType(edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType) -> b
    84:97:void endFiles() -> b
    101:109:void finishLogging() -> a
    22:22:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.FileUploader -> edu.uci.calit2.antmonitor.lib.logging.FileUploader:
    java.lang.String TAG -> a
    java.lang.String mServerAddress -> b
    java.lang.String mServerSecret -> c
    android.content.Context mContext -> d
    int mCertificate -> e
    java.lang.String mUserId -> f
    75:81:void <init>(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    89:98:int upload() -> upload
    110:200:boolean upload(java.io.File) -> upload
    49:49:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation -> edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation:
    boolean allowPacket -> a
    23:25:void <init>() -> <init>
    31:33:void <init>(boolean) -> <init>
    38:38:boolean isAllowed() -> isAllowed
edu.uci.calit2.antmonitor.lib.logging.PacketConsumer -> edu.uci.calit2.antmonitor.lib.logging.PacketConsumer:
    edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType mTrafficType -> mTrafficType
    android.content.Context mContext -> a
    40:48:void <init>(android.content.Context,edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType,java.lang.String) -> <init>
    56:56:void consumePacket(edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo) -> consumePacket
    64:64:void onStop() -> onStop
    76:78:edu.uci.calit2.antmonitor.lib.logging.ConnectionValue mapPacketToApp(edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo) -> mapPacketToApp
    93:93:int getFullPacketSize(byte[],short,int) -> getFullPacketSize
    103:103:int getHeadersSize(byte[],short) -> getHeadersSize
    115:122:void log(edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo,java.lang.String) -> log
edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue -> edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue:
    java.util.concurrent.ArrayBlockingQueue queue -> a
    long timeout -> b
    16:19:void <init>() -> <init>
    27:31:void put(edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo) -> put
    40:40:edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo get() -> get
    44:44:int getSize() -> getSize
    47:47:void clear() -> clear
edu.uci.calit2.antmonitor.lib.logging.PacketProcessor -> edu.uci.calit2.antmonitor.lib.logging.PacketProcessor:
    android.content.Context mContext -> a
    edu.uci.calit2.antmonitor.lib.logging.ConnectionFinder mConnFinder -> b
    edu.uci.calit2.antmonitor.lib.logging.DumperFileStateManager mStateManager -> c
    edu.uci.calit2.antmonitor.lib.logging.PacketProcessor processor -> d
    40:43:void <init>(android.content.Context) -> <init>
    51:54:edu.uci.calit2.antmonitor.lib.logging.PacketProcessor getInstance(android.content.Context) -> getInstance
    58:60:void prepareForMapping() -> a
    64:67:void prepareForLogging() -> b
    80:111:edu.uci.calit2.antmonitor.lib.logging.ConnectionValue mapPacketToApp(edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo,edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType) -> mapPacketToApp
    122:146:edu.uci.calit2.antmonitor.lib.logging.ConnectionValue getConnValue(int) -> getConnValue
    159:168:void log(edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo,java.lang.String,edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType) -> log
    182:197:int getFullPacketSize(byte[],short,int) -> getFullPacketSize
    211:223:int getHeadersSize(byte[],short) -> getHeadersSize
    258:275:void shutdown() -> shutdown
    38:38:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$1 -> edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$1:
edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType -> edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType:
    edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType OUTGOING_PACKETS -> OUTGOING_PACKETS
    edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType INCOMING_PACKETS -> INCOMING_PACKETS
    edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType[] $VALUES -> a
    230:230:edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType[] values() -> values
    230:230:edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType valueOf(java.lang.String) -> valueOf
    230:230:void <init>(java.lang.String,int) -> <init>
    java.lang.String getTrafficTypeString() -> getTrafficTypeString
    230:230:void <init>(java.lang.String,int,edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$1) -> <init>
    230:243:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType$1 -> edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType$1:
    235:235:void <init>(java.lang.String,int) -> <init>
    237:237:java.lang.String getTrafficTypeString() -> getTrafficTypeString
edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType$2 -> edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType$2:
    243:243:void <init>(java.lang.String,int) -> <init>
    245:245:java.lang.String getTrafficTypeString() -> getTrafficTypeString
edu.uci.calit2.antmonitor.lib.logging.PacketQueueReader -> edu.uci.calit2.antmonitor.lib.logging.PacketQueueReader:
    edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue mPacketQueue -> a
    java.lang.String TAG -> b
    edu.uci.calit2.antmonitor.lib.logging.PacketConsumer mConsumer -> c
    28:32:void <init>(edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer) -> <init>
    38:56:void run() -> run
    59:61:void stop() -> a
edu.uci.calit2.antmonitor.lib.logging.TrafficLogFiles -> edu.uci.calit2.antmonitor.lib.logging.TrafficLogFiles:
    java.lang.String ACTIVE_LOG_FILE_PREFIX -> ACTIVE_LOG_FILE_PREFIX
    java.lang.String COMPLETED_LOG_FILE_PREFIX -> COMPLETED_LOG_FILE_PREFIX
    java.lang.String TAG -> a
    long sessionID -> b
    java.lang.String userID -> c
    31:31:void <init>() -> <init>
    60:64:java.io.File[] getCompleted(android.content.Context) -> getCompleted
    75:75:java.lang.String getUserID() -> a
    77:77:void setUserID(java.lang.String) -> a
    89:110:android.util.Pair createNewActiveFileSet(android.content.Context) -> a
    119:139:java.io.File getCompletedFileName(java.io.File) -> a
    144:208:edu.uci.calit2.antmonitor.lib.util.PcapngFile createFile(java.lang.String,android.content.Context) -> a
    48:50:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.logging.TrafficLogFiles$1 -> edu.uci.calit2.antmonitor.lib.logging.TrafficLogFiles$1:
    64:64:void <init>() -> <init>
    69:69:boolean accept(java.io.File,java.lang.String) -> accept
edu.uci.calit2.antmonitor.lib.util.AhoCorasickInterface -> edu.uci.calit2.antmonitor.lib.util.AhoCorasickInterface:
    edu.uci.calit2.antmonitor.lib.util.AhoCorasickInterface singleton -> a
    27:27:void <init>() -> <init>
    35:35:edu.uci.calit2.antmonitor.lib.util.AhoCorasickInterface getInstance() -> getInstance
    void init(java.lang.String[]) -> init
    53:61:java.util.ArrayList search(java.nio.ByteBuffer,int) -> search
    java.util.ArrayList searchNative(java.nio.ByteBuffer,int) -> searchNative
    20:24:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.util.IpDatagram -> edu.uci.calit2.antmonitor.lib.util.IpDatagram:
    int IPV4 -> IPV4
    int IPV6 -> IPV6
    byte ICMP -> ICMP
    byte TCP -> TCP
    byte UDP -> UDP
    int IP_HEADER_PSEUDO_LENGTH -> IP_HEADER_PSEUDO_LENGTH
    int IP_HEADER_DEFAULT_LENGTH -> IP_HEADER_DEFAULT_LENGTH
    int TCP_HEADER_DEFAULT_LENGTH -> TCP_HEADER_DEFAULT_LENGTH
    int UDP_HEADER_DEFAULT_LENGTH -> UDP_HEADER_DEFAULT_LENGTH
    int DNSPort -> DNSPort
    byte version -> a
    byte headerLength -> b
    short tos -> c
    int datagramLength -> d
    int identifier -> e
    byte flags -> f
    short fragmentationOffset -> g
    short ttl -> h
    short protocol -> i
    int checksum -> j
    java.net.InetAddress sourceIP -> k
    java.net.InetAddress destinationIP -> l
    byte[] options -> m
    edu.uci.calit2.antmonitor.lib.util.UDPHeader udpHeader -> n
    edu.uci.calit2.antmonitor.lib.util.TCPHeader tcpHeader -> o
    boolean $assertionsDisabled -> p
    40:97:void <init>(java.nio.ByteBuffer) -> <init>
    101:101:byte getVersion() -> getVersion
    110:110:byte getHeaderLength() -> getHeaderLength
    114:114:short getTos() -> getTos
    118:118:int getDatagramLength() -> getDatagramLength
    122:122:int getIdentifier() -> getIdentifier
    126:126:byte getFlags() -> getFlags
    130:130:short getFragmentationOffset() -> getFragmentationOffset
    134:134:short getTtl() -> getTtl
    138:138:short getProtocol() -> getProtocol
    142:142:int getChecksum() -> getChecksum
    146:146:java.net.InetAddress getSourceIP() -> getSourceIP
    150:150:java.net.InetAddress getDestinationIP() -> getDestinationIP
    153:153:edu.uci.calit2.antmonitor.lib.util.TCPHeader getTcpHeader() -> getTcpHeader
    155:155:edu.uci.calit2.antmonitor.lib.util.UDPHeader getUdpHeader() -> getUdpHeader
    158:159:void handleTCP(java.nio.ByteBuffer) -> a
    163:166:void handleUDP(java.nio.ByteBuffer) -> b
    174:174:java.lang.String readDestinationIP(java.nio.ByteBuffer) -> readDestinationIP
    187:191:java.lang.String readDestinationIP(java.nio.ByteBuffer,int) -> readDestinationIP
    200:200:java.lang.String readDestinationIP(byte[]) -> readDestinationIP
    210:210:java.lang.String readDestinationIP(byte[],int) -> readDestinationIP
    220:221:byte[] extractIPv4DestinationIPArray(byte[],int) -> extractIPv4DestinationIPArray
    230:230:byte[] extractIPv4DestinationIPArray(byte[]) -> extractIPv4DestinationIPArray
    240:240:java.lang.String readSourceIP(java.nio.ByteBuffer) -> readSourceIP
    251:255:java.lang.String readSourceIP(java.nio.ByteBuffer,int) -> readSourceIP
    264:264:java.lang.String readSourceIP(byte[]) -> readSourceIP
    274:274:java.lang.String readSourceIP(byte[],int) -> readSourceIP
    285:286:byte[] extractIPv4SourceIPArray(byte[],int) -> extractIPv4SourceIPArray
    295:295:byte[] extractIPv4SourceIPArray(byte[]) -> extractIPv4SourceIPArray
    304:304:int readSourcePort(java.nio.ByteBuffer) -> readSourcePort
    314:315:int readSourcePort(java.nio.ByteBuffer,int) -> readSourcePort
    324:324:int readSourcePort(byte[]) -> readSourcePort
    336:338:int readSourcePort(byte[],int) -> readSourcePort
    347:347:int readDestinationPort(java.nio.ByteBuffer) -> readDestinationPort
    357:358:int readDestinationPort(java.nio.ByteBuffer,int) -> readDestinationPort
    368:368:int readDestinationPort(byte[]) -> readDestinationPort
    379:382:int readDestinationPort(byte[],int) -> readDestinationPort
    392:392:int readDestinationPort(java.nio.ByteBuffer,byte) -> readDestinationPort
    404:418:int readDestinationPort(java.nio.ByteBuffer,byte,int) -> readDestinationPort
    429:445:boolean isChecksumValid(byte[],long) -> isChecksumValid
    454:465:boolean isChecksumValid(java.nio.ByteBuffer) -> isChecksumValid
    475:475:long calculateIPv4Checksum(byte[]) -> calculateIPv4Checksum
    487:487:long calculateIPv4Checksum(byte[],int,int) -> calculateIPv4Checksum
    511:547:long calculateIPv4Checksum(byte[],int,int,long) -> calculateIPv4Checksum
    562:562:byte readProtocol(java.nio.ByteBuffer) -> readProtocol
    572:572:byte readProtocol(java.nio.ByteBuffer,int) -> readProtocol
    581:581:byte readProtocol(byte[]) -> readProtocol
    596:596:short readTransportProtocol(byte[]) -> readTransportProtocol
    609:609:short readTransportProtocol(byte[],int) -> readTransportProtocol
    621:621:short readTransportProtocol(java.nio.ByteBuffer) -> readTransportProtocol
    638:638:boolean isTransportProtocolOfType(edu.uci.calit2.antmonitor.lib.util.Protocol,byte[]) -> isTransportProtocolOfType
    651:652:boolean isTransportProtocolOfType(edu.uci.calit2.antmonitor.lib.util.Protocol,byte[],int) -> isTransportProtocolOfType
    662:662:byte readIPHeaderLength(java.nio.ByteBuffer) -> readIPHeaderLength
    673:675:byte readIPHeaderLength(java.nio.ByteBuffer,int) -> readIPHeaderLength
    691:691:byte readIPHeaderLength(byte[]) -> readIPHeaderLength
    708:711:byte readIPHeaderLength(byte[],int) -> readIPHeaderLength
    721:721:int extractIPv4HeaderLength(byte[],int) -> extractIPv4HeaderLength
    725:725:int extractIPv4HeaderLength(byte[]) -> extractIPv4HeaderLength
    736:736:short readTransportHeaderLength(java.nio.ByteBuffer,byte,byte) -> readTransportHeaderLength
    749:759:short readTransportHeaderLength(java.nio.ByteBuffer,byte,byte,int) -> readTransportHeaderLength
    771:771:int readDatagramLength(java.nio.ByteBuffer) -> readDatagramLength
    782:782:int readDatagramLength(java.nio.ByteBuffer,int) -> readDatagramLength
    791:792:int readDatagramLength(byte[]) -> readDatagramLength
    801:801:int readIPChecksum(java.nio.ByteBuffer) -> readIPChecksum
    811:811:int readIPChecksum(java.nio.ByteBuffer,int) -> readIPChecksum
    820:820:byte readIPVersion(java.nio.ByteBuffer) -> readIPVersion
    830:831:byte readIPVersion(java.nio.ByteBuffer,int) -> readIPVersion
    849:856:int extractIPVersion(byte[],int) -> extractIPVersion
    861:861:int extractIPVersion(byte[]) -> extractIPVersion
    873:878:int extractIPv4SourceIP(byte[],int) -> extractIPv4SourceIP
    882:882:int extractIPv4SourceIP(byte[]) -> extractIPv4SourceIP
    893:899:int extractIPv4DestinationIP(byte[],int) -> extractIPv4DestinationIP
    903:903:int extractIPv4DestinationIP(byte[]) -> extractIPv4DestinationIP
    912:917:int convertIPv4IPArrayToInt(byte[]) -> convertIPv4IPArrayToInt
    926:926:int wordsToBytes(int) -> wordsToBytes
    935:937:java.lang.String ipv4addressBytesToString(byte[]) -> ipv4addressBytesToString
    949:955:java.lang.String ipv4addressBytesToString(byte,byte,byte,byte) -> ipv4addressBytesToString
    14:14:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo -> edu.uci.calit2.antmonitor.lib.util.PacketDumpInfo:
    byte[] dump -> a
    long timestamp -> b
    int originalLength -> c
    int captureLength -> d
    edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation packetAnnotation -> e
    28:35:void <init>(byte[],edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation) -> <init>
    38:38:byte[] getDump() -> getDump
    42:42:long getTimestamp() -> getTimestamp
    45:45:int getOriginalLength() -> getOriginalLength
    47:47:void setCaptureLength(int) -> setCaptureLength
    49:49:int getCaptureLength() -> getCaptureLength
    51:51:edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation getPacketAnnotation() -> getPacketAnnotation
edu.uci.calit2.antmonitor.lib.util.PcapngFile -> edu.uci.calit2.antmonitor.lib.util.PcapngFile:
    java.io.BufferedOutputStream bos -> a
    java.nio.ByteBuffer data -> b
    java.io.File file -> c
    java.io.RandomAccessFile raf -> d
    int limit -> e
    long headersOnlyFileSize -> f
    java.util.concurrent.locks.ReentrantLock mWriterLock -> g
    int shbType -> h
    int shbLength -> i
    int byteOrder -> j
    short majorVersion -> k
    short minorVersion -> l
    long sectionLength -> m
    int idbType -> n
    int idbLength -> o
    short linkType -> p
    short reserved -> q
    int snapLen -> r
    33:253:void <init>(java.io.File,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,int,java.lang.String,long,byte) -> <init>
    264:312:void appendEnhancedPacketBlock(long,int,int,byte[],java.lang.String) -> appendEnhancedPacketBlock
    319:324:void overwriteSectionLength(long) -> a
    327:336:void writeToFile(java.nio.ByteBuffer) -> a
    343:343:java.io.File getFile() -> getFile
    351:363:void renameAndEndFile(java.io.File) -> renameAndEndFile
    371:371:boolean isFileEmpty() -> isFileEmpty
    375:375:long getSectionLength() -> getSectionLength
edu.uci.calit2.antmonitor.lib.util.Protocol -> edu.uci.calit2.antmonitor.lib.util.Protocol:
    edu.uci.calit2.antmonitor.lib.util.Protocol TCP -> TCP
    edu.uci.calit2.antmonitor.lib.util.Protocol UDP -> UDP
    edu.uci.calit2.antmonitor.lib.util.Protocol ICMP -> ICMP
    edu.uci.calit2.antmonitor.lib.util.Protocol[] values -> a
    edu.uci.calit2.antmonitor.lib.util.Protocol[] $VALUES -> b
    10:10:edu.uci.calit2.antmonitor.lib.util.Protocol[] values() -> values
    10:10:edu.uci.calit2.antmonitor.lib.util.Protocol valueOf(java.lang.String) -> valueOf
    10:10:void <init>(java.lang.String,int) -> <init>
    54:59:edu.uci.calit2.antmonitor.lib.util.Protocol getFromProtocolNumber(short) -> getFromProtocolNumber
    short getProtocolNumber() -> getProtocolNumber
    10:10:void <init>(java.lang.String,int,edu.uci.calit2.antmonitor.lib.util.Protocol$1) -> <init>
    10:43:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.util.Protocol$1 -> edu.uci.calit2.antmonitor.lib.util.Protocol$1:
    15:15:void <init>(java.lang.String,int) -> <init>
    18:18:short getProtocolNumber() -> getProtocolNumber
edu.uci.calit2.antmonitor.lib.util.Protocol$2 -> edu.uci.calit2.antmonitor.lib.util.Protocol$2:
    25:25:void <init>(java.lang.String,int) -> <init>
    28:28:short getProtocolNumber() -> getProtocolNumber
edu.uci.calit2.antmonitor.lib.util.Protocol$3 -> edu.uci.calit2.antmonitor.lib.util.Protocol$3:
    36:36:void <init>(java.lang.String,int) -> <init>
    39:39:short getProtocolNumber() -> getProtocolNumber
edu.uci.calit2.antmonitor.lib.util.TCPHeader -> edu.uci.calit2.antmonitor.lib.util.a:
    int sourcePort -> a
    int destinationPort -> b
    long sequenceNum -> c
    long acknowledgmentNum -> d
    byte offset -> e
    byte flags -> f
    int windowSize -> g
    int checksum -> h
    int urgentPointer -> i
    byte[] options -> j
    25:50:void <init>(java.nio.ByteBuffer) -> <init>
edu.uci.calit2.antmonitor.lib.util.TCPPacket -> edu.uci.calit2.antmonitor.lib.util.TCPPacket:
    java.lang.String TAG -> a
    11:11:void <init>() -> <init>
    21:21:edu.uci.calit2.antmonitor.lib.util.TCPHeader readHeader(java.nio.ByteBuffer) -> readHeader
    32:32:int readDestinationPort(java.nio.ByteBuffer,int,int) -> readDestinationPort
    43:44:short readTransportHeaderLength(java.nio.ByteBuffer,int,int) -> readTransportHeaderLength
    55:58:short readHeaderLength(byte[],byte) -> readHeaderLength
    69:75:long extractTCPv4SequenceNumber(byte[],int) -> extractTCPv4SequenceNumber
    79:79:long extractTCPv4SequenceNumber(byte[]) -> extractTCPv4SequenceNumber
    93:97:boolean isSynPacket(byte[],int) -> isSynPacket
    101:101:boolean isSynPacket(byte[]) -> isSynPacket
    115:119:boolean isResetPacket(byte[],int) -> isResetPacket
    123:123:boolean isResetPacket(byte[]) -> isResetPacket
    137:141:boolean isFinPacket(byte[],int) -> isFinPacket
    145:145:boolean isFinPacket(byte[]) -> isFinPacket
    158:162:boolean isAckPacket(byte[],int) -> isAckPacket
    166:166:boolean isAckPacket(byte[]) -> isAckPacket
    175:178:boolean hasData(byte[],int) -> hasData
    182:182:boolean hasData(byte[]) -> hasData
    193:199:long extractTCPv4AckNumber(byte[],int) -> extractTCPv4AckNumber
    203:203:long extractTCPv4AckNumber(byte[]) -> extractTCPv4AckNumber
    218:223:int extractTCPv4HeaderLength(byte[],int) -> extractTCPv4HeaderLength
    227:227:int extractTCPv4HeaderLength(byte[]) -> extractTCPv4HeaderLength
    233:275:boolean isClientHello(byte[],int) -> isClientHello
    279:366:java.lang.String extractServerNameFromClientHello(byte[],int) -> extractServerNameFromClientHello
    381:403:long calculateChecksum(byte[],int,int,byte[],int,int) -> calculateChecksum
    13:13:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.util.TCPReassemblyInfo -> edu.uci.calit2.antmonitor.lib.util.TCPReassemblyInfo:
    java.lang.String remoteIp -> a
    int srcPort -> b
    int destPort -> c
    long ackNum -> d
    long sequenceNum -> e
    long dataLen -> f
    32:33:void <init>(java.lang.String,int,int,long,long) -> <init>
    46:53:void <init>(java.lang.String,int,int,long,long,long) -> <init>
    57:57:java.lang.String getRemoteIp() -> getRemoteIp
    61:61:int getSrcPort() -> getSrcPort
    65:65:int getDestPort() -> getDestPort
    69:69:long getAckNum() -> getAckNum
    73:73:long getSequenceNum() -> getSequenceNum
    78:78:long getDataLen() -> getDataLen
    85:86:void addToDataLen(long) -> addToDataLen
edu.uci.calit2.antmonitor.lib.util.UDPHeader -> edu.uci.calit2.antmonitor.lib.util.b:
    int sourcePort -> a
    int destinationPort -> b
    int length -> c
    int checksum -> d
    22:27:void <init>(java.nio.ByteBuffer) -> <init>
edu.uci.calit2.antmonitor.lib.util.UDPPacket -> edu.uci.calit2.antmonitor.lib.util.UDPPacket:
    int UDP_HEADER_DEFAULT_LENGTH -> UDP_HEADER_DEFAULT_LENGTH
    14:14:void <init>() -> <init>
    25:25:edu.uci.calit2.antmonitor.lib.util.UDPHeader readHeader(java.nio.ByteBuffer) -> readHeader
    36:36:int readDestinationPort(java.nio.ByteBuffer,int,int) -> readDestinationPort
    47:47:short readTransportHeaderLength(java.nio.ByteBuffer,int,int) -> readTransportHeaderLength
    61:68:int extractUDPv4DataLength(byte[],int) -> extractUDPv4DataLength
    72:72:int extractUDPv4DataLength(byte[]) -> extractUDPv4DataLength
    82:82:int extractUDPv4Txid(byte[]) -> extractUDPv4Txid
    98:164:void mapIPtoHostName(java.util.Map,byte[]) -> mapIPtoHostName
    174:180:byte[] extractUDPv4Data(byte[],int) -> extractUDPv4Data
    184:184:byte[] extractUDPv4Data(byte[]) -> extractUDPv4Data
edu.uci.calit2.antmonitor.lib.util.Unsigned -> edu.uci.calit2.antmonitor.lib.util.c:
    25:25:short getUnsignedByte(java.nio.ByteBuffer) -> a
    35:35:short getUnsignedByte(java.nio.ByteBuffer,int) -> a
    48:48:int getUnsignedShort(java.nio.ByteBuffer) -> b
    58:58:int getUnsignedShort(java.nio.ByteBuffer,int) -> b
    71:71:long getUnsignedInt(java.nio.ByteBuffer) -> c
edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory -> edu.uci.calit2.antmonitor.lib.vpn.a:
    java.lang.String TAG -> c
    java.util.logging.Logger _logger -> d
    javax.security.auth.x500.X500Principal CA_NAME -> e
    java.security.PrivateKey caKey -> f
    java.security.cert.X509Certificate[] caCerts -> g
    java.lang.String filenameCA -> h
    java.lang.String filenameCert -> i
    java.security.KeyStore keystoreCert -> j
    java.security.KeyStore keystoreCA -> k
    char[] passwordCA -> l
    char[] passwordCerts -> m
    boolean reuseKeys -> n
    java.util.Map contextCache -> o
    java.util.Map domainToContextKey -> a
    java.util.Map domainToAltNames -> b
    java.util.Map contextLocks -> p
    java.util.Set serials -> q
    108:204:void <init>(java.lang.String,java.lang.String,java.lang.String,char[]) -> <init>
    231:250:java.lang.String getContextKey(org.sandrop.webscarab.plugin.proxy.SiteData) -> a
    262:320:javax.net.ssl.SSLSocketFactory getSocketFactory(org.sandrop.webscarab.plugin.proxy.SiteData) -> b
    325:329:java.security.cert.X509Certificate[] cast(java.security.cert.Certificate[]) -> a
    333:350:javax.net.ssl.X509KeyManager loadKeyMaterial(org.sandrop.webscarab.plugin.proxy.SiteData,java.lang.String) -> a
    354:365:void saveKeystore(java.security.KeyStore,java.lang.String,char[]) -> a
    390:415:void generateCA(javax.security.auth.x500.X500Principal) -> a
    418:426:void initSerials() -> c
    429:429:javax.security.auth.x500.X500Principal getSubjectPrincipal(java.lang.String) -> a
    433:437:java.math.BigInteger getNextSerialNo() -> a
    444:508:javax.net.ssl.X509KeyManager createKeyMaterial(org.sandrop.webscarab.plugin.proxy.SiteData,java.lang.String) -> b
    65:65:java.util.logging.Logger access$000() -> b
    70:93:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory$1 -> edu.uci.calit2.antmonitor.lib.vpn.a$1:
    edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory this$0 -> a
    287:287:void <init>(edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory) -> <init>
    289:289:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    294:300:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    304:310:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory$HostKeyManager -> edu.uci.calit2.antmonitor.lib.vpn.a$a:
    org.sandrop.webscarab.plugin.proxy.SiteData hostData -> b
    java.security.PrivateKey pk -> c
    java.security.cert.X509Certificate[] certs -> d
    edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory this$0 -> a
    520:524:void <init>(edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory,org.sandrop.webscarab.plugin.proxy.SiteData,java.security.PrivateKey,java.security.cert.X509Certificate[]) -> <init>
    528:528:java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket) -> chooseClientAlias
    534:534:java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket) -> chooseServerAlias
    538:538:java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    542:542:java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[]) -> getClientAliases
    547:547:java.security.PrivateKey getPrivateKey(java.lang.String) -> getPrivateKey
    557:557:java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[]) -> getServerAliases
edu.uci.calit2.antmonitor.lib.vpn.AuthenticateAPITask -> edu.uci.calit2.antmonitor.lib.vpn.b:
    edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener listener -> a
    java.lang.String apiKey -> b
    android.content.res.Resources resources -> c
    int port -> d
    java.lang.String API_SERVER_ADDRESS -> e
    45:57:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener,java.lang.String,android.content.res.Resources) -> <init>
    61:61:java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    66:69:void onPostExecute(java.lang.Boolean) -> a
    72:159:boolean authenticateAPI() -> a
    38:38:void onPostExecute(java.lang.Object) -> onPostExecute
    38:38:java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob -> edu.uci.calit2.antmonitor.lib.vpn.c:
    java.lang.Runnable mJob -> a
    26:28:void <init>(java.lang.Runnable) -> <init>
edu.uci.calit2.antmonitor.lib.vpn.ConnectionManager -> edu.uci.calit2.antmonitor.lib.vpn.ConnectionManager:
    android.content.Context mContext -> a
    18:20:void <init>(android.content.Context) -> <init>
    27:37:boolean isConnectedToInternet() -> isConnectedToInternet
    46:46:android.net.ConnectivityManager getManager(android.content.Context) -> getManager
edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager -> edu.uci.calit2.antmonitor.lib.vpn.d:
    java.lang.String TAG -> t
    java.lang.Thread mSelectorNetIOThread -> u
    java.lang.Thread mWriteToNetThread -> v
    android.os.HandlerThread mForwarderBacklogHandlerThread -> w
    android.os.Handler mForwarderBacklogHandler -> a
    android.os.HandlerThread mTLSHandlerThread -> x
    android.os.Handler mTLSHandler -> b
    boolean SSL_BUMPING_ENABLED -> c
    boolean SSL_SNI_ENABLED -> d
    boolean KEEP_DNS_CACHE -> e
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient mService -> f
    edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager mSingleton -> y
    boolean isRunning -> z
    java.nio.ByteBuffer mReadSocketBuffer -> A
    java.nio.ByteBuffer mWriteSocketBuffer -> B
    java.nio.ByteBuffer mWriteTunBuffer -> C
    edu.uci.calit2.antmonitor.lib.vpn.TunNativeInterface mTunInterfaceJni -> g
    java.nio.channels.DatagramChannel mUDPSocketChannel -> D
    short mIpIdentification -> h
    java.util.concurrent.LinkedBlockingQueue mReadFromTunQueue -> E
    java.util.Map mWriteToNetMap -> i
    java.util.LinkedList mChangeRequestQueue -> j
    java.util.Map mSocketChannelToForwarderMap -> k
    java.util.Map mActiveUDPConnectionMap -> l
    java.util.Map mDNScache -> m
    java.util.Map mActiveTCPForwarderMap -> n
    java.util.Map mTCPReassemblyMap -> o
    java.nio.channels.Selector mSocketSelector -> p
    java.util.concurrent.ConcurrentMap mActiveThreads -> q
    edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue mIncPacketQueue -> F
    edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue mOutPacketQueue -> G
    edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter mOutFilter -> r
    edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter mIncFilter -> s
    java.lang.Runnable mSelectorNetIO -> H
    java.lang.Runnable mWriteToNet -> I
    354:398:void initializeTCPForwarder(java.nio.channels.SelectionKey) -> d
    405:414:void readFromChannel(java.nio.channels.SelectionKey) -> e
    421:484:void readFromDatagramChannel(java.nio.channels.SelectionKey) -> f
    492:569:void readFromSocketChannel(java.nio.channels.SelectionKey) -> g
    584:656:byte[] constructUdpIpPacket(byte[],int,byte[],int,byte[]) -> a
    664:688:void writeToChannel(java.nio.channels.SelectionKey) -> h
    695:733:void writeToDatagramChannel(java.nio.channels.SelectionKey) -> i
    742:877:boolean writeToSocketChannel(java.nio.channels.SelectionKey) -> j
    165:887:void <init>() -> <init>
    893:899:edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager getInstance(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue,edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue,edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter,edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter) -> a
    908:968:void start(android.os.ParcelFileDescriptor) -> a
    976:989:void initializeUDPSocketChannel(android.net.VpnService) -> a
    996:1018:void shutdown() -> a
    1023:1037:void teardownConnections() -> b
    1043:1077:void writeDirectToTun(byte[]) -> a
    1085:1166:void processTUNReadData(byte[],edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation) -> a
    1170:1170:boolean getSSLBumpingEnabled() -> c
    1182:1195:void setSSLBumpingEnabled(android.content.Context,boolean) -> a
    1197:1197:boolean isRunning() -> d
    114:114:java.lang.String access$000() -> e
    114:114:void access$100(java.nio.channels.SelectionKey) -> a
    114:114:void access$200(java.nio.channels.SelectionKey) -> b
    114:114:void access$300(java.nio.channels.SelectionKey) -> c
    116:245:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager$1 -> edu.uci.calit2.antmonitor.lib.vpn.d$1:
    245:245:void <init>() -> <init>
    248:253:boolean okToWrite(java.nio.channels.SelectionKey,java.nio.channels.Channel) -> a
    257:345:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager$2 -> edu.uci.calit2.antmonitor.lib.vpn.d$2:
    edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder val$finalForwarder -> a
    long val$finalAck -> b
    832:832:void <init>(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder,long) -> <init>
    834:837:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager$Logg -> edu.uci.calit2.antmonitor.lib.vpn.d$a:
    120:120:void d(java.lang.String,java.lang.String) -> a
    121:121:void i(java.lang.String,java.lang.String) -> b
    123:123:void w(java.lang.String,java.lang.String) -> c
    124:124:void e(java.lang.String,java.lang.String) -> d
    127:127:void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter -> edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter:
    22:23:void <init>(android.content.Context) -> <init>
edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter -> edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter:
    36:37:void <init>(android.content.Context) -> <init>
    47:47:void onTCPConnectionClosed(java.lang.String,java.lang.String,int,int) -> onTCPConnectionClosed
    57:57:void onTCPConnectionOpened(java.lang.String,int,int) -> onTCPConnectionOpened
    66:66:void onDomainAppPin(java.lang.String,java.lang.String) -> onDomainAppPin
    73:79:void triggerOpenTCPConnections() -> triggerOpenTCPConnections
edu.uci.calit2.antmonitor.lib.vpn.PacketFilter -> edu.uci.calit2.antmonitor.lib.vpn.PacketFilter:
    edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType mTrafficType -> mTrafficType
    android.content.Context mContext -> mContext
    edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation DEFAULT_ANNOTATION -> DEFAULT_ANNOTATION
    45:51:void <init>(android.content.Context,edu.uci.calit2.antmonitor.lib.logging.PacketProcessor$TrafficType) -> <init>
    62:62:edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation acceptIPDatagram(java.nio.ByteBuffer) -> acceptIPDatagram
    80:80:edu.uci.calit2.antmonitor.lib.logging.PacketAnnotation acceptDecryptedSSLPacket(java.nio.ByteBuffer,edu.uci.calit2.antmonitor.lib.util.TCPReassemblyInfo) -> acceptDecryptedSSLPacket
    92:123:edu.uci.calit2.antmonitor.lib.logging.ConnectionValue mapDatagramToApp(java.nio.ByteBuffer) -> mapDatagramToApp
    141:146:edu.uci.calit2.antmonitor.lib.logging.ConnectionValue mapParamsToApp(java.lang.String,int,int) -> mapParamsToApp
    150:150:void onVPNStart() -> onVPNStart
    153:153:void onVPNStop() -> onVPNStop
    34:34:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.Resolver -> edu.uci.calit2.antmonitor.lib.vpn.e:
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient vpnService -> a
    android.content.Context mContext -> b
    java.lang.String mHostName -> c
    boolean mListenerStarted -> d
    java.util.concurrent.ConcurrentHashMap siteData -> e
    java.util.concurrent.ConcurrentHashMap ipPortSiteData -> f
    java.lang.String TAG -> g
    boolean LOGD -> h
    46:63:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> <init>
    68:74:void startListenerForEvents() -> c
    77:77:java.lang.String getSecureHostKey(org.sandrop.webscarab.plugin.proxy.SiteData) -> a
    83:194:org.sandrop.webscarab.plugin.proxy.SiteData getSecureHost(edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory,org.sandrop.webscarab.plugin.proxy.SiteData,boolean) -> a
    199:234:java.lang.String getCertCommonName(org.sandrop.webscarab.plugin.proxy.SiteData) -> b
    238:246:java.lang.String extractCN(java.lang.String) -> a
    42:42:java.util.concurrent.ConcurrentHashMap access$000(edu.uci.calit2.antmonitor.lib.vpn.Resolver) -> a
    42:42:boolean access$100() -> a
    42:42:java.lang.String access$200() -> b
    50:51:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.Resolver$1 -> edu.uci.calit2.antmonitor.lib.vpn.e$1:
    org.sandrop.webscarab.plugin.proxy.SiteData val$secureHost -> a
    edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory val$sslFactory -> b
    edu.uci.calit2.antmonitor.lib.vpn.Resolver this$0 -> c
    96:96:void <init>(edu.uci.calit2.antmonitor.lib.vpn.Resolver,org.sandrop.webscarab.plugin.proxy.SiteData,edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory) -> <init>
    98:98:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    102:102:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    106:162:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
edu.uci.calit2.antmonitor.lib.vpn.SSLSocketBuilder -> edu.uci.calit2.antmonitor.lib.vpn.SSLSocketBuilder:
    boolean DEBUG -> a
    java.lang.String[] wiresharkSupportedCiphers -> b
    java.util.List listWiresharkSupportedCiphers -> c
    java.lang.String[] selectedCiphers -> d
    81:102:javax.net.ssl.SSLSocket negotiateSSL(java.net.Socket,org.sandrop.webscarab.plugin.proxy.SiteData,boolean,edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory) -> a
    29:51:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.SSLSocketBuilder$NoSSLv3SSLSocket -> edu.uci.calit2.antmonitor.lib.vpn.SSLSocketBuilder$NoSSLv3SSLSocket:
    115:127:void setEnabledProtocols(java.lang.String[]) -> setEnabledProtocols
edu.uci.calit2.antmonitor.lib.vpn.SSLSocketBuilder$SSLSocketWrapper -> edu.uci.calit2.antmonitor.lib.vpn.SSLSocketBuilder$SSLSocketWrapper:
    javax.net.ssl.SSLSocket delegate -> delegate
    140:140:java.lang.String[] getSupportedCipherSuites() -> getSupportedCipherSuites
    145:145:java.lang.String[] getEnabledCipherSuites() -> getEnabledCipherSuites
    150:151:void setEnabledCipherSuites(java.lang.String[]) -> setEnabledCipherSuites
    155:155:java.lang.String[] getSupportedProtocols() -> getSupportedProtocols
    160:160:java.lang.String[] getEnabledProtocols() -> getEnabledProtocols
    165:166:void setEnabledProtocols(java.lang.String[]) -> setEnabledProtocols
    170:170:javax.net.ssl.SSLSession getSession() -> getSession
    175:176:void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener) -> addHandshakeCompletedListener
    180:181:void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener) -> removeHandshakeCompletedListener
    185:186:void startHandshake() -> startHandshake
    190:191:void setUseClientMode(boolean) -> setUseClientMode
    195:195:boolean getUseClientMode() -> getUseClientMode
    200:201:void setNeedClientAuth(boolean) -> setNeedClientAuth
    205:206:void setWantClientAuth(boolean) -> setWantClientAuth
    210:210:boolean getNeedClientAuth() -> getNeedClientAuth
    215:215:boolean getWantClientAuth() -> getWantClientAuth
    220:221:void setEnableSessionCreation(boolean) -> setEnableSessionCreation
    225:225:boolean getEnableSessionCreation() -> getEnableSessionCreation
    230:231:void bind(java.net.SocketAddress) -> bind
    235:236:void close() -> close
    240:241:void connect(java.net.SocketAddress) -> connect
    245:246:void connect(java.net.SocketAddress,int) -> connect
    250:250:java.nio.channels.SocketChannel getChannel() -> getChannel
    255:255:java.net.InetAddress getInetAddress() -> getInetAddress
    260:260:java.io.InputStream getInputStream() -> getInputStream
    265:265:boolean getKeepAlive() -> getKeepAlive
    270:270:java.net.InetAddress getLocalAddress() -> getLocalAddress
    275:275:int getLocalPort() -> getLocalPort
    280:280:java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    285:285:boolean getOOBInline() -> getOOBInline
    290:290:java.io.OutputStream getOutputStream() -> getOutputStream
    295:295:int getPort() -> getPort
    300:300:int getReceiveBufferSize() -> getReceiveBufferSize
    305:305:java.net.SocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    310:310:boolean getReuseAddress() -> getReuseAddress
    315:315:int getSendBufferSize() -> getSendBufferSize
    320:320:int getSoLinger() -> getSoLinger
    325:325:int getSoTimeout() -> getSoTimeout
    330:330:boolean getTcpNoDelay() -> getTcpNoDelay
    335:335:int getTrafficClass() -> getTrafficClass
    340:340:boolean isBound() -> isBound
    345:345:boolean isClosed() -> isClosed
    350:350:boolean isConnected() -> isConnected
    355:355:boolean isInputShutdown() -> isInputShutdown
    360:360:boolean isOutputShutdown() -> isOutputShutdown
    365:366:void sendUrgentData(int) -> sendUrgentData
    370:371:void setKeepAlive(boolean) -> setKeepAlive
    375:376:void setOOBInline(boolean) -> setOOBInline
    380:381:void setPerformancePreferences(int,int,int) -> setPerformancePreferences
    385:386:void setReceiveBufferSize(int) -> setReceiveBufferSize
    390:391:void setReuseAddress(boolean) -> setReuseAddress
    395:396:void setSendBufferSize(int) -> setSendBufferSize
    400:401:void setSoLinger(boolean,int) -> setSoLinger
    405:406:void setSoTimeout(int) -> setSoTimeout
    410:411:void setTcpNoDelay(boolean) -> setTcpNoDelay
    415:416:void setTrafficClass(int) -> setTrafficClass
    420:421:void shutdownInput() -> shutdownInput
    425:426:void shutdownOutput() -> shutdownOutput
    430:430:java.lang.String toString() -> toString
    435:435:boolean equals(java.lang.Object) -> equals
edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder -> edu.uci.calit2.antmonitor.lib.vpn.f:
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$Tuple mSrc -> a
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$Tuple mDst -> b
    java.lang.String mServerName -> c
    java.lang.Thread TLSFwdThread -> d
    boolean isInHandshake -> e
    java.net.InetAddress mServerIP -> f
    java.nio.channels.SocketChannel mSocketChannel -> g
    long mSequenceNumberToClient -> h
    long mAckNumberToClient -> i
    long mAckNumberToServer -> j
    long mFinSequenceNumberToClient -> n
    byte[] mFinToClient -> o
    long MAX_SEQUENCE_NUMBER -> p
    java.lang.String TAG -> q
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState mClientState -> k
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState mServerState -> l
    java.lang.Runnable mCloseConnection -> r
    java.lang.Runnable mSendFinToClient -> m
    java.lang.Runnable mTLSConnect -> s
    34:177:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$Tuple,edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$Tuple) -> <init>
    184:533:void processPacket(byte[]) -> a
    543:557:void ackData(byte[]) -> b
    566:579:long getAckNumber(byte[]) -> c
    591:649:void forwardData(byte[]) -> d
    664:821:byte[] constructTcpIpPacketToClient(boolean,boolean,boolean,boolean,byte[],int,int) -> a
    830:837:void sendSYNACK() -> d
    843:846:void resetAndDestroy() -> a
    851:877:void destroy() -> b
    883:885:java.lang.String toString() -> toString
    891:891:int hashCode() -> hashCode
    897:902:boolean equals(java.lang.Object) -> equals
    27:27:byte[] access$000(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder) -> a
    27:27:byte[] access$002(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder,byte[]) -> a
    27:27:long access$102(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder,long) -> a
    27:27:java.lang.String access$200() -> c
    27:27:void access$300(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder) -> b
    46:53:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder$1 -> edu.uci.calit2.antmonitor.lib.vpn.f$1:
    edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder this$0 -> a
    59:59:void <init>(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder) -> <init>
    61:62:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder$2 -> edu.uci.calit2.antmonitor.lib.vpn.f$2:
    edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder this$0 -> a
    71:71:void <init>(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder) -> <init>
    79:104:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder$3 -> edu.uci.calit2.antmonitor.lib.vpn.f$3:
    edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder this$0 -> a
    107:107:void <init>(edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder) -> <init>
    109:163:void run() -> run
    166:169:void connectDirectly() -> a
edu.uci.calit2.antmonitor.lib.vpn.TLSCertificateActivity -> edu.uci.calit2.antmonitor.lib.vpn.TLSCertificateActivity:
    java.lang.String TAG -> a
    java.lang.String caName -> b
    java.lang.String certName -> c
    java.lang.String keyType -> d
    java.lang.String password -> e
    java.lang.String issuer -> f
    java.lang.String prefsName -> prefsName
    java.lang.String certInsallPref -> certInsallPref
    34:34:void <init>() -> <init>
    53:86:void onCreate(android.os.Bundle) -> onCreate
    90:106:void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    109:111:void sendResult(int) -> a
    121:134:boolean isCACertificateInstalled() -> a
    144:151:edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory generateCACertificate(java.lang.String) -> a
    156:174:javax.security.cert.X509Certificate getCACertificate(java.lang.String,java.lang.String) -> a
    36:49:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.TLSProxyForwarder -> edu.uci.calit2.antmonitor.lib.vpn.g:
    java.lang.String TAG -> a
    java.util.concurrent.ConcurrentMap mActiveThreads -> b
    boolean outgoing -> c
    java.net.Socket inSocket -> d
    java.net.Socket outSocket -> e
    java.io.InputStream in -> f
    java.io.OutputStream out -> g
    edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder forwarder -> h
    61:87:void connect(java.net.Socket,java.net.Socket,edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder) -> a
    42:101:void <init>(java.net.Socket,java.net.Socket,boolean,edu.uci.calit2.antmonitor.lib.vpn.TCPForwarder) -> <init>
    107:176:void run() -> run
    36:40:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer -> edu.uci.calit2.antmonitor.lib.vpn.h:
    java.lang.String TAG -> e
    int port -> a
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient vpnService -> f
    java.util.concurrent.ConcurrentHashMap resolverLock -> g
    java.util.concurrent.ConcurrentHashMap pinnedDomains -> b
    edu.uci.calit2.antmonitor.lib.vpn.Resolver hostNameResolver -> c
    edu.uci.calit2.antmonitor.lib.vpn.AntSSLSocketFactory sslSocketFactory -> d
    75:80:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> <init>
    235:282:void run() -> run
    288:308:void addPinnedCNs(java.io.InputStream) -> a
    311:318:void pinDomainApp(java.lang.String,java.lang.String) -> b
    46:46:java.util.concurrent.ConcurrentHashMap access$000() -> a
    46:46:edu.uci.calit2.antmonitor.lib.vpn.VpnClient access$100(edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer) -> a
    46:46:void access$200(java.lang.String,java.lang.String) -> a
    48:63:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer$ForwarderHandler -> edu.uci.calit2.antmonitor.lib.vpn.h$a:
    java.lang.String TAG -> b
    java.nio.channels.SocketChannel clientChannel -> c
    edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer this$0 -> a
    83:88:void <init>(edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer,java.nio.channels.SocketChannel) -> <init>
    93:227:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer$PinnedDomain -> edu.uci.calit2.antmonitor.lib.vpn.h$b:
    java.lang.String packageName -> a
    java.util.ArrayList domains -> b
edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer$PinnedDomainsReader -> edu.uci.calit2.antmonitor.lib.vpn.h$c:
    java.util.List pinnedCombinations -> a
edu.uci.calit2.antmonitor.lib.vpn.TUNReader -> edu.uci.calit2.antmonitor.lib.vpn.i:
    java.nio.ByteBuffer mReadTunBuffer -> a
    edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager manager -> b
    16:25:void <init>(edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager) -> <init>
    28:82:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.TunNativeInterface -> edu.uci.calit2.antmonitor.lib.vpn.TunNativeInterface:
    int mTunFD -> a
    edu.uci.calit2.antmonitor.lib.vpn.TunNativeInterface singleton -> b
    36:37:void <init>() -> <init>
    47:48:edu.uci.calit2.antmonitor.lib.vpn.TunNativeInterface getTunPollJni(int) -> a
    65:77:int pollRead(long,java.nio.ByteBuffer,int) -> a
    87:87:int write(java.nio.ByteBuffer,int) -> a
    int pollRead(int,long,java.nio.ByteBuffer,int) -> pollRead
    int write(int,java.nio.ByteBuffer,int) -> write
    26:33:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.VPNUtils -> edu.uci.calit2.antmonitor.lib.vpn.VPNUtils:
    byte[] BROADCAST_IP_ARRAY -> a
    int BROADCAST_IP_INT -> b
    120:123:void ensureRunningOnMainThread(java.lang.String) -> a
    20:24:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$ChangeRequest -> edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$ChangeRequest:
    java.nio.channels.Channel mChannel -> mChannel
    int mSelectionKey -> mSelectionKey
    java.lang.Object mAttachment -> mAttachment
    35:39:void <init>(java.nio.channels.Channel,int,java.lang.Object) -> <init>
edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$DataWriteToNet -> edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$DataWriteToNet:
    java.net.SocketAddress mRemoteAddress -> a
    long mAckNum -> b
    byte[] mData -> c
    int mDataOffset -> d
    int mDataLen -> e
    58:64:void <init>(java.net.SocketAddress,long,byte[],int,int) -> <init>
edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState -> edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState:
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState CLOSED -> CLOSED
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState LISTEN -> LISTEN
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState SYN_RECEIVED -> SYN_RECEIVED
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState SYN_SENT -> SYN_SENT
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState ESTABLISHED -> ESTABLISHED
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState FIN_WAIT_1 -> FIN_WAIT_1
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState FIN_WAIT_2 -> FIN_WAIT_2
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState CLOSING -> CLOSING
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState CLOSE_WAIT -> CLOSE_WAIT
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState LAST_ACK -> LAST_ACK
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState TIME_WAIT -> TIME_WAIT
    edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState[] $VALUES -> a
    109:109:edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState[] values() -> values
    109:109:edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$TCPState valueOf(java.lang.String) -> valueOf
    109:109:void <init>(java.lang.String,int) -> <init>
    109:110:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$Tuple -> edu.uci.calit2.antmonitor.lib.vpn.VPNUtils$Tuple:
    int mIp -> a
    byte[] mIpArray -> mIpArray
    int mPort -> mPort
    77:81:void <init>(int,byte[],int) -> <init>
    85:86:java.lang.String toString() -> toString
    91:91:int hashCode() -> hashCode
    96:101:boolean equals(java.lang.Object) -> equals
edu.uci.calit2.antmonitor.lib.vpn.VpnClient -> edu.uci.calit2.antmonitor.lib.vpn.VpnClient:
    java.lang.String TAG -> a
    java.lang.String mTunInterfaceIP -> mTunInterfaceIP
    android.os.ParcelFileDescriptor mTunInterface -> b
    edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue mOutDatagramQueue -> c
    edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue mIncDatagramQueue -> d
    edu.uci.calit2.antmonitor.lib.logging.PacketConsumer mOutPacketConsumer -> e
    edu.uci.calit2.antmonitor.lib.logging.PacketConsumer mIncPacketConsumer -> f
    edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter mIncPacketFilter -> g
    edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter mOutPacketFilter -> h
    long mReconnectDelayMillis -> i
    android.os.Handler mHandler -> j
    edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer sslBumpingServer -> k
    edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob mIncomingDumper -> l
    edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob mOutgoingDumper -> m
    edu.uci.calit2.antmonitor.lib.vpn.VpnState mVpnState -> n
    java.lang.Object mVpnStateLock -> o
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient$VpnClientBinder mVpnClientBinder -> p
    edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager manager -> q
    android.content.BroadcastReceiver connectivityReceiver -> r
    42:119:void <init>() -> <init>
    128:130:android.os.IBinder onBind(android.content.Intent) -> onBind
    135:137:boolean onUnbind(android.content.Intent) -> onUnbind
    187:191:void prepareVPNconnection(edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter,edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer) -> a
    196:208:int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    222:226:void onDestroy() -> onDestroy
    233:238:void onRevoke() -> onRevoke
    247:262:void publishVpnState(edu.uci.calit2.antmonitor.lib.vpn.VpnState) -> a
    276:332:void teardown() -> h
    342:373:android.os.ParcelFileDescriptor buildTunInterface() -> buildTunInterface
    576:579:void onTunnelError() -> a
    605:632:void connect(long,boolean) -> a
    641:655:void reconnectOnError(boolean) -> a
    665:681:void disconnect() -> i
    691:728:android.app.Notification buildVpnStateNotification() -> j
    42:42:java.lang.Object access$000(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> a
    42:42:edu.uci.calit2.antmonitor.lib.vpn.VpnState access$100(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> b
    42:42:void access$200(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,long,boolean) -> a
    42:42:void access$300(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> c
    42:42:edu.uci.calit2.antmonitor.lib.vpn.VpnClient$VpnClientBinder access$400(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> d
    42:42:android.os.Handler access$500(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> e
    42:42:void access$600(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,edu.uci.calit2.antmonitor.lib.vpn.VpnState) -> a
    42:42:android.os.ParcelFileDescriptor access$702(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,android.os.ParcelFileDescriptor) -> a
    42:42:android.os.ParcelFileDescriptor access$700(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> f
    42:42:long access$802(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,long) -> a
    42:42:long access$800(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> g
    42:42:edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer access$902(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer) -> a
    42:42:edu.uci.calit2.antmonitor.lib.vpn.TLSProxyServer access$900(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> h
    42:42:edu.uci.calit2.antmonitor.lib.logging.PacketConsumer access$1000() -> b
    42:42:edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob access$1102(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob) -> a
    42:42:edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue access$1200() -> c
    42:42:edu.uci.calit2.antmonitor.lib.logging.PacketConsumer access$1300() -> d
    42:42:edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob access$1402(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob) -> b
    42:42:edu.uci.calit2.antmonitor.lib.logging.PacketLogQueue access$1500() -> e
    42:42:edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter access$1600() -> f
    42:42:edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter access$1602(edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter) -> a
    42:42:edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter access$1700() -> g
    42:42:edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter access$1702(edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter) -> a
    42:42:edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager access$1802(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager) -> a
    42:42:edu.uci.calit2.antmonitor.lib.vpn.ForwarderManager access$1800(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> i
    42:42:edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob access$1100(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> j
    42:42:edu.uci.calit2.antmonitor.lib.vpn.BackgroundJob access$1400(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> k
    42:42:android.content.BroadcastReceiver access$1902(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,android.content.BroadcastReceiver) -> a
    42:42:android.content.BroadcastReceiver access$1900(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> l
    42:42:void access$2000(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> m
    61:70:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.VpnClient$1 -> edu.uci.calit2.antmonitor.lib.vpn.VpnClient$1:
    boolean val$retryOnFailure -> a
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient this$0 -> b
    614:614:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,boolean) -> <init>
    619:622:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.VpnClient$2 -> edu.uci.calit2.antmonitor.lib.vpn.VpnClient$2:
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient this$0 -> a
    666:666:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> <init>
    671:679:void run() -> run
edu.uci.calit2.antmonitor.lib.vpn.VpnClient$3 -> edu.uci.calit2.antmonitor.lib.vpn.VpnClient$3:
    int[] $SwitchMap$edu$uci$calit2$antmonitor$lib$vpn$VpnState -> a
    709:709:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.VpnClient$ConnectTask -> edu.uci.calit2.antmonitor.lib.vpn.VpnClient$a:
    java.lang.String classTag -> b
    long DAY_IN_MILLIS -> c
    boolean mRetryOnFailure -> d
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient this$0 -> a
    382:393:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnClient,boolean) -> <init>
    398:414:void onPreExecute() -> onPreExecute
    418:440:java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    445:490:void onPostExecute(java.lang.Boolean) -> a
    493:505:void incrementDelay() -> a
    513:571:void setupParentForNewConnection() -> b
    380:380:void onPostExecute(java.lang.Object) -> onPostExecute
    380:380:java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
edu.uci.calit2.antmonitor.lib.vpn.VpnClient$ConnectTask$1 -> edu.uci.calit2.antmonitor.lib.vpn.VpnClient$a$1:
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient$ConnectTask this$1 -> a
    557:557:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnClient$ConnectTask) -> <init>
    560:566:void onReceive(android.content.Context,android.content.Intent) -> onReceive
edu.uci.calit2.antmonitor.lib.vpn.VpnClient$VpnClientBinder -> edu.uci.calit2.antmonitor.lib.vpn.VpnClient$b:
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient this$0 -> a
    140:140:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnClient) -> <init>
    147:149:edu.uci.calit2.antmonitor.lib.vpn.VpnState getVpnState() -> a
    156:160:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
    170:173:void connectToVpn(edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter,edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer) -> a
    180:181:void disconnectVpn() -> b
edu.uci.calit2.antmonitor.lib.vpn.VpnController -> edu.uci.calit2.antmonitor.lib.vpn.VpnController:
    int REQUEST_VPN_RIGHTS -> REQUEST_VPN_RIGHTS
    int REQUEST_INSTALL_CERT -> REQUEST_INSTALL_CERT
    java.lang.String TAG -> a
    edu.uci.calit2.antmonitor.lib.vpn.VpnController$VpnStateReceiver mVpnStateReceiver -> b
    edu.uci.calit2.antmonitor.lib.vpn.VpnClient$VpnClientBinder mService -> c
    edu.uci.calit2.antmonitor.lib.AntMonitorActivity mActivity -> d
    android.content.Context mActivContext -> e
    edu.uci.calit2.antmonitor.lib.vpn.VpnController vpnController -> f
    android.content.ServiceConnection mServiceConn -> g
    37:247:void <init>() -> <init>
    53:61:edu.uci.calit2.antmonitor.lib.vpn.VpnController getInstance(edu.uci.calit2.antmonitor.lib.AntMonitorActivity) -> getInstance
    70:76:void bind() -> bind
    86:101:void unbind() -> unbind
    127:145:void connect(edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter,edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,java.lang.String,edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener) -> connect
    172:188:void connectInBackground(android.content.Context,edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter,edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,java.lang.String,edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener) -> connectInBackground
    193:195:void disconnect() -> disconnect
    206:207:void setSSLBumpingEnabled(android.content.Context,boolean) -> setSSLBumpingEnabled
    211:211:boolean getSSLBumpingEnabled() -> getSSLBumpingEnabled
    237:238:void addPinnedDomains(java.io.InputStream) -> addPinnedDomains
    243:244:boolean isConnectedToInternet() -> isConnectedToInternet
    24:24:edu.uci.calit2.antmonitor.lib.vpn.VpnClient$VpnClientBinder access$100(edu.uci.calit2.antmonitor.lib.vpn.VpnController) -> a
    24:24:android.content.Context access$200() -> a
    24:24:edu.uci.calit2.antmonitor.lib.vpn.VpnClient$VpnClientBinder access$102(edu.uci.calit2.antmonitor.lib.vpn.VpnController,edu.uci.calit2.antmonitor.lib.vpn.VpnClient$VpnClientBinder) -> a
    24:24:edu.uci.calit2.antmonitor.lib.AntMonitorActivity access$300() -> b
    33:43:void <clinit>() -> <clinit>
edu.uci.calit2.antmonitor.lib.vpn.VpnController$1 -> edu.uci.calit2.antmonitor.lib.vpn.VpnController$1:
    edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter val$incFilter -> a
    edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter val$outFilter -> b
    edu.uci.calit2.antmonitor.lib.logging.PacketConsumer val$incPacketConsumer -> c
    edu.uci.calit2.antmonitor.lib.logging.PacketConsumer val$outPacketConsumer -> d
    edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener val$listener -> e
    edu.uci.calit2.antmonitor.lib.vpn.VpnController this$0 -> f
    127:127:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnController,edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter,edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener) -> <init>
    130:140:void authenticationComplete(boolean) -> authenticationComplete
edu.uci.calit2.antmonitor.lib.vpn.VpnController$2 -> edu.uci.calit2.antmonitor.lib.vpn.VpnController$2:
    edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter val$incFilter -> a
    edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter val$outFilter -> b
    edu.uci.calit2.antmonitor.lib.logging.PacketConsumer val$incPacketConsumer -> c
    edu.uci.calit2.antmonitor.lib.logging.PacketConsumer val$outPacketConsumer -> d
    android.content.Context val$context -> e
    edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener val$listener -> f
    172:172:void <init>(edu.uci.calit2.antmonitor.lib.vpn.IncPacketFilter,edu.uci.calit2.antmonitor.lib.vpn.OutPacketFilter,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,edu.uci.calit2.antmonitor.lib.logging.PacketConsumer,android.content.Context,edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener) -> <init>
    175:183:void authenticationComplete(boolean) -> authenticationComplete
edu.uci.calit2.antmonitor.lib.vpn.VpnController$3 -> edu.uci.calit2.antmonitor.lib.vpn.VpnController$3:
    edu.uci.calit2.antmonitor.lib.vpn.VpnController this$0 -> a
    247:247:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnController) -> <init>
    251:254:void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    258:259:void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener -> edu.uci.calit2.antmonitor.lib.vpn.VpnController$AuthenticateAPIListener:
    void authenticationComplete(boolean) -> authenticationComplete
edu.uci.calit2.antmonitor.lib.vpn.VpnController$VpnStateReceiver -> edu.uci.calit2.antmonitor.lib.vpn.VpnController$a:
    262:262:void <init>() -> <init>
    266:275:void onReceive(android.content.Context,android.content.Intent) -> onReceive
    262:262:void <init>(edu.uci.calit2.antmonitor.lib.vpn.VpnController$1) -> <init>
edu.uci.calit2.antmonitor.lib.vpn.VpnState -> edu.uci.calit2.antmonitor.lib.vpn.VpnState:
    edu.uci.calit2.antmonitor.lib.vpn.VpnState DISCONNECTED -> DISCONNECTED
    edu.uci.calit2.antmonitor.lib.vpn.VpnState CONNECTING -> CONNECTING
    edu.uci.calit2.antmonitor.lib.vpn.VpnState CONNECTED -> CONNECTED
    edu.uci.calit2.antmonitor.lib.vpn.VpnState SCHEDULED_CONNECT -> SCHEDULED_CONNECT
    edu.uci.calit2.antmonitor.lib.vpn.VpnState[] $VALUES -> a
    13:13:edu.uci.calit2.antmonitor.lib.vpn.VpnState[] values() -> values
    13:13:edu.uci.calit2.antmonitor.lib.vpn.VpnState valueOf(java.lang.String) -> valueOf
    13:13:void <init>(java.lang.String,int) -> <init>
    13:29:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.LICENSE -> org.sandrob.bouncycastle.LICENSE:
    java.lang.String licenseText -> licenseText
    24:56:void <clinit>() -> <clinit>
    24:24:void <init>() -> <init>
    61:62:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.asn1.ASN1ApplicationSpecificParser -> org.sandrob.bouncycastle.asn1.ASN1ApplicationSpecificParser:
    org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
org.sandrob.bouncycastle.asn1.ASN1Boolean -> org.sandrob.bouncycastle.asn1.ASN1Boolean:
    8:9:void <init>(boolean) -> <init>
    13:14:void <init>(byte[]) -> <init>
org.sandrob.bouncycastle.asn1.ASN1Choice -> org.sandrob.bouncycastle.asn1.ASN1Choice:
org.sandrob.bouncycastle.asn1.ASN1Encodable -> org.sandrob.bouncycastle.asn1.ASN1Encodable:
    java.lang.String DER -> DER
    java.lang.String BER -> BER
    9:9:void <init>() -> <init>
    24:29:byte[] getEncoded() -> getEncoded
    43:53:byte[] getEncoded(java.lang.String) -> getEncoded
    65:69:byte[] getDEREncoded() -> getDEREncoded
    75:75:int hashCode() -> hashCode
    81:93:boolean equals(java.lang.Object) -> equals
    98:98:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
    org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ASN1EncodableVector -> org.sandrob.bouncycastle.asn1.ASN1EncodableVector:
    java.util.Vector v -> a
    11:16:void <init>() -> <init>
    20:21:void add(org.sandrob.bouncycastle.asn1.DEREncodable) -> add
    25:25:org.sandrob.bouncycastle.asn1.DEREncodable get(int) -> get
    30:30:int size() -> size
org.sandrob.bouncycastle.asn1.ASN1Enumerated -> org.sandrob.bouncycastle.asn1.ASN1Enumerated:
    10:11:void <init>(byte[]) -> <init>
    15:16:void <init>(java.math.BigInteger) -> <init>
    20:21:void <init>(int) -> <init>
org.sandrob.bouncycastle.asn1.ASN1Exception -> org.sandrob.bouncycastle.asn1.ASN1Exception:
    java.lang.Throwable cause -> a
    12:13:void <init>(java.lang.String) -> <init>
    17:19:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    23:23:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.asn1.ASN1GeneralizedTime -> org.sandrob.bouncycastle.asn1.ASN1GeneralizedTime:
    10:11:void <init>(byte[]) -> <init>
    15:16:void <init>(java.util.Date) -> <init>
    20:21:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.asn1.ASN1Generator -> org.sandrob.bouncycastle.asn1.ASN1Generator:
    java.io.OutputStream _out -> _out
    9:12:void <init>(java.io.OutputStream) -> <init>
    java.io.OutputStream getRawOutputStream() -> getRawOutputStream
org.sandrob.bouncycastle.asn1.ASN1InputStream -> org.sandrob.bouncycastle.asn1.ASN1InputStream:
    int limit -> a
    boolean lazyEvaluate -> b
    26:35:int findLimit(java.io.InputStream) -> a
    41:42:void <init>(java.io.InputStream) -> <init>
    53:54:void <init>(byte[]) -> <init>
    67:68:void <init>(byte[],boolean) -> <init>
    80:81:void <init>(java.io.InputStream,int) -> <init>
    96:99:void <init>(java.io.InputStream,int,boolean) -> <init>
    104:104:int readLength() -> readLength
    111:115:void readFully(byte[]) -> readFully
    126:168:org.sandrob.bouncycastle.asn1.DERObject buildObject(int,int,int) -> buildObject
    174:182:org.sandrob.bouncycastle.asn1.ASN1EncodableVector buildEncodableVector() -> a
    188:188:org.sandrob.bouncycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.sandrob.bouncycastle.asn1.DefiniteLengthInputStream) -> a
    194:260:org.sandrob.bouncycastle.asn1.DERObject readObject() -> readObject
    268:301:int readTagNumber(java.io.InputStream,int) -> a
    307:352:int readLength(java.io.InputStream,int) -> b
    359:398:org.sandrob.bouncycastle.asn1.DERObject createPrimitiveDERObject(int,byte[]) -> a
org.sandrob.bouncycastle.asn1.ASN1Integer -> org.sandrob.bouncycastle.asn1.ASN1Integer:
    10:11:void <init>(byte[]) -> <init>
    15:16:void <init>(java.math.BigInteger) -> <init>
    20:21:void <init>(int) -> <init>
org.sandrob.bouncycastle.asn1.ASN1Null -> org.sandrob.bouncycastle.asn1.ASN1Null:
    11:13:void <init>() -> <init>
    17:17:int hashCode() -> hashCode
    23:28:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    36:36:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.ASN1Object -> org.sandrob.bouncycastle.asn1.ASN1Object:
    5:5:void <init>() -> <init>
    18:26:org.sandrob.bouncycastle.asn1.ASN1Object fromByteArray(byte[]) -> fromByteArray
    32:37:boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier -> org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier:
    8:9:void <init>(java.lang.String) -> <init>
    13:14:void <init>(byte[]) -> <init>
    24:24:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier branch(java.lang.String) -> branch
org.sandrob.bouncycastle.asn1.ASN1OctetString -> org.sandrob.bouncycastle.asn1.ASN1OctetString:
    byte[] string -> a
    29:37:org.sandrob.bouncycastle.asn1.ASN1OctetString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    50:61:org.sandrob.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object) -> getInstance
    67:75:void <init>(byte[]) -> <init>
    77:88:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    92:92:java.io.InputStream getOctetStream() -> getOctetStream
    97:97:org.sandrob.bouncycastle.asn1.ASN1OctetStringParser parser() -> parser
    102:102:byte[] getOctets() -> getOctets
    107:107:int hashCode() -> hashCode
    113:120:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    125:125:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    133:133:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.ASN1OctetStringParser -> org.sandrob.bouncycastle.asn1.ASN1OctetStringParser:
    java.io.InputStream getOctetStream() -> getOctetStream
org.sandrob.bouncycastle.asn1.ASN1OutputStream -> org.sandrob.bouncycastle.asn1.ASN1OutputStream:
    12:13:void <init>(java.io.OutputStream) -> <init>
    19:35:void writeObject(java.lang.Object) -> writeObject
org.sandrob.bouncycastle.asn1.ASN1ParsingException -> org.sandrob.bouncycastle.asn1.ASN1ParsingException:
    java.lang.Throwable cause -> a
    10:11:void <init>(java.lang.String) -> <init>
    15:17:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    21:21:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.asn1.ASN1Sequence -> org.sandrob.bouncycastle.asn1.ASN1Sequence:
    java.util.Vector seq -> a
    7:10:void <init>() -> <init>
    21:37:org.sandrob.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object) -> getInstance
    60:96:org.sandrob.bouncycastle.asn1.ASN1Sequence getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    101:101:java.util.Enumeration getObjects() -> getObjects
    106:108:org.sandrob.bouncycastle.asn1.ASN1SequenceParser parser() -> parser
    155:155:org.sandrob.bouncycastle.asn1.DEREncodable getObjectAt(int) -> getObjectAt
    165:165:int size() -> size
    170:181:int hashCode() -> hashCode
    187:218:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    223:231:org.sandrob.bouncycastle.asn1.DEREncodable getNext(java.util.Enumeration) -> a
    237:238:void addObject(org.sandrob.bouncycastle.asn1.DEREncodable) -> addObject
    void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    245:245:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.ASN1Sequence$1 -> org.sandrob.bouncycastle.asn1.ASN1Sequence$1:
    int max -> b
    int index -> c
    org.sandrob.bouncycastle.asn1.ASN1Sequence this$0 -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence val$outer -> d
    1:110:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    116:131:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    136:136:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    141:141:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.ASN1SequenceParser -> org.sandrob.bouncycastle.asn1.ASN1SequenceParser:
    org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
org.sandrob.bouncycastle.asn1.ASN1Set -> org.sandrob.bouncycastle.asn1.ASN1Set:
    java.util.Vector set -> set
    22:27:org.sandrob.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object) -> getInstance
    50:100:org.sandrob.bouncycastle.asn1.ASN1Set getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    11:105:void <init>() -> <init>
    109:109:java.util.Enumeration getObjects() -> getObjects
    121:121:org.sandrob.bouncycastle.asn1.DEREncodable getObjectAt(int) -> getObjectAt
    131:131:int size() -> size
    136:143:org.sandrob.bouncycastle.asn1.ASN1Encodable[] toArray() -> toArray
    148:150:org.sandrob.bouncycastle.asn1.ASN1SetParser parser() -> parser
    190:201:int hashCode() -> hashCode
    207:238:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    243:251:org.sandrob.bouncycastle.asn1.DEREncodable getNext(java.util.Enumeration) -> a
    261:269:boolean lessThanOrEqual(byte[],byte[]) -> a
    275:287:byte[] getEncoded(org.sandrob.bouncycastle.asn1.DEREncodable) -> a
    292:330:void sort() -> sort
    335:336:void addObject(org.sandrob.bouncycastle.asn1.DEREncodable) -> addObject
    void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    343:343:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.ASN1Set$1 -> org.sandrob.bouncycastle.asn1.ASN1Set$1:
    int max -> b
    int index -> c
    org.sandrob.bouncycastle.asn1.ASN1Set this$0 -> a
    org.sandrob.bouncycastle.asn1.ASN1Set val$outer -> d
    1:152:void <init>(org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    158:173:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    178:178:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    183:183:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.ASN1SetParser -> org.sandrob.bouncycastle.asn1.ASN1SetParser:
    org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
org.sandrob.bouncycastle.asn1.ASN1StreamParser -> org.sandrob.bouncycastle.asn1.ASN1StreamParser:
    java.io.InputStream _in -> a
    int _limit -> b
    15:16:void <init>(java.io.InputStream) -> <init>
    18:24:void <init>(java.io.InputStream,int) -> <init>
    29:30:void <init>(byte[]) -> <init>
    37:48:org.sandrob.bouncycastle.asn1.DEREncodable readIndef(int) -> a
    54:90:org.sandrob.bouncycastle.asn1.DEREncodable readImplicit(boolean,int) -> a
    95:113:org.sandrob.bouncycastle.asn1.DERObject readTaggedObject(boolean,int) -> b
    119:213:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    220:224:void set00Check(boolean) -> a
    228:243:org.sandrob.bouncycastle.asn1.ASN1EncodableVector readVector() -> a
org.sandrob.bouncycastle.asn1.ASN1String -> org.sandrob.bouncycastle.asn1.ASN1String:
    java.lang.String getString() -> getString
org.sandrob.bouncycastle.asn1.ASN1TaggedObject -> org.sandrob.bouncycastle.asn1.ASN1TaggedObject:
    int tagNo -> a
    boolean empty -> b
    boolean explicit -> c
    org.sandrob.bouncycastle.asn1.DEREncodable obj -> d
    23:28:org.sandrob.bouncycastle.asn1.ASN1TaggedObject getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    34:39:org.sandrob.bouncycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object) -> getInstance
    15:55:void <init>(int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    15:83:void <init>(boolean,int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    88:115:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    120:132:int hashCode() -> hashCode
    137:137:int getTagNo() -> getTagNo
    151:151:boolean isExplicit() -> isExplicit
    156:156:boolean isEmpty() -> isEmpty
    168:173:org.sandrob.bouncycastle.asn1.DERObject getObject() -> getObject
    185:200:org.sandrob.bouncycastle.asn1.DEREncodable getObjectParser(int,boolean) -> getObjectParser
    205:205:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    213:213:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.ASN1TaggedObjectParser -> org.sandrob.bouncycastle.asn1.ASN1TaggedObjectParser:
    int getTagNo() -> getTagNo
    org.sandrob.bouncycastle.asn1.DEREncodable getObjectParser(int,boolean) -> getObjectParser
org.sandrob.bouncycastle.asn1.ASN1UTCTime -> org.sandrob.bouncycastle.asn1.ASN1UTCTime:
    10:11:void <init>(byte[]) -> <init>
    15:16:void <init>(java.util.Date) -> <init>
    20:21:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.asn1.BERApplicationSpecific -> org.sandrob.bouncycastle.asn1.BERApplicationSpecific:
    8:9:void <init>(int,org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
org.sandrob.bouncycastle.asn1.BERApplicationSpecificParser -> org.sandrob.bouncycastle.asn1.BERApplicationSpecificParser:
    int tag -> a
    org.sandrob.bouncycastle.asn1.ASN1StreamParser parser -> b
    11:15:void <init>(int,org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    20:20:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    26:26:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    33:37:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.BERConstructedOctetString -> org.sandrob.bouncycastle.asn1.BERConstructedOctetString:
    java.util.Vector octs -> b
    19:39:byte[] toBytes(java.util.Vector) -> a
    50:51:void <init>(byte[]) -> <init>
    56:59:void <init>(java.util.Vector) -> <init>
    64:65:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    70:71:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    75:75:byte[] getOctets() -> getOctets
    83:88:java.util.Enumeration getObjects() -> getObjects
    93:114:java.util.Vector generateOcts() -> a
    121:143:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    147:155:org.sandrob.bouncycastle.asn1.BERConstructedOctetString fromSequence(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> fromSequence
org.sandrob.bouncycastle.asn1.BERFactory -> org.sandrob.bouncycastle.asn1.a:
    org.sandrob.bouncycastle.asn1.BERSequence EMPTY_SEQUENCE -> a
    org.sandrob.bouncycastle.asn1.BERSet EMPTY_SET -> b
    3:6:void <clinit>() -> <clinit>
    10:10:org.sandrob.bouncycastle.asn1.BERSequence createSequence(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> a
org.sandrob.bouncycastle.asn1.BERGenerator -> org.sandrob.bouncycastle.asn1.BERGenerator:
    boolean _tagged -> a
    boolean _isExplicit -> b
    int _tagNo -> c
    10:18:void <init>(java.io.OutputStream) -> <init>
    10:30:void <init>(java.io.OutputStream,int,boolean) -> <init>
    34:34:java.io.OutputStream getRawOutputStream() -> getRawOutputStream
    41:43:void writeHdr(int) -> a
    49:74:void writeBERHeader(int) -> writeBERHeader
    82:86:void writeBERBody(java.io.InputStream) -> writeBERBody
    91:99:void writeBEREnd() -> writeBEREnd
org.sandrob.bouncycastle.asn1.BERNull -> org.sandrob.bouncycastle.asn1.BERNull:
    org.sandrob.bouncycastle.asn1.BERNull INSTANCE -> INSTANCE
    8:11:void <clinit>() -> <clinit>
    13:15:void <init>() -> <init>
    21:29:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.BEROctetStringGenerator -> org.sandrob.bouncycastle.asn1.BEROctetStringGenerator:
    12:15:void <init>(java.io.OutputStream) -> <init>
    23:26:void <init>(java.io.OutputStream,int,boolean) -> <init>
    30:30:java.io.OutputStream getOctetOutputStream() -> getOctetOutputStream
    36:36:java.io.OutputStream getOctetOutputStream(byte[]) -> getOctetOutputStream
org.sandrob.bouncycastle.asn1.BEROctetStringGenerator$BufferedBEROctetStream -> org.sandrob.bouncycastle.asn1.BEROctetStringGenerator$a:
    byte[] _buf -> b
    int _off -> c
    org.sandrob.bouncycastle.asn1.DEROutputStream _derOut -> d
    org.sandrob.bouncycastle.asn1.BEROctetStringGenerator this$0 -> a
    46:52:void <init>(org.sandrob.bouncycastle.asn1.BEROctetStringGenerator,byte[]) -> <init>
    58:65:void write(int) -> write
    69:86:void write(byte[],int,int) -> write
    91:100:void close() -> close
org.sandrob.bouncycastle.asn1.BEROctetStringParser -> org.sandrob.bouncycastle.asn1.BEROctetStringParser:
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> a
    13:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    21:21:java.io.InputStream getOctetStream() -> getOctetStream
    27:27:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    34:38:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.BEROutputStream -> org.sandrob.bouncycastle.asn1.BEROutputStream:
    12:13:void <init>(java.io.OutputStream) -> <init>
    19:35:void writeObject(java.lang.Object) -> writeObject
org.sandrob.bouncycastle.asn1.BERSequence -> org.sandrob.bouncycastle.asn1.BERSequence:
    12:14:void <init>() -> <init>
    22:23:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    31:32:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    40:58:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.BERSequenceGenerator -> org.sandrob.bouncycastle.asn1.BERSequenceGenerator:
    13:16:void <init>(java.io.OutputStream) -> <init>
    24:27:void <init>(java.io.OutputStream,int,boolean) -> <init>
    33:34:void addObject(org.sandrob.bouncycastle.asn1.DEREncodable) -> addObject
    39:40:void close() -> close
org.sandrob.bouncycastle.asn1.BERSequenceParser -> org.sandrob.bouncycastle.asn1.BERSequenceParser:
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> a
    10:13:void <init>(org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    18:18:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    24:24:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    31:35:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.BERSet -> org.sandrob.bouncycastle.asn1.BERSet:
    12:14:void <init>() -> <init>
    22:23:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    31:32:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    41:42:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,boolean) -> <init>
    50:68:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.BERSetParser -> org.sandrob.bouncycastle.asn1.BERSetParser:
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> a
    10:13:void <init>(org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    18:18:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    24:24:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    31:35:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.BERTaggedObject -> org.sandrob.bouncycastle.asn1.BERTaggedObject:
    22:23:void <init>(int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    35:36:void <init>(boolean,int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    45:46:void <init>(int) -> <init>
    52:106:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.BERTaggedObjectParser -> org.sandrob.bouncycastle.asn1.BERTaggedObjectParser:
    boolean _constructed -> a
    int _tagNumber -> b
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> c
    21:22:void <init>(int,int,java.io.InputStream) -> <init>
    24:32:void <init>(boolean,int,org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    36:36:boolean isConstructed() -> isConstructed
    41:41:int getTagNo() -> getTagNo
    49:58:org.sandrob.bouncycastle.asn1.DEREncodable getObjectParser(int,boolean) -> getObjectParser
    64:64:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    71:75:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.ConstructedOctetStream -> org.sandrob.bouncycastle.asn1.b:
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> a
    boolean _first -> b
    java.io.InputStream _currentStream -> c
    11:18:void <init>(org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    22:65:int read(byte[],int,int) -> read
    73:108:int read() -> read
org.sandrob.bouncycastle.asn1.DERApplicationSpecific -> org.sandrob.bouncycastle.asn1.DERApplicationSpecific:
    boolean isConstructed -> a
    int tag -> b
    byte[] octets -> c
    18:26:void <init>(boolean,int,byte[]) -> <init>
    32:33:void <init>(int,byte[]) -> <init>
    40:41:void <init>(int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    43:65:void <init>(boolean,int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    67:85:void <init>(int,org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    89:96:int getLengthOfLength(byte[]) -> a
    101:101:boolean isConstructed() -> isConstructed
    106:106:byte[] getContents() -> getContents
    111:111:int getApplicationTag() -> getApplicationTag
    123:123:org.sandrob.bouncycastle.asn1.DERObject getObject() -> getObject
    136:149:org.sandrob.bouncycastle.asn1.DERObject getObject(int) -> getObject
    157:164:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    169:178:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    183:183:int hashCode() -> hashCode
    189:223:byte[] replaceTagNumber(int,byte[]) -> a
org.sandrob.bouncycastle.asn1.DERBMPString -> org.sandrob.bouncycastle.asn1.DERBMPString:
    java.lang.String string -> a
    23:28:org.sandrob.bouncycastle.asn1.DERBMPString getInstance(java.lang.Object) -> getInstance
    44:52:org.sandrob.bouncycastle.asn1.DERBMPString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    60:71:void <init>(byte[]) -> <init>
    76:80:void <init>(java.lang.String) -> <init>
    84:84:java.lang.String getString() -> getString
    89:89:java.lang.String toString() -> toString
    94:94:int hashCode() -> hashCode
    100:107:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    114:124:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.DERBitString -> org.sandrob.bouncycastle.asn1.DERBitString:
    char[] table -> a
    byte[] data -> data
    int padBits -> padBits
    8:12:void <clinit>() -> <clinit>
    24:62:int getPadBits(int) -> getPadBits
    71:87:byte[] getBytes(int) -> getBytes
    98:103:org.sandrob.bouncycastle.asn1.DERBitString getInstance(java.lang.Object) -> getInstance
    119:127:org.sandrob.bouncycastle.asn1.DERBitString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    131:138:void <init>(byte,int) -> <init>
    144:150:void <init>(byte[],int) -> <init>
    155:156:void <init>(byte[]) -> <init>
    158:170:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    174:174:byte[] getBytes() -> getBytes
    179:179:int getPadBits() -> getPadBits
    188:195:int intValue() -> intValue
    202:208:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    212:212:int hashCode() -> hashCode
    218:226:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    231:252:java.lang.String getString() -> getString
    257:257:java.lang.String toString() -> toString
    262:275:org.sandrob.bouncycastle.asn1.DERBitString fromOctetString(byte[]) -> a
org.sandrob.bouncycastle.asn1.DERBoolean -> org.sandrob.bouncycastle.asn1.DERBoolean:
    byte value -> a
    org.sandrob.bouncycastle.asn1.DERBoolean FALSE -> FALSE
    org.sandrob.bouncycastle.asn1.DERBoolean TRUE -> TRUE
    5:11:void <clinit>() -> <clinit>
    21:26:org.sandrob.bouncycastle.asn1.DERBoolean getInstance(java.lang.Object) -> getInstance
    35:35:org.sandrob.bouncycastle.asn1.DERBoolean getInstance(boolean) -> getInstance
    51:59:org.sandrob.bouncycastle.asn1.DERBoolean getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    63:72:void <init>(byte[]) -> <init>
    74:78:void <init>(boolean) -> <init>
    82:82:boolean isTrue() -> isTrue
    89:94:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    99:104:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    109:109:int hashCode() -> hashCode
    115:115:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.DEREncodable -> org.sandrob.bouncycastle.asn1.DEREncodable:
    org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.DEREncodableVector -> org.sandrob.bouncycastle.asn1.DEREncodableVector:
    java.util.Vector v -> b
    12:20:void <init>() -> <init>
    25:26:void add(org.sandrob.bouncycastle.asn1.DEREncodable) -> add
    31:31:org.sandrob.bouncycastle.asn1.DEREncodable get(int) -> get
    36:36:int size() -> size
org.sandrob.bouncycastle.asn1.DEREnumerated -> org.sandrob.bouncycastle.asn1.DEREnumerated:
    byte[] bytes -> a
    21:26:org.sandrob.bouncycastle.asn1.DEREnumerated getInstance(java.lang.Object) -> getInstance
    42:50:org.sandrob.bouncycastle.asn1.DEREnumerated getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    54:58:void <init>(int) -> <init>
    60:64:void <init>(java.math.BigInteger) -> <init>
    66:70:void <init>(byte[]) -> <init>
    74:74:java.math.BigInteger getValue() -> getValue
    81:82:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    87:94:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    99:99:int hashCode() -> hashCode
org.sandrob.bouncycastle.asn1.DERExternal -> org.sandrob.bouncycastle.asn1.DERExternal:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier directReference -> a
    org.sandrob.bouncycastle.asn1.DERInteger indirectReference -> b
    org.sandrob.bouncycastle.asn1.ASN1Object dataValueDescriptor -> c
    int encoding -> d
    org.sandrob.bouncycastle.asn1.DERObject externalContent -> e
    18:54:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    58:63:org.sandrob.bouncycastle.asn1.DERObject getObjFromVector(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int) -> a
    75:76:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.ASN1Object,org.sandrob.bouncycastle.asn1.DERTaggedObject) -> <init>
    87:94:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.ASN1Object,int,org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    101:115:int hashCode() -> hashCode
    124:140:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    147:177:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    186:186:org.sandrob.bouncycastle.asn1.ASN1Object getDataValueDescriptor() -> getDataValueDescriptor
    195:195:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getDirectReference() -> getDirectReference
    209:209:int getEncoding() -> getEncoding
    218:218:org.sandrob.bouncycastle.asn1.DERObject getExternalContent() -> getExternalContent
    227:227:org.sandrob.bouncycastle.asn1.DERInteger getIndirectReference() -> getIndirectReference
    236:237:void setDataValueDescriptor(org.sandrob.bouncycastle.asn1.ASN1Object) -> a
    245:246:void setDirectReference(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    259:264:void setEncoding(int) -> a
    272:273:void setExternalContent(org.sandrob.bouncycastle.asn1.DERObject) -> a
    281:282:void setIndirectReference(org.sandrob.bouncycastle.asn1.DERInteger) -> a
org.sandrob.bouncycastle.asn1.DERExternalParser -> org.sandrob.bouncycastle.asn1.DERExternalParser:
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> a
    13:16:void <init>(org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    21:21:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    29:33:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    41:49:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.DERFactory -> org.sandrob.bouncycastle.asn1.c:
    org.sandrob.bouncycastle.asn1.DERSequence EMPTY_SEQUENCE -> a
    org.sandrob.bouncycastle.asn1.DERSet EMPTY_SET -> b
    3:6:void <clinit>() -> <clinit>
    10:10:org.sandrob.bouncycastle.asn1.DERSequence createSequence(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> a
    20:20:org.sandrob.bouncycastle.asn1.DERSet createSet(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,boolean) -> a
org.sandrob.bouncycastle.asn1.DERGeneralString -> org.sandrob.bouncycastle.asn1.DERGeneralString:
    java.lang.String string -> a
    13:19:org.sandrob.bouncycastle.asn1.DERGeneralString getInstance(java.lang.Object) -> getInstance
    26:34:org.sandrob.bouncycastle.asn1.DERGeneralString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    38:46:void <init>(byte[]) -> <init>
    48:51:void <init>(java.lang.String) -> <init>
    55:55:java.lang.String getString() -> getString
    60:60:java.lang.String toString() -> toString
    65:71:byte[] getOctets() -> getOctets
    77:78:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    82:82:int hashCode() -> hashCode
    87:92:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
org.sandrob.bouncycastle.asn1.DERGeneralizedTime -> org.sandrob.bouncycastle.asn1.DERGeneralizedTime:
    java.lang.String time -> a
    26:31:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getInstance(java.lang.Object) -> getInstance
    47:55:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    68:80:void <init>(java.lang.String) -> <init>
    85:93:void <init>(java.util.Date) -> <init>
    95:109:void <init>(byte[]) -> <init>
    117:117:java.lang.String getTimeString() -> getTimeString
    137:166:java.lang.String getTime() -> getTime
    171:194:java.lang.String calculateGMTOffset() -> a
    199:204:java.lang.String convert(int) -> a
    211:285:java.util.Date getDate() -> getDate
    290:290:boolean hasFractionalSeconds() -> b
    295:303:byte[] getOctets() -> c
    311:312:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    317:322:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    327:327:int hashCode() -> hashCode
org.sandrob.bouncycastle.asn1.DERGenerator -> org.sandrob.bouncycastle.asn1.DERGenerator:
    boolean _tagged -> a
    boolean _isExplicit -> b
    int _tagNo -> c
    13:21:void <init>(java.io.OutputStream) -> <init>
    13:33:void <init>(java.io.OutputStream,int,boolean) -> <init>
    40:61:void writeLength(java.io.OutputStream,int) -> a
    69:72:void writeDEREncoded(java.io.OutputStream,int,byte[]) -> a
    79:109:void writeDEREncoded(int,byte[]) -> a
org.sandrob.bouncycastle.asn1.DERIA5String -> org.sandrob.bouncycastle.asn1.DERIA5String:
    java.lang.String string -> a
    22:27:org.sandrob.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object) -> getInstance
    43:51:org.sandrob.bouncycastle.asn1.DERIA5String getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    58:69:void <init>(byte[]) -> <init>
    77:78:void <init>(java.lang.String) -> <init>
    88:102:void <init>(java.lang.String,boolean) -> <init>
    106:106:java.lang.String getString() -> getString
    111:111:java.lang.String toString() -> toString
    116:124:byte[] getOctets() -> getOctets
    131:132:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    136:136:int hashCode() -> hashCode
    142:149:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    161:171:boolean isIA5String(java.lang.String) -> isIA5String
org.sandrob.bouncycastle.asn1.DERInteger -> org.sandrob.bouncycastle.asn1.DERInteger:
    byte[] bytes -> a
    21:26:org.sandrob.bouncycastle.asn1.DERInteger getInstance(java.lang.Object) -> getInstance
    42:50:org.sandrob.bouncycastle.asn1.DERInteger getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    54:58:void <init>(int) -> <init>
    60:64:void <init>(java.math.BigInteger) -> <init>
    66:70:void <init>(byte[]) -> <init>
    74:74:java.math.BigInteger getValue() -> getValue
    83:83:java.math.BigInteger getPositiveValue() -> getPositiveValue
    90:91:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    95:102:int hashCode() -> hashCode
    108:115:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    120:120:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.DERNull -> org.sandrob.bouncycastle.asn1.DERNull:
    org.sandrob.bouncycastle.asn1.DERNull INSTANCE -> INSTANCE
    byte[] zeroBytes -> a
    8:11:void <clinit>() -> <clinit>
    13:17:void <init>() -> <init>
    23:24:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.DERNumericString -> org.sandrob.bouncycastle.asn1.DERNumericString:
    java.lang.String string -> a
    22:27:org.sandrob.bouncycastle.asn1.DERNumericString getInstance(java.lang.Object) -> getInstance
    43:51:org.sandrob.bouncycastle.asn1.DERNumericString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    58:69:void <init>(byte[]) -> <init>
    77:78:void <init>(java.lang.String) -> <init>
    88:98:void <init>(java.lang.String,boolean) -> <init>
    102:102:java.lang.String getString() -> getString
    107:107:java.lang.String toString() -> toString
    112:120:byte[] getOctets() -> getOctets
    127:128:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    132:132:int hashCode() -> hashCode
    138:145:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    157:174:boolean isNumericString(java.lang.String) -> isNumericString
org.sandrob.bouncycastle.asn1.DERObject -> org.sandrob.bouncycastle.asn1.DERObject:
    5:5:void <init>() -> <init>
    11:11:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.DERObjectIdentifier -> org.sandrob.bouncycastle.asn1.DERObjectIdentifier:
    java.lang.String identifier -> a
    21:26:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getInstance(java.lang.Object) -> getInstance
    42:50:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    55:114:void <init>(byte[]) -> <init>
    116:125:void <init>(java.lang.String) -> <init>
    129:129:java.lang.String getId() -> getId
    137:146:void writeField(java.io.OutputStream,long) -> a
    153:171:void writeField(java.io.OutputStream,java.math.BigInteger) -> a
    177:203:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    207:207:int hashCode() -> hashCode
    213:218:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    223:223:java.lang.String toString() -> toString
    229:266:boolean isValidIdentifier(java.lang.String) -> a
org.sandrob.bouncycastle.asn1.DEROctetString -> org.sandrob.bouncycastle.asn1.DEROctetString:
    14:15:void <init>(byte[]) -> <init>
    20:21:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    27:28:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    35:36:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream,byte[]) -> a
org.sandrob.bouncycastle.asn1.DEROctetStringParser -> org.sandrob.bouncycastle.asn1.DEROctetStringParser:
    org.sandrob.bouncycastle.asn1.DefiniteLengthInputStream stream -> a
    11:15:void <init>(org.sandrob.bouncycastle.asn1.DefiniteLengthInputStream) -> <init>
    19:19:java.io.InputStream getOctetStream() -> getOctetStream
    25:25:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    32:36:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.DEROutputStream -> org.sandrob.bouncycastle.asn1.DEROutputStream:
    13:14:void <init>(java.io.OutputStream) -> <init>
    20:41:void writeLength(int) -> a
    48:51:void writeEncoded(int,byte[]) -> a
    56:84:void writeTag(int,int) -> a
    89:92:void writeEncoded(int,int,byte[]) -> a
    97:99:void writeNull() -> writeNull
    104:105:void write(byte[]) -> write
    110:111:void write(byte[],int,int) -> write
    117:133:void writeObject(java.lang.Object) -> writeObject
org.sandrob.bouncycastle.asn1.DERPrintableString -> org.sandrob.bouncycastle.asn1.DERPrintableString:
    java.lang.String string -> a
    22:27:org.sandrob.bouncycastle.asn1.DERPrintableString getInstance(java.lang.Object) -> getInstance
    43:51:org.sandrob.bouncycastle.asn1.DERPrintableString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    58:69:void <init>(byte[]) -> <init>
    77:78:void <init>(java.lang.String) -> <init>
    88:98:void <init>(java.lang.String,boolean) -> <init>
    102:102:java.lang.String getString() -> getString
    107:115:byte[] getOctets() -> getOctets
    122:123:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    127:127:int hashCode() -> hashCode
    133:140:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    145:145:java.lang.String toString() -> toString
    157:201:boolean isPrintableString(java.lang.String) -> isPrintableString
org.sandrob.bouncycastle.asn1.DERSequence -> org.sandrob.bouncycastle.asn1.DERSequence:
    13:15:void <init>() -> <init>
    20:24:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    29:36:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    41:48:void <init>(org.sandrob.bouncycastle.asn1.ASN1Encodable[]) -> <init>
    63:79:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.DERSequenceGenerator -> org.sandrob.bouncycastle.asn1.DERSequenceGenerator:
    java.io.ByteArrayOutputStream _bOut -> a
    10:17:void <init>(java.io.OutputStream) -> <init>
    10:26:void <init>(java.io.OutputStream,int,boolean) -> <init>
    32:33:void addObject(org.sandrob.bouncycastle.asn1.DEREncodable) -> addObject
    37:37:java.io.OutputStream getRawOutputStream() -> getRawOutputStream
    43:44:void close() -> close
org.sandrob.bouncycastle.asn1.DERSequenceParser -> org.sandrob.bouncycastle.asn1.DERSequenceParser:
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> a
    10:13:void <init>(org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    18:18:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    24:24:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    31:35:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.DERSet -> org.sandrob.bouncycastle.asn1.DERSet:
    16:18:void <init>() -> <init>
    23:27:void <init>(org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    35:36:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    41:50:void <init>(org.sandrob.bouncycastle.asn1.ASN1Encodable[]) -> <init>
    55:68:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,boolean) -> <init>
    83:99:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.DERSetParser -> org.sandrob.bouncycastle.asn1.DERSetParser:
    org.sandrob.bouncycastle.asn1.ASN1StreamParser _parser -> a
    10:13:void <init>(org.sandrob.bouncycastle.asn1.ASN1StreamParser) -> <init>
    18:18:org.sandrob.bouncycastle.asn1.DEREncodable readObject() -> readObject
    24:24:org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
    31:35:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.DERString -> org.sandrob.bouncycastle.asn1.DERString:
org.sandrob.bouncycastle.asn1.DERT61String -> org.sandrob.bouncycastle.asn1.DERT61String:
    java.lang.String string -> a
    22:27:org.sandrob.bouncycastle.asn1.DERT61String getInstance(java.lang.Object) -> getInstance
    43:51:org.sandrob.bouncycastle.asn1.DERT61String getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    58:69:void <init>(byte[]) -> <init>
    74:78:void <init>(java.lang.String) -> <init>
    82:82:java.lang.String getString() -> getString
    87:87:java.lang.String toString() -> toString
    94:95:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    99:107:byte[] getOctets() -> getOctets
    113:118:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    123:123:int hashCode() -> hashCode
org.sandrob.bouncycastle.asn1.DERTaggedObject -> org.sandrob.bouncycastle.asn1.DERTaggedObject:
    byte[] ZERO_BYTES -> e
    10:13:void <clinit>() -> <clinit>
    23:24:void <init>(int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    36:37:void <init>(boolean,int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    46:47:void <init>(int) -> <init>
    53:84:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.DERTags -> org.sandrob.bouncycastle.asn1.DERTags:
    int BOOLEAN -> BOOLEAN
    int INTEGER -> INTEGER
    int BIT_STRING -> BIT_STRING
    int OCTET_STRING -> OCTET_STRING
    int NULL -> NULL
    int OBJECT_IDENTIFIER -> OBJECT_IDENTIFIER
    int EXTERNAL -> EXTERNAL
    int ENUMERATED -> ENUMERATED
    int SEQUENCE -> SEQUENCE
    int SEQUENCE_OF -> SEQUENCE_OF
    int SET -> SET
    int SET_OF -> SET_OF
    int NUMERIC_STRING -> NUMERIC_STRING
    int PRINTABLE_STRING -> PRINTABLE_STRING
    int T61_STRING -> T61_STRING
    int VIDEOTEX_STRING -> VIDEOTEX_STRING
    int IA5_STRING -> IA5_STRING
    int UTC_TIME -> UTC_TIME
    int GENERALIZED_TIME -> GENERALIZED_TIME
    int GRAPHIC_STRING -> GRAPHIC_STRING
    int VISIBLE_STRING -> VISIBLE_STRING
    int GENERAL_STRING -> GENERAL_STRING
    int UNIVERSAL_STRING -> UNIVERSAL_STRING
    int BMP_STRING -> BMP_STRING
    int UTF8_STRING -> UTF8_STRING
    int CONSTRUCTED -> CONSTRUCTED
    int APPLICATION -> APPLICATION
    int TAGGED -> TAGGED
org.sandrob.bouncycastle.asn1.DERUTCTime -> org.sandrob.bouncycastle.asn1.DERUTCTime:
    java.lang.String time -> a
    25:30:org.sandrob.bouncycastle.asn1.DERUTCTime getInstance(java.lang.Object) -> getInstance
    46:54:org.sandrob.bouncycastle.asn1.DERUTCTime getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    68:80:void <init>(java.lang.String) -> <init>
    85:93:void <init>(java.util.Date) -> <init>
    95:109:void <init>(byte[]) -> <init>
    121:123:java.util.Date getDate() -> getDate
    136:140:java.util.Date getAdjustedDate() -> getAdjustedDate
    164:195:java.lang.String getTime() -> getTime
    206:214:java.lang.String getAdjustedTime() -> getAdjustedTime
    220:228:byte[] getOctets() -> a
    235:236:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    241:246:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    251:251:int hashCode() -> hashCode
    256:256:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.DERUTF8String -> org.sandrob.bouncycastle.asn1.DERUTF8String:
    java.lang.String string -> a
    24:30:org.sandrob.bouncycastle.asn1.DERUTF8String getInstance(java.lang.Object) -> getInstance
    48:56:org.sandrob.bouncycastle.asn1.DERUTF8String getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    63:73:void <init>(byte[]) -> <init>
    78:81:void <init>(java.lang.String) -> <init>
    85:85:java.lang.String getString() -> getString
    90:90:java.lang.String toString() -> toString
    95:95:int hashCode() -> hashCode
    100:107:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    113:114:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.DERUniversalString -> org.sandrob.bouncycastle.asn1.DERUniversalString:
    char[] table -> a
    byte[] string -> b
    9:13:void <clinit>() -> <clinit>
    24:29:org.sandrob.bouncycastle.asn1.DERUniversalString getInstance(java.lang.Object) -> getInstance
    45:53:org.sandrob.bouncycastle.asn1.DERUniversalString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    60:64:void <init>(byte[]) -> <init>
    68:89:java.lang.String getString() -> getString
    94:94:java.lang.String toString() -> toString
    99:99:byte[] getOctets() -> getOctets
    106:107:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    112:117:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    122:122:int hashCode() -> hashCode
org.sandrob.bouncycastle.asn1.DERUnknownTag -> org.sandrob.bouncycastle.asn1.DERUnknownTag:
    boolean isConstructed -> a
    int tag -> b
    byte[] data -> c
    25:26:void <init>(int,byte[]) -> <init>
    28:36:void <init>(boolean,int,byte[]) -> <init>
    40:40:boolean isConstructed() -> isConstructed
    45:45:int getTag() -> getTag
    50:50:byte[] getData() -> getData
    57:58:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    63:72:boolean equals(java.lang.Object) -> equals
    77:77:int hashCode() -> hashCode
org.sandrob.bouncycastle.asn1.DERVisibleString -> org.sandrob.bouncycastle.asn1.DERVisibleString:
    java.lang.String string -> a
    22:37:org.sandrob.bouncycastle.asn1.DERVisibleString getInstance(java.lang.Object) -> getInstance
    53:53:org.sandrob.bouncycastle.asn1.DERVisibleString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    59:70:void <init>(byte[]) -> <init>
    75:79:void <init>(java.lang.String) -> <init>
    83:83:java.lang.String getString() -> getString
    88:88:java.lang.String toString() -> toString
    93:101:byte[] getOctets() -> getOctets
    108:109:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
    114:119:boolean asn1Equals(org.sandrob.bouncycastle.asn1.DERObject) -> asn1Equals
    124:124:int hashCode() -> hashCode
org.sandrob.bouncycastle.asn1.DefiniteLengthInputStream -> org.sandrob.bouncycastle.asn1.d:
    byte[] EMPTY_BYTES -> b
    int _originalLength -> c
    int _remaining -> d
    9:12:void <clinit>() -> <clinit>
    21:35:void <init>(java.io.InputStream,int) -> <init>
    39:39:int getRemaining() -> a
    45:62:int read() -> read
    68:86:int read(byte[],int,int) -> read
    92:103:byte[] toByteArray() -> b
org.sandrob.bouncycastle.asn1.InMemoryRepresentable -> org.sandrob.bouncycastle.asn1.InMemoryRepresentable:
    org.sandrob.bouncycastle.asn1.DERObject getLoadedObject() -> getLoadedObject
org.sandrob.bouncycastle.asn1.IndefiniteLengthInputStream -> org.sandrob.bouncycastle.asn1.e:
    int _b1 -> b
    int _b2 -> c
    boolean _eofReached -> d
    boolean _eofOn00 -> e
    12:32:void <init>(java.io.InputStream,int) -> <init>
    37:39:void setEofOn00(boolean) -> a
    43:48:boolean checkForEof() -> b
    55:85:int read(byte[],int,int) -> read
    91:109:int read() -> read
org.sandrob.bouncycastle.asn1.LazyDERConstructionEnumeration -> org.sandrob.bouncycastle.asn1.f:
    org.sandrob.bouncycastle.asn1.ASN1InputStream aIn -> a
    java.lang.Object nextObj -> b
    12:16:void <init>(byte[]) -> <init>
    20:20:boolean hasMoreElements() -> hasMoreElements
    25:29:java.lang.Object nextElement() -> nextElement
    36:40:java.lang.Object readObject() -> a
org.sandrob.bouncycastle.asn1.LazyDERSequence -> org.sandrob.bouncycastle.asn1.LazyDERSequence:
    byte[] encoded -> a
    boolean parsed -> b
    int size -> c
    10:18:void <init>(byte[]) -> <init>
    22:30:void parse() -> a
    34:39:org.sandrob.bouncycastle.asn1.DEREncodable getObjectAt(int) -> getObjectAt
    44:49:java.util.Enumeration getObjects() -> getObjects
    54:66:int size() -> size
    73:74:void encode(org.sandrob.bouncycastle.asn1.DEROutputStream) -> encode
org.sandrob.bouncycastle.asn1.LimitedInputStream -> org.sandrob.bouncycastle.asn1.g:
    java.io.InputStream _in -> a
    int _limit -> b
    11:17:void <init>(java.io.InputStream,int) -> <init>
    22:22:int getRemaining() -> a
    27:31:void setParentEofDetect(boolean) -> b
org.sandrob.bouncycastle.asn1.OIDTokenizer -> org.sandrob.bouncycastle.asn1.OIDTokenizer:
    java.lang.String oid -> a
    int index -> b
    14:19:void <init>(java.lang.String) -> <init>
    23:23:boolean hasMoreTokens() -> hasMoreTokens
    28:46:java.lang.String nextToken() -> nextToken
org.sandrob.bouncycastle.asn1.bc.BCObjectIdentifiers -> org.sandrob.bouncycastle.asn1.bc.BCObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc -> bc
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe -> bc_pbe
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha1 -> bc_pbe_sha1
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha256 -> bc_pbe_sha256
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha384 -> bc_pbe_sha384
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha512 -> bc_pbe_sha512
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha224 -> bc_pbe_sha224
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha1_pkcs5 -> bc_pbe_sha1_pkcs5
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha1_pkcs12 -> bc_pbe_sha1_pkcs12
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha256_pkcs5 -> bc_pbe_sha256_pkcs5
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha256_pkcs12 -> bc_pbe_sha256_pkcs12
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha1_pkcs12_aes128_cbc -> bc_pbe_sha1_pkcs12_aes128_cbc
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha1_pkcs12_aes192_cbc -> bc_pbe_sha1_pkcs12_aes192_cbc
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha1_pkcs12_aes256_cbc -> bc_pbe_sha1_pkcs12_aes256_cbc
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha256_pkcs12_aes128_cbc -> bc_pbe_sha256_pkcs12_aes128_cbc
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha256_pkcs12_aes192_cbc -> bc_pbe_sha256_pkcs12_aes192_cbc
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bc_pbe_sha256_pkcs12_aes256_cbc -> bc_pbe_sha256_pkcs12_aes256_cbc
    5:50:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.cmp.CAKeyUpdAnnContent -> org.sandrob.bouncycastle.asn1.cmp.CAKeyUpdAnnContent:
    org.sandrob.bouncycastle.asn1.cmp.CMPCertificate oldWithNew -> a
    org.sandrob.bouncycastle.asn1.cmp.CMPCertificate newWithOld -> b
    org.sandrob.bouncycastle.asn1.cmp.CMPCertificate newWithNew -> c
    16:21:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    25:35:org.sandrob.bouncycastle.asn1.cmp.CAKeyUpdAnnContent getInstance(java.lang.Object) -> getInstance
    40:40:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate getOldWithNew() -> getOldWithNew
    45:45:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate getNewWithOld() -> getNewWithOld
    50:50:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate getNewWithNew() -> getNewWithNew
    65:71:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CMPCertificate -> org.sandrob.bouncycastle.asn1.cmp.CMPCertificate:
    org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure x509v3PKCert -> a
    org.sandrob.bouncycastle.asn1.x509.AttributeCertificate x509v2AttrCert -> b
    22:25:void <init>(org.sandrob.bouncycastle.asn1.x509.AttributeCertificate) -> <init>
    27:35:void <init>(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure) -> <init>
    39:54:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate getInstance(java.lang.Object) -> getInstance
    59:59:boolean isX509v3PKCert() -> isX509v3PKCert
    64:64:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure getX509v3PKCert() -> getX509v3PKCert
    69:69:org.sandrob.bouncycastle.asn1.x509.AttributeCertificate getX509v2AttrCert() -> getX509v2AttrCert
    85:90:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CMPObjectIdentifiers -> org.sandrob.bouncycastle.asn1.cmp.CMPObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier passwordBasedMac -> passwordBasedMac
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier dhBasedMac -> dhBasedMac
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_caProtEncCert -> it_caProtEncCert
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_signKeyPairTypes -> it_signKeyPairTypes
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_encKeyPairTypes -> it_encKeyPairTypes
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_preferredSymAlg -> it_preferredSymAlg
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_caKeyUpdateInfo -> it_caKeyUpdateInfo
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_currentCRL -> it_currentCRL
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_unsupportedOIDs -> it_unsupportedOIDs
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_keyPairParamReq -> it_keyPairParamReq
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_keyPairParamRep -> it_keyPairParamRep
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_revPassphrase -> it_revPassphrase
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_implicitConfirm -> it_implicitConfirm
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_confirmWaitTime -> it_confirmWaitTime
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_origPKIMessage -> it_origPKIMessage
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier it_suppLangTags -> it_suppLangTags
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regCtrl_regToken -> regCtrl_regToken
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regCtrl_authenticator -> regCtrl_authenticator
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regCtrl_pkiPublicationInfo -> regCtrl_pkiPublicationInfo
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regCtrl_pkiArchiveOptions -> regCtrl_pkiArchiveOptions
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regCtrl_oldCertID -> regCtrl_oldCertID
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regCtrl_protocolEncrKey -> regCtrl_protocolEncrKey
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regCtrl_altCertTemplate -> regCtrl_altCertTemplate
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regInfo_utf8Pairs -> regInfo_utf8Pairs
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier regInfo_certReq -> regInfo_certReq
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier ct_encKeyWithID -> ct_encKeyWithID
    5:104:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.cmp.CRLAnnContent -> org.sandrob.bouncycastle.asn1.cmp.CRLAnnContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    13:16:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    20:30:org.sandrob.bouncycastle.asn1.cmp.CRLAnnContent getInstance(java.lang.Object) -> getInstance
    35:42:org.sandrob.bouncycastle.asn1.x509.CertificateList[] toCertificateListArray() -> toCertificateListArray
    53:53:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CertConfirmContent -> org.sandrob.bouncycastle.asn1.cmp.CertConfirmContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    12:15:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    19:29:org.sandrob.bouncycastle.asn1.cmp.CertConfirmContent getInstance(java.lang.Object) -> getInstance
    34:41:org.sandrob.bouncycastle.asn1.cmp.CertStatus[] toCertStatusArray() -> toCertStatusArray
    52:52:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CertOrEncCert -> org.sandrob.bouncycastle.asn1.cmp.CertOrEncCert:
    org.sandrob.bouncycastle.asn1.cmp.CMPCertificate certificate -> a
    org.sandrob.bouncycastle.asn1.crmf.EncryptedValue encryptedCert -> b
    17:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    35:45:org.sandrob.bouncycastle.asn1.cmp.CertOrEncCert getInstance(java.lang.Object) -> getInstance
    48:56:void <init>(org.sandrob.bouncycastle.asn1.cmp.CMPCertificate) -> <init>
    58:66:void <init>(org.sandrob.bouncycastle.asn1.crmf.EncryptedValue) -> <init>
    70:70:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate getCertificate() -> getCertificate
    75:75:org.sandrob.bouncycastle.asn1.crmf.EncryptedValue getEncryptedCert() -> getEncryptedCert
    89:94:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CertRepMessage -> org.sandrob.bouncycastle.asn1.cmp.CertRepMessage:
    org.sandrob.bouncycastle.asn1.ASN1Sequence caPubs -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence response -> b
    17:27:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    31:41:org.sandrob.bouncycastle.asn1.cmp.CertRepMessage getInstance(java.lang.Object) -> getInstance
    44:69:void <init>(org.sandrob.bouncycastle.asn1.cmp.CMPCertificate[],org.sandrob.bouncycastle.asn1.cmp.CertResponse[]) -> <init>
    73:85:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate[] getCaPubs() -> getCaPubs
    90:97:org.sandrob.bouncycastle.asn1.cmp.CertResponse[] getResponse() -> getResponse
    112:121:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CertResponse -> org.sandrob.bouncycastle.asn1.cmp.CertResponse:
    org.sandrob.bouncycastle.asn1.DERInteger certReqId -> a
    org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo status -> b
    org.sandrob.bouncycastle.asn1.cmp.CertifiedKeyPair certifiedKeyPair -> c
    org.sandrob.bouncycastle.asn1.ASN1OctetString rspInfo -> d
    20:45:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    49:59:org.sandrob.bouncycastle.asn1.cmp.CertResponse getInstance(java.lang.Object) -> getInstance
    66:67:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo) -> <init>
    69:87:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo,org.sandrob.bouncycastle.asn1.cmp.CertifiedKeyPair,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    91:91:org.sandrob.bouncycastle.asn1.DERInteger getCertReqId() -> getCertReqId
    96:96:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo getStatus() -> getStatus
    101:101:org.sandrob.bouncycastle.asn1.cmp.CertifiedKeyPair getCertifiedKeyPair() -> getCertifiedKeyPair
    122:137:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CertStatus -> org.sandrob.bouncycastle.asn1.cmp.CertStatus:
    org.sandrob.bouncycastle.asn1.ASN1OctetString certHash -> a
    org.sandrob.bouncycastle.asn1.DERInteger certReqId -> b
    org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo statusInfo -> c
    21:30:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    32:36:void <init>(byte[],java.math.BigInteger) -> <init>
    38:43:void <init>(byte[],java.math.BigInteger,org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo) -> <init>
    47:57:org.sandrob.bouncycastle.asn1.cmp.CertStatus getInstance(java.lang.Object) -> getInstance
    62:62:org.sandrob.bouncycastle.asn1.ASN1OctetString getCertHash() -> getCertHash
    67:67:org.sandrob.bouncycastle.asn1.DERInteger getCertReqId() -> getCertReqId
    72:72:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo getStatusInfo() -> getStatusInfo
    90:100:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.CertifiedKeyPair -> org.sandrob.bouncycastle.asn1.cmp.CertifiedKeyPair:
    org.sandrob.bouncycastle.asn1.cmp.CertOrEncCert certOrEncCert -> a
    org.sandrob.bouncycastle.asn1.crmf.EncryptedValue privateKey -> b
    org.sandrob.bouncycastle.asn1.crmf.PKIPublicationInfo publicationInfo -> c
    20:44:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    48:58:org.sandrob.bouncycastle.asn1.cmp.CertifiedKeyPair getInstance(java.lang.Object) -> getInstance
    64:65:void <init>(org.sandrob.bouncycastle.asn1.cmp.CertOrEncCert) -> <init>
    67:81:void <init>(org.sandrob.bouncycastle.asn1.cmp.CertOrEncCert,org.sandrob.bouncycastle.asn1.crmf.EncryptedValue,org.sandrob.bouncycastle.asn1.crmf.PKIPublicationInfo) -> <init>
    85:85:org.sandrob.bouncycastle.asn1.cmp.CertOrEncCert getCertOrEncCert() -> getCertOrEncCert
    90:90:org.sandrob.bouncycastle.asn1.crmf.EncryptedValue getPrivateKey() -> getPrivateKey
    95:95:org.sandrob.bouncycastle.asn1.crmf.PKIPublicationInfo getPublicationInfo() -> getPublicationInfo
    111:125:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.Challenge -> org.sandrob.bouncycastle.asn1.cmp.Challenge:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier owf -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString witness -> b
    org.sandrob.bouncycastle.asn1.ASN1OctetString challenge -> c
    18:29:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    33:43:org.sandrob.bouncycastle.asn1.cmp.Challenge getInstance(java.lang.Object) -> getInstance
    48:48:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getOwf() -> getOwf
    80:86:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    91:95:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.ErrorMsgContent -> org.sandrob.bouncycastle.asn1.cmp.ErrorMsgContent:
    org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo pkiStatusInfo -> a
    org.sandrob.bouncycastle.asn1.DERInteger errorCode -> b
    org.sandrob.bouncycastle.asn1.cmp.PKIFreeText errorDetails -> c
    19:38:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    42:52:org.sandrob.bouncycastle.asn1.cmp.ErrorMsgContent getInstance(java.lang.Object) -> getInstance
    57:58:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo) -> <init>
    60:73:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.cmp.PKIFreeText) -> <init>
    77:77:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo getPKIStatusInfo() -> getPKIStatusInfo
    82:82:org.sandrob.bouncycastle.asn1.DERInteger getErrorCode() -> getErrorCode
    87:87:org.sandrob.bouncycastle.asn1.cmp.PKIFreeText getErrorDetails() -> getErrorDetails
    104:110:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    115:119:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.GenMsgContent -> org.sandrob.bouncycastle.asn1.cmp.GenMsgContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    14:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    21:31:org.sandrob.bouncycastle.asn1.cmp.GenMsgContent getInstance(java.lang.Object) -> getInstance
    34:37:void <init>(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue) -> <init>
    39:47:void <init>(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue[]) -> <init>
    51:58:org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue[] toInfoTypeAndValueArray() -> toInfoTypeAndValueArray
    69:69:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.GenRepContent -> org.sandrob.bouncycastle.asn1.cmp.GenRepContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    14:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    21:31:org.sandrob.bouncycastle.asn1.cmp.GenRepContent getInstance(java.lang.Object) -> getInstance
    34:37:void <init>(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue) -> <init>
    39:47:void <init>(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue[]) -> <init>
    51:58:org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue[] toInfoTypeAndValueArray() -> toInfoTypeAndValueArray
    69:69:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue -> org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier infoType -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable infoValue -> b
    59:67:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    71:81:org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue getInstance(java.lang.Object) -> getInstance
    84:89:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    91:97:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    101:101:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getInfoType() -> getInfoType
    106:106:org.sandrob.bouncycastle.asn1.ASN1Encodable getInfoValue() -> getInfoValue
    120:129:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.KeyRecRepContent -> org.sandrob.bouncycastle.asn1.cmp.KeyRecRepContent:
    org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo status -> a
    org.sandrob.bouncycastle.asn1.cmp.CMPCertificate newSigCert -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence caCerts -> c
    org.sandrob.bouncycastle.asn1.ASN1Sequence keyPairHist -> d
    21:46:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    50:60:org.sandrob.bouncycastle.asn1.cmp.KeyRecRepContent getInstance(java.lang.Object) -> getInstance
    66:66:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo getStatus() -> getStatus
    71:71:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate getNewSigCert() -> getNewSigCert
    76:88:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate[] getCaCerts() -> getCaCerts
    93:105:org.sandrob.bouncycastle.asn1.cmp.CertifiedKeyPair[] getKeyPairHist() -> getKeyPairHist
    123:131:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    136:140:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.OOBCertHash -> org.sandrob.bouncycastle.asn1.cmp.OOBCertHash:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlg -> a
    org.sandrob.bouncycastle.asn1.crmf.CertId certId -> b
    org.sandrob.bouncycastle.asn1.DERBitString hashVal -> c
    21:41:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    45:55:org.sandrob.bouncycastle.asn1.cmp.OOBCertHash getInstance(java.lang.Object) -> getInstance
    60:60:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlg() -> getHashAlg
    65:65:org.sandrob.bouncycastle.asn1.crmf.CertId getCertId() -> getCertId
    82:89:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    94:98:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.PBMParameter -> org.sandrob.bouncycastle.asn1.cmp.PBMParameter:
    org.sandrob.bouncycastle.asn1.ASN1OctetString salt -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier owf -> b
    org.sandrob.bouncycastle.asn1.DERInteger iterationCount -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier mac -> d
    21:27:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    31:41:org.sandrob.bouncycastle.asn1.cmp.PBMParameter getInstance(java.lang.Object) -> getInstance
    50:52:void <init>(byte[],org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,int,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> <init>
    54:64:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> <init>
    68:68:org.sandrob.bouncycastle.asn1.ASN1OctetString getSalt() -> getSalt
    73:73:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getOwf() -> getOwf
    78:78:org.sandrob.bouncycastle.asn1.DERInteger getIterationCount() -> getIterationCount
    83:83:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getMac() -> getMac
    108:115:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PKIBody -> org.sandrob.bouncycastle.asn1.cmp.PKIBody:
    int TYPE_INIT_REQ -> TYPE_INIT_REQ
    int TYPE_INIT_REP -> TYPE_INIT_REP
    int TYPE_CERT_REQ -> TYPE_CERT_REQ
    int TYPE_CERT_REP -> TYPE_CERT_REP
    int TYPE_P10_CERT_REQ -> TYPE_P10_CERT_REQ
    int TYPE_POPO_CHALL -> TYPE_POPO_CHALL
    int TYPE_POPO_REP -> TYPE_POPO_REP
    int TYPE_KEY_UPDATE_REQ -> TYPE_KEY_UPDATE_REQ
    int TYPE_KEY_UPDATE_REP -> TYPE_KEY_UPDATE_REP
    int TYPE_KEY_RECOVERY_REQ -> TYPE_KEY_RECOVERY_REQ
    int TYPE_KEY_RECOVERY_REP -> TYPE_KEY_RECOVERY_REP
    int TYPE_REVOCATION_REQ -> TYPE_REVOCATION_REQ
    int TYPE_REVOCATION_REP -> TYPE_REVOCATION_REP
    int TYPE_CROSS_CERT_REQ -> TYPE_CROSS_CERT_REQ
    int TYPE_CROSS_CERT_REP -> TYPE_CROSS_CERT_REP
    int TYPE_CA_KEY_UPDATE_ANN -> TYPE_CA_KEY_UPDATE_ANN
    int TYPE_CERT_ANN -> TYPE_CERT_ANN
    int TYPE_REVOCATION_ANN -> TYPE_REVOCATION_ANN
    int TYPE_CRL_ANN -> TYPE_CRL_ANN
    int TYPE_CONFIRM -> TYPE_CONFIRM
    int TYPE_NESTED -> TYPE_NESTED
    int TYPE_GEN_MSG -> TYPE_GEN_MSG
    int TYPE_GEN_REP -> TYPE_GEN_REP
    int TYPE_ERROR -> TYPE_ERROR
    int TYPE_CERT_CONFIRM -> TYPE_CERT_CONFIRM
    int TYPE_POLL_REQ -> TYPE_POLL_REQ
    int TYPE_POLL_REP -> TYPE_POLL_REP
    int tagNo -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable body -> b
    48:58:org.sandrob.bouncycastle.asn1.cmp.PKIBody getInstance(java.lang.Object) -> getInstance
    61:65:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    72:78:void <init>(int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    84:141:org.sandrob.bouncycastle.asn1.ASN1Encodable getBodyForType(int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
    147:147:int getType() -> getType
    152:152:org.sandrob.bouncycastle.asn1.ASN1Encodable getContent() -> getContent
    191:191:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PKIConfirmContent -> org.sandrob.bouncycastle.asn1.cmp.PKIConfirmContent:
    org.sandrob.bouncycastle.asn1.ASN1Null val -> a
    13:16:void <init>(org.sandrob.bouncycastle.asn1.ASN1Null) -> <init>
    20:30:org.sandrob.bouncycastle.asn1.cmp.PKIConfirmContent getInstance(java.lang.Object) -> getInstance
    33:36:void <init>() -> <init>
    46:46:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PKIFailureInfo -> org.sandrob.bouncycastle.asn1.cmp.PKIFailureInfo:
    int badAlg -> badAlg
    int badMessageCheck -> badMessageCheck
    int badRequest -> badRequest
    int badTime -> badTime
    int badCertId -> badCertId
    int badDataFormat -> badDataFormat
    int wrongAuthority -> wrongAuthority
    int incorrectData -> incorrectData
    int missingTimeStamp -> missingTimeStamp
    int badPOP -> badPOP
    int certRevoked -> certRevoked
    int certConfirmed -> certConfirmed
    int wrongIntegrity -> wrongIntegrity
    int badRecipientNonce -> badRecipientNonce
    int timeNotAvailable -> timeNotAvailable
    int unacceptedPolicy -> unacceptedPolicy
    int unacceptedExtension -> unacceptedExtension
    int addInfoNotAvailable -> addInfoNotAvailable
    int badSenderNonce -> badSenderNonce
    int badCertTemplate -> badCertTemplate
    int signerNotTrusted -> signerNotTrusted
    int transactionIdInUse -> transactionIdInUse
    int unsupportedVersion -> unsupportedVersion
    int notAuthorized -> notAuthorized
    int systemUnavail -> systemUnavail
    int systemFailure -> systemFailure
    int duplicateCertReq -> duplicateCertReq
    int BAD_ALG -> BAD_ALG
    int BAD_MESSAGE_CHECK -> BAD_MESSAGE_CHECK
    int BAD_REQUEST -> BAD_REQUEST
    int BAD_TIME -> BAD_TIME
    int BAD_CERT_ID -> BAD_CERT_ID
    int BAD_DATA_FORMAT -> BAD_DATA_FORMAT
    int WRONG_AUTHORITY -> WRONG_AUTHORITY
    int INCORRECT_DATA -> INCORRECT_DATA
    int MISSING_TIME_STAMP -> MISSING_TIME_STAMP
    int BAD_POP -> BAD_POP
    int TIME_NOT_AVAILABLE -> TIME_NOT_AVAILABLE
    int UNACCEPTED_POLICY -> UNACCEPTED_POLICY
    int UNACCEPTED_EXTENSION -> UNACCEPTED_EXTENSION
    int ADD_INFO_NOT_AVAILABLE -> ADD_INFO_NOT_AVAILABLE
    int SYSTEM_FAILURE -> SYSTEM_FAILURE
    113:114:void <init>(int) -> <init>
    119:120:void <init>(org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    124:124:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.cmp.PKIFreeText -> org.sandrob.bouncycastle.asn1.cmp.PKIFreeText:
    org.sandrob.bouncycastle.asn1.ASN1Sequence strings -> a
    22:22:org.sandrob.bouncycastle.asn1.cmp.PKIFreeText getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    28:37:org.sandrob.bouncycastle.asn1.cmp.PKIFreeText getInstance(java.lang.Object) -> getInstance
    40:53:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    55:59:void <init>(org.sandrob.bouncycastle.asn1.DERUTF8String) -> <init>
    61:69:void <init>(org.sandrob.bouncycastle.asn1.DERUTF8String[]) -> <init>
    71:79:void <init>(java.lang.String[]) -> <init>
    88:88:int size() -> size
    100:100:org.sandrob.bouncycastle.asn1.DERUTF8String getStringAt(int) -> getStringAt
    110:110:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PKIHeader -> org.sandrob.bouncycastle.asn1.cmp.PKIHeader:
    org.sandrob.bouncycastle.asn1.x509.GeneralName NULL_NAME -> NULL_NAME
    int CMP_1999 -> CMP_1999
    int CMP_2000 -> CMP_2000
    org.sandrob.bouncycastle.asn1.DERInteger pvno -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName sender -> b
    org.sandrob.bouncycastle.asn1.x509.GeneralName recipient -> c
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime messageTime -> d
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier protectionAlg -> e
    org.sandrob.bouncycastle.asn1.ASN1OctetString senderKID -> f
    org.sandrob.bouncycastle.asn1.ASN1OctetString recipKID -> g
    org.sandrob.bouncycastle.asn1.ASN1OctetString transactionID -> h
    org.sandrob.bouncycastle.asn1.ASN1OctetString senderNonce -> i
    org.sandrob.bouncycastle.asn1.ASN1OctetString recipNonce -> j
    org.sandrob.bouncycastle.asn1.cmp.PKIFreeText freeText -> k
    org.sandrob.bouncycastle.asn1.ASN1Sequence generalInfo -> l
    19:25:void <clinit>() -> <clinit>
    43:88:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    92:102:org.sandrob.bouncycastle.asn1.cmp.PKIHeader getInstance(java.lang.Object) -> getInstance
    110:111:void <init>(int,org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    113:121:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    125:125:org.sandrob.bouncycastle.asn1.DERInteger getPvno() -> getPvno
    130:130:org.sandrob.bouncycastle.asn1.x509.GeneralName getSender() -> getSender
    135:135:org.sandrob.bouncycastle.asn1.x509.GeneralName getRecipient() -> getRecipient
    140:140:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getMessageTime() -> getMessageTime
    145:145:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getProtectionAlg() -> getProtectionAlg
    150:150:org.sandrob.bouncycastle.asn1.ASN1OctetString getSenderKID() -> getSenderKID
    155:155:org.sandrob.bouncycastle.asn1.ASN1OctetString getRecipKID() -> getRecipKID
    160:160:org.sandrob.bouncycastle.asn1.ASN1OctetString getTransactionID() -> getTransactionID
    165:165:org.sandrob.bouncycastle.asn1.ASN1OctetString getSenderNonce() -> getSenderNonce
    170:170:org.sandrob.bouncycastle.asn1.ASN1OctetString getRecipNonce() -> getRecipNonce
    175:175:org.sandrob.bouncycastle.asn1.cmp.PKIFreeText getFreeText() -> getFreeText
    180:188:org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue[] getGeneralInfo() -> getGeneralInfo
    231:246:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    251:255:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder -> org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder:
    org.sandrob.bouncycastle.asn1.DERInteger pvno -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName sender -> b
    org.sandrob.bouncycastle.asn1.x509.GeneralName recipient -> c
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime messageTime -> d
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier protectionAlg -> e
    org.sandrob.bouncycastle.asn1.ASN1OctetString senderKID -> f
    org.sandrob.bouncycastle.asn1.ASN1OctetString recipKID -> g
    org.sandrob.bouncycastle.asn1.ASN1OctetString transactionID -> h
    org.sandrob.bouncycastle.asn1.ASN1OctetString senderNonce -> i
    org.sandrob.bouncycastle.asn1.ASN1OctetString recipNonce -> j
    org.sandrob.bouncycastle.asn1.cmp.PKIFreeText freeText -> k
    org.sandrob.bouncycastle.asn1.ASN1Sequence generalInfo -> l
    35:36:void <init>(int,org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    38:46:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    50:52:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setMessageTime(org.sandrob.bouncycastle.asn1.DERGeneralizedTime) -> setMessageTime
    57:59:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setProtectionAlg(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setProtectionAlg
    64:64:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderKID(byte[]) -> setSenderKID
    69:71:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderKID(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> setSenderKID
    76:76:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipKID(byte[]) -> setRecipKID
    81:83:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipKID(org.sandrob.bouncycastle.asn1.DEROctetString) -> setRecipKID
    88:88:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setTransactionID(byte[]) -> setTransactionID
    93:95:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setTransactionID(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> setTransactionID
    100:100:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderNonce(byte[]) -> setSenderNonce
    105:107:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderNonce(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> setSenderNonce
    112:112:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipNonce(byte[]) -> setRecipNonce
    117:119:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipNonce(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> setRecipNonce
    124:126:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setFreeText(org.sandrob.bouncycastle.asn1.cmp.PKIFreeText) -> setFreeText
    131:131:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setGeneralInfo(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue) -> setGeneralInfo
    136:136:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setGeneralInfo(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue[]) -> setGeneralInfo
    141:143:org.sandrob.bouncycastle.asn1.cmp.PKIHeaderBuilder setGeneralInfo(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> setGeneralInfo
    149:149:org.sandrob.bouncycastle.asn1.ASN1Sequence makeGeneralInfoSeq(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue) -> a
    155:165:org.sandrob.bouncycastle.asn1.ASN1Sequence makeGeneralInfoSeq(org.sandrob.bouncycastle.asn1.cmp.InfoTypeAndValue[]) -> a
    208:233:org.sandrob.bouncycastle.asn1.cmp.PKIHeader build() -> build
    238:242:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.PKIMessage -> org.sandrob.bouncycastle.asn1.cmp.PKIMessage:
    org.sandrob.bouncycastle.asn1.cmp.PKIHeader header -> a
    org.sandrob.bouncycastle.asn1.cmp.PKIBody body -> b
    org.sandrob.bouncycastle.asn1.DERBitString protection -> c
    org.sandrob.bouncycastle.asn1.ASN1Sequence extraCerts -> d
    22:42:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:55:org.sandrob.bouncycastle.asn1.cmp.PKIMessage getInstance(java.lang.Object) -> getInstance
    66:82:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIHeader,org.sandrob.bouncycastle.asn1.cmp.PKIBody,org.sandrob.bouncycastle.asn1.DERBitString,org.sandrob.bouncycastle.asn1.cmp.CMPCertificate[]) -> <init>
    89:90:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIHeader,org.sandrob.bouncycastle.asn1.cmp.PKIBody,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    96:97:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIHeader,org.sandrob.bouncycastle.asn1.cmp.PKIBody) -> <init>
    101:101:org.sandrob.bouncycastle.asn1.cmp.PKIHeader getHeader() -> getHeader
    106:106:org.sandrob.bouncycastle.asn1.cmp.PKIBody getBody() -> getBody
    111:111:org.sandrob.bouncycastle.asn1.DERBitString getProtection() -> getProtection
    116:127:org.sandrob.bouncycastle.asn1.cmp.CMPCertificate[] getExtraCerts() -> getExtraCerts
    144:152:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    157:161:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.PKIMessages -> org.sandrob.bouncycastle.asn1.cmp.PKIMessages:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    14:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    21:31:org.sandrob.bouncycastle.asn1.cmp.PKIMessages getInstance(java.lang.Object) -> getInstance
    34:37:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIMessage) -> <init>
    39:47:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIMessage[]) -> <init>
    51:58:org.sandrob.bouncycastle.asn1.cmp.PKIMessage[] toPKIMessageArray() -> toPKIMessageArray
    69:69:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PKIStatus -> org.sandrob.bouncycastle.asn1.cmp.PKIStatus:
    int GRANTED -> GRANTED
    int GRANTED_WITH_MODS -> GRANTED_WITH_MODS
    int REJECTION -> REJECTION
    int WAITING -> WAITING
    int REVOCATION_WARNING -> REVOCATION_WARNING
    int REVOCATION_NOTIFICATION -> REVOCATION_NOTIFICATION
    int KEY_UPDATE_WARNING -> KEY_UPDATE_WARNING
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus granted -> granted
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus grantedWithMods -> grantedWithMods
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus rejection -> rejection
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus waiting -> waiting
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus revocationWarning -> revocationWarning
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus revocationNotification -> revocationNotification
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus keyUpdateWaiting -> keyUpdateWaiting
    org.sandrob.bouncycastle.asn1.DERInteger value -> a
    9:26:void <clinit>() -> <clinit>
    32:33:void <init>(int) -> <init>
    35:38:void <init>(org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    42:52:org.sandrob.bouncycastle.asn1.cmp.PKIStatus getInstance(java.lang.Object) -> getInstance
    57:57:java.math.BigInteger getValue() -> getValue
    62:62:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo -> org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo:
    org.sandrob.bouncycastle.asn1.DERInteger status -> a
    org.sandrob.bouncycastle.asn1.cmp.PKIFreeText statusString -> b
    org.sandrob.bouncycastle.asn1.DERBitString failInfo -> c
    25:25:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    31:40:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo getInstance(java.lang.Object) -> getInstance
    43:68:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    73:76:void <init>(int) -> <init>
    78:81:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIStatus) -> <init>
    87:93:void <init>(int,org.sandrob.bouncycastle.asn1.cmp.PKIFreeText) -> <init>
    95:101:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIStatus,org.sandrob.bouncycastle.asn1.cmp.PKIFreeText) -> <init>
    103:111:void <init>(int,org.sandrob.bouncycastle.asn1.cmp.PKIFreeText,org.sandrob.bouncycastle.asn1.cmp.PKIFailureInfo) -> <init>
    115:115:java.math.BigInteger getStatus() -> getStatus
    120:120:org.sandrob.bouncycastle.asn1.cmp.PKIFreeText getStatusString() -> getStatusString
    125:125:org.sandrob.bouncycastle.asn1.DERBitString getFailInfo() -> getFailInfo
    161:175:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.POPODecKeyChallContent -> org.sandrob.bouncycastle.asn1.cmp.POPODecKeyChallContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    12:15:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    19:29:org.sandrob.bouncycastle.asn1.cmp.POPODecKeyChallContent getInstance(java.lang.Object) -> getInstance
    34:41:org.sandrob.bouncycastle.asn1.cmp.Challenge[] toChallengeArray() -> toChallengeArray
    52:52:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.POPODecKeyRespContent -> org.sandrob.bouncycastle.asn1.cmp.POPODecKeyRespContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    13:16:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    20:30:org.sandrob.bouncycastle.asn1.cmp.POPODecKeyRespContent getInstance(java.lang.Object) -> getInstance
    35:42:org.sandrob.bouncycastle.asn1.DERInteger[] toDERIntegerArray() -> toDERIntegerArray
    53:53:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PollRepContent -> org.sandrob.bouncycastle.asn1.cmp.PollRepContent:
    org.sandrob.bouncycastle.asn1.DERInteger certReqId -> a
    org.sandrob.bouncycastle.asn1.DERInteger checkAfter -> b
    org.sandrob.bouncycastle.asn1.cmp.PKIFreeText reason -> c
    17:26:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    30:40:org.sandrob.bouncycastle.asn1.cmp.PollRepContent getInstance(java.lang.Object) -> getInstance
    45:45:org.sandrob.bouncycastle.asn1.DERInteger getCertReqId() -> getCertReqId
    50:50:org.sandrob.bouncycastle.asn1.DERInteger getCheckAfter() -> getCheckAfter
    55:55:org.sandrob.bouncycastle.asn1.cmp.PKIFreeText getReason() -> getReason
    70:80:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.PollReqContent -> org.sandrob.bouncycastle.asn1.cmp.PollReqContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    13:16:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    20:30:org.sandrob.bouncycastle.asn1.cmp.PollReqContent getInstance(java.lang.Object) -> getInstance
    35:42:org.sandrob.bouncycastle.asn1.DERInteger[][] getCertReqIds() -> getCertReqIds
    47:54:org.sandrob.bouncycastle.asn1.DERInteger[] seqenceToDERIntegerArray(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> a
    67:67:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.ProtectedPart -> org.sandrob.bouncycastle.asn1.cmp.ProtectedPart:
    org.sandrob.bouncycastle.asn1.cmp.PKIHeader header -> a
    org.sandrob.bouncycastle.asn1.cmp.PKIBody body -> b
    15:19:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    23:33:org.sandrob.bouncycastle.asn1.cmp.ProtectedPart getInstance(java.lang.Object) -> getInstance
    36:40:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIHeader,org.sandrob.bouncycastle.asn1.cmp.PKIBody) -> <init>
    44:44:org.sandrob.bouncycastle.asn1.cmp.PKIHeader getHeader() -> getHeader
    49:49:org.sandrob.bouncycastle.asn1.cmp.PKIBody getBody() -> getBody
    63:68:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.RevAnnContent -> org.sandrob.bouncycastle.asn1.cmp.RevAnnContent:
    org.sandrob.bouncycastle.asn1.cmp.PKIStatus status -> a
    org.sandrob.bouncycastle.asn1.crmf.CertId certId -> b
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime willBeRevokedAt -> c
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime badSinceDate -> d
    org.sandrob.bouncycastle.asn1.x509.X509Extensions crlDetails -> e
    21:32:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    36:46:org.sandrob.bouncycastle.asn1.cmp.RevAnnContent getInstance(java.lang.Object) -> getInstance
    51:51:org.sandrob.bouncycastle.asn1.cmp.PKIStatus getStatus() -> getStatus
    56:56:org.sandrob.bouncycastle.asn1.crmf.CertId getCertId() -> getCertId
    61:61:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getWillBeRevokedAt() -> getWillBeRevokedAt
    66:66:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getBadSinceDate() -> getBadSinceDate
    71:71:org.sandrob.bouncycastle.asn1.x509.X509Extensions getCrlDetails() -> getCrlDetails
    89:101:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.RevDetails -> org.sandrob.bouncycastle.asn1.cmp.RevDetails:
    org.sandrob.bouncycastle.asn1.crmf.CertTemplate certDetails -> a
    org.sandrob.bouncycastle.asn1.x509.X509Extensions crlEntryDetails -> b
    17:24:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    28:38:org.sandrob.bouncycastle.asn1.cmp.RevDetails getInstance(java.lang.Object) -> getInstance
    41:44:void <init>(org.sandrob.bouncycastle.asn1.crmf.CertTemplate) -> <init>
    46:49:void <init>(org.sandrob.bouncycastle.asn1.crmf.CertTemplate,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    53:53:org.sandrob.bouncycastle.asn1.crmf.CertTemplate getCertDetails() -> getCertDetails
    58:58:org.sandrob.bouncycastle.asn1.x509.X509Extensions getCrlEntryDetails() -> getCrlEntryDetails
    76:85:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cmp.RevRepContent -> org.sandrob.bouncycastle.asn1.cmp.RevRepContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence status -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence revCerts -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence crls -> c
    22:40:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    44:54:org.sandrob.bouncycastle.asn1.cmp.RevRepContent getInstance(java.lang.Object) -> getInstance
    59:66:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo[] getStatus() -> getStatus
    71:83:org.sandrob.bouncycastle.asn1.crmf.CertId[] getRevCerts() -> getRevCerts
    88:100:org.sandrob.bouncycastle.asn1.x509.CertificateList[] getCrls() -> getCrls
    119:126:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    131:135:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.cmp.RevRepContentBuilder -> org.sandrob.bouncycastle.asn1.cmp.RevRepContentBuilder:
    org.sandrob.bouncycastle.asn1.ASN1EncodableVector status -> a
    org.sandrob.bouncycastle.asn1.ASN1EncodableVector revCerts -> b
    org.sandrob.bouncycastle.asn1.ASN1EncodableVector crls -> c
    9:13:void <init>() -> <init>
    17:19:org.sandrob.bouncycastle.asn1.cmp.RevRepContentBuilder add(org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo) -> add
    24:31:org.sandrob.bouncycastle.asn1.cmp.RevRepContentBuilder add(org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo,org.sandrob.bouncycastle.asn1.crmf.CertId) -> add
    36:38:org.sandrob.bouncycastle.asn1.cmp.RevRepContentBuilder addCrl(org.sandrob.bouncycastle.asn1.x509.CertificateList) -> addCrl
    43:57:org.sandrob.bouncycastle.asn1.cmp.RevRepContent build() -> build
org.sandrob.bouncycastle.asn1.cmp.RevReqContent -> org.sandrob.bouncycastle.asn1.cmp.RevReqContent:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    14:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    21:31:org.sandrob.bouncycastle.asn1.cmp.RevReqContent getInstance(java.lang.Object) -> getInstance
    34:37:void <init>(org.sandrob.bouncycastle.asn1.cmp.RevDetails) -> <init>
    39:49:void <init>(org.sandrob.bouncycastle.asn1.cmp.RevDetails[]) -> <init>
    53:60:org.sandrob.bouncycastle.asn1.cmp.RevDetails[] toRevDetailsArray() -> toRevDetailsArray
    71:71:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.Attribute -> org.sandrob.bouncycastle.asn1.cms.Attribute:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier attrType -> a
    org.sandrob.bouncycastle.asn1.ASN1Set attrValues -> b
    26:36:org.sandrob.bouncycastle.asn1.cms.Attribute getInstance(java.lang.Object) -> getInstance
    39:44:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:52:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    56:56:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getAttrType() -> getAttrType
    61:61:org.sandrob.bouncycastle.asn1.ASN1Set getAttrValues() -> getAttrValues
    75:80:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.AttributeTable -> org.sandrob.bouncycastle.asn1.cms.AttributeTable:
    java.util.Hashtable attributes -> a
    16:22:void <init>(java.util.Hashtable) -> <init>
    16:33:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    16:44:void <init>(org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    49:50:void <init>(org.sandrob.bouncycastle.asn1.cms.Attributes) -> <init>
    56:82:void addAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.cms.Attribute) -> a
    93:100:org.sandrob.bouncycastle.asn1.cms.Attribute get(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> get
    113:131:org.sandrob.bouncycastle.asn1.ASN1EncodableVector getAll(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getAll
    136:152:int size() -> size
    157:157:java.util.Hashtable toHashtable() -> toHashtable
    162:184:org.sandrob.bouncycastle.asn1.ASN1EncodableVector toASN1EncodableVector() -> toASN1EncodableVector
    189:189:org.sandrob.bouncycastle.asn1.cms.Attributes toAttributes() -> toAttributes
    195:205:java.util.Hashtable copyTable(java.util.Hashtable) -> a
    217:221:org.sandrob.bouncycastle.asn1.cms.AttributeTable add(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> add
    226:230:org.sandrob.bouncycastle.asn1.cms.AttributeTable remove(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier) -> remove
org.sandrob.bouncycastle.asn1.cms.Attributes -> org.sandrob.bouncycastle.asn1.cms.Attributes:
    org.sandrob.bouncycastle.asn1.ASN1Set attributes -> a
    14:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    19:22:void <init>(org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    26:35:org.sandrob.bouncycastle.asn1.cms.Attributes getInstance(java.lang.Object) -> getInstance
    47:47:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.AuthEnvelopedData -> org.sandrob.bouncycastle.asn1.cms.AuthEnvelopedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.OriginatorInfo originatorInfo -> b
    org.sandrob.bouncycastle.asn1.ASN1Set recipientInfos -> c
    org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo -> d
    org.sandrob.bouncycastle.asn1.ASN1Set authAttrs -> e
    org.sandrob.bouncycastle.asn1.ASN1OctetString mac -> f
    org.sandrob.bouncycastle.asn1.ASN1Set unauthAttrs -> g
    25:52:void <init>(org.sandrob.bouncycastle.asn1.cms.OriginatorInfo,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    54:98:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    113:113:org.sandrob.bouncycastle.asn1.cms.AuthEnvelopedData getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    125:135:org.sandrob.bouncycastle.asn1.cms.AuthEnvelopedData getInstance(java.lang.Object) -> getInstance
    140:140:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    145:145:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    150:150:org.sandrob.bouncycastle.asn1.ASN1Set getRecipientInfos() -> getRecipientInfos
    155:155:org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo getAuthEncryptedContentInfo() -> getAuthEncryptedContentInfo
    160:160:org.sandrob.bouncycastle.asn1.ASN1Set getAuthAttrs() -> getAuthAttrs
    165:165:org.sandrob.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    170:170:org.sandrob.bouncycastle.asn1.ASN1Set getUnauthAttrs() -> getUnauthAttrs
    188:216:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.AuthEnvelopedDataParser -> org.sandrob.bouncycastle.asn1.cms.AuthEnvelopedDataParser:
    org.sandrob.bouncycastle.asn1.ASN1SequenceParser seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger version -> b
    org.sandrob.bouncycastle.asn1.DEREncodable nextObject -> c
    boolean originatorInfoCalled -> d
    34:41:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    45:45:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    51:65:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    71:83:org.sandrob.bouncycastle.asn1.ASN1SetParser getRecipientInfos() -> getRecipientInfos
    89:101:org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfoParser getAuthEncryptedContentInfo() -> getAuthEncryptedContentInfo
    107:123:org.sandrob.bouncycastle.asn1.ASN1SetParser getAuthAttrs() -> getAuthAttrs
    129:137:org.sandrob.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    143:155:org.sandrob.bouncycastle.asn1.ASN1SetParser getUnauthAttrs() -> getUnauthAttrs
org.sandrob.bouncycastle.asn1.cms.AuthenticatedData -> org.sandrob.bouncycastle.asn1.cms.AuthenticatedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.OriginatorInfo originatorInfo -> b
    org.sandrob.bouncycastle.asn1.ASN1Set recipientInfos -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier macAlgorithm -> d
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> e
    org.sandrob.bouncycastle.asn1.cms.ContentInfo encapsulatedContentInfo -> f
    org.sandrob.bouncycastle.asn1.ASN1Set authAttrs -> g
    org.sandrob.bouncycastle.asn1.ASN1OctetString mac -> h
    org.sandrob.bouncycastle.asn1.ASN1Set unauthAttrs -> i
    30:58:void <init>(org.sandrob.bouncycastle.asn1.cms.OriginatorInfo,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.cms.ContentInfo,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    60:102:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    117:117:org.sandrob.bouncycastle.asn1.cms.AuthenticatedData getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    129:139:org.sandrob.bouncycastle.asn1.cms.AuthenticatedData getInstance(java.lang.Object) -> getInstance
    144:144:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    149:149:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    154:154:org.sandrob.bouncycastle.asn1.ASN1Set getRecipientInfos() -> getRecipientInfos
    159:159:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getMacAlgorithm() -> getMacAlgorithm
    164:164:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    169:169:org.sandrob.bouncycastle.asn1.cms.ContentInfo getEncapsulatedContentInfo() -> getEncapsulatedContentInfo
    174:174:org.sandrob.bouncycastle.asn1.ASN1Set getAuthAttrs() -> getAuthAttrs
    179:179:org.sandrob.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    184:184:org.sandrob.bouncycastle.asn1.ASN1Set getUnauthAttrs() -> getUnauthAttrs
    210:241:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    246:290:int calculateVersion(org.sandrob.bouncycastle.asn1.cms.OriginatorInfo) -> calculateVersion
org.sandrob.bouncycastle.asn1.cms.AuthenticatedDataParser -> org.sandrob.bouncycastle.asn1.cms.AuthenticatedDataParser:
    org.sandrob.bouncycastle.asn1.ASN1SequenceParser seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger version -> b
    org.sandrob.bouncycastle.asn1.DEREncodable nextObject -> c
    boolean originatorInfoCalled -> d
    43:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    53:53:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    59:73:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    79:91:org.sandrob.bouncycastle.asn1.ASN1SetParser getRecipientInfos() -> getRecipientInfos
    97:109:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getMacAlgorithm() -> getMacAlgorithm
    115:127:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    133:145:org.sandrob.bouncycastle.asn1.cms.ContentInfoParser getEnapsulatedContentInfo() -> getEnapsulatedContentInfo
    151:163:org.sandrob.bouncycastle.asn1.ASN1SetParser getAuthAttrs() -> getAuthAttrs
    169:177:org.sandrob.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    183:195:org.sandrob.bouncycastle.asn1.ASN1SetParser getUnauthAttrs() -> getUnauthAttrs
org.sandrob.bouncycastle.asn1.cms.CMSAttributes -> org.sandrob.bouncycastle.asn1.cms.CMSAttributes:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> contentType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier messageDigest -> messageDigest
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier signingTime -> signingTime
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier counterSignature -> counterSignature
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier contentHint -> contentHint
    6:12:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.cms.CMSObjectIdentifiers -> org.sandrob.bouncycastle.asn1.cms.CMSObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier data -> data
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier signedData -> signedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier envelopedData -> envelopedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier signedAndEnvelopedData -> signedAndEnvelopedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier digestedData -> digestedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier encryptedData -> encryptedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier authenticatedData -> authenticatedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier compressedData -> compressedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier authEnvelopedData -> authEnvelopedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier timestampedData -> timestampedData
    6:17:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.cms.CompressedData -> org.sandrob.bouncycastle.asn1.cms.CompressedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier compressionAlgorithm -> b
    org.sandrob.bouncycastle.asn1.cms.ContentInfo encapContentInfo -> c
    29:36:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.cms.ContentInfo) -> <init>
    38:45:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    60:60:org.sandrob.bouncycastle.asn1.cms.CompressedData getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    72:82:org.sandrob.bouncycastle.asn1.cms.CompressedData getInstance(java.lang.Object) -> getInstance
    87:87:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    92:92:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getCompressionAlgorithmIdentifier() -> getCompressionAlgorithmIdentifier
    97:97:org.sandrob.bouncycastle.asn1.cms.ContentInfo getEncapContentInfo() -> getEncapContentInfo
    102:108:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.CompressedDataParser -> org.sandrob.bouncycastle.asn1.cms.CompressedDataParser:
    org.sandrob.bouncycastle.asn1.DERInteger _version -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier _compressionAlgorithm -> b
    org.sandrob.bouncycastle.asn1.cms.ContentInfoParser _encapContentInfo -> c
    25:32:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    36:36:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    41:41:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getCompressionAlgorithmIdentifier() -> getCompressionAlgorithmIdentifier
    46:46:org.sandrob.bouncycastle.asn1.cms.ContentInfoParser getEncapContentInfo() -> getEncapContentInfo
org.sandrob.bouncycastle.asn1.cms.ContentInfo -> org.sandrob.bouncycastle.asn1.cms.ContentInfo:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> a
    org.sandrob.bouncycastle.asn1.DEREncodable content -> b
    23:32:org.sandrob.bouncycastle.asn1.cms.ContentInfo getInstance(java.lang.Object) -> getInstance
    35:55:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    57:63:void <init>(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    67:67:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    72:72:org.sandrob.bouncycastle.asn1.DEREncodable getContent() -> getContent
    86:95:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.ContentInfoParser -> org.sandrob.bouncycastle.asn1.cms.ContentInfoParser:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> a
    org.sandrob.bouncycastle.asn1.ASN1TaggedObjectParser content -> b
    24:30:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    34:34:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    41:46:org.sandrob.bouncycastle.asn1.DEREncodable getContent(int) -> getContent
org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo -> org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier contentType -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier contentEncryptionAlgorithm -> b
    org.sandrob.bouncycastle.asn1.ASN1OctetString encryptedContent -> c
    21:29:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    31:42:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    53:64:org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo getInstance(java.lang.Object) -> getInstance
    69:69:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getContentType() -> getContentType
    74:74:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getContentEncryptionAlgorithm() -> getContentEncryptionAlgorithm
    79:79:org.sandrob.bouncycastle.asn1.ASN1OctetString getEncryptedContent() -> getEncryptedContent
    94:104:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfoParser -> org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfoParser:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier _contentType -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier _contentEncryptionAlgorithm -> b
    org.sandrob.bouncycastle.asn1.ASN1TaggedObjectParser _encryptedContent -> c
    26:33:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    37:37:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getContentType() -> getContentType
    42:42:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getContentEncryptionAlgorithm() -> getContentEncryptionAlgorithm
    49:49:org.sandrob.bouncycastle.asn1.DEREncodable getEncryptedContent(int) -> getEncryptedContent
org.sandrob.bouncycastle.asn1.cms.EncryptedData -> org.sandrob.bouncycastle.asn1.cms.EncryptedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> b
    org.sandrob.bouncycastle.asn1.ASN1Set unprotectedAttrs -> c
    21:31:org.sandrob.bouncycastle.asn1.cms.EncryptedData getInstance(java.lang.Object) -> getInstance
    36:37:void <init>(org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo) -> <init>
    39:44:void <init>(org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    46:55:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    59:59:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    64:64:org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo() -> getEncryptedContentInfo
    69:69:org.sandrob.bouncycastle.asn1.ASN1Set getUnprotectedAttrs() -> getUnprotectedAttrs
    83:92:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.EnvelopedData -> org.sandrob.bouncycastle.asn1.cms.EnvelopedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.OriginatorInfo originatorInfo -> b
    org.sandrob.bouncycastle.asn1.ASN1Set recipientInfos -> c
    org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> d
    org.sandrob.bouncycastle.asn1.ASN1Set unprotectedAttrs -> e
    24:56:void <init>(org.sandrob.bouncycastle.asn1.cms.OriginatorInfo,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    58:81:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    96:96:org.sandrob.bouncycastle.asn1.cms.EnvelopedData getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    108:118:org.sandrob.bouncycastle.asn1.cms.EnvelopedData getInstance(java.lang.Object) -> getInstance
    123:123:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    128:128:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    133:133:org.sandrob.bouncycastle.asn1.ASN1Set getRecipientInfos() -> getRecipientInfos
    138:138:org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo() -> getEncryptedContentInfo
    143:143:org.sandrob.bouncycastle.asn1.ASN1Set getUnprotectedAttrs() -> getUnprotectedAttrs
    160:177:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.EnvelopedDataParser -> org.sandrob.bouncycastle.asn1.cms.EnvelopedDataParser:
    org.sandrob.bouncycastle.asn1.ASN1SequenceParser _seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger _version -> b
    org.sandrob.bouncycastle.asn1.DEREncodable _nextObject -> c
    boolean _originatorInfoCalled -> d
    30:36:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    40:40:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    46:60:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    66:78:org.sandrob.bouncycastle.asn1.ASN1SetParser getRecipientInfos() -> getRecipientInfos
    84:97:org.sandrob.bouncycastle.asn1.cms.EncryptedContentInfoParser getEncryptedContentInfo() -> getEncryptedContentInfo
    103:116:org.sandrob.bouncycastle.asn1.ASN1SetParser getUnprotectedAttrs() -> getUnprotectedAttrs
org.sandrob.bouncycastle.asn1.cms.Evidence -> org.sandrob.bouncycastle.asn1.cms.Evidence:
    org.sandrob.bouncycastle.asn1.cms.TimeStampTokenEvidence tstEvidence -> a
    15:18:void <init>(org.sandrob.bouncycastle.asn1.cms.TimeStampTokenEvidence) -> <init>
    20:26:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    30:39:org.sandrob.bouncycastle.asn1.cms.Evidence getInstance(java.lang.Object) -> getInstance
    44:44:org.sandrob.bouncycastle.asn1.cms.TimeStampTokenEvidence getTstEvidence() -> getTstEvidence
    49:54:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber -> org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber:
    org.sandrob.bouncycastle.asn1.x500.X500Name name -> a
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> b
    23:33:org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber getInstance(java.lang.Object) -> getInstance
    36:41:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    43:49:void <init>(org.sandrob.bouncycastle.asn1.x500.X500Name,java.math.BigInteger) -> <init>
    54:60:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Name,java.math.BigInteger) -> <init>
    65:71:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Name,org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    75:75:org.sandrob.bouncycastle.asn1.x500.X500Name getName() -> getName
    80:80:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    85:90:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.KEKIdentifier -> org.sandrob.bouncycastle.asn1.cms.KEKIdentifier:
    org.sandrob.bouncycastle.asn1.ASN1OctetString keyIdentifier -> a
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime date -> b
    org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute other -> c
    20:28:void <init>(byte[],org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute) -> <init>
    30:56:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    71:71:org.sandrob.bouncycastle.asn1.cms.KEKIdentifier getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    83:93:org.sandrob.bouncycastle.asn1.cms.KEKIdentifier getInstance(java.lang.Object) -> getInstance
    98:98:org.sandrob.bouncycastle.asn1.ASN1OctetString getKeyIdentifier() -> getKeyIdentifier
    103:103:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getDate() -> getDate
    108:108:org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute getOther() -> getOther
    123:137:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.KEKRecipientInfo -> org.sandrob.bouncycastle.asn1.cms.KEKRecipientInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.KEKIdentifier kekid -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.sandrob.bouncycastle.asn1.ASN1OctetString encryptedKey -> d
    21:30:void <init>(org.sandrob.bouncycastle.asn1.cms.KEKIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    32:39:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    54:54:org.sandrob.bouncycastle.asn1.cms.KEKRecipientInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    66:76:org.sandrob.bouncycastle.asn1.cms.KEKRecipientInfo getInstance(java.lang.Object) -> getInstance
    81:81:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    86:86:org.sandrob.bouncycastle.asn1.cms.KEKIdentifier getKekid() -> getKekid
    91:91:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    96:96:org.sandrob.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    112:119:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier -> org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier:
    org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber issuerSerial -> a
    org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier rKeyID -> b
    30:30:org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    42:58:org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier getInstance(java.lang.Object) -> getInstance
    61:66:void <init>(org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber) -> <init>
    68:73:void <init>(org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier) -> <init>
    77:77:org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber getIssuerAndSerialNumber() -> getIssuerAndSerialNumber
    82:82:org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier getRKeyID() -> getRKeyID
    96:101:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientInfo -> org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.OriginatorIdentifierOrKey originator -> b
    org.sandrob.bouncycastle.asn1.ASN1OctetString ukm -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> d
    org.sandrob.bouncycastle.asn1.ASN1Sequence recipientEncryptedKeys -> e
    23:34:void <init>(org.sandrob.bouncycastle.asn1.cms.OriginatorIdentifierOrKey,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    36:55:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    70:70:org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    82:93:org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientInfo getInstance(java.lang.Object) -> getInstance
    99:99:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    104:104:org.sandrob.bouncycastle.asn1.cms.OriginatorIdentifierOrKey getOriginator() -> getOriginator
    109:109:org.sandrob.bouncycastle.asn1.ASN1OctetString getUserKeyingMaterial() -> getUserKeyingMaterial
    114:114:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    119:119:org.sandrob.bouncycastle.asn1.ASN1Sequence getRecipientEncryptedKeys() -> getRecipientEncryptedKeys
    138:151:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.KeyTransRecipientInfo -> org.sandrob.bouncycastle.asn1.cms.KeyTransRecipientInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.RecipientIdentifier rid -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.sandrob.bouncycastle.asn1.ASN1OctetString encryptedKey -> d
    21:38:void <init>(org.sandrob.bouncycastle.asn1.cms.RecipientIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    40:47:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    58:69:org.sandrob.bouncycastle.asn1.cms.KeyTransRecipientInfo getInstance(java.lang.Object) -> getInstance
    74:74:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    79:79:org.sandrob.bouncycastle.asn1.cms.RecipientIdentifier getRecipientIdentifier() -> getRecipientIdentifier
    84:84:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    89:89:org.sandrob.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    105:112:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.MetaData -> org.sandrob.bouncycastle.asn1.cms.MetaData:
    org.sandrob.bouncycastle.asn1.DERBoolean hashProtected -> a
    org.sandrob.bouncycastle.asn1.DERUTF8String fileName -> b
    org.sandrob.bouncycastle.asn1.DERIA5String mediaType -> c
    org.sandrob.bouncycastle.asn1.cms.Attributes otherMetaData -> d
    20:30:void <init>(org.sandrob.bouncycastle.asn1.DERBoolean,org.sandrob.bouncycastle.asn1.DERUTF8String,org.sandrob.bouncycastle.asn1.DERIA5String,org.sandrob.bouncycastle.asn1.cms.Attributes) -> <init>
    32:50:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    54:63:org.sandrob.bouncycastle.asn1.cms.MetaData getInstance(java.lang.Object) -> getInstance
    79:98:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    103:103:boolean isHashProtected() -> isHashProtected
    108:108:org.sandrob.bouncycastle.asn1.DERUTF8String getFileName() -> getFileName
    113:113:org.sandrob.bouncycastle.asn1.DERIA5String getMediaType() -> getMediaType
    118:118:org.sandrob.bouncycastle.asn1.cms.Attributes getOtherMetaData() -> getOtherMetaData
org.sandrob.bouncycastle.asn1.cms.OriginatorIdentifierOrKey -> org.sandrob.bouncycastle.asn1.cms.OriginatorIdentifierOrKey:
    org.sandrob.bouncycastle.asn1.DEREncodable id -> a
    18:22:void <init>(org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber) -> <init>
    30:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    33:37:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier) -> <init>
    39:43:void <init>(org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey) -> <init>
    48:52:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    67:73:org.sandrob.bouncycastle.asn1.cms.OriginatorIdentifierOrKey getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    85:111:org.sandrob.bouncycastle.asn1.cms.OriginatorIdentifierOrKey getInstance(java.lang.Object) -> getInstance
    116:116:org.sandrob.bouncycastle.asn1.DEREncodable getId() -> getId
    121:126:org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber getIssuerAndSerialNumber() -> getIssuerAndSerialNumber
    131:136:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier getSubjectKeyIdentifier() -> getSubjectKeyIdentifier
    141:146:org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey getOriginatorKey() -> getOriginatorKey
    163:163:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.OriginatorInfo -> org.sandrob.bouncycastle.asn1.cms.OriginatorInfo:
    org.sandrob.bouncycastle.asn1.ASN1Set certs -> a
    org.sandrob.bouncycastle.asn1.ASN1Set crls -> b
    18:24:void <init>(org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    26:54:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    69:69:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    81:91:org.sandrob.bouncycastle.asn1.cms.OriginatorInfo getInstance(java.lang.Object) -> getInstance
    96:96:org.sandrob.bouncycastle.asn1.ASN1Set getCertificates() -> getCertificates
    101:101:org.sandrob.bouncycastle.asn1.ASN1Set getCRLs() -> getCRLs
    115:127:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey -> org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algorithm -> a
    org.sandrob.bouncycastle.asn1.DERBitString publicKey -> b
    19:25:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    27:32:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    47:47:org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    59:69:org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey getInstance(java.lang.Object) -> getInstance
    74:74:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithm() -> getAlgorithm
    79:79:org.sandrob.bouncycastle.asn1.DERBitString getPublicKey() -> getPublicKey
    93:98:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute -> org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier keyAttrId -> a
    org.sandrob.bouncycastle.asn1.DEREncodable keyAttr -> b
    26:36:org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute getInstance(java.lang.Object) -> getInstance
    39:44:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:52:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    56:56:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getKeyAttrId() -> getKeyAttrId
    61:61:org.sandrob.bouncycastle.asn1.DEREncodable getKeyAttr() -> getKeyAttr
    75:80:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.OtherRecipientInfo -> org.sandrob.bouncycastle.asn1.cms.OtherRecipientInfo:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier oriType -> a
    org.sandrob.bouncycastle.asn1.DEREncodable oriValue -> b
    18:24:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    26:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:46:org.sandrob.bouncycastle.asn1.cms.OtherRecipientInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    58:68:org.sandrob.bouncycastle.asn1.cms.OtherRecipientInfo getInstance(java.lang.Object) -> getInstance
    73:73:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getType() -> getType
    78:78:org.sandrob.bouncycastle.asn1.DEREncodable getValue() -> getValue
    91:96:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.PasswordRecipientInfo -> org.sandrob.bouncycastle.asn1.cms.PasswordRecipientInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.sandrob.bouncycastle.asn1.ASN1OctetString encryptedKey -> d
    22:29:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    31:40:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    42:57:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    72:72:org.sandrob.bouncycastle.asn1.cms.PasswordRecipientInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    84:94:org.sandrob.bouncycastle.asn1.cms.PasswordRecipientInfo getInstance(java.lang.Object) -> getInstance
    99:99:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    104:104:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyDerivationAlgorithm() -> getKeyDerivationAlgorithm
    109:109:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    114:114:org.sandrob.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    130:141:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.RecipientEncryptedKey -> org.sandrob.bouncycastle.asn1.cms.RecipientEncryptedKey:
    org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier identifier -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString encryptedKey -> b
    18:23:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    38:38:org.sandrob.bouncycastle.asn1.cms.RecipientEncryptedKey getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    50:60:org.sandrob.bouncycastle.asn1.cms.RecipientEncryptedKey getInstance(java.lang.Object) -> getInstance
    63:69:void <init>(org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    73:73:org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier getIdentifier() -> getIdentifier
    78:78:org.sandrob.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    92:97:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.RecipientIdentifier -> org.sandrob.bouncycastle.asn1.cms.RecipientIdentifier:
    org.sandrob.bouncycastle.asn1.DEREncodable id -> a
    17:21:void <init>(org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber) -> <init>
    23:27:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    29:33:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    44:65:org.sandrob.bouncycastle.asn1.cms.RecipientIdentifier getInstance(java.lang.Object) -> getInstance
    70:70:boolean isTagged() -> isTagged
    75:80:org.sandrob.bouncycastle.asn1.DEREncodable getId() -> getId
    96:96:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.RecipientInfo -> org.sandrob.bouncycastle.asn1.cms.RecipientInfo:
    org.sandrob.bouncycastle.asn1.DEREncodable info -> a
    18:22:void <init>(org.sandrob.bouncycastle.asn1.cms.KeyTransRecipientInfo) -> <init>
    24:28:void <init>(org.sandrob.bouncycastle.asn1.cms.KeyAgreeRecipientInfo) -> <init>
    30:34:void <init>(org.sandrob.bouncycastle.asn1.cms.KEKRecipientInfo) -> <init>
    36:40:void <init>(org.sandrob.bouncycastle.asn1.cms.PasswordRecipientInfo) -> <init>
    42:46:void <init>(org.sandrob.bouncycastle.asn1.cms.OtherRecipientInfo) -> <init>
    48:52:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    57:71:org.sandrob.bouncycastle.asn1.cms.RecipientInfo getInstance(java.lang.Object) -> getInstance
    76:95:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    100:100:boolean isTagged() -> isTagged
    105:124:org.sandrob.bouncycastle.asn1.DEREncodable getInfo() -> getInfo
    129:135:org.sandrob.bouncycastle.asn1.cms.KEKRecipientInfo getKEKInfo(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> a
    152:152:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier -> org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier:
    org.sandrob.bouncycastle.asn1.ASN1OctetString subjectKeyIdentifier -> a
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime date -> b
    org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute other -> c
    20:28:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute) -> <init>
    30:38:void <init>(byte[],org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute) -> <init>
    43:44:void <init>(byte[]) -> <init>
    46:73:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    86:86:org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    97:107:org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier getInstance(java.lang.Object) -> getInstance
    112:112:org.sandrob.bouncycastle.asn1.ASN1OctetString getSubjectKeyIdentifier() -> getSubjectKeyIdentifier
    117:117:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getDate() -> getDate
    122:122:org.sandrob.bouncycastle.asn1.cms.OtherKeyAttribute getOtherKeyAttribute() -> getOtherKeyAttribute
    140:154:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.SignedData -> org.sandrob.bouncycastle.asn1.cms.SignedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.ASN1Set digestAlgorithms -> b
    org.sandrob.bouncycastle.asn1.cms.ContentInfo contentInfo -> c
    org.sandrob.bouncycastle.asn1.ASN1Set certificates -> d
    org.sandrob.bouncycastle.asn1.ASN1Set crls -> e
    org.sandrob.bouncycastle.asn1.ASN1Set signerInfos -> f
    boolean certsBer -> g
    boolean crlsBer -> h
    36:45:org.sandrob.bouncycastle.asn1.cms.SignedData getInstance(java.lang.Object) -> getInstance
    48:63:void <init>(org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.cms.ContentInfo,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    90:162:org.sandrob.bouncycastle.asn1.DERInteger calculateVersion(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set) -> a
    167:177:boolean checkForVersion3(org.sandrob.bouncycastle.asn1.ASN1Set) -> a
    180:221:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    225:225:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    230:230:org.sandrob.bouncycastle.asn1.ASN1Set getDigestAlgorithms() -> getDigestAlgorithms
    235:235:org.sandrob.bouncycastle.asn1.cms.ContentInfo getEncapContentInfo() -> getEncapContentInfo
    240:240:org.sandrob.bouncycastle.asn1.ASN1Set getCertificates() -> getCertificates
    245:245:org.sandrob.bouncycastle.asn1.ASN1Set getCRLs() -> getCRLs
    250:250:org.sandrob.bouncycastle.asn1.ASN1Set getSignerInfos() -> getSignerInfos
    268:300:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.SignedDataParser -> org.sandrob.bouncycastle.asn1.cms.SignedDataParser:
    org.sandrob.bouncycastle.asn1.ASN1SequenceParser _seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger _version -> b
    java.lang.Object _nextObject -> c
    boolean _certsCalled -> d
    boolean _crlsCalled -> e
    37:46:org.sandrob.bouncycastle.asn1.cms.SignedDataParser getInstance(java.lang.Object) -> getInstance
    49:55:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    59:59:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    65:72:org.sandrob.bouncycastle.asn1.ASN1SetParser getDigestAlgorithms() -> getDigestAlgorithms
    78:78:org.sandrob.bouncycastle.asn1.cms.ContentInfoParser getEncapContentInfo() -> getEncapContentInfo
    84:95:org.sandrob.bouncycastle.asn1.ASN1SetParser getCertificates() -> getCertificates
    101:121:org.sandrob.bouncycastle.asn1.ASN1SetParser getCrls() -> getCrls
    127:137:org.sandrob.bouncycastle.asn1.ASN1SetParser getSignerInfos() -> getSignerInfos
org.sandrob.bouncycastle.asn1.cms.SignerIdentifier -> org.sandrob.bouncycastle.asn1.cms.SignerIdentifier:
    org.sandrob.bouncycastle.asn1.DEREncodable id -> a
    17:21:void <init>(org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber) -> <init>
    23:27:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    29:33:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    44:65:org.sandrob.bouncycastle.asn1.cms.SignerIdentifier getInstance(java.lang.Object) -> getInstance
    70:70:boolean isTagged() -> isTagged
    75:80:org.sandrob.bouncycastle.asn1.DEREncodable getId() -> getId
    96:96:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.SignerInfo -> org.sandrob.bouncycastle.asn1.cms.SignerInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.cms.SignerIdentifier sid -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier digAlgorithm -> c
    org.sandrob.bouncycastle.asn1.ASN1Set authenticatedAttributes -> d
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier digEncryptionAlgorithm -> e
    org.sandrob.bouncycastle.asn1.ASN1OctetString encryptedDigest -> f
    org.sandrob.bouncycastle.asn1.ASN1Set unauthenticatedAttributes -> g
    33:42:org.sandrob.bouncycastle.asn1.cms.SignerInfo getInstance(java.lang.Object) -> getInstance
    45:68:void <init>(org.sandrob.bouncycastle.asn1.cms.SignerIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    70:103:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    107:107:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    112:112:org.sandrob.bouncycastle.asn1.cms.SignerIdentifier getSID() -> getSID
    117:117:org.sandrob.bouncycastle.asn1.ASN1Set getAuthenticatedAttributes() -> getAuthenticatedAttributes
    122:122:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    127:127:org.sandrob.bouncycastle.asn1.ASN1OctetString getEncryptedDigest() -> getEncryptedDigest
    132:132:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestEncryptionAlgorithm() -> getDigestEncryptionAlgorithm
    137:137:org.sandrob.bouncycastle.asn1.ASN1Set getUnauthenticatedAttributes() -> getUnauthenticatedAttributes
    162:181:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.Time -> org.sandrob.bouncycastle.asn1.cms.Time:
    org.sandrob.bouncycastle.asn1.DERObject time -> a
    25:25:org.sandrob.bouncycastle.asn1.cms.Time getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    28:38:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    45:64:void <init>(java.util.Date) -> <init>
    69:82:org.sandrob.bouncycastle.asn1.cms.Time getInstance(java.lang.Object) -> getInstance
    87:93:java.lang.String getTime() -> getTime
    101:112:java.util.Date getDate() -> getDate
    126:126:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.TimeStampAndCRL -> org.sandrob.bouncycastle.asn1.cms.TimeStampAndCRL:
    org.sandrob.bouncycastle.asn1.cms.ContentInfo timeStamp -> a
    org.sandrob.bouncycastle.asn1.x509.CertificateList crl -> b
    16:19:void <init>(org.sandrob.bouncycastle.asn1.cms.ContentInfo) -> <init>
    21:28:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    32:41:org.sandrob.bouncycastle.asn1.cms.TimeStampAndCRL getInstance(java.lang.Object) -> getInstance
    46:46:org.sandrob.bouncycastle.asn1.cms.ContentInfo getTimeStampToken() -> getTimeStampToken
    51:51:org.sandrob.bouncycastle.asn1.x509.CertificateList getCertificateList() -> getCertificateList
    65:74:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.TimeStampTokenEvidence -> org.sandrob.bouncycastle.asn1.cms.TimeStampTokenEvidence:
    org.sandrob.bouncycastle.asn1.cms.TimeStampAndCRL[] timeStampAndCRLs -> a
    17:20:void <init>(org.sandrob.bouncycastle.asn1.cms.TimeStampAndCRL[]) -> <init>
    22:27:void <init>(org.sandrob.bouncycastle.asn1.cms.TimeStampAndCRL) -> <init>
    29:39:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    43:43:org.sandrob.bouncycastle.asn1.cms.TimeStampTokenEvidence getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    48:57:org.sandrob.bouncycastle.asn1.cms.TimeStampTokenEvidence getInstance(java.lang.Object) -> getInstance
    62:62:org.sandrob.bouncycastle.asn1.cms.TimeStampAndCRL[] toTimeStampAndCRLArray() -> toTimeStampAndCRLArray
    74:81:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.TimeStampedData -> org.sandrob.bouncycastle.asn1.cms.TimeStampedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.DERIA5String dataUri -> b
    org.sandrob.bouncycastle.asn1.cms.MetaData metaData -> c
    org.sandrob.bouncycastle.asn1.ASN1OctetString content -> d
    org.sandrob.bouncycastle.asn1.cms.Evidence temporalEvidence -> e
    21:28:void <init>(org.sandrob.bouncycastle.asn1.DERIA5String,org.sandrob.bouncycastle.asn1.cms.MetaData,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.cms.Evidence) -> <init>
    30:48:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    52:61:org.sandrob.bouncycastle.asn1.cms.TimeStampedData getInstance(java.lang.Object) -> getInstance
    66:66:org.sandrob.bouncycastle.asn1.DERIA5String getDataUri() -> getDataUri
    71:71:org.sandrob.bouncycastle.asn1.cms.MetaData getMetaData() -> getMetaData
    76:76:org.sandrob.bouncycastle.asn1.ASN1OctetString getContent() -> getContent
    81:81:org.sandrob.bouncycastle.asn1.cms.Evidence getTemporalEvidence() -> getTemporalEvidence
    98:119:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.TimeStampedDataParser -> org.sandrob.bouncycastle.asn1.cms.TimeStampedDataParser:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.DERIA5String dataUri -> b
    org.sandrob.bouncycastle.asn1.cms.MetaData metaData -> c
    org.sandrob.bouncycastle.asn1.ASN1OctetStringParser content -> d
    org.sandrob.bouncycastle.asn1.cms.Evidence temporalEvidence -> e
    org.sandrob.bouncycastle.asn1.ASN1SequenceParser parser -> f
    24:46:void <init>(org.sandrob.bouncycastle.asn1.ASN1SequenceParser) -> <init>
    51:60:org.sandrob.bouncycastle.asn1.cms.TimeStampedDataParser getInstance(java.lang.Object) -> getInstance
    65:65:org.sandrob.bouncycastle.asn1.DERIA5String getDataUri() -> getDataUri
    70:70:org.sandrob.bouncycastle.asn1.cms.MetaData getMetaData() -> getMetaData
    75:75:org.sandrob.bouncycastle.asn1.ASN1OctetStringParser getContent() -> getContent
    81:86:org.sandrob.bouncycastle.asn1.cms.Evidence getTemporalEvidence() -> getTemporalEvidence
    103:124:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial -> org.sandrob.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial:
    org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey ephemeralPublicKey -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString addedukm -> b
    19:27:void <init>(org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    29:42:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    57:57:org.sandrob.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    69:79:org.sandrob.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial getInstance(java.lang.Object) -> getInstance
    84:84:org.sandrob.bouncycastle.asn1.cms.OriginatorPublicKey getEphemeralPublicKey() -> getEphemeralPublicKey
    89:89:org.sandrob.bouncycastle.asn1.ASN1OctetString getAddedukm() -> getAddedukm
    102:110:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue -> org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier type -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable value -> b
    16:20:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    24:34:org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue getInstance(java.lang.Object) -> getInstance
    41:42:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    44:50:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    54:54:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getType() -> getType
    59:59:org.sandrob.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    72:77:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.CRMFObjectIdentifiers -> org.sandrob.bouncycastle.asn1.crmf.CRMFObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix -> id_pkix
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkip -> id_pkip
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl -> id_regCtrl
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_regToken -> id_regCtrl_regToken
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_authenticator -> id_regCtrl_authenticator
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_pkiPublicationInfo -> id_regCtrl_pkiPublicationInfo
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_pkiArchiveOptions -> id_regCtrl_pkiArchiveOptions
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_encKeyWithID -> id_ct_encKeyWithID
    6:20:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.crmf.CertId -> org.sandrob.bouncycastle.asn1.crmf.CertId:
    org.sandrob.bouncycastle.asn1.x509.GeneralName issuer -> a
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> b
    18:22:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    26:36:org.sandrob.bouncycastle.asn1.crmf.CertId getInstance(java.lang.Object) -> getInstance
    41:41:org.sandrob.bouncycastle.asn1.crmf.CertId getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    46:46:org.sandrob.bouncycastle.asn1.x509.GeneralName getIssuer() -> getIssuer
    51:51:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    64:69:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.CertReqMessages -> org.sandrob.bouncycastle.asn1.crmf.CertReqMessages:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    14:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    21:31:org.sandrob.bouncycastle.asn1.crmf.CertReqMessages getInstance(java.lang.Object) -> getInstance
    34:38:void <init>(org.sandrob.bouncycastle.asn1.crmf.CertReqMsg) -> <init>
    40:48:void <init>(org.sandrob.bouncycastle.asn1.crmf.CertReqMsg[]) -> <init>
    52:59:org.sandrob.bouncycastle.asn1.crmf.CertReqMsg[] toCertReqMsgArray() -> toCertReqMsgArray
    70:70:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.CertReqMsg -> org.sandrob.bouncycastle.asn1.crmf.CertReqMsg:
    org.sandrob.bouncycastle.asn1.crmf.CertRequest certReq -> a
    org.sandrob.bouncycastle.asn1.crmf.ProofOfPossession popo -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence regInfo -> c
    19:37:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    41:50:org.sandrob.bouncycastle.asn1.crmf.CertReqMsg getInstance(java.lang.Object) -> getInstance
    59:76:void <init>(org.sandrob.bouncycastle.asn1.crmf.CertRequest,org.sandrob.bouncycastle.asn1.crmf.ProofOfPossession,org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue[]) -> <init>
    80:80:org.sandrob.bouncycastle.asn1.crmf.CertRequest getCertReq() -> getCertReq
    88:88:org.sandrob.bouncycastle.asn1.crmf.ProofOfPossession getPop() -> getPop
    93:93:org.sandrob.bouncycastle.asn1.crmf.ProofOfPossession getPopo() -> getPopo
    98:110:org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue[] getRegInfo() -> getRegInfo
    125:132:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    137:141:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.crmf.CertRequest -> org.sandrob.bouncycastle.asn1.crmf.CertRequest:
    org.sandrob.bouncycastle.asn1.DERInteger certReqId -> a
    org.sandrob.bouncycastle.asn1.crmf.CertTemplate certTemplate -> b
    org.sandrob.bouncycastle.asn1.crmf.Controls controls -> c
    17:25:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    29:38:org.sandrob.bouncycastle.asn1.crmf.CertRequest getInstance(java.lang.Object) -> getInstance
    46:47:void <init>(int,org.sandrob.bouncycastle.asn1.crmf.CertTemplate,org.sandrob.bouncycastle.asn1.crmf.Controls) -> <init>
    49:57:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.crmf.CertTemplate,org.sandrob.bouncycastle.asn1.crmf.Controls) -> <init>
    61:61:org.sandrob.bouncycastle.asn1.DERInteger getCertReqId() -> getCertReqId
    66:66:org.sandrob.bouncycastle.asn1.crmf.CertTemplate getCertTemplate() -> getCertTemplate
    71:71:org.sandrob.bouncycastle.asn1.crmf.Controls getControls() -> getControls
    85:95:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.CertTemplate -> org.sandrob.bouncycastle.asn1.crmf.CertTemplate:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger version -> b
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signingAlg -> d
    org.sandrob.bouncycastle.asn1.x500.X500Name issuer -> e
    org.sandrob.bouncycastle.asn1.crmf.OptionalValidity validity -> f
    org.sandrob.bouncycastle.asn1.x500.X500Name subject -> g
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo publicKey -> h
    org.sandrob.bouncycastle.asn1.DERBitString issuerUID -> i
    org.sandrob.bouncycastle.asn1.DERBitString subjectUID -> j
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> k
    32:77:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    81:90:org.sandrob.bouncycastle.asn1.crmf.CertTemplate getInstance(java.lang.Object) -> getInstance
    95:95:int getVersion() -> getVersion
    100:100:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    105:105:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlg() -> getSigningAlg
    110:110:org.sandrob.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    115:115:org.sandrob.bouncycastle.asn1.crmf.OptionalValidity getValidity() -> getValidity
    120:120:org.sandrob.bouncycastle.asn1.x500.X500Name getSubject() -> getSubject
    125:125:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getPublicKey() -> getPublicKey
    130:131:void setPublicKey(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> setPublicKey
    135:135:org.sandrob.bouncycastle.asn1.DERBitString getIssuerUID() -> getIssuerUID
    140:140:org.sandrob.bouncycastle.asn1.DERBitString getSubjectUID() -> getSubjectUID
    145:145:org.sandrob.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    166:166:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder -> org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signingAlg -> c
    org.sandrob.bouncycastle.asn1.x500.X500Name issuer -> d
    org.sandrob.bouncycastle.asn1.crmf.OptionalValidity validity -> e
    org.sandrob.bouncycastle.asn1.x500.X500Name subject -> f
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo publicKey -> g
    org.sandrob.bouncycastle.asn1.DERBitString issuerUID -> h
    org.sandrob.bouncycastle.asn1.DERBitString subjectUID -> i
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> j
    14:14:void <init>() -> <init>
    30:32:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setVersion(int) -> setVersion
    37:39:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setSerialNumber(org.sandrob.bouncycastle.asn1.DERInteger) -> setSerialNumber
    44:46:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setSigningAlg(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSigningAlg
    51:53:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setIssuer(org.sandrob.bouncycastle.asn1.x500.X500Name) -> setIssuer
    58:60:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setValidity(org.sandrob.bouncycastle.asn1.crmf.OptionalValidity) -> setValidity
    65:67:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setSubject(org.sandrob.bouncycastle.asn1.x500.X500Name) -> setSubject
    72:74:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setPublicKey(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> setPublicKey
    80:82:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setIssuerUID(org.sandrob.bouncycastle.asn1.DERBitString) -> setIssuerUID
    88:90:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setSubjectUID(org.sandrob.bouncycastle.asn1.DERBitString) -> setSubjectUID
    95:97:org.sandrob.bouncycastle.asn1.crmf.CertTemplateBuilder setExtensions(org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    118:131:org.sandrob.bouncycastle.asn1.crmf.CertTemplate build() -> build
    136:140:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,boolean,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.crmf.Controls -> org.sandrob.bouncycastle.asn1.crmf.Controls:
    org.sandrob.bouncycastle.asn1.ASN1Sequence content -> a
    14:17:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    21:31:org.sandrob.bouncycastle.asn1.crmf.Controls getInstance(java.lang.Object) -> getInstance
    34:37:void <init>(org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue) -> <init>
    39:46:void <init>(org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue[]) -> <init>
    50:57:org.sandrob.bouncycastle.asn1.crmf.AttributeTypeAndValue[] toAttributeTypeAndValueArray() -> toAttributeTypeAndValueArray
    68:68:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.EncKeyWithID -> org.sandrob.bouncycastle.asn1.crmf.EncKeyWithID:
    org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo privKeyInfo -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable identifier -> b
    20:29:org.sandrob.bouncycastle.asn1.crmf.EncKeyWithID getInstance(java.lang.Object) -> getInstance
    32:51:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    53:57:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> <init>
    59:63:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo,org.sandrob.bouncycastle.asn1.DERUTF8String) -> <init>
    65:69:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    73:73:org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo getPrivateKey() -> getPrivateKey
    78:78:boolean hasIdentifier() -> hasIdentifier
    83:83:boolean isIdentifierUTF8String() -> isIdentifierUTF8String
    88:88:org.sandrob.bouncycastle.asn1.ASN1Encodable getIdentifier() -> getIdentifier
    105:114:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.EncryptedKey -> org.sandrob.bouncycastle.asn1.crmf.EncryptedKey:
    org.sandrob.bouncycastle.asn1.cms.EnvelopedData envelopedData -> a
    org.sandrob.bouncycastle.asn1.crmf.EncryptedValue encryptedValue -> b
    19:33:org.sandrob.bouncycastle.asn1.crmf.EncryptedKey getInstance(java.lang.Object) -> getInstance
    37:40:void <init>(org.sandrob.bouncycastle.asn1.cms.EnvelopedData) -> <init>
    42:45:void <init>(org.sandrob.bouncycastle.asn1.crmf.EncryptedValue) -> <init>
    49:49:boolean isEncryptedValue() -> isEncryptedValue
    54:59:org.sandrob.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    73:78:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.EncryptedValue -> org.sandrob.bouncycastle.asn1.crmf.EncryptedValue:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier intendedAlg -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier symmAlg -> b
    org.sandrob.bouncycastle.asn1.DERBitString encSymmKey -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier keyAlg -> d
    org.sandrob.bouncycastle.asn1.ASN1OctetString valueHint -> e
    org.sandrob.bouncycastle.asn1.DERBitString encValue -> f
    24:53:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    57:66:org.sandrob.bouncycastle.asn1.crmf.EncryptedValue getInstance(java.lang.Object) -> getInstance
    69:88:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    92:92:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getIntendedAlg() -> getIntendedAlg
    97:97:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSymmAlg() -> getSymmAlg
    102:102:org.sandrob.bouncycastle.asn1.DERBitString getEncSymmKey() -> getEncSymmKey
    107:107:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlg() -> getKeyAlg
    112:112:org.sandrob.bouncycastle.asn1.ASN1OctetString getValueHint() -> getValueHint
    117:117:org.sandrob.bouncycastle.asn1.DERBitString getEncValue() -> getEncValue
    143:153:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    158:162:void addOptional(org.sandrob.bouncycastle.asn1.ASN1EncodableVector,int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.asn1.crmf.OptionalValidity -> org.sandrob.bouncycastle.asn1.crmf.OptionalValidity:
    org.sandrob.bouncycastle.asn1.x509.Time notBefore -> a
    org.sandrob.bouncycastle.asn1.x509.Time notAfter -> b
    20:36:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    40:50:org.sandrob.bouncycastle.asn1.crmf.OptionalValidity getInstance(java.lang.Object) -> getInstance
    63:75:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.PKIArchiveOptions -> org.sandrob.bouncycastle.asn1.crmf.PKIArchiveOptions:
    int encryptedPrivKey -> encryptedPrivKey
    int keyGenParameters -> keyGenParameters
    int archiveRemGenPrivKey -> archiveRemGenPrivKey
    org.sandrob.bouncycastle.asn1.ASN1Encodable value -> a
    23:32:org.sandrob.bouncycastle.asn1.crmf.PKIArchiveOptions getInstance(java.lang.Object) -> getInstance
    35:51:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    53:56:void <init>(org.sandrob.bouncycastle.asn1.crmf.EncryptedKey) -> <init>
    58:61:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    63:66:void <init>(boolean) -> <init>
    70:80:int getType() -> getType
    85:85:org.sandrob.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    103:113:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.PKIPublicationInfo -> org.sandrob.bouncycastle.asn1.crmf.PKIPublicationInfo:
    org.sandrob.bouncycastle.asn1.DERInteger action -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence pubInfos -> b
    16:20:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    24:34:org.sandrob.bouncycastle.asn1.crmf.PKIPublicationInfo getInstance(java.lang.Object) -> getInstance
    39:39:org.sandrob.bouncycastle.asn1.DERInteger getAction() -> getAction
    44:56:org.sandrob.bouncycastle.asn1.crmf.SinglePubInfo[] getPubInfos() -> getPubInfos
    74:79:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.PKMACValue -> org.sandrob.bouncycastle.asn1.crmf.PKMACValue:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.sandrob.bouncycastle.asn1.DERBitString value -> b
    23:27:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    31:41:org.sandrob.bouncycastle.asn1.crmf.PKMACValue getInstance(java.lang.Object) -> getInstance
    46:46:org.sandrob.bouncycastle.asn1.crmf.PKMACValue getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    58:60:void <init>(org.sandrob.bouncycastle.asn1.cmp.PBMParameter,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    67:73:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    77:77:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgId() -> getAlgId
    82:82:org.sandrob.bouncycastle.asn1.DERBitString getValue() -> getValue
    97:102:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.POPOPrivKey -> org.sandrob.bouncycastle.asn1.crmf.POPOPrivKey:
    int thisMessage -> thisMessage
    int subsequentMessage -> subsequentMessage
    int dhMAC -> dhMAC
    int agreeMAC -> agreeMAC
    int encryptedKey -> encryptedKey
    int tagNo -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable obj -> b
    25:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    53:53:org.sandrob.bouncycastle.asn1.crmf.POPOPrivKey getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    56:60:void <init>(org.sandrob.bouncycastle.asn1.crmf.SubsequentMessage) -> <init>
    64:64:int getType() -> getType
    69:69:org.sandrob.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    87:87:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.POPOSigningKey -> org.sandrob.bouncycastle.asn1.crmf.POPOSigningKey:
    org.sandrob.bouncycastle.asn1.crmf.POPOSigningKeyInput poposkInput -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algorithmIdentifier -> b
    org.sandrob.bouncycastle.asn1.DERBitString signature -> c
    20:37:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    41:51:org.sandrob.bouncycastle.asn1.crmf.POPOSigningKey getInstance(java.lang.Object) -> getInstance
    56:56:org.sandrob.bouncycastle.asn1.crmf.POPOSigningKey getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    67:75:void <init>(org.sandrob.bouncycastle.asn1.crmf.POPOSigningKeyInput,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    78:78:org.sandrob.bouncycastle.asn1.crmf.POPOSigningKeyInput getPoposkInput() -> getPoposkInput
    82:82:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier() -> getAlgorithmIdentifier
    86:86:org.sandrob.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    110:120:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.POPOSigningKeyInput -> org.sandrob.bouncycastle.asn1.crmf.POPOSigningKeyInput:
    org.sandrob.bouncycastle.asn1.x509.GeneralName sender -> a
    org.sandrob.bouncycastle.asn1.crmf.PKMACValue publicKeyMAC -> b
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo publicKey -> c
    20:40:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    44:54:org.sandrob.bouncycastle.asn1.crmf.POPOSigningKeyInput getInstance(java.lang.Object) -> getInstance
    58:64:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    67:73:void <init>(org.sandrob.bouncycastle.asn1.crmf.PKMACValue,org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    78:78:org.sandrob.bouncycastle.asn1.x509.GeneralName getSender() -> getSender
    84:84:org.sandrob.bouncycastle.asn1.crmf.PKMACValue getPublicKeyMAC() -> getPublicKeyMAC
    89:89:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getPublicKey() -> getPublicKey
    110:123:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.ProofOfPossession -> org.sandrob.bouncycastle.asn1.crmf.ProofOfPossession:
    int TYPE_RA_VERIFIED -> TYPE_RA_VERIFIED
    int TYPE_SIGNING_KEY -> TYPE_SIGNING_KEY
    int TYPE_KEY_ENCIPHERMENT -> TYPE_KEY_ENCIPHERMENT
    int TYPE_KEY_AGREEMENT -> TYPE_KEY_AGREEMENT
    int tagNo -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable obj -> b
    22:40:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    44:54:org.sandrob.bouncycastle.asn1.crmf.ProofOfPossession getInstance(java.lang.Object) -> getInstance
    58:62:void <init>() -> <init>
    65:69:void <init>(org.sandrob.bouncycastle.asn1.crmf.POPOSigningKey) -> <init>
    75:79:void <init>(int,org.sandrob.bouncycastle.asn1.crmf.POPOPrivKey) -> <init>
    83:83:int getType() -> getType
    88:88:org.sandrob.bouncycastle.asn1.ASN1Encodable getObject() -> getObject
    105:105:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.SinglePubInfo -> org.sandrob.bouncycastle.asn1.crmf.SinglePubInfo:
    org.sandrob.bouncycastle.asn1.DERInteger pubMethod -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName pubLocation -> b
    17:25:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    29:39:org.sandrob.bouncycastle.asn1.crmf.SinglePubInfo getInstance(java.lang.Object) -> getInstance
    44:44:org.sandrob.bouncycastle.asn1.x509.GeneralName getPubLocation() -> getPubLocation
    61:70:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.crmf.SubsequentMessage -> org.sandrob.bouncycastle.asn1.crmf.SubsequentMessage:
    org.sandrob.bouncycastle.asn1.crmf.SubsequentMessage encrCert -> encrCert
    org.sandrob.bouncycastle.asn1.crmf.SubsequentMessage challengeResp -> challengeResp
    5:9:void <clinit>() -> <clinit>
    13:14:void <init>(int) -> <init>
    18:27:org.sandrob.bouncycastle.asn1.crmf.SubsequentMessage valueOf(int) -> valueOf
org.sandrob.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers -> org.sandrob.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers:
    java.lang.String GOST_id -> GOST_id
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3411 -> gostR3411
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR28147_cbc -> gostR28147_cbc
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94 -> gostR3410_94
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_2001 -> gostR3410_2001
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3411_94_with_gostR3410_94 -> gostR3411_94_with_gostR3410_94
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3411_94_with_gostR3410_2001 -> gostR3411_94_with_gostR3410_2001
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3411_94_CryptoProParamSet -> gostR3411_94_CryptoProParamSet
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94_CryptoPro_A -> gostR3410_94_CryptoPro_A
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94_CryptoPro_B -> gostR3410_94_CryptoPro_B
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94_CryptoPro_C -> gostR3410_94_CryptoPro_C
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94_CryptoPro_D -> gostR3410_94_CryptoPro_D
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94_CryptoPro_XchA -> gostR3410_94_CryptoPro_XchA
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94_CryptoPro_XchB -> gostR3410_94_CryptoPro_XchB
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_94_CryptoPro_XchC -> gostR3410_94_CryptoPro_XchC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_2001_CryptoPro_A -> gostR3410_2001_CryptoPro_A
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_2001_CryptoPro_B -> gostR3410_2001_CryptoPro_B
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_2001_CryptoPro_C -> gostR3410_2001_CryptoPro_C
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_2001_CryptoPro_XchA -> gostR3410_2001_CryptoPro_XchA
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gostR3410_2001_CryptoPro_XchB -> gostR3410_2001_CryptoPro_XchB
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gost_ElSgDH3410_default -> gost_ElSgDH3410_default
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier gost_ElSgDH3410_1 -> gost_ElSgDH3410_1
    5:44:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves -> org.sandrob.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves:
    java.util.Hashtable objIds -> a
    java.util.Hashtable params -> b
    java.util.Hashtable names -> c
    16:118:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    130:130:org.sandrob.bouncycastle.crypto.params.ECDomainParameters getByOID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getByOID
    139:139:java.util.Enumeration getNames() -> getNames
    145:152:org.sandrob.bouncycastle.crypto.params.ECDomainParameters getByName(java.lang.String) -> getByName
    161:161:java.lang.String getName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getName
    166:166:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> getOID
org.sandrob.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters -> org.sandrob.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters:
    org.sandrob.bouncycastle.asn1.DERInteger p -> a
    org.sandrob.bouncycastle.asn1.DERInteger q -> b
    org.sandrob.bouncycastle.asn1.DERInteger a -> c
    org.sandrob.bouncycastle.asn1.DERInteger b -> d
    org.sandrob.bouncycastle.asn1.DERInteger x -> e
    org.sandrob.bouncycastle.asn1.DERInteger y -> f
    23:23:org.sandrob.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    29:39:org.sandrob.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters getInstance(java.lang.Object) -> getInstance
    42:56:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int,java.math.BigInteger) -> <init>
    58:69:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    73:73:java.math.BigInteger getP() -> getP
    78:78:java.math.BigInteger getQ() -> getQ
    83:83:java.math.BigInteger getA() -> getA
    88:97:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cryptopro.GOST28147Parameters -> org.sandrob.bouncycastle.asn1.cryptopro.GOST28147Parameters:
    org.sandrob.bouncycastle.asn1.ASN1OctetString iv -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier paramSet -> b
    24:24:org.sandrob.bouncycastle.asn1.cryptopro.GOST28147Parameters getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    30:40:org.sandrob.bouncycastle.asn1.cryptopro.GOST28147Parameters getInstance(java.lang.Object) -> getInstance
    43:50:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    65:70:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cryptopro.GOST3410NamedParameters -> org.sandrob.bouncycastle.asn1.cryptopro.GOST3410NamedParameters:
    java.util.Hashtable objIds -> a
    java.util.Hashtable params -> b
    java.util.Hashtable names -> c
    org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProA -> d
    org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProB -> e
    org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProXchA -> f
    12:75:void <clinit>() -> <clinit>
    12:12:void <init>() -> <init>
    87:87:org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getByOID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getByOID
    96:96:java.util.Enumeration getNames() -> getNames
    102:109:org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getByName(java.lang.String) -> getByName
    114:114:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> getOID
org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters -> org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters:
    int keySize -> a
    org.sandrob.bouncycastle.asn1.DERInteger p -> b
    org.sandrob.bouncycastle.asn1.DERInteger q -> c
    org.sandrob.bouncycastle.asn1.DERInteger a -> d
    24:24:org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    30:40:org.sandrob.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getInstance(java.lang.Object) -> getInstance
    43:53:void <init>(int,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    55:64:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    71:71:int getLKeySize() -> getLKeySize
    76:76:int getKeySize() -> getKeySize
    81:81:java.math.BigInteger getP() -> getP
    86:86:java.math.BigInteger getQ() -> getQ
    91:91:java.math.BigInteger getA() -> getA
    96:103:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters -> org.sandrob.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier publicKeyParamSet -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier digestParamSet -> b
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier encryptionParamSet -> c
    22:22:org.sandrob.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    28:38:org.sandrob.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters getInstance(java.lang.Object) -> getInstance
    41:48:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    50:58:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    60:70:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    74:74:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getPublicKeyParamSet() -> getPublicKeyParamSet
    79:79:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getDigestParamSet() -> getDigestParamSet
    84:84:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getEncryptionParamSet() -> getEncryptionParamSet
    89:99:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.eac.EACObjectIdentifiers -> org.sandrob.bouncycastle.asn1.eac.EACObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bsi_de -> bsi_de
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_PK -> id_PK
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_PK_DH -> id_PK_DH
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_PK_ECDH -> id_PK_ECDH
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_CA -> id_CA
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_CA_DH -> id_CA_DH
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_CA_DH_3DES_CBC_CBC -> id_CA_DH_3DES_CBC_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_CA_ECDH -> id_CA_ECDH
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_CA_ECDH_3DES_CBC_CBC -> id_CA_ECDH_3DES_CBC_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA -> id_TA
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_RSA -> id_TA_RSA
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_RSA_v1_5_SHA_1 -> id_TA_RSA_v1_5_SHA_1
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_RSA_v1_5_SHA_256 -> id_TA_RSA_v1_5_SHA_256
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_RSA_PSS_SHA_1 -> id_TA_RSA_PSS_SHA_1
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_RSA_PSS_SHA_256 -> id_TA_RSA_PSS_SHA_256
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_ECDSA -> id_TA_ECDSA
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_ECDSA_SHA_1 -> id_TA_ECDSA_SHA_1
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_ECDSA_SHA_224 -> id_TA_ECDSA_SHA_224
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_ECDSA_SHA_256 -> id_TA_ECDSA_SHA_256
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_ECDSA_SHA_384 -> id_TA_ECDSA_SHA_384
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_TA_ECDSA_SHA_512 -> id_TA_ECDSA_SHA_512
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_EAC_ePassport -> id_EAC_ePassport
    5:53:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.esf.CommitmentTypeIdentifier -> org.sandrob.bouncycastle.asn1.esf.CommitmentTypeIdentifier:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier proofOfOrigin -> proofOfOrigin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier proofOfReceipt -> proofOfReceipt
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier proofOfDelivery -> proofOfDelivery
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier proofOfSender -> proofOfSender
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier proofOfApproval -> proofOfApproval
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier proofOfCreation -> proofOfCreation
    6:13:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.esf.CommitmentTypeIndication -> org.sandrob.bouncycastle.asn1.esf.CommitmentTypeIndication:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier commitmentTypeId -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence commitmentTypeQualifier -> b
    16:25:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    27:31:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    33:39:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    44:49:org.sandrob.bouncycastle.asn1.esf.CommitmentTypeIndication getInstance(java.lang.Object) -> getInstance
    54:54:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getCommitmentTypeId() -> getCommitmentTypeId
    59:59:org.sandrob.bouncycastle.asn1.ASN1Sequence getCommitmentTypeQualifier() -> getCommitmentTypeQualifier
    72:81:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.CommitmentTypeQualifier -> org.sandrob.bouncycastle.asn1.esf.CommitmentTypeQualifier:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier commitmentTypeIdentifier -> a
    org.sandrob.bouncycastle.asn1.DEREncodable qualifier -> b
    34:35:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    43:49:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    57:66:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    70:79:org.sandrob.bouncycastle.asn1.esf.CommitmentTypeQualifier getInstance(java.lang.Object) -> getInstance
    84:84:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getCommitmentTypeIdentifier() -> getCommitmentTypeIdentifier
    89:89:org.sandrob.bouncycastle.asn1.DEREncodable getQualifier() -> getQualifier
    99:106:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.CompleteRevocationRefs -> org.sandrob.bouncycastle.asn1.esf.CompleteRevocationRefs:
    org.sandrob.bouncycastle.asn1.ASN1Sequence crlOcspRefs -> a
    23:32:org.sandrob.bouncycastle.asn1.esf.CompleteRevocationRefs getInstance(java.lang.Object) -> getInstance
    35:43:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    45:48:void <init>(org.sandrob.bouncycastle.asn1.esf.CrlOcspRef[]) -> <init>
    52:58:org.sandrob.bouncycastle.asn1.esf.CrlOcspRef[] getCrlOcspRefs() -> getCrlOcspRefs
    63:63:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.CrlIdentifier -> org.sandrob.bouncycastle.asn1.esf.CrlIdentifier:
    org.sandrob.bouncycastle.asn1.x500.X500Name crlIssuer -> a
    org.sandrob.bouncycastle.asn1.DERUTCTime crlIssuedTime -> b
    org.sandrob.bouncycastle.asn1.DERInteger crlNumber -> c
    33:42:org.sandrob.bouncycastle.asn1.esf.CrlIdentifier getInstance(java.lang.Object) -> getInstance
    45:57:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    61:62:void <init>(org.sandrob.bouncycastle.asn1.x500.X500Name,org.sandrob.bouncycastle.asn1.DERUTCTime) -> <init>
    64:73:void <init>(org.sandrob.bouncycastle.asn1.x500.X500Name,org.sandrob.bouncycastle.asn1.DERUTCTime,java.math.BigInteger) -> <init>
    77:77:org.sandrob.bouncycastle.asn1.x500.X500Name getCrlIssuer() -> getCrlIssuer
    82:82:org.sandrob.bouncycastle.asn1.DERUTCTime getCrlIssuedTime() -> getCrlIssuedTime
    87:91:java.math.BigInteger getCrlNumber() -> getCrlNumber
    96:103:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.CrlListID -> org.sandrob.bouncycastle.asn1.esf.CrlListID:
    org.sandrob.bouncycastle.asn1.ASN1Sequence crls -> a
    24:33:org.sandrob.bouncycastle.asn1.esf.CrlListID getInstance(java.lang.Object) -> getInstance
    36:44:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:49:void <init>(org.sandrob.bouncycastle.asn1.esf.CrlValidatedID[]) -> <init>
    53:59:org.sandrob.bouncycastle.asn1.esf.CrlValidatedID[] getCrls() -> getCrls
    64:64:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.CrlOcspRef -> org.sandrob.bouncycastle.asn1.esf.CrlOcspRef:
    org.sandrob.bouncycastle.asn1.esf.CrlListID crlids -> a
    org.sandrob.bouncycastle.asn1.esf.OcspListID ocspids -> b
    org.sandrob.bouncycastle.asn1.esf.OtherRevRefs otherRev -> c
    31:40:org.sandrob.bouncycastle.asn1.esf.CrlOcspRef getInstance(java.lang.Object) -> getInstance
    43:64:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    66:72:void <init>(org.sandrob.bouncycastle.asn1.esf.CrlListID,org.sandrob.bouncycastle.asn1.esf.OcspListID,org.sandrob.bouncycastle.asn1.esf.OtherRevRefs) -> <init>
    76:76:org.sandrob.bouncycastle.asn1.esf.CrlListID getCrlids() -> getCrlids
    81:81:org.sandrob.bouncycastle.asn1.esf.OcspListID getOcspids() -> getOcspids
    86:86:org.sandrob.bouncycastle.asn1.esf.OtherRevRefs getOtherRev() -> getOtherRev
    91:104:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.CrlValidatedID -> org.sandrob.bouncycastle.asn1.esf.CrlValidatedID:
    org.sandrob.bouncycastle.asn1.esf.OtherHash crlHash -> a
    org.sandrob.bouncycastle.asn1.esf.CrlIdentifier crlIdentifier -> b
    25:34:org.sandrob.bouncycastle.asn1.esf.CrlValidatedID getInstance(java.lang.Object) -> getInstance
    37:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    53:54:void <init>(org.sandrob.bouncycastle.asn1.esf.OtherHash) -> <init>
    56:60:void <init>(org.sandrob.bouncycastle.asn1.esf.OtherHash,org.sandrob.bouncycastle.asn1.esf.CrlIdentifier) -> <init>
    64:64:org.sandrob.bouncycastle.asn1.esf.OtherHash getCrlHash() -> getCrlHash
    69:69:org.sandrob.bouncycastle.asn1.esf.CrlIdentifier getCrlIdentifier() -> getCrlIdentifier
    74:80:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.ESFAttributes -> org.sandrob.bouncycastle.asn1.esf.ESFAttributes:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sigPolicyId -> sigPolicyId
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier commitmentType -> commitmentType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier signerLocation -> signerLocation
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier signerAttr -> signerAttr
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier otherSigCert -> otherSigCert
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier contentTimestamp -> contentTimestamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier certificateRefs -> certificateRefs
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier revocationRefs -> revocationRefs
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier certValues -> certValues
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier revocationValues -> revocationValues
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier escTimeStamp -> escTimeStamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier certCRLTimestamp -> certCRLTimestamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier archiveTimestamp -> archiveTimestamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier archiveTimestampV2 -> archiveTimestampV2
    6:21:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.esf.OcspIdentifier -> org.sandrob.bouncycastle.asn1.esf.OcspIdentifier:
    org.sandrob.bouncycastle.asn1.ocsp.ResponderID ocspResponderID -> a
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime producedAt -> b
    27:36:org.sandrob.bouncycastle.asn1.esf.OcspIdentifier getInstance(java.lang.Object) -> getInstance
    39:48:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    50:54:void <init>(org.sandrob.bouncycastle.asn1.ocsp.ResponderID,org.sandrob.bouncycastle.asn1.DERGeneralizedTime) -> <init>
    58:58:org.sandrob.bouncycastle.asn1.ocsp.ResponderID getOcspResponderID() -> getOcspResponderID
    63:63:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getProducedAt() -> getProducedAt
    68:71:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.OcspListID -> org.sandrob.bouncycastle.asn1.esf.OcspListID:
    org.sandrob.bouncycastle.asn1.ASN1Sequence ocspResponses -> a
    24:33:org.sandrob.bouncycastle.asn1.esf.OcspListID getInstance(java.lang.Object) -> getInstance
    36:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:54:void <init>(org.sandrob.bouncycastle.asn1.esf.OcspResponsesID[]) -> <init>
    58:65:org.sandrob.bouncycastle.asn1.esf.OcspResponsesID[] getOcspResponses() -> getOcspResponses
    70:70:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.OcspResponsesID -> org.sandrob.bouncycastle.asn1.esf.OcspResponsesID:
    org.sandrob.bouncycastle.asn1.esf.OcspIdentifier ocspIdentifier -> a
    org.sandrob.bouncycastle.asn1.esf.OtherHash ocspRepHash -> b
    26:35:org.sandrob.bouncycastle.asn1.esf.OcspResponsesID getInstance(java.lang.Object) -> getInstance
    38:50:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    54:55:void <init>(org.sandrob.bouncycastle.asn1.esf.OcspIdentifier) -> <init>
    57:61:void <init>(org.sandrob.bouncycastle.asn1.esf.OcspIdentifier,org.sandrob.bouncycastle.asn1.esf.OtherHash) -> <init>
    65:65:org.sandrob.bouncycastle.asn1.esf.OcspIdentifier getOcspIdentifier() -> getOcspIdentifier
    70:70:org.sandrob.bouncycastle.asn1.esf.OtherHash getOcspRepHash() -> getOcspRepHash
    75:81:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.OtherHash -> org.sandrob.bouncycastle.asn1.esf.OtherHash:
    org.sandrob.bouncycastle.asn1.ASN1OctetString sha1Hash -> a
    org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue otherHash -> b
    29:37:org.sandrob.bouncycastle.asn1.esf.OtherHash getInstance(java.lang.Object) -> getInstance
    40:43:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    45:48:void <init>(org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue) -> <init>
    50:53:void <init>(byte[]) -> <init>
    57:61:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    66:70:byte[] getHashValue() -> getHashValue
    75:79:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue -> org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString hashValue -> b
    21:30:org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue getInstance(java.lang.Object) -> getInstance
    33:43:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    45:51:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    55:55:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    60:60:org.sandrob.bouncycastle.asn1.ASN1OctetString getHashValue() -> getHashValue
    74:79:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.OtherRevRefs -> org.sandrob.bouncycastle.asn1.esf.OtherRevRefs:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier otherRevRefType -> a
    org.sandrob.bouncycastle.asn1.ASN1Object otherRevRefs -> b
    33:42:org.sandrob.bouncycastle.asn1.esf.OtherRevRefs getInstance(java.lang.Object) -> getInstance
    45:62:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    66:66:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getOtherRevRefType() -> getOtherRevRefType
    71:71:org.sandrob.bouncycastle.asn1.ASN1Object getOtherRevRefs() -> getOtherRevRefs
    76:79:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.OtherRevVals -> org.sandrob.bouncycastle.asn1.esf.OtherRevVals:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier otherRevValType -> a
    org.sandrob.bouncycastle.asn1.ASN1Object otherRevVals -> b
    30:33:org.sandrob.bouncycastle.asn1.esf.OtherRevVals getInstance(java.lang.Object) -> getInstance
    36:48:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    50:54:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Object) -> <init>
    57:57:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOtherRevValType() -> getOtherRevValType
    61:61:org.sandrob.bouncycastle.asn1.ASN1Object getOtherRevVals() -> getOtherRevVals
    65:68:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.RevocationValues -> org.sandrob.bouncycastle.asn1.esf.RevocationValues:
    org.sandrob.bouncycastle.asn1.ASN1Sequence crlVals -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence ocspVals -> b
    org.sandrob.bouncycastle.asn1.esf.OtherRevVals otherRevVals -> c
    32:41:org.sandrob.bouncycastle.asn1.esf.RevocationValues getInstance(java.lang.Object) -> getInstance
    44:83:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    85:97:void <init>(org.sandrob.bouncycastle.asn1.x509.CertificateList[],org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse[],org.sandrob.bouncycastle.asn1.esf.OtherRevVals) -> <init>
    101:111:org.sandrob.bouncycastle.asn1.x509.CertificateList[] getCrlVals() -> getCrlVals
    116:126:org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse[] getOcspVals() -> getOcspVals
    131:131:org.sandrob.bouncycastle.asn1.esf.OtherRevVals getOtherRevVals() -> getOtherRevVals
    136:149:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SPUserNotice -> org.sandrob.bouncycastle.asn1.esf.SPUserNotice:
    org.sandrob.bouncycastle.asn1.x509.NoticeReference noticeRef -> a
    org.sandrob.bouncycastle.asn1.x509.DisplayText explicitText -> b
    17:28:org.sandrob.bouncycastle.asn1.esf.SPUserNotice getInstance(java.lang.Object) -> getInstance
    31:51:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    53:59:void <init>(org.sandrob.bouncycastle.asn1.x509.NoticeReference,org.sandrob.bouncycastle.asn1.x509.DisplayText) -> <init>
    63:63:org.sandrob.bouncycastle.asn1.x509.NoticeReference getNoticeRef() -> getNoticeRef
    68:68:org.sandrob.bouncycastle.asn1.x509.DisplayText getExplicitText() -> getExplicitText
    80:92:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SPuri -> org.sandrob.bouncycastle.asn1.esf.SPuri:
    org.sandrob.bouncycastle.asn1.DERIA5String uri -> a
    13:24:org.sandrob.bouncycastle.asn1.esf.SPuri getInstance(java.lang.Object) -> getInstance
    27:31:void <init>(org.sandrob.bouncycastle.asn1.DERIA5String) -> <init>
    35:35:org.sandrob.bouncycastle.asn1.DERIA5String getUri() -> getUri
    45:45:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifierInfo -> org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifierInfo:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sigPolicyQualifierId -> a
    org.sandrob.bouncycastle.asn1.DEREncodable sigQualifier -> b
    18:24:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    26:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    36:47:org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifierInfo getInstance(java.lang.Object) -> getInstance
    52:52:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getSigPolicyQualifierId() -> getSigPolicyQualifierId
    57:57:org.sandrob.bouncycastle.asn1.DEREncodable getSigQualifier() -> getSigQualifier
    71:76:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifiers -> org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifiers:
    org.sandrob.bouncycastle.asn1.ASN1Sequence qualifiers -> a
    13:24:org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifiers getInstance(java.lang.Object) -> getInstance
    27:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    33:42:void <init>(org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifierInfo[]) -> <init>
    51:51:int size() -> size
    63:63:org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifierInfo getStringAt(int) -> getStringAt
    73:73:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SignaturePolicyId -> org.sandrob.bouncycastle.asn1.esf.SignaturePolicyId:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sigPolicyId -> a
    org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue sigPolicyHash -> b
    org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifiers sigPolicyQualifiers -> c
    22:33:org.sandrob.bouncycastle.asn1.esf.SignaturePolicyId getInstance(java.lang.Object) -> getInstance
    36:51:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    57:58:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue) -> <init>
    60:68:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue,org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifiers) -> <init>
    72:72:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getSigPolicyId() -> getSigPolicyId
    77:77:org.sandrob.bouncycastle.asn1.esf.OtherHashAlgAndValue getSigPolicyHash() -> getSigPolicyHash
    82:82:org.sandrob.bouncycastle.asn1.esf.SigPolicyQualifiers getSigPolicyQualifiers() -> getSigPolicyQualifiers
    95:104:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SignaturePolicyIdentifier -> org.sandrob.bouncycastle.asn1.esf.SignaturePolicyIdentifier:
    org.sandrob.bouncycastle.asn1.esf.SignaturePolicyId signaturePolicyId -> a
    boolean isSignaturePolicyImplied -> b
    14:29:org.sandrob.bouncycastle.asn1.esf.SignaturePolicyIdentifier getInstance(java.lang.Object) -> getInstance
    32:35:void <init>() -> <init>
    37:42:void <init>(org.sandrob.bouncycastle.asn1.esf.SignaturePolicyId) -> <init>
    46:46:org.sandrob.bouncycastle.asn1.esf.SignaturePolicyId getSignaturePolicyId() -> getSignaturePolicyId
    51:51:boolean isSignaturePolicyImplied() -> isSignaturePolicyImplied
    65:71:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SignerAttribute -> org.sandrob.bouncycastle.asn1.esf.SignerAttribute:
    org.sandrob.bouncycastle.asn1.ASN1Sequence claimedAttributes -> a
    org.sandrob.bouncycastle.asn1.x509.AttributeCertificate certifiedAttributes -> b
    16:27:org.sandrob.bouncycastle.asn1.esf.SignerAttribute getInstance(java.lang.Object) -> getInstance
    30:47:void <init>(java.lang.Object) -> <init>
    49:53:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    55:59:void <init>(org.sandrob.bouncycastle.asn1.x509.AttributeCertificate) -> <init>
    63:63:org.sandrob.bouncycastle.asn1.ASN1Sequence getClaimedAttributes() -> getClaimedAttributes
    68:68:org.sandrob.bouncycastle.asn1.x509.AttributeCertificate getCertifiedAttributes() -> getCertifiedAttributes
    84:95:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.esf.SignerLocation -> org.sandrob.bouncycastle.asn1.esf.SignerLocation:
    org.sandrob.bouncycastle.asn1.DERUTF8String countryName -> a
    org.sandrob.bouncycastle.asn1.DERUTF8String localityName -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence postalAddress -> c
    33:70:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    72:96:void <init>(org.sandrob.bouncycastle.asn1.DERUTF8String,org.sandrob.bouncycastle.asn1.DERUTF8String,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    101:106:org.sandrob.bouncycastle.asn1.esf.SignerLocation getInstance(java.lang.Object) -> getInstance
    111:111:org.sandrob.bouncycastle.asn1.DERUTF8String getCountryName() -> getCountryName
    116:116:org.sandrob.bouncycastle.asn1.DERUTF8String getLocalityName() -> getLocalityName
    121:121:org.sandrob.bouncycastle.asn1.ASN1Sequence getPostalAddress() -> getPostalAddress
    143:160:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.ContentHints -> org.sandrob.bouncycastle.asn1.ess.ContentHints:
    org.sandrob.bouncycastle.asn1.DERUTF8String contentDescription -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier contentType -> b
    20:31:org.sandrob.bouncycastle.asn1.ess.ContentHints getInstance(java.lang.Object) -> getInstance
    37:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:56:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    58:64:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERUTF8String) -> <init>
    68:68:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getContentType() -> getContentType
    73:73:org.sandrob.bouncycastle.asn1.DERUTF8String getContentDescription() -> getContentDescription
    85:94:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.ContentIdentifier -> org.sandrob.bouncycastle.asn1.ess.ContentIdentifier:
    org.sandrob.bouncycastle.asn1.ASN1OctetString value -> a
    15:26:org.sandrob.bouncycastle.asn1.ess.ContentIdentifier getInstance(java.lang.Object) -> getInstance
    32:36:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    44:45:void <init>(byte[]) -> <init>
    49:49:org.sandrob.bouncycastle.asn1.ASN1OctetString getValue() -> getValue
    63:63:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.ESSCertID -> org.sandrob.bouncycastle.asn1.ess.ESSCertID:
    org.sandrob.bouncycastle.asn1.ASN1OctetString certHash -> a
    org.sandrob.bouncycastle.asn1.x509.IssuerSerial issuerSerial -> b
    21:32:org.sandrob.bouncycastle.asn1.ess.ESSCertID getInstance(java.lang.Object) -> getInstance
    38:51:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    53:57:void <init>(byte[]) -> <init>
    59:65:void <init>(byte[],org.sandrob.bouncycastle.asn1.x509.IssuerSerial) -> <init>
    69:69:byte[] getCertHash() -> getCertHash
    74:74:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getIssuerSerial() -> getIssuerSerial
    86:95:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.ESSCertIDv2 -> org.sandrob.bouncycastle.asn1.ess.ESSCertIDv2:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    byte[] certHash -> b
    org.sandrob.bouncycastle.asn1.x509.IssuerSerial issuerSerial -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_ALG_ID -> d
    14:20:void <clinit>() -> <clinit>
    25:36:org.sandrob.bouncycastle.asn1.ess.ESSCertIDv2 getInstance(java.lang.Object) -> getInstance
    39:65:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    71:72:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    74:91:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],org.sandrob.bouncycastle.asn1.x509.IssuerSerial) -> <init>
    95:95:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    100:100:byte[] getCertHash() -> getCertHash
    105:105:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getIssuerSerial() -> getIssuerSerial
    127:141:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.OtherCertID -> org.sandrob.bouncycastle.asn1.ess.OtherCertID:
    org.sandrob.bouncycastle.asn1.ASN1Encodable otherCertHash -> a
    org.sandrob.bouncycastle.asn1.x509.IssuerSerial issuerSerial -> b
    21:32:org.sandrob.bouncycastle.asn1.ess.OtherCertID getInstance(java.lang.Object) -> getInstance
    38:60:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    62:67:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    69:76:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],org.sandrob.bouncycastle.asn1.x509.IssuerSerial) -> <init>
    80:87:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmHash() -> getAlgorithmHash
    93:100:byte[] getCertHash() -> getCertHash
    106:106:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getIssuerSerial() -> getIssuerSerial
    127:136:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.OtherSigningCertificate -> org.sandrob.bouncycastle.asn1.ess.OtherSigningCertificate:
    org.sandrob.bouncycastle.asn1.ASN1Sequence certs -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence policies -> b
    18:29:org.sandrob.bouncycastle.asn1.ess.OtherSigningCertificate getInstance(java.lang.Object) -> getInstance
    35:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:55:void <init>(org.sandrob.bouncycastle.asn1.ess.OtherCertID) -> <init>
    59:66:org.sandrob.bouncycastle.asn1.ess.OtherCertID[] getCerts() -> getCerts
    71:83:org.sandrob.bouncycastle.asn1.x509.PolicyInformation[] getPolicies() -> getPolicies
    100:109:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.SigningCertificate -> org.sandrob.bouncycastle.asn1.ess.SigningCertificate:
    org.sandrob.bouncycastle.asn1.ASN1Sequence certs -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence policies -> b
    19:30:org.sandrob.bouncycastle.asn1.ess.SigningCertificate getInstance(java.lang.Object) -> getInstance
    36:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:55:void <init>(org.sandrob.bouncycastle.asn1.ess.ESSCertID) -> <init>
    59:66:org.sandrob.bouncycastle.asn1.ess.ESSCertID[] getCerts() -> getCerts
    71:83:org.sandrob.bouncycastle.asn1.x509.PolicyInformation[] getPolicies() -> getPolicies
    100:109:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ess.SigningCertificateV2 -> org.sandrob.bouncycastle.asn1.ess.SigningCertificateV2:
    org.sandrob.bouncycastle.asn1.ASN1Sequence certs -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence policies -> b
    19:30:org.sandrob.bouncycastle.asn1.ess.SigningCertificateV2 getInstance(java.lang.Object) -> getInstance
    33:47:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    49:58:void <init>(org.sandrob.bouncycastle.asn1.ess.ESSCertIDv2[]) -> <init>
    60:80:void <init>(org.sandrob.bouncycastle.asn1.ess.ESSCertIDv2[],org.sandrob.bouncycastle.asn1.x509.PolicyInformation[]) -> <init>
    84:89:org.sandrob.bouncycastle.asn1.ess.ESSCertIDv2[] getCerts() -> getCerts
    94:104:org.sandrob.bouncycastle.asn1.x509.PolicyInformation[] getPolicies() -> getPolicies
    121:130:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.gnu.GNUObjectIdentifiers -> org.sandrob.bouncycastle.asn1.gnu.GNUObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier GNU -> GNU
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier GnuPG -> GnuPG
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier notation -> notation
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkaAddress -> pkaAddress
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier GnuRadar -> GnuRadar
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier digestAlgorithm -> digestAlgorithm
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Tiger_192 -> Tiger_192
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier encryptionAlgorithm -> encryptionAlgorithm
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent -> Serpent
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_ECB -> Serpent_128_ECB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_CBC -> Serpent_128_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_OFB -> Serpent_128_OFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_CFB -> Serpent_128_CFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_ECB -> Serpent_192_ECB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_CBC -> Serpent_192_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_OFB -> Serpent_192_OFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_CFB -> Serpent_192_CFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_ECB -> Serpent_256_ECB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_CBC -> Serpent_256_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_OFB -> Serpent_256_OFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_CFB -> Serpent_256_CFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier CRC -> CRC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier CRC32 -> CRC32
    5:29:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.iana.IANAObjectIdentifiers -> org.sandrob.bouncycastle.asn1.iana.IANAObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier isakmpOakley -> isakmpOakley
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier hmacMD5 -> hmacMD5
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier hmacSHA1 -> hmacSHA1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier hmacTIGER -> hmacTIGER
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier hmacRIPEMD160 -> hmacRIPEMD160
    5:18:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.icao.CscaMasterList -> org.sandrob.bouncycastle.asn1.icao.CscaMasterList:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[] certList -> b
    35:44:org.sandrob.bouncycastle.asn1.icao.CscaMasterList getInstance(java.lang.Object) -> getInstance
    29:67:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    29:73:void <init>(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[]) -> <init>
    76:76:int getVersion() -> getVersion
    81:81:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[] getCertStructs() -> getCertStructs
    86:93:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[] copyCertList(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[]) -> a
    98:109:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.icao.DataGroupHash -> org.sandrob.bouncycastle.asn1.icao.DataGroupHash:
    org.sandrob.bouncycastle.asn1.DERInteger dataGroupNumber -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString dataGroupHashValue -> b
    49:58:org.sandrob.bouncycastle.asn1.icao.DataGroupHash getInstance(java.lang.Object) -> getInstance
    61:69:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    71:77:void <init>(int,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    81:81:int getDataGroupNumber() -> getDataGroupNumber
    86:86:org.sandrob.bouncycastle.asn1.ASN1OctetString getDataGroupHashValue() -> getDataGroupHashValue
    91:95:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.icao.ICAOObjectIdentifiers -> org.sandrob.bouncycastle.asn1.icao.ICAOObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao -> id_icao
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_mrtd -> id_icao_mrtd
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_mrtd_security -> id_icao_mrtd_security
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_ldsSecurityObject -> id_icao_ldsSecurityObject
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_cscaMasterList -> id_icao_cscaMasterList
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_cscaMasterListSigningKey -> id_icao_cscaMasterListSigningKey
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_documentTypeList -> id_icao_documentTypeList
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_aaProtocolObject -> id_icao_aaProtocolObject
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_extensions -> id_icao_extensions
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_extensions_namechangekeyrollover -> id_icao_extensions_namechangekeyrollover
    5:32:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.icao.LDSSecurityObject -> org.sandrob.bouncycastle.asn1.icao.LDSSecurityObject:
    int ub_DataGroups -> ub_DataGroups
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithmIdentifier -> b
    org.sandrob.bouncycastle.asn1.icao.DataGroupHash[] datagroupHash -> c
    org.sandrob.bouncycastle.asn1.icao.LDSVersionInfo versionInfo -> d
    43:52:org.sandrob.bouncycastle.asn1.icao.LDSSecurityObject getInstance(java.lang.Object) -> getInstance
    35:84:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    35:95:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.icao.DataGroupHash[]) -> <init>
    35:108:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.icao.DataGroupHash[],org.sandrob.bouncycastle.asn1.icao.LDSVersionInfo) -> <init>
    112:116:void checkDatagroupHashSeqSize(int) -> a
    120:120:int getVersion() -> getVersion
    125:125:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithmIdentifier() -> getDigestAlgorithmIdentifier
    130:130:org.sandrob.bouncycastle.asn1.icao.DataGroupHash[] getDatagroupHash() -> getDatagroupHash
    135:135:org.sandrob.bouncycastle.asn1.icao.LDSVersionInfo getVersionInfo() -> getVersionInfo
    140:157:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.icao.LDSVersionInfo -> org.sandrob.bouncycastle.asn1.icao.LDSVersionInfo:
    org.sandrob.bouncycastle.asn1.DERPrintableString ldsVersion -> a
    org.sandrob.bouncycastle.asn1.DERPrintableString unicodeVersion -> b
    16:20:void <init>(java.lang.String,java.lang.String) -> <init>
    22:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    35:44:org.sandrob.bouncycastle.asn1.icao.LDSVersionInfo getInstance(java.lang.Object) -> getInstance
    49:49:java.lang.String getLdsVersion() -> getLdsVersion
    54:54:java.lang.String getUnicodeVersion() -> getUnicodeVersion
    68:73:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.ISISMTTObjectIdentifiers -> org.sandrob.bouncycastle.asn1.isismtt.ISISMTTObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt -> id_isismtt
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_cp -> id_isismtt_cp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_cp_accredited -> id_isismtt_cp_accredited
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at -> id_isismtt_at
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_dateOfCertGen -> id_isismtt_at_dateOfCertGen
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_procuration -> id_isismtt_at_procuration
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_admission -> id_isismtt_at_admission
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_monetaryLimit -> id_isismtt_at_monetaryLimit
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_declarationOfMajority -> id_isismtt_at_declarationOfMajority
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_iCCSN -> id_isismtt_at_iCCSN
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_PKReference -> id_isismtt_at_PKReference
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_restriction -> id_isismtt_at_restriction
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_retrieveIfAllowed -> id_isismtt_at_retrieveIfAllowed
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_requestedCertificate -> id_isismtt_at_requestedCertificate
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_namingAuthorities -> id_isismtt_at_namingAuthorities
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_certInDirSince -> id_isismtt_at_certInDirSince
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_certHash -> id_isismtt_at_certHash
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_nameAtBirth -> id_isismtt_at_nameAtBirth
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_additionalInformation -> id_isismtt_at_additionalInformation
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_liabilityLimitationFlag -> id_isismtt_at_liabilityLimitationFlag
    5:179:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.isismtt.ocsp.CertHash -> org.sandrob.bouncycastle.asn1.isismtt.ocsp.CertHash:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    byte[] certificateHash -> b
    40:51:org.sandrob.bouncycastle.asn1.isismtt.ocsp.CertHash getInstance(java.lang.Object) -> getInstance
    68:77:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    85:91:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    95:95:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    100:100:byte[] getCertificateHash() -> getCertificateHash
    119:122:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate -> org.sandrob.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate:
    int certificate -> certificate
    int publicKeyCertificate -> publicKeyCertificate
    int attributeCertificate -> attributeCertificate
    org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure cert -> a
    byte[] publicKeyCert -> b
    byte[] attributeCert -> c
    62:77:org.sandrob.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate getInstance(java.lang.Object) -> getInstance
    82:87:org.sandrob.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    90:104:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    113:116:void <init>(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure) -> <init>
    120:121:void <init>(int,byte[]) -> <init>
    125:133:int getType() -> getType
    138:153:byte[] getCertificateBytes() -> getCertificateBytes
    173:181:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.x509.AdditionalInformationSyntax -> org.sandrob.bouncycastle.asn1.isismtt.x509.AdditionalInformationSyntax:
    org.sandrob.bouncycastle.asn1.x500.DirectoryString information -> a
    22:32:org.sandrob.bouncycastle.asn1.isismtt.x509.AdditionalInformationSyntax getInstance(java.lang.Object) -> getInstance
    35:38:void <init>(org.sandrob.bouncycastle.asn1.x500.DirectoryString) -> <init>
    47:48:void <init>(java.lang.String) -> <init>
    52:52:org.sandrob.bouncycastle.asn1.x500.DirectoryString getInformation() -> getInformation
    68:68:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.x509.AdmissionSyntax -> org.sandrob.bouncycastle.asn1.isismtt.x509.AdmissionSyntax:
    org.sandrob.bouncycastle.asn1.x509.GeneralName admissionAuthority -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence contentsOfAdmissions -> b
    130:141:org.sandrob.bouncycastle.asn1.isismtt.x509.AdmissionSyntax getInstance(java.lang.Object) -> getInstance
    182:196:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    204:208:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    250:256:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    264:264:org.sandrob.bouncycastle.asn1.x509.GeneralName getAdmissionAuthority() -> getAdmissionAuthority
    272:278:org.sandrob.bouncycastle.asn1.isismtt.x509.Admissions[] getContentsOfAdmissions() -> getContentsOfAdmissions
org.sandrob.bouncycastle.asn1.isismtt.x509.Admissions -> org.sandrob.bouncycastle.asn1.isismtt.x509.Admissions:
    org.sandrob.bouncycastle.asn1.x509.GeneralName admissionAuthority -> a
    org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority namingAuthority -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence professionInfos -> c
    43:53:org.sandrob.bouncycastle.asn1.isismtt.x509.Admissions getInstance(java.lang.Object) -> getInstance
    72:115:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    126:132:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority,org.sandrob.bouncycastle.asn1.isismtt.x509.ProfessionInfo[]) -> <init>
    136:136:org.sandrob.bouncycastle.asn1.x509.GeneralName getAdmissionAuthority() -> getAdmissionAuthority
    141:141:org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority getNamingAuthority() -> getNamingAuthority
    146:152:org.sandrob.bouncycastle.asn1.isismtt.x509.ProfessionInfo[] getProfessionInfos() -> getProfessionInfos
    174:186:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.x509.DeclarationOfMajority -> org.sandrob.bouncycastle.asn1.isismtt.x509.DeclarationOfMajority:
    int notYoungerThan -> notYoungerThan
    int fullAgeAtCountry -> fullAgeAtCountry
    int dateOfBirth -> dateOfBirth
    org.sandrob.bouncycastle.asn1.ASN1TaggedObject declaration -> a
    45:48:void <init>(int) -> <init>
    50:70:void <init>(boolean,java.lang.String) -> <init>
    72:75:void <init>(org.sandrob.bouncycastle.asn1.DERGeneralizedTime) -> <init>
    79:90:org.sandrob.bouncycastle.asn1.isismtt.x509.DeclarationOfMajority getInstance(java.lang.Object) -> getInstance
    93:100:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    124:124:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    129:129:int getType() -> getType
    137:142:int notYoungerThan() -> notYoungerThan
    147:152:org.sandrob.bouncycastle.asn1.ASN1Sequence fullAgeAtCountry() -> fullAgeAtCountry
    157:162:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getDateOfBirth() -> getDateOfBirth
org.sandrob.bouncycastle.asn1.isismtt.x509.MonetaryLimit -> org.sandrob.bouncycastle.asn1.isismtt.x509.MonetaryLimit:
    org.sandrob.bouncycastle.asn1.DERPrintableString currency -> a
    org.sandrob.bouncycastle.asn1.DERInteger amount -> b
    org.sandrob.bouncycastle.asn1.DERInteger exponent -> c
    47:57:org.sandrob.bouncycastle.asn1.isismtt.x509.MonetaryLimit getInstance(java.lang.Object) -> getInstance
    60:71:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    83:88:void <init>(java.lang.String,int,int) -> <init>
    92:92:java.lang.String getCurrency() -> getCurrency
    97:97:java.math.BigInteger getAmount() -> getAmount
    102:102:java.math.BigInteger getExponent() -> getExponent
    123:128:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority -> org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_isismtt_at_namingAuthorities_RechtWirtschaftSteuern -> id_isismtt_at_namingAuthorities_RechtWirtschaftSteuern
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier namingAuthorityId -> a
    java.lang.String namingAuthorityUrl -> b
    org.sandrob.bouncycastle.asn1.x500.DirectoryString namingAuthorityText -> c
    33:44:void <clinit>() -> <clinit>
    52:63:org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority getInstance(java.lang.Object) -> getInstance
    68:68:org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    86:149:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    156:156:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getNamingAuthorityId() -> getNamingAuthorityId
    164:164:org.sandrob.bouncycastle.asn1.x500.DirectoryString getNamingAuthorityText() -> getNamingAuthorityText
    172:172:java.lang.String getNamingAuthorityUrl() -> getNamingAuthorityUrl
    184:190:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.lang.String,org.sandrob.bouncycastle.asn1.x500.DirectoryString) -> <init>
    210:223:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.x509.ProcurationSyntax -> org.sandrob.bouncycastle.asn1.isismtt.x509.ProcurationSyntax:
    java.lang.String country -> a
    org.sandrob.bouncycastle.asn1.x500.DirectoryString typeOfSubstitution -> b
    org.sandrob.bouncycastle.asn1.x509.GeneralName thirdPerson -> c
    org.sandrob.bouncycastle.asn1.x509.IssuerSerial certRef -> d
    62:73:org.sandrob.bouncycastle.asn1.isismtt.x509.ProcurationSyntax getInstance(java.lang.Object) -> getInstance
    97:131:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    144:153:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.x500.DirectoryString,org.sandrob.bouncycastle.asn1.x509.IssuerSerial) -> <init>
    166:175:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.x500.DirectoryString,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    179:179:java.lang.String getCountry() -> getCountry
    184:184:org.sandrob.bouncycastle.asn1.x500.DirectoryString getTypeOfSubstitution() -> getTypeOfSubstitution
    189:189:org.sandrob.bouncycastle.asn1.x509.GeneralName getThirdPerson() -> getThirdPerson
    194:194:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getCertRef() -> getCertRef
    220:238:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.isismtt.x509.ProfessionInfo -> org.sandrob.bouncycastle.asn1.isismtt.x509.ProfessionInfo:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Rechtsanwltin -> Rechtsanwltin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Rechtsanwalt -> Rechtsanwalt
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Rechtsbeistand -> Rechtsbeistand
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Steuerberaterin -> Steuerberaterin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Steuerberater -> Steuerberater
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Steuerbevollmchtigte -> Steuerbevollmchtigte
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Steuerbevollmchtigter -> Steuerbevollmchtigter
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Notarin -> Notarin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Notar -> Notar
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Notarvertreterin -> Notarvertreterin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Notarvertreter -> Notarvertreter
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Notariatsverwalterin -> Notariatsverwalterin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Notariatsverwalter -> Notariatsverwalter
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Wirtschaftsprferin -> Wirtschaftsprferin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Wirtschaftsprfer -> Wirtschaftsprfer
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier VereidigteBuchprferin -> VereidigteBuchprferin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier VereidigterBuchprfer -> VereidigterBuchprfer
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Patentanwltin -> Patentanwltin
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier Patentanwalt -> Patentanwalt
    org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority namingAuthority -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence professionItems -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence professionOIDs -> c
    java.lang.String registrationNumber -> d
    org.sandrob.bouncycastle.asn1.ASN1OctetString addProfessionInfo -> e
    35:150:void <clinit>() -> <clinit>
    164:175:org.sandrob.bouncycastle.asn1.isismtt.x509.ProfessionInfo getInstance(java.lang.Object) -> getInstance
    195:272:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    287:309:void <init>(org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority,org.sandrob.bouncycastle.asn1.x500.DirectoryString[],org.sandrob.bouncycastle.asn1.DERObjectIdentifier[],java.lang.String,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    331:349:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    357:357:org.sandrob.bouncycastle.asn1.ASN1OctetString getAddProfessionInfo() -> getAddProfessionInfo
    365:365:org.sandrob.bouncycastle.asn1.isismtt.x509.NamingAuthority getNamingAuthority() -> getNamingAuthority
    373:379:org.sandrob.bouncycastle.asn1.x500.DirectoryString[] getProfessionItems() -> getProfessionItems
    387:397:org.sandrob.bouncycastle.asn1.DERObjectIdentifier[] getProfessionOIDs() -> getProfessionOIDs
    405:405:java.lang.String getRegistrationNumber() -> getRegistrationNumber
org.sandrob.bouncycastle.asn1.isismtt.x509.Restriction -> org.sandrob.bouncycastle.asn1.isismtt.x509.Restriction:
    org.sandrob.bouncycastle.asn1.x500.DirectoryString restriction -> a
    21:32:org.sandrob.bouncycastle.asn1.isismtt.x509.Restriction getInstance(java.lang.Object) -> getInstance
    46:49:void <init>(org.sandrob.bouncycastle.asn1.x500.DirectoryString) -> <init>
    56:59:void <init>(java.lang.String) -> <init>
    63:63:org.sandrob.bouncycastle.asn1.x500.DirectoryString getRestriction() -> getRestriction
    80:80:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.kisa.KISAObjectIdentifiers -> org.sandrob.bouncycastle.asn1.kisa.KISAObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_seedCBC -> id_seedCBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_npki_app_cmsSeed_wrap -> id_npki_app_cmsSeed_wrap
    5:8:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.microsoft.MicrosoftObjectIdentifiers -> org.sandrob.bouncycastle.asn1.microsoft.MicrosoftObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier microsoft -> microsoft
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier microsoftCertTemplateV1 -> microsoftCertTemplateV1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier microsoftCaVersion -> microsoftCaVersion
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier microsoftPrevCaCertHash -> microsoftPrevCaCertHash
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier microsoftCertTemplateV2 -> microsoftCertTemplateV2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier microsoftAppPolicies -> microsoftAppPolicies
    5:16:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.misc.CAST5CBCParameters -> org.sandrob.bouncycastle.asn1.misc.CAST5CBCParameters:
    org.sandrob.bouncycastle.asn1.DERInteger keyLength -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString iv -> b
    14:23:org.sandrob.bouncycastle.asn1.misc.CAST5CBCParameters getInstance(java.lang.Object) -> getInstance
    26:32:void <init>(byte[],int) -> <init>
    34:39:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    43:43:byte[] getIV() -> getIV
    48:48:int getKeyLength() -> getKeyLength
    64:69:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.misc.IDEACBCPar -> org.sandrob.bouncycastle.asn1.misc.IDEACBCPar:
    org.sandrob.bouncycastle.asn1.ASN1OctetString iv -> a
    13:22:org.sandrob.bouncycastle.asn1.misc.IDEACBCPar getInstance(java.lang.Object) -> getInstance
    25:29:void <init>(byte[]) -> <init>
    31:42:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:52:byte[] getIV() -> getIV
    66:73:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.misc.MiscObjectIdentifiers -> org.sandrob.bouncycastle.asn1.misc.MiscObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscape -> netscape
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCertType -> netscapeCertType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeBaseURL -> netscapeBaseURL
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeRevocationURL -> netscapeRevocationURL
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCARevocationURL -> netscapeCARevocationURL
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeRenewalURL -> netscapeRenewalURL
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCApolicyURL -> netscapeCApolicyURL
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeSSLServerName -> netscapeSSLServerName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCertComment -> netscapeCertComment
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier verisign -> verisign
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier verisignCzagExtension -> verisignCzagExtension
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier verisignDnbDunsNumber -> verisignDnbDunsNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier novell -> novell
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier novellSecurityAttribs -> novellSecurityAttribs
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier entrust -> entrust
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier entrustVersionExtension -> entrustVersionExtension
    5:46:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.misc.NetscapeCertType -> org.sandrob.bouncycastle.asn1.misc.NetscapeCertType:
    int sslClient -> sslClient
    int sslServer -> sslServer
    int smime -> smime
    int objectSigning -> objectSigning
    int reserved -> reserved
    int sslCA -> sslCA
    int smimeCA -> smimeCA
    int objectSigningCA -> objectSigningCA
    41:42:void <init>(int) -> <init>
    47:48:void <init>(org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    52:52:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.misc.NetscapeRevocationURL -> org.sandrob.bouncycastle.asn1.misc.NetscapeRevocationURL:
    11:12:void <init>(org.sandrob.bouncycastle.asn1.DERIA5String) -> <init>
    16:16:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.misc.VerisignCzagExtension -> org.sandrob.bouncycastle.asn1.misc.VerisignCzagExtension:
    11:12:void <init>(org.sandrob.bouncycastle.asn1.DERIA5String) -> <init>
    16:16:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.mozilla.PublicKeyAndChallenge -> org.sandrob.bouncycastle.asn1.mozilla.PublicKeyAndChallenge:
    org.sandrob.bouncycastle.asn1.ASN1Sequence pkacSeq -> a
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo spki -> b
    org.sandrob.bouncycastle.asn1.DERIA5String challenge -> c
    30:39:org.sandrob.bouncycastle.asn1.mozilla.PublicKeyAndChallenge getInstance(java.lang.Object) -> getInstance
    42:47:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:51:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    56:56:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    61:61:org.sandrob.bouncycastle.asn1.DERIA5String getChallenge() -> getChallenge
org.sandrob.bouncycastle.asn1.nist.NISTNamedCurves -> org.sandrob.bouncycastle.asn1.nist.NISTNamedCurves:
    java.util.Hashtable objIds -> a
    java.util.Hashtable names -> b
    15:39:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    22:24:void defineCurve(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    45:52:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    64:64:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByOID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getByOID
    76:76:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> getOID
    85:85:java.lang.String getName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getName
    94:94:java.util.Enumeration getNames() -> getNames
org.sandrob.bouncycastle.asn1.nist.NISTObjectIdentifiers -> org.sandrob.bouncycastle.asn1.nist.NISTObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier nistAlgorithm -> nistAlgorithm
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sha256 -> id_sha256
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sha384 -> id_sha384
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sha512 -> id_sha512
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sha224 -> id_sha224
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier aes -> aes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_ECB -> id_aes128_ECB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_CBC -> id_aes128_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_OFB -> id_aes128_OFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_CFB -> id_aes128_CFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_wrap -> id_aes128_wrap
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_GCM -> id_aes128_GCM
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_CCM -> id_aes128_CCM
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_ECB -> id_aes192_ECB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_CBC -> id_aes192_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_OFB -> id_aes192_OFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_CFB -> id_aes192_CFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_wrap -> id_aes192_wrap
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_GCM -> id_aes192_GCM
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_CCM -> id_aes192_CCM
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_ECB -> id_aes256_ECB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC -> id_aes256_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_OFB -> id_aes256_OFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_CFB -> id_aes256_CFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_wrap -> id_aes256_wrap
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_GCM -> id_aes256_GCM
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_CCM -> id_aes256_CCM
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_dsa_with_sha2 -> id_dsa_with_sha2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha224 -> dsa_with_sha224
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha256 -> dsa_with_sha256
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha384 -> dsa_with_sha384
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha512 -> dsa_with_sha512
    5:55:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.ntt.NTTObjectIdentifiers -> org.sandrob.bouncycastle.asn1.ntt.NTTObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia128_cbc -> id_camellia128_cbc
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia192_cbc -> id_camellia192_cbc
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia256_cbc -> id_camellia256_cbc
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia128_wrap -> id_camellia128_wrap
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia192_wrap -> id_camellia192_wrap
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia256_wrap -> id_camellia256_wrap
    8:16:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse -> org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse:
    org.sandrob.bouncycastle.asn1.ocsp.ResponseData tbsResponseData -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> b
    org.sandrob.bouncycastle.asn1.DERBitString signature -> c
    org.sandrob.bouncycastle.asn1.ASN1Sequence certs -> d
    21:31:void <init>(org.sandrob.bouncycastle.asn1.ocsp.ResponseData,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    33:44:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    50:50:org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    56:65:org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse getInstance(java.lang.Object) -> getInstance
    70:70:org.sandrob.bouncycastle.asn1.ocsp.ResponseData getTbsResponseData() -> getTbsResponseData
    75:75:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    80:80:org.sandrob.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    85:85:org.sandrob.bouncycastle.asn1.ASN1Sequence getCerts() -> getCerts
    100:110:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.CertID -> org.sandrob.bouncycastle.asn1.ocsp.CertID:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString issuerNameHash -> b
    org.sandrob.bouncycastle.asn1.ASN1OctetString issuerKeyHash -> c
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> d
    21:31:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    33:40:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:46:org.sandrob.bouncycastle.asn1.ocsp.CertID getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    52:61:org.sandrob.bouncycastle.asn1.ocsp.CertID getInstance(java.lang.Object) -> getInstance
    66:66:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    71:71:org.sandrob.bouncycastle.asn1.ASN1OctetString getIssuerNameHash() -> getIssuerNameHash
    76:76:org.sandrob.bouncycastle.asn1.ASN1OctetString getIssuerKeyHash() -> getIssuerKeyHash
    81:81:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    96:103:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.CertStatus -> org.sandrob.bouncycastle.asn1.ocsp.CertStatus:
    int tagNo -> a
    org.sandrob.bouncycastle.asn1.DEREncodable value -> b
    21:25:void <init>() -> <init>
    27:32:void <init>(org.sandrob.bouncycastle.asn1.ocsp.RevokedInfo) -> <init>
    34:40:void <init>(int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    42:58:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    63:72:org.sandrob.bouncycastle.asn1.ocsp.CertStatus getInstance(java.lang.Object) -> getInstance
    79:79:org.sandrob.bouncycastle.asn1.ocsp.CertStatus getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    84:84:int getTagNo() -> getTagNo
    89:89:org.sandrob.bouncycastle.asn1.DEREncodable getStatus() -> getStatus
    103:103:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.CrlID -> org.sandrob.bouncycastle.asn1.ocsp.CrlID:
    org.sandrob.bouncycastle.asn1.DERIA5String crlUrl -> a
    org.sandrob.bouncycastle.asn1.DERInteger crlNum -> b
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime crlTime -> c
    14:39:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    43:43:org.sandrob.bouncycastle.asn1.DERIA5String getCrlUrl() -> getCrlUrl
    48:48:org.sandrob.bouncycastle.asn1.DERInteger getCrlNum() -> getCrlNum
    53:53:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getCrlTime() -> getCrlTime
    67:84:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers -> org.sandrob.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers:
    java.lang.String pkix_ocsp -> pkix_ocsp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp -> id_pkix_ocsp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_basic -> id_pkix_ocsp_basic
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_nonce -> id_pkix_ocsp_nonce
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_crl -> id_pkix_ocsp_crl
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_response -> id_pkix_ocsp_response
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_nocheck -> id_pkix_ocsp_nocheck
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_archive_cutoff -> id_pkix_ocsp_archive_cutoff
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_service_locator -> id_pkix_ocsp_service_locator
    5:21:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.ocsp.OCSPRequest -> org.sandrob.bouncycastle.asn1.ocsp.OCSPRequest:
    org.sandrob.bouncycastle.asn1.ocsp.TBSRequest tbsRequest -> a
    org.sandrob.bouncycastle.asn1.ocsp.Signature optionalSignature -> b
    17:23:void <init>(org.sandrob.bouncycastle.asn1.ocsp.TBSRequest,org.sandrob.bouncycastle.asn1.ocsp.Signature) -> <init>
    25:35:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    41:41:org.sandrob.bouncycastle.asn1.ocsp.OCSPRequest getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    47:56:org.sandrob.bouncycastle.asn1.ocsp.OCSPRequest getInstance(java.lang.Object) -> getInstance
    61:61:org.sandrob.bouncycastle.asn1.ocsp.TBSRequest getTbsRequest() -> getTbsRequest
    66:66:org.sandrob.bouncycastle.asn1.ocsp.Signature getOptionalSignature() -> getOptionalSignature
    79:88:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.OCSPResponse -> org.sandrob.bouncycastle.asn1.ocsp.OCSPResponse:
    org.sandrob.bouncycastle.asn1.ocsp.OCSPResponseStatus responseStatus -> a
    org.sandrob.bouncycastle.asn1.ocsp.ResponseBytes responseBytes -> b
    18:24:void <init>(org.sandrob.bouncycastle.asn1.ocsp.OCSPResponseStatus,org.sandrob.bouncycastle.asn1.ocsp.ResponseBytes) -> <init>
    26:37:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    43:43:org.sandrob.bouncycastle.asn1.ocsp.OCSPResponse getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    49:58:org.sandrob.bouncycastle.asn1.ocsp.OCSPResponse getInstance(java.lang.Object) -> getInstance
    63:63:org.sandrob.bouncycastle.asn1.ocsp.OCSPResponseStatus getResponseStatus() -> getResponseStatus
    68:68:org.sandrob.bouncycastle.asn1.ocsp.ResponseBytes getResponseBytes() -> getResponseBytes
    81:90:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.OCSPResponseStatus -> org.sandrob.bouncycastle.asn1.ocsp.OCSPResponseStatus:
    int SUCCESSFUL -> SUCCESSFUL
    int MALFORMED_REQUEST -> MALFORMED_REQUEST
    int INTERNAL_ERROR -> INTERNAL_ERROR
    int TRY_LATER -> TRY_LATER
    int SIG_REQUIRED -> SIG_REQUIRED
    int UNAUTHORIZED -> UNAUTHORIZED
    32:33:void <init>(int) -> <init>
    38:39:void <init>(org.sandrob.bouncycastle.asn1.DEREnumerated) -> <init>
org.sandrob.bouncycastle.asn1.ocsp.Request -> org.sandrob.bouncycastle.asn1.ocsp.Request:
    org.sandrob.bouncycastle.asn1.ocsp.CertID reqCert -> a
    org.sandrob.bouncycastle.asn1.x509.X509Extensions singleRequestExtensions -> b
    18:24:void <init>(org.sandrob.bouncycastle.asn1.ocsp.CertID,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    26:36:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    42:42:org.sandrob.bouncycastle.asn1.ocsp.Request getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    48:57:org.sandrob.bouncycastle.asn1.ocsp.Request getInstance(java.lang.Object) -> getInstance
    62:62:org.sandrob.bouncycastle.asn1.ocsp.CertID getReqCert() -> getReqCert
    67:67:org.sandrob.bouncycastle.asn1.x509.X509Extensions getSingleRequestExtensions() -> getSingleRequestExtensions
    80:89:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.ResponderID -> org.sandrob.bouncycastle.asn1.ocsp.ResponderID:
    org.sandrob.bouncycastle.asn1.DEREncodable value -> a
    19:23:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    25:29:void <init>(org.sandrob.bouncycastle.asn1.x500.X500Name) -> <init>
    34:56:org.sandrob.bouncycastle.asn1.ocsp.ResponderID getInstance(java.lang.Object) -> getInstance
    63:63:org.sandrob.bouncycastle.asn1.ocsp.ResponderID getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    68:74:byte[] getKeyHash() -> getKeyHash
    79:84:org.sandrob.bouncycastle.asn1.x500.X500Name getName() -> getName
    97:102:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.ResponseBytes -> org.sandrob.bouncycastle.asn1.ocsp.ResponseBytes:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier responseType -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString response -> b
    18:24:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    26:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    37:37:org.sandrob.bouncycastle.asn1.ocsp.ResponseBytes getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    43:52:org.sandrob.bouncycastle.asn1.ocsp.ResponseBytes getInstance(java.lang.Object) -> getInstance
    57:57:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getResponseType() -> getResponseType
    62:62:org.sandrob.bouncycastle.asn1.ASN1OctetString getResponse() -> getResponse
    75:80:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.ResponseData -> org.sandrob.bouncycastle.asn1.ocsp.ResponseData:
    org.sandrob.bouncycastle.asn1.DERInteger V1 -> a
    boolean versionPresent -> b
    org.sandrob.bouncycastle.asn1.DERInteger version -> c
    org.sandrob.bouncycastle.asn1.ocsp.ResponderID responderID -> d
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime producedAt -> e
    org.sandrob.bouncycastle.asn1.ASN1Sequence responses -> f
    org.sandrob.bouncycastle.asn1.x509.X509Extensions responseExtensions -> g
    14:17:void <clinit>() -> <clinit>
    27:39:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.ocsp.ResponderID,org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.ASN1Sequence,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    47:48:void <init>(org.sandrob.bouncycastle.asn1.ocsp.ResponderID,org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.ASN1Sequence,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    50:85:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    91:91:org.sandrob.bouncycastle.asn1.ocsp.ResponseData getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    97:106:org.sandrob.bouncycastle.asn1.ocsp.ResponseData getInstance(java.lang.Object) -> getInstance
    111:111:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    116:116:org.sandrob.bouncycastle.asn1.ocsp.ResponderID getResponderID() -> getResponderID
    121:121:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getProducedAt() -> getProducedAt
    126:126:org.sandrob.bouncycastle.asn1.ASN1Sequence getResponses() -> getResponses
    131:131:org.sandrob.bouncycastle.asn1.x509.X509Extensions getResponseExtensions() -> getResponseExtensions
    147:162:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.RevokedInfo -> org.sandrob.bouncycastle.asn1.ocsp.RevokedInfo:
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime revocationTime -> a
    org.sandrob.bouncycastle.asn1.x509.CRLReason revocationReason -> b
    20:26:void <init>(org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.x509.CRLReason) -> <init>
    28:38:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    44:44:org.sandrob.bouncycastle.asn1.ocsp.RevokedInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    50:59:org.sandrob.bouncycastle.asn1.ocsp.RevokedInfo getInstance(java.lang.Object) -> getInstance
    64:64:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getRevocationTime() -> getRevocationTime
    69:69:org.sandrob.bouncycastle.asn1.x509.CRLReason getRevocationReason() -> getRevocationReason
    82:90:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.ServiceLocator -> org.sandrob.bouncycastle.asn1.ocsp.ServiceLocator:
    org.sandrob.bouncycastle.asn1.x500.X500Name issuer -> a
    org.sandrob.bouncycastle.asn1.DERObject locator -> b
    9:9:void <init>() -> <init>
    25:34:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.Signature -> org.sandrob.bouncycastle.asn1.ocsp.Signature:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> a
    org.sandrob.bouncycastle.asn1.DERBitString signature -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence certs -> c
    20:26:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    28:36:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    38:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    55:55:org.sandrob.bouncycastle.asn1.ocsp.Signature getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    61:70:org.sandrob.bouncycastle.asn1.ocsp.Signature getInstance(java.lang.Object) -> getInstance
    75:75:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    80:80:org.sandrob.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    85:85:org.sandrob.bouncycastle.asn1.ASN1Sequence getCerts() -> getCerts
    99:109:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.SingleResponse -> org.sandrob.bouncycastle.asn1.ocsp.SingleResponse:
    org.sandrob.bouncycastle.asn1.ocsp.CertID certID -> a
    org.sandrob.bouncycastle.asn1.ocsp.CertStatus certStatus -> b
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime thisUpdate -> c
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime nextUpdate -> d
    org.sandrob.bouncycastle.asn1.x509.X509Extensions singleExtensions -> e
    22:34:void <init>(org.sandrob.bouncycastle.asn1.ocsp.CertID,org.sandrob.bouncycastle.asn1.ocsp.CertStatus,org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    36:63:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    69:69:org.sandrob.bouncycastle.asn1.ocsp.SingleResponse getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    75:84:org.sandrob.bouncycastle.asn1.ocsp.SingleResponse getInstance(java.lang.Object) -> getInstance
    89:89:org.sandrob.bouncycastle.asn1.ocsp.CertID getCertID() -> getCertID
    94:94:org.sandrob.bouncycastle.asn1.ocsp.CertStatus getCertStatus() -> getCertStatus
    99:99:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getThisUpdate() -> getThisUpdate
    104:104:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getNextUpdate() -> getNextUpdate
    109:109:org.sandrob.bouncycastle.asn1.x509.X509Extensions getSingleExtensions() -> getSingleExtensions
    125:141:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.ocsp.TBSRequest -> org.sandrob.bouncycastle.asn1.ocsp.TBSRequest:
    org.sandrob.bouncycastle.asn1.DERInteger V1 -> f
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName requestorName -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence requestList -> c
    org.sandrob.bouncycastle.asn1.x509.X509Extensions requestExtensions -> d
    boolean versionSet -> e
    14:17:void <clinit>() -> <clinit>
    26:35:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.ASN1Sequence,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    37:73:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    79:79:org.sandrob.bouncycastle.asn1.ocsp.TBSRequest getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    85:94:org.sandrob.bouncycastle.asn1.ocsp.TBSRequest getInstance(java.lang.Object) -> getInstance
    99:99:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    104:104:org.sandrob.bouncycastle.asn1.x509.GeneralName getRequestorName() -> getRequestorName
    109:109:org.sandrob.bouncycastle.asn1.ASN1Sequence getRequestList() -> getRequestList
    114:114:org.sandrob.bouncycastle.asn1.x509.X509Extensions getRequestExtensions() -> getRequestExtensions
    129:152:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.oiw.ElGamalParameter -> org.sandrob.bouncycastle.asn1.oiw.ElGamalParameter:
    org.sandrob.bouncycastle.asn1.DERInteger p -> a
    org.sandrob.bouncycastle.asn1.DERInteger g -> b
    13:19:void <init>(java.math.BigInteger,java.math.BigInteger) -> <init>
    21:28:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    32:32:java.math.BigInteger getP() -> getP
    37:37:java.math.BigInteger getG() -> getG
    42:47:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.oiw.OIWObjectIdentifiers -> org.sandrob.bouncycastle.asn1.oiw.OIWObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md4WithRSA -> md4WithRSA
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md5WithRSA -> md5WithRSA
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md4WithRSAEncryption -> md4WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier desECB -> desECB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier desCBC -> desCBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier desOFB -> desOFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier desCFB -> desCFB
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier desEDE -> desEDE
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier idSHA1 -> idSHA1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dsaWithSHA1 -> dsaWithSHA1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sha1WithRSA -> sha1WithRSA
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier elGamalAlgorithm -> elGamalAlgorithm
    5:29:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.pkcs.Attribute -> org.sandrob.bouncycastle.asn1.pkcs.Attribute:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier attrType -> a
    org.sandrob.bouncycastle.asn1.ASN1Set attrValues -> b
    26:36:org.sandrob.bouncycastle.asn1.pkcs.Attribute getInstance(java.lang.Object) -> getInstance
    39:44:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    46:52:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    56:56:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getAttrType() -> getAttrType
    61:61:org.sandrob.bouncycastle.asn1.ASN1Set getAttrValues() -> getAttrValues
    75:80:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.AuthenticatedSafe -> org.sandrob.bouncycastle.asn1.pkcs.AuthenticatedSafe:
    org.sandrob.bouncycastle.asn1.pkcs.ContentInfo[] info -> a
    14:23:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    25:29:void <init>(org.sandrob.bouncycastle.asn1.pkcs.ContentInfo[]) -> <init>
    33:33:org.sandrob.bouncycastle.asn1.pkcs.ContentInfo[] getContentInfo() -> getContentInfo
    38:45:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.CertBag -> org.sandrob.bouncycastle.asn1.pkcs.CertBag:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier certId -> b
    org.sandrob.bouncycastle.asn1.DERObject certValue -> c
    18:24:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    26:32:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    36:36:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getCertId() -> getCertId
    41:41:org.sandrob.bouncycastle.asn1.DERObject getCertValue() -> getCertValue
    46:51:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.CertificationRequest -> org.sandrob.bouncycastle.asn1.pkcs.CertificationRequest:
    org.sandrob.bouncycastle.asn1.pkcs.CertificationRequestInfo reqInfo -> reqInfo
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    org.sandrob.bouncycastle.asn1.DERBitString sigBits -> sigBits
    30:40:org.sandrob.bouncycastle.asn1.pkcs.CertificationRequest getInstance(java.lang.Object) -> getInstance
    24:45:void <init>() -> <init>
    24:55:void <init>(org.sandrob.bouncycastle.asn1.pkcs.CertificationRequestInfo,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    24:63:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    67:67:org.sandrob.bouncycastle.asn1.pkcs.CertificationRequestInfo getCertificationRequestInfo() -> getCertificationRequestInfo
    72:72:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    77:77:org.sandrob.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    83:89:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.CertificationRequestInfo -> org.sandrob.bouncycastle.asn1.pkcs.CertificationRequestInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.X509Name subject -> b
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPKInfo -> c
    org.sandrob.bouncycastle.asn1.ASN1Set attributes -> d
    44:53:org.sandrob.bouncycastle.asn1.pkcs.CertificationRequestInfo getInstance(java.lang.Object) -> getInstance
    36:69:void <init>(org.sandrob.bouncycastle.asn1.x500.X500Name,org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    36:84:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Name,org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    36:108:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    112:112:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    117:117:org.sandrob.bouncycastle.asn1.x509.X509Name getSubject() -> getSubject
    122:122:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    127:127:org.sandrob.bouncycastle.asn1.ASN1Set getAttributes() -> getAttributes
    132:143:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.ContentInfo -> org.sandrob.bouncycastle.asn1.pkcs.ContentInfo:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier contentType -> a
    org.sandrob.bouncycastle.asn1.DEREncodable content -> b
    25:34:org.sandrob.bouncycastle.asn1.pkcs.ContentInfo getInstance(java.lang.Object) -> getInstance
    37:48:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    50:56:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    60:60:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getContentType() -> getContentType
    65:65:org.sandrob.bouncycastle.asn1.DEREncodable getContent() -> getContent
    79:88:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.DHParameter -> org.sandrob.bouncycastle.asn1.pkcs.DHParameter:
    org.sandrob.bouncycastle.asn1.DERInteger p -> a
    org.sandrob.bouncycastle.asn1.DERInteger g -> b
    org.sandrob.bouncycastle.asn1.DERInteger l -> c
    18:34:void <init>(java.math.BigInteger,java.math.BigInteger,int) -> <init>
    36:52:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    56:56:java.math.BigInteger getP() -> getP
    61:61:java.math.BigInteger getG() -> getG
    66:71:java.math.BigInteger getL() -> getL
    76:86:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.EncryptedData -> org.sandrob.bouncycastle.asn1.pkcs.EncryptedData:
    org.sandrob.bouncycastle.asn1.ASN1Sequence data -> a
    44:53:org.sandrob.bouncycastle.asn1.pkcs.EncryptedData getInstance(java.lang.Object) -> getInstance
    56:67:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    69:81:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    85:85:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getContentType() -> getContentType
    90:90:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> getEncryptionAlgorithm
    95:102:org.sandrob.bouncycastle.asn1.ASN1OctetString getContent() -> getContent
    107:112:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo -> org.sandrob.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString data -> b
    20:27:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    29:35:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    40:49:org.sandrob.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo getInstance(java.lang.Object) -> getInstance
    54:54:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> getEncryptionAlgorithm
    59:59:byte[] getEncryptedData() -> getEncryptedData
    79:84:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.EncryptionScheme -> org.sandrob.bouncycastle.asn1.pkcs.EncryptionScheme:
    18:19:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    24:25:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    29:38:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object) -> getInstance
    43:43:org.sandrob.bouncycastle.asn1.DERObject getObject() -> getObject
    48:53:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.pkcs.IssuerAndSerialNumber -> org.sandrob.bouncycastle.asn1.pkcs.IssuerAndSerialNumber:
    org.sandrob.bouncycastle.asn1.x509.X509Name name -> a
    org.sandrob.bouncycastle.asn1.DERInteger certSerialNumber -> b
    22:31:org.sandrob.bouncycastle.asn1.pkcs.IssuerAndSerialNumber getInstance(java.lang.Object) -> getInstance
    34:39:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    41:47:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Name,java.math.BigInteger) -> <init>
    49:55:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Name,org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    59:59:org.sandrob.bouncycastle.asn1.x509.X509Name getName() -> getName
    64:64:org.sandrob.bouncycastle.asn1.DERInteger getCertificateSerialNumber() -> getCertificateSerialNumber
    69:74:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.KeyDerivationFunc -> org.sandrob.bouncycastle.asn1.pkcs.KeyDerivationFunc:
    14:15:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    21:22:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
org.sandrob.bouncycastle.asn1.pkcs.MacData -> org.sandrob.bouncycastle.asn1.pkcs.MacData:
    java.math.BigInteger ONE -> d
    org.sandrob.bouncycastle.asn1.x509.DigestInfo digInfo -> a
    byte[] salt -> b
    java.math.BigInteger iterationCount -> c
    15:18:void <clinit>() -> <clinit>
    27:36:org.sandrob.bouncycastle.asn1.pkcs.MacData getInstance(java.lang.Object) -> getInstance
    39:54:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    56:64:void <init>(org.sandrob.bouncycastle.asn1.x509.DigestInfo,byte[],int) -> <init>
    68:68:org.sandrob.bouncycastle.asn1.x509.DigestInfo getMac() -> getMac
    73:73:byte[] getSalt() -> getSalt
    78:78:java.math.BigInteger getIterationCount() -> getIterationCount
    94:104:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.PBEParameter -> org.sandrob.bouncycastle.asn1.pkcs.PBEParameter:
    org.sandrob.bouncycastle.asn1.DERInteger iterations -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString salt -> b
    20:30:void <init>(byte[],int) -> <init>
    32:37:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    42:51:org.sandrob.bouncycastle.asn1.pkcs.PBEParameter getInstance(java.lang.Object) -> getInstance
    56:56:java.math.BigInteger getIterationCount() -> getIterationCount
    61:61:byte[] getSalt() -> getSalt
    66:71:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.PBES2Algorithms -> org.sandrob.bouncycastle.asn1.pkcs.PBES2Algorithms:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier objectId -> a
    org.sandrob.bouncycastle.asn1.pkcs.KeyDerivationFunc func -> b
    org.sandrob.bouncycastle.asn1.pkcs.EncryptionScheme scheme -> c
    25:47:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:51:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getObjectId() -> getObjectId
    56:56:org.sandrob.bouncycastle.asn1.pkcs.KeyDerivationFunc getKeyDerivationFunc() -> getKeyDerivationFunc
    61:61:org.sandrob.bouncycastle.asn1.pkcs.EncryptionScheme getEncryptionScheme() -> getEncryptionScheme
    66:75:org.sandrob.bouncycastle.asn1.DERObject getDERObject() -> getDERObject
org.sandrob.bouncycastle.asn1.pkcs.PBES2Parameters -> org.sandrob.bouncycastle.asn1.pkcs.PBES2Parameters:
    org.sandrob.bouncycastle.asn1.pkcs.KeyDerivationFunc func -> a
    org.sandrob.bouncycastle.asn1.pkcs.EncryptionScheme scheme -> b
    22:32:org.sandrob.bouncycastle.asn1.pkcs.PBES2Parameters getInstance(java.lang.Object) -> getInstance
    35:51:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    55:55:org.sandrob.bouncycastle.asn1.pkcs.KeyDerivationFunc getKeyDerivationFunc() -> getKeyDerivationFunc
    60:60:org.sandrob.bouncycastle.asn1.pkcs.EncryptionScheme getEncryptionScheme() -> getEncryptionScheme
    65:70:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.PBKDF2Params -> org.sandrob.bouncycastle.asn1.pkcs.PBKDF2Params:
    org.sandrob.bouncycastle.asn1.ASN1OctetString octStr -> a
    org.sandrob.bouncycastle.asn1.DERInteger iterationCount -> b
    org.sandrob.bouncycastle.asn1.DERInteger keyLength -> c
    25:35:org.sandrob.bouncycastle.asn1.pkcs.PBKDF2Params getInstance(java.lang.Object) -> getInstance
    38:44:void <init>(byte[],int) -> <init>
    46:62:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    66:66:byte[] getSalt() -> getSalt
    71:71:java.math.BigInteger getIterationCount() -> getIterationCount
    76:81:java.math.BigInteger getKeyLength() -> getKeyLength
    86:96:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.PKCS12PBEParams -> org.sandrob.bouncycastle.asn1.pkcs.PKCS12PBEParams:
    org.sandrob.bouncycastle.asn1.DERInteger iterations -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString iv -> b
    20:26:void <init>(byte[],int) -> <init>
    28:33:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    38:47:org.sandrob.bouncycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object) -> getInstance
    52:52:java.math.BigInteger getIterations() -> getIterations
    57:57:byte[] getIV() -> getIV
    62:67:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers -> org.sandrob.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_1 -> pkcs_1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier rsaEncryption -> rsaEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md2WithRSAEncryption -> md2WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md4WithRSAEncryption -> md4WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md5WithRSAEncryption -> md5WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sha1WithRSAEncryption -> sha1WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier srsaOAEPEncryptionSET -> srsaOAEPEncryptionSET
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_RSAES_OAEP -> id_RSAES_OAEP
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_mgf1 -> id_mgf1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pSpecified -> id_pSpecified
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_RSASSA_PSS -> id_RSASSA_PSS
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sha256WithRSAEncryption -> sha256WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sha384WithRSAEncryption -> sha384WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sha512WithRSAEncryption -> sha512WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sha224WithRSAEncryption -> sha224WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_3 -> pkcs_3
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhKeyAgreement -> dhKeyAgreement
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_5 -> pkcs_5
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndDES_CBC -> pbeWithMD2AndDES_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndRC2_CBC -> pbeWithMD2AndRC2_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndDES_CBC -> pbeWithMD5AndDES_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndRC2_CBC -> pbeWithMD5AndRC2_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndDES_CBC -> pbeWithSHA1AndDES_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndRC2_CBC -> pbeWithSHA1AndRC2_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_PBES2 -> id_PBES2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_PBKDF2 -> id_PBKDF2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier encryptionAlgorithm -> encryptionAlgorithm
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC -> des_EDE3_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier RC2_CBC -> RC2_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier digestAlgorithm -> digestAlgorithm
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md2 -> md2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md4 -> md4
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier md5 -> md5
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA1 -> id_hmacWithSHA1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA224 -> id_hmacWithSHA224
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA256 -> id_hmacWithSHA256
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA384 -> id_hmacWithSHA384
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA512 -> id_hmacWithSHA512
    java.lang.String pkcs_7 -> pkcs_7
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier data -> data
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier signedData -> signedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier envelopedData -> envelopedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier signedAndEnvelopedData -> signedAndEnvelopedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier digestedData -> digestedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier encryptedData -> encryptedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9 -> pkcs_9
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_emailAddress -> pkcs_9_at_emailAddress
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_unstructuredName -> pkcs_9_at_unstructuredName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_contentType -> pkcs_9_at_contentType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_messageDigest -> pkcs_9_at_messageDigest
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_signingTime -> pkcs_9_at_signingTime
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_counterSignature -> pkcs_9_at_counterSignature
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_challengePassword -> pkcs_9_at_challengePassword
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_unstructuredAddress -> pkcs_9_at_unstructuredAddress
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_extendedCertificateAttributes -> pkcs_9_at_extendedCertificateAttributes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_signingDescription -> pkcs_9_at_signingDescription
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_extensionRequest -> pkcs_9_at_extensionRequest
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_smimeCapabilities -> pkcs_9_at_smimeCapabilities
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_friendlyName -> pkcs_9_at_friendlyName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_localKeyId -> pkcs_9_at_localKeyId
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier x509certType -> x509certType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier certTypes -> certTypes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier x509Certificate -> x509Certificate
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sdsiCertificate -> sdsiCertificate
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier crlTypes -> crlTypes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier x509Crl -> x509Crl
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_alg_PWRI_KEK -> id_alg_PWRI_KEK
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier preferSignedData -> preferSignedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier canNotDecryptAny -> canNotDecryptAny
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sMIMECapabilitiesVersions -> sMIMECapabilitiesVersions
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ct -> id_ct
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_authData -> id_ct_authData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_TSTInfo -> id_ct_TSTInfo
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_compressedData -> id_ct_compressedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_authEnvelopedData -> id_ct_authEnvelopedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_timestampedData -> id_ct_timestampedData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_cti -> id_cti
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfOrigin -> id_cti_ets_proofOfOrigin
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfReceipt -> id_cti_ets_proofOfReceipt
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfDelivery -> id_cti_ets_proofOfDelivery
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfSender -> id_cti_ets_proofOfSender
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfApproval -> id_cti_ets_proofOfApproval
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfCreation -> id_cti_ets_proofOfCreation
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa -> id_aa
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_receiptRequest -> id_aa_receiptRequest
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_contentHint -> id_aa_contentHint
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_msgSigDigest -> id_aa_msgSigDigest
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_contentReference -> id_aa_contentReference
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_encrypKeyPref -> id_aa_encrypKeyPref
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signingCertificate -> id_aa_signingCertificate
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signingCertificateV2 -> id_aa_signingCertificateV2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_contentIdentifier -> id_aa_contentIdentifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signatureTimeStampToken -> id_aa_signatureTimeStampToken
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_sigPolicyId -> id_aa_ets_sigPolicyId
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_commitmentType -> id_aa_ets_commitmentType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_signerLocation -> id_aa_ets_signerLocation
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_signerAttr -> id_aa_ets_signerAttr
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_otherSigCert -> id_aa_ets_otherSigCert
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_contentTimestamp -> id_aa_ets_contentTimestamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certificateRefs -> id_aa_ets_certificateRefs
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_revocationRefs -> id_aa_ets_revocationRefs
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certValues -> id_aa_ets_certValues
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_revocationValues -> id_aa_ets_revocationValues
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_escTimeStamp -> id_aa_ets_escTimeStamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certCRLTimestamp -> id_aa_ets_certCRLTimestamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_archiveTimestamp -> id_aa_ets_archiveTimestamp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_sigPolicyId -> id_aa_sigPolicyId
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_commitmentType -> id_aa_commitmentType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signerLocation -> id_aa_signerLocation
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_otherSigCert -> id_aa_otherSigCert
    java.lang.String id_spq -> id_spq
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_spq_ets_uri -> id_spq_ets_uri
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_spq_ets_unotice -> id_spq_ets_unotice
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_12 -> pkcs_12
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier bagtypes -> bagtypes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier keyBag -> keyBag
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs8ShroudedKeyBag -> pkcs8ShroudedKeyBag
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier certBag -> certBag
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier crlBag -> crlBag
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secretBag -> secretBag
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier safeContentsBag -> safeContentsBag
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_12PbeIds -> pkcs_12PbeIds
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC4 -> pbeWithSHAAnd128BitRC4
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC4 -> pbeWithSHAAnd40BitRC4
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC -> pbeWithSHAAnd3_KeyTripleDES_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd2_KeyTripleDES_CBC -> pbeWithSHAAnd2_KeyTripleDES_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC2_CBC -> pbeWithSHAAnd128BitRC2_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier pbewithSHAAnd40BitRC2_CBC -> pbewithSHAAnd40BitRC2_CBC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_alg_CMS3DESwrap -> id_alg_CMS3DESwrap
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_alg_CMSRC2wrap -> id_alg_CMSRC2wrap
    5:250:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.pkcs.Pfx -> org.sandrob.bouncycastle.asn1.pkcs.Pfx:
    org.sandrob.bouncycastle.asn1.pkcs.ContentInfo contentInfo -> a
    org.sandrob.bouncycastle.asn1.pkcs.MacData macData -> b
    20:37:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    20:45:void <init>(org.sandrob.bouncycastle.asn1.pkcs.ContentInfo,org.sandrob.bouncycastle.asn1.pkcs.MacData) -> <init>
    49:49:org.sandrob.bouncycastle.asn1.pkcs.ContentInfo getAuthSafe() -> getAuthSafe
    54:54:org.sandrob.bouncycastle.asn1.pkcs.MacData getMacData() -> getMacData
    59:69:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo -> org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo:
    org.sandrob.bouncycastle.asn1.DERObject privKey -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> b
    org.sandrob.bouncycastle.asn1.ASN1Set attributes -> c
    32:32:org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    38:47:org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object) -> getInstance
    54:55:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    57:65:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERObject,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    67:95:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    99:99:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> getAlgorithmId
    104:104:org.sandrob.bouncycastle.asn1.DERObject getPrivateKey() -> getPrivateKey
    109:109:org.sandrob.bouncycastle.asn1.ASN1Set getAttributes() -> getAttributes
    131:142:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.RC2CBCParameter -> org.sandrob.bouncycastle.asn1.pkcs.RC2CBCParameter:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString iv -> b
    23:28:org.sandrob.bouncycastle.asn1.pkcs.RC2CBCParameter getInstance(java.lang.Object) -> getInstance
    31:36:void <init>(byte[]) -> <init>
    38:44:void <init>(int,byte[]) -> <init>
    46:59:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    63:68:java.math.BigInteger getRC2ParameterVersion() -> getRC2ParameterVersion
    73:73:byte[] getIV() -> getIV
    78:87:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.RSAESOAEPparams -> org.sandrob.bouncycastle.asn1.pkcs.RSAESOAEPparams:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier maskGenAlgorithm -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier pSourceAlgorithm -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_HASH_ALGORITHM -> DEFAULT_HASH_ALGORITHM
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_MASK_GEN_FUNCTION -> DEFAULT_MASK_GEN_FUNCTION
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_P_SOURCE_ALGORITHM -> DEFAULT_P_SOURCE_ALGORITHM
    15:24:void <clinit>() -> <clinit>
    29:38:org.sandrob.bouncycastle.asn1.pkcs.RSAESOAEPparams getInstance(java.lang.Object) -> getInstance
    44:49:void <init>() -> <init>
    51:59:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> <init>
    61:87:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    91:91:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    96:96:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getMaskGenAlgorithm() -> getMaskGenAlgorithm
    101:101:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getPSourceAlgorithm() -> getPSourceAlgorithm
    132:149:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure -> org.sandrob.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure:
    int version -> a
    java.math.BigInteger modulus -> b
    java.math.BigInteger publicExponent -> c
    java.math.BigInteger privateExponent -> d
    java.math.BigInteger prime1 -> e
    java.math.BigInteger prime2 -> f
    java.math.BigInteger exponent1 -> g
    java.math.BigInteger exponent2 -> h
    java.math.BigInteger coefficient -> i
    org.sandrob.bouncycastle.asn1.ASN1Sequence otherPrimeInfos -> j
    32:32:org.sandrob.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    38:47:org.sandrob.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure getInstance(java.lang.Object) -> getInstance
    26:69:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    26:96:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    100:100:int getVersion() -> getVersion
    105:105:java.math.BigInteger getModulus() -> getModulus
    110:110:java.math.BigInteger getPublicExponent() -> getPublicExponent
    115:115:java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    120:120:java.math.BigInteger getPrime1() -> getPrime1
    125:125:java.math.BigInteger getPrime2() -> getPrime2
    130:130:java.math.BigInteger getExponent1() -> getExponent1
    135:135:java.math.BigInteger getExponent2() -> getExponent2
    140:140:java.math.BigInteger getCoefficient() -> getCoefficient
    167:184:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.RSASSAPSSparams -> org.sandrob.bouncycastle.asn1.pkcs.RSASSAPSSparams:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier maskGenAlgorithm -> b
    org.sandrob.bouncycastle.asn1.DERInteger saltLength -> c
    org.sandrob.bouncycastle.asn1.DERInteger trailerField -> d
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_HASH_ALGORITHM -> DEFAULT_HASH_ALGORITHM
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_MASK_GEN_FUNCTION -> DEFAULT_MASK_GEN_FUNCTION
    org.sandrob.bouncycastle.asn1.DERInteger DEFAULT_SALT_LENGTH -> DEFAULT_SALT_LENGTH
    org.sandrob.bouncycastle.asn1.DERInteger DEFAULT_TRAILER_FIELD -> DEFAULT_TRAILER_FIELD
    15:26:void <clinit>() -> <clinit>
    31:40:org.sandrob.bouncycastle.asn1.pkcs.RSASSAPSSparams getInstance(java.lang.Object) -> getInstance
    46:52:void <init>() -> <init>
    54:64:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    66:96:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    100:100:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    105:105:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getMaskGenAlgorithm() -> getMaskGenAlgorithm
    110:110:org.sandrob.bouncycastle.asn1.DERInteger getSaltLength() -> getSaltLength
    115:115:org.sandrob.bouncycastle.asn1.DERInteger getTrailerField() -> getTrailerField
    146:168:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.SafeBag -> org.sandrob.bouncycastle.asn1.pkcs.SafeBag:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier bagId -> a
    org.sandrob.bouncycastle.asn1.DERObject bagValue -> b
    org.sandrob.bouncycastle.asn1.ASN1Set bagAttributes -> c
    19:26:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    28:36:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObject,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    38:47:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:51:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getBagId() -> getBagId
    56:56:org.sandrob.bouncycastle.asn1.DERObject getBagValue() -> getBagValue
    61:61:org.sandrob.bouncycastle.asn1.ASN1Set getBagAttributes() -> getBagAttributes
    66:76:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.SignedData -> org.sandrob.bouncycastle.asn1.pkcs.SignedData:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.ASN1Set digestAlgorithms -> b
    org.sandrob.bouncycastle.asn1.pkcs.ContentInfo contentInfo -> c
    org.sandrob.bouncycastle.asn1.ASN1Set certificates -> d
    org.sandrob.bouncycastle.asn1.ASN1Set crls -> e
    org.sandrob.bouncycastle.asn1.ASN1Set signerInfos -> f
    31:40:org.sandrob.bouncycastle.asn1.pkcs.SignedData getInstance(java.lang.Object) -> getInstance
    43:57:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.pkcs.ContentInfo,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    59:97:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    101:101:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    106:106:org.sandrob.bouncycastle.asn1.ASN1Set getDigestAlgorithms() -> getDigestAlgorithms
    111:111:org.sandrob.bouncycastle.asn1.pkcs.ContentInfo getContentInfo() -> getContentInfo
    116:116:org.sandrob.bouncycastle.asn1.ASN1Set getCertificates() -> getCertificates
    121:121:org.sandrob.bouncycastle.asn1.ASN1Set getCRLs() -> getCRLs
    126:126:org.sandrob.bouncycastle.asn1.ASN1Set getSignerInfos() -> getSignerInfos
    146:164:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.pkcs.SignerInfo -> org.sandrob.bouncycastle.asn1.pkcs.SignerInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.pkcs.IssuerAndSerialNumber issuerAndSerialNumber -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier digAlgorithm -> c
    org.sandrob.bouncycastle.asn1.ASN1Set authenticatedAttributes -> d
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier digEncryptionAlgorithm -> e
    org.sandrob.bouncycastle.asn1.ASN1OctetString encryptedDigest -> f
    org.sandrob.bouncycastle.asn1.ASN1Set unauthenticatedAttributes -> g
    25:34:org.sandrob.bouncycastle.asn1.pkcs.SignerInfo getInstance(java.lang.Object) -> getInstance
    37:53:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.pkcs.IssuerAndSerialNumber,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1Set,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    55:88:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    92:92:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    97:97:org.sandrob.bouncycastle.asn1.pkcs.IssuerAndSerialNumber getIssuerAndSerialNumber() -> getIssuerAndSerialNumber
    102:102:org.sandrob.bouncycastle.asn1.ASN1Set getAuthenticatedAttributes() -> getAuthenticatedAttributes
    107:107:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    112:112:org.sandrob.bouncycastle.asn1.ASN1OctetString getEncryptedDigest() -> getEncryptedDigest
    117:117:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestEncryptionAlgorithm() -> getDigestEncryptionAlgorithm
    122:122:org.sandrob.bouncycastle.asn1.ASN1Set getUnauthenticatedAttributes() -> getUnauthenticatedAttributes
    147:166:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.sec.ECPrivateKeyStructure -> org.sandrob.bouncycastle.asn1.sec.ECPrivateKeyStructure:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    29:33:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    35:46:void <init>(java.math.BigInteger) -> <init>
    52:53:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    55:78:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.asn1.DERBitString,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    82:84:java.math.BigInteger getKey() -> getKey
    89:89:org.sandrob.bouncycastle.asn1.DERBitString getPublicKey() -> getPublicKey
    94:94:org.sandrob.bouncycastle.asn1.ASN1Object getParameters() -> getParameters
    99:114:org.sandrob.bouncycastle.asn1.ASN1Object getObjectInTag(int) -> a
    126:126:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves:
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp112r1 -> a
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp112r2 -> b
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp128r1 -> c
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp128r2 -> d
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp160k1 -> e
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp160r1 -> f
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp160r2 -> g
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp192k1 -> h
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp192r1 -> i
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp224k1 -> j
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp224r1 -> k
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp256k1 -> l
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp256r1 -> m
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp384r1 -> n
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder secp521r1 -> o
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect113r1 -> p
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect113r2 -> q
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect131r1 -> r
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect131r2 -> s
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect163k1 -> t
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect163r1 -> u
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect163r2 -> v
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect193r1 -> w
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect193r2 -> x
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect233k1 -> y
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect233r1 -> z
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect239k1 -> A
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect283k1 -> B
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect283r1 -> C
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect409k1 -> D
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect409r1 -> E
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect571k1 -> F
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder sect571r1 -> G
    java.util.Hashtable objIds -> H
    java.util.Hashtable curves -> I
    java.util.Hashtable names -> J
    16:965:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    21:21:java.math.BigInteger fromHex(java.lang.String) -> b
    925:928:void defineCurve(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder) -> a
    971:978:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    990:997:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByOID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getByOID
    1009:1009:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> getOID
    1018:1018:java.lang.String getName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getName
    1027:1027:java.util.Enumeration getNames() -> getNames
    18:18:java.math.BigInteger access$0(java.lang.String) -> a
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$1 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$1:
    1:27:void <init>() -> <init>
    32:46:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$10 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$2:
    1:261:void <init>() -> <init>
    266:280:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$11 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$3:
    1:287:void <init>() -> <init>
    292:306:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$12 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$4:
    1:313:void <init>() -> <init>
    318:332:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$13 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$5:
    1:339:void <init>() -> <init>
    344:358:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$14 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$6:
    1:365:void <init>() -> <init>
    370:384:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$15 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$7:
    1:391:void <init>() -> <init>
    396:410:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$16 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$8:
    1:417:void <init>() -> <init>
    421:437:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$17 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$9:
    1:444:void <init>() -> <init>
    448:464:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$18 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$10:
    1:471:void <init>() -> <init>
    475:493:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$19 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$11:
    1:500:void <init>() -> <init>
    504:522:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$2 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$12:
    1:53:void <init>() -> <init>
    58:72:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$20 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$13:
    1:529:void <init>() -> <init>
    533:551:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$21 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$14:
    1:558:void <init>() -> <init>
    562:580:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$22 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$15:
    1:587:void <init>() -> <init>
    591:609:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$23 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$16:
    1:616:void <init>() -> <init>
    620:636:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$24 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$17:
    1:643:void <init>() -> <init>
    647:663:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$25 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$18:
    1:670:void <init>() -> <init>
    674:690:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$26 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$19:
    1:697:void <init>() -> <init>
    701:717:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$27 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$20:
    1:724:void <init>() -> <init>
    728:744:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$28 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$21:
    1:751:void <init>() -> <init>
    755:773:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$29 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$22:
    1:780:void <init>() -> <init>
    784:802:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$3 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$23:
    1:79:void <init>() -> <init>
    84:98:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$30 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$24:
    1:809:void <init>() -> <init>
    813:829:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$31 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$25:
    1:836:void <init>() -> <init>
    840:856:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$32 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$26:
    1:863:void <init>() -> <init>
    867:885:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$33 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$27:
    1:892:void <init>() -> <init>
    896:914:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$4 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$28:
    1:105:void <init>() -> <init>
    110:124:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$5 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$29:
    1:131:void <init>() -> <init>
    136:150:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$6 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$30:
    1:157:void <init>() -> <init>
    162:176:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$7 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$31:
    1:183:void <init>() -> <init>
    188:202:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$8 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$32:
    1:209:void <init>() -> <init>
    214:228:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$9 -> org.sandrob.bouncycastle.asn1.sec.SECNamedCurves$33:
    1:235:void <init>() -> <init>
    240:254:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.sec.SECObjectIdentifiers -> org.sandrob.bouncycastle.asn1.sec.SECObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> ellipticCurve
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect163k1 -> sect163k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect163r1 -> sect163r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect239k1 -> sect239k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect113r1 -> sect113r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect113r2 -> sect113r2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp112r1 -> secp112r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp112r2 -> secp112r2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp160r1 -> secp160r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp160k1 -> secp160k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp256k1 -> secp256k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect163r2 -> sect163r2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect283k1 -> sect283k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect283r1 -> sect283r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect131r1 -> sect131r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect131r2 -> sect131r2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect193r1 -> sect193r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect193r2 -> sect193r2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect233k1 -> sect233k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect233r1 -> sect233r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp128r1 -> secp128r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp128r2 -> secp128r2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp160r2 -> secp160r2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp192k1 -> secp192k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp224k1 -> secp224k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp224r1 -> secp224r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp384r1 -> secp384r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp521r1 -> secp521r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect409k1 -> sect409k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect409r1 -> sect409r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect571k1 -> sect571k1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sect571r1 -> sect571r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp192r1 -> secp192r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier secp256r1 -> secp256r1
    6:48:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.smime.SMIMEAttributes -> org.sandrob.bouncycastle.asn1.smime.SMIMEAttributes:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier smimeCapabilities -> smimeCapabilities
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier encrypKeyPref -> encrypKeyPref
    6:9:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.smime.SMIMECapabilities -> org.sandrob.bouncycastle.asn1.smime.SMIMECapabilities:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier preferSignedData -> preferSignedData
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier canNotDecryptAny -> canNotDecryptAny
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sMIMECapabilitesVersions -> sMIMECapabilitesVersions
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier dES_CBC -> dES_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier dES_EDE3_CBC -> dES_EDE3_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier rC2_CBC -> rC2_CBC
    org.sandrob.bouncycastle.asn1.ASN1Sequence capabilities -> a
    16:31:void <clinit>() -> <clinit>
    44:60:org.sandrob.bouncycastle.asn1.smime.SMIMECapabilities getInstance(java.lang.Object) -> getInstance
    63:67:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    77:102:java.util.Vector getCapabilities(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getCapabilities
    113:113:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.smime.SMIMECapabilitiesAttribute -> org.sandrob.bouncycastle.asn1.smime.SMIMECapabilitiesAttribute:
    13:15:void <init>(org.sandrob.bouncycastle.asn1.smime.SMIMECapabilityVector) -> <init>
org.sandrob.bouncycastle.asn1.smime.SMIMECapability -> org.sandrob.bouncycastle.asn1.smime.SMIMECapability:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier preferSignedData -> preferSignedData
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier canNotDecryptAny -> canNotDecryptAny
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sMIMECapabilitiesVersions -> sMIMECapabilitiesVersions
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier dES_CBC -> dES_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier dES_EDE3_CBC -> dES_EDE3_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier rC2_CBC -> rC2_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier aES128_CBC -> aES128_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier aES192_CBC -> aES192_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier aES256_CBC -> aES256_CBC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier capabilityID -> a
    org.sandrob.bouncycastle.asn1.DEREncodable parameters -> b
    13:31:void <clinit>() -> <clinit>
    36:45:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    47:53:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    58:68:org.sandrob.bouncycastle.asn1.smime.SMIMECapability getInstance(java.lang.Object) -> getInstance
    73:73:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getCapabilityID() -> getCapabilityID
    78:78:org.sandrob.bouncycastle.asn1.DEREncodable getParameters() -> getParameters
    92:101:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.smime.SMIMECapabilityVector -> org.sandrob.bouncycastle.asn1.smime.SMIMECapabilityVector:
    org.sandrob.bouncycastle.asn1.ASN1EncodableVector capabilities -> a
    12:14:void <init>() -> <init>
    19:20:void addCapability(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> addCapability
    26:32:void addCapability(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,int) -> addCapability
    38:44:void addCapability(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> addCapability
    48:48:org.sandrob.bouncycastle.asn1.ASN1EncodableVector toASN1EncodableVector() -> toASN1EncodableVector
org.sandrob.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute -> org.sandrob.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute:
    26:28:void <init>(org.sandrob.bouncycastle.asn1.cms.IssuerAndSerialNumber) -> <init>
    34:36:void <init>(org.sandrob.bouncycastle.asn1.cms.RecipientKeyIdentifier) -> <init>
    45:47:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves:
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP160r1 -> a
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP160t1 -> b
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP192r1 -> c
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP192t1 -> d
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP224r1 -> e
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP224t1 -> f
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP256r1 -> g
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP256t1 -> h
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP320r1 -> i
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP320t1 -> j
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP384r1 -> k
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP384t1 -> l
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP512r1 -> m
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP512t1 -> n
    java.util.Hashtable objIds -> o
    java.util.Hashtable curves -> p
    java.util.Hashtable names -> q
    18:282:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    262:265:void defineCurve(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder) -> a
    288:295:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    307:314:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByOID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getByOID
    326:326:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> getOID
    335:335:java.lang.String getName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getName
    344:344:java.util.Enumeration getNames() -> getNames
    349:349:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(short,boolean) -> getOID
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$1 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$1:
    1:20:void <init>() -> <init>
    24:33:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$10 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$2:
    1:172:void <init>() -> <init>
    176:186:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$11 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$3:
    1:189:void <init>() -> <init>
    193:202:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$12 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$4:
    1:205:void <init>() -> <init>
    209:219:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$13 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$5:
    1:222:void <init>() -> <init>
    226:235:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$14 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$6:
    1:238:void <init>() -> <init>
    242:252:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$2 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$7:
    1:37:void <init>() -> <init>
    41:51:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$3 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$8:
    1:55:void <init>() -> <init>
    59:68:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$4 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$9:
    1:72:void <init>() -> <init>
    76:86:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$5 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$10:
    1:90:void <init>() -> <init>
    94:103:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$6 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$11:
    1:106:void <init>() -> <init>
    110:120:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$7 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$12:
    1:123:void <init>() -> <init>
    127:136:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$8 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$13:
    1:139:void <init>() -> <init>
    143:153:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$9 -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$14:
    1:156:void <init>() -> <init>
    160:169:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers -> org.sandrob.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier teleTrusTAlgorithm -> teleTrusTAlgorithm
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ripemd160 -> ripemd160
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ripemd128 -> ripemd128
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ripemd256 -> ripemd256
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier teleTrusTRSAsignatureAlgorithm -> teleTrusTRSAsignatureAlgorithm
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd160 -> rsaSignatureWithripemd160
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd128 -> rsaSignatureWithripemd128
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd256 -> rsaSignatureWithripemd256
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecSign -> ecSign
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecSignWithSha1 -> ecSignWithSha1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecSignWithRipemd160 -> ecSignWithRipemd160
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecc_brainpool -> ecc_brainpool
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> ellipticCurve
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier versionOne -> versionOne
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP160r1 -> brainpoolP160r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP160t1 -> brainpoolP160t1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP192r1 -> brainpoolP192r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP192t1 -> brainpoolP192t1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP224r1 -> brainpoolP224r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP224t1 -> brainpoolP224t1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP256r1 -> brainpoolP256r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP256t1 -> brainpoolP256t1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP320r1 -> brainpoolP320r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP320t1 -> brainpoolP320t1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP384r1 -> brainpoolP384r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP384t1 -> brainpoolP384t1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP512r1 -> brainpoolP512r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP512t1 -> brainpoolP512t1
    5:41:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.tsp.Accuracy -> org.sandrob.bouncycastle.asn1.tsp.Accuracy:
    org.sandrob.bouncycastle.asn1.DERInteger seconds -> a
    org.sandrob.bouncycastle.asn1.DERInteger millis -> b
    org.sandrob.bouncycastle.asn1.DERInteger micros -> c
    int MIN_MILLIS -> MIN_MILLIS
    int MAX_MILLIS -> MAX_MILLIS
    int MIN_MICROS -> MIN_MICROS
    int MAX_MICROS -> MAX_MICROS
    30:32:void <init>() -> <init>
    34:66:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    68:110:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    114:125:org.sandrob.bouncycastle.asn1.tsp.Accuracy getInstance(java.lang.Object) -> getInstance
    130:130:org.sandrob.bouncycastle.asn1.DERInteger getSeconds() -> getSeconds
    135:135:org.sandrob.bouncycastle.asn1.DERInteger getMillis() -> getMillis
    140:140:org.sandrob.bouncycastle.asn1.DERInteger getMicros() -> getMicros
    155:172:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.tsp.MessageImprint -> org.sandrob.bouncycastle.asn1.tsp.MessageImprint:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    byte[] hashedMessage -> b
    24:33:org.sandrob.bouncycastle.asn1.tsp.MessageImprint getInstance(java.lang.Object) -> getInstance
    36:41:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    43:49:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    53:53:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    58:58:byte[] getHashedMessage() -> getHashedMessage
    70:75:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.tsp.TSTInfo -> org.sandrob.bouncycastle.asn1.tsp.TSTInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier tsaPolicyId -> b
    org.sandrob.bouncycastle.asn1.tsp.MessageImprint messageImprint -> c
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> d
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime genTime -> e
    org.sandrob.bouncycastle.asn1.tsp.Accuracy accuracy -> f
    org.sandrob.bouncycastle.asn1.DERBoolean ordering -> g
    org.sandrob.bouncycastle.asn1.DERInteger nonce -> h
    org.sandrob.bouncycastle.asn1.x509.GeneralName tsa -> i
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> j
    47:70:org.sandrob.bouncycastle.asn1.tsp.TSTInfo getInstance(java.lang.Object) -> getInstance
    73:129:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    131:147:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.tsp.MessageImprint,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.tsp.Accuracy,org.sandrob.bouncycastle.asn1.DERBoolean,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x509.GeneralName,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    151:151:org.sandrob.bouncycastle.asn1.tsp.MessageImprint getMessageImprint() -> getMessageImprint
    156:156:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getPolicy() -> getPolicy
    161:161:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    166:166:org.sandrob.bouncycastle.asn1.tsp.Accuracy getAccuracy() -> getAccuracy
    171:171:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getGenTime() -> getGenTime
    176:176:org.sandrob.bouncycastle.asn1.DERBoolean getOrdering() -> getOrdering
    181:181:org.sandrob.bouncycastle.asn1.DERInteger getNonce() -> getNonce
    186:186:org.sandrob.bouncycastle.asn1.x509.GeneralName getTsa() -> getTsa
    191:191:org.sandrob.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    219:252:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.tsp.TimeStampReq -> org.sandrob.bouncycastle.asn1.tsp.TimeStampReq:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.tsp.MessageImprint messageImprint -> b
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier tsaPolicy -> c
    org.sandrob.bouncycastle.asn1.DERInteger nonce -> d
    org.sandrob.bouncycastle.asn1.DERBoolean certReq -> e
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> f
    32:43:org.sandrob.bouncycastle.asn1.tsp.TimeStampReq getInstance(java.lang.Object) -> getInstance
    46:89:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    91:106:void <init>(org.sandrob.bouncycastle.asn1.tsp.MessageImprint,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERBoolean,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    110:110:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    115:115:org.sandrob.bouncycastle.asn1.tsp.MessageImprint getMessageImprint() -> getMessageImprint
    120:120:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getReqPolicy() -> getReqPolicy
    125:125:org.sandrob.bouncycastle.asn1.DERInteger getNonce() -> getNonce
    130:130:org.sandrob.bouncycastle.asn1.DERBoolean getCertReq() -> getCertReq
    135:135:org.sandrob.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    154:179:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.tsp.TimeStampResp -> org.sandrob.bouncycastle.asn1.tsp.TimeStampResp:
    org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo pkiStatusInfo -> a
    org.sandrob.bouncycastle.asn1.cms.ContentInfo timeStampToken -> b
    23:34:org.sandrob.bouncycastle.asn1.tsp.TimeStampResp getInstance(java.lang.Object) -> getInstance
    37:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    51:55:void <init>(org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo,org.sandrob.bouncycastle.asn1.cms.ContentInfo) -> <init>
    59:59:org.sandrob.bouncycastle.asn1.cmp.PKIStatusInfo getStatus() -> getStatus
    64:64:org.sandrob.bouncycastle.asn1.cms.ContentInfo getTimeStampToken() -> getTimeStampToken
    76:84:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.util.ASN1Dump -> org.sandrob.bouncycastle.asn1.util.ASN1Dump:
    40:40:void <init>() -> <init>
    56:314:void _dumpAsString(java.lang.String,boolean,org.sandrob.bouncycastle.asn1.DERObject,java.lang.StringBuffer) -> a
    318:339:java.lang.String outputApplicationSpecific(java.lang.String,java.lang.String,boolean,org.sandrob.bouncycastle.asn1.DERObject,java.lang.String) -> a
    351:351:java.lang.String dumpAsString(java.lang.Object) -> dumpAsString
    365:380:java.lang.String dumpAsString(java.lang.Object,boolean) -> dumpAsString
    385:415:java.lang.String dumpBinaryDataAsString(java.lang.String,byte[]) -> a
    420:430:java.lang.String calculateAscString(byte[],int,int) -> a
org.sandrob.bouncycastle.asn1.util.DERDump -> org.sandrob.bouncycastle.asn1.util.DERDump:
    9:9:void <init>() -> <init>
    20:24:java.lang.String dumpAsString(org.sandrob.bouncycastle.asn1.DERObject) -> dumpAsString
    35:39:java.lang.String dumpAsString(org.sandrob.bouncycastle.asn1.DEREncodable) -> dumpAsString
org.sandrob.bouncycastle.asn1.util.Dump -> org.sandrob.bouncycastle.asn1.util.Dump:
    7:7:void <init>() -> <init>
    13:21:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue -> org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier type -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable value -> b
    16:20:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    24:33:org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue getInstance(java.lang.Object) -> getInstance
    36:42:void <init>(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    46:46:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getType() -> getType
    51:51:org.sandrob.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    64:69:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x500.DirectoryString -> org.sandrob.bouncycastle.asn1.x500.DirectoryString:
    org.sandrob.bouncycastle.asn1.ASN1String string -> a
    23:53:org.sandrob.bouncycastle.asn1.x500.DirectoryString getInstance(java.lang.Object) -> getInstance
    58:63:org.sandrob.bouncycastle.asn1.x500.DirectoryString getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    66:70:void <init>(org.sandrob.bouncycastle.asn1.DERT61String) -> <init>
    72:76:void <init>(org.sandrob.bouncycastle.asn1.DERPrintableString) -> <init>
    78:82:void <init>(org.sandrob.bouncycastle.asn1.DERUniversalString) -> <init>
    84:88:void <init>(org.sandrob.bouncycastle.asn1.DERUTF8String) -> <init>
    90:94:void <init>(org.sandrob.bouncycastle.asn1.DERBMPString) -> <init>
    96:99:void <init>(java.lang.String) -> <init>
    103:103:java.lang.String getString() -> getString
    108:108:java.lang.String toString() -> toString
    123:123:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x500.RDN -> org.sandrob.bouncycastle.asn1.x500.RDN:
    org.sandrob.bouncycastle.asn1.ASN1Set values -> a
    16:19:void <init>(org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    23:32:org.sandrob.bouncycastle.asn1.x500.RDN getInstance(java.lang.Object) -> getInstance
    41:49:void <init>(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    51:54:void <init>(org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue) -> <init>
    59:62:void <init>(org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue[]) -> <init>
    66:66:boolean isMultiValued() -> isMultiValued
    71:76:org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue getFirst() -> getFirst
    81:88:org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue[] getTypesAndValues() -> getTypesAndValues
    104:104:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x500.X500Name -> org.sandrob.bouncycastle.asn1.x500.X500Name:
    org.sandrob.bouncycastle.asn1.x500.X500NameStyle defaultStyle -> a
    boolean isHashCodeCalculated -> b
    int hashCodeValue -> c
    org.sandrob.bouncycastle.asn1.x500.X500NameStyle style -> d
    org.sandrob.bouncycastle.asn1.x500.RDN[] rdns -> e
    30:34:void <clinit>() -> <clinit>
    42:46:void <init>(org.sandrob.bouncycastle.asn1.x500.X500NameStyle,org.sandrob.bouncycastle.asn1.x500.X500Name) -> <init>
    60:60:org.sandrob.bouncycastle.asn1.x500.X500Name getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    66:79:org.sandrob.bouncycastle.asn1.x500.X500Name getInstance(java.lang.Object) -> getInstance
    90:91:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    93:106:void <init>(org.sandrob.bouncycastle.asn1.x500.X500NameStyle,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    111:112:void <init>(org.sandrob.bouncycastle.asn1.x500.RDN[]) -> <init>
    114:120:void <init>(org.sandrob.bouncycastle.asn1.x500.X500NameStyle,org.sandrob.bouncycastle.asn1.x500.RDN[]) -> <init>
    125:126:void <init>(java.lang.String) -> <init>
    132:135:void <init>(org.sandrob.bouncycastle.asn1.x500.X500NameStyle,java.lang.String) -> <init>
    144:148:org.sandrob.bouncycastle.asn1.x500.RDN[] getRDNs() -> getRDNs
    159:191:org.sandrob.bouncycastle.asn1.x500.RDN[] getRDNs(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier) -> getRDNs
    196:196:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    201:210:int hashCode() -> hashCode
    218:241:boolean equals(java.lang.Object) -> equals
    247:247:java.lang.String toString() -> toString
    257:263:void setDefaultStyle(org.sandrob.bouncycastle.asn1.x500.X500NameStyle) -> setDefaultStyle
    272:272:org.sandrob.bouncycastle.asn1.x500.X500NameStyle getDefaultStyle() -> getDefaultStyle
org.sandrob.bouncycastle.asn1.x500.X500NameBuilder -> org.sandrob.bouncycastle.asn1.x500.X500NameBuilder:
    org.sandrob.bouncycastle.asn1.x500.X500NameStyle template -> a
    java.util.Vector rdns -> b
    11:16:void <init>(org.sandrob.bouncycastle.asn1.x500.X500NameStyle) -> <init>
    20:22:org.sandrob.bouncycastle.asn1.x500.X500NameBuilder addRDN(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> addRDN
    27:29:org.sandrob.bouncycastle.asn1.x500.X500NameBuilder addRDN(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> addRDN
    34:36:org.sandrob.bouncycastle.asn1.x500.X500NameBuilder addRDN(org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue) -> addRDN
    41:48:org.sandrob.bouncycastle.asn1.x500.X500NameBuilder addMultiValuedRDN(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[],java.lang.String[]) -> addMultiValuedRDN
    53:60:org.sandrob.bouncycastle.asn1.x500.X500NameBuilder addMultiValuedRDN(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[],org.sandrob.bouncycastle.asn1.ASN1Encodable[]) -> addMultiValuedRDN
    65:67:org.sandrob.bouncycastle.asn1.x500.X500NameBuilder addMultiValuedRDN(org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue[]) -> addMultiValuedRDN
    72:79:org.sandrob.bouncycastle.asn1.x500.X500Name build() -> build
org.sandrob.bouncycastle.asn1.x500.X500NameStyle -> org.sandrob.bouncycastle.asn1.x500.X500NameStyle:
    org.sandrob.bouncycastle.asn1.ASN1Encodable stringToValue(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> stringToValue
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier attrNameToOID(java.lang.String) -> attrNameToOID
    boolean areEqual(org.sandrob.bouncycastle.asn1.x500.X500Name,org.sandrob.bouncycastle.asn1.x500.X500Name) -> areEqual
    org.sandrob.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String) -> fromString
    int calculateHashCode(org.sandrob.bouncycastle.asn1.x500.X500Name) -> calculateHashCode
    java.lang.String toString(org.sandrob.bouncycastle.asn1.x500.X500Name) -> toString
org.sandrob.bouncycastle.asn1.x500.style.BCStrictStyle -> org.sandrob.bouncycastle.asn1.x500.style.BCStrictStyle:
    10:10:void <init>() -> <init>
    15:31:boolean areEqual(org.sandrob.bouncycastle.asn1.x500.X500Name,org.sandrob.bouncycastle.asn1.x500.X500Name) -> areEqual
org.sandrob.bouncycastle.asn1.x500.style.BCStyle -> org.sandrob.bouncycastle.asn1.x500.style.BCStyle:
    org.sandrob.bouncycastle.asn1.x500.X500NameStyle INSTANCE -> INSTANCE
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier C -> C
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier O -> O
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier OU -> OU
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier T -> T
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier CN -> CN
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier SN -> SN
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier STREET -> STREET
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier SERIALNUMBER -> SERIALNUMBER
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier L -> L
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ST -> ST
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier SURNAME -> SURNAME
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier GIVENNAME -> GIVENNAME
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier INITIALS -> INITIALS
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier GENERATION -> GENERATION
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier UNIQUE_IDENTIFIER -> UNIQUE_IDENTIFIER
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier BUSINESS_CATEGORY -> BUSINESS_CATEGORY
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier POSTAL_CODE -> POSTAL_CODE
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier DN_QUALIFIER -> DN_QUALIFIER
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier PSEUDONYM -> PSEUDONYM
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier DATE_OF_BIRTH -> DATE_OF_BIRTH
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier PLACE_OF_BIRTH -> PLACE_OF_BIRTH
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier GENDER -> GENDER
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_CITIZENSHIP -> COUNTRY_OF_CITIZENSHIP
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_RESIDENCE -> COUNTRY_OF_RESIDENCE
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier NAME_AT_BIRTH -> NAME_AT_BIRTH
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier POSTAL_ADDRESS -> POSTAL_ADDRESS
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier DMD_NAME -> DMD_NAME
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier TELEPHONE_NUMBER -> TELEPHONE_NUMBER
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier NAME -> NAME
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier EmailAddress -> EmailAddress
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier UnstructuredName -> UnstructuredName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier UnstructuredAddress -> UnstructuredAddress
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier E -> E
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier DC -> DC
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier UID -> UID
    java.util.Hashtable DefaultSymbols -> a
    java.util.Hashtable DefaultLookUp -> b
    19:273:void <clinit>() -> <clinit>
    276:279:void <init>() -> <init>
    283:315:org.sandrob.bouncycastle.asn1.ASN1Encodable stringToValue(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> stringToValue
    320:320:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier attrNameToOID(java.lang.String) -> attrNameToOID
    325:348:boolean areEqual(org.sandrob.bouncycastle.asn1.x500.X500Name,org.sandrob.bouncycastle.asn1.x500.X500Name) -> areEqual
    353:376:boolean foundMatch(boolean,org.sandrob.bouncycastle.asn1.x500.RDN,org.sandrob.bouncycastle.asn1.x500.RDN[]) -> a
    381:418:boolean rdnAreEqual(org.sandrob.bouncycastle.asn1.x500.RDN,org.sandrob.bouncycastle.asn1.x500.RDN) -> rdnAreEqual
    423:454:boolean atvAreEqual(org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue,org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue) -> a
    459:459:org.sandrob.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String) -> fromString
    464:487:int calculateHashCode(org.sandrob.bouncycastle.asn1.x500.X500Name) -> calculateHashCode
    492:496:int calcHashCode(org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
    501:542:java.lang.String toString(org.sandrob.bouncycastle.asn1.x500.X500Name) -> toString
org.sandrob.bouncycastle.asn1.x500.style.IETFUtils -> org.sandrob.bouncycastle.asn1.x500.style.IETFUtils:
    20:20:void <init>() -> <init>
    24:72:org.sandrob.bouncycastle.asn1.x500.RDN[] rDNsFromString(java.lang.String,org.sandrob.bouncycastle.asn1.x500.X500NameStyle) -> rDNsFromString
    77:84:java.lang.String[] toValueArray(java.util.Vector) -> a
    89:96:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[] toOIDArray(java.util.Vector) -> b
    103:118:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier decodeAttrName(java.lang.String,java.util.Hashtable) -> decodeAttrName
    126:151:org.sandrob.bouncycastle.asn1.ASN1Encodable valueFromHexString(java.lang.String,int) -> valueFromHexString
    159:173:void appendTypeAndValue(java.lang.StringBuffer,org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue,java.util.Hashtable) -> appendTypeAndValue
    177:223:java.lang.String valueToString(org.sandrob.bouncycastle.asn1.ASN1Encodable) -> valueToString
    229:236:java.lang.String bytesToString(byte[]) -> a
    241:255:java.lang.String canonicalize(java.lang.String) -> canonicalize
    262:266:org.sandrob.bouncycastle.asn1.ASN1Object decodeObject(java.lang.String) -> a
    273:292:java.lang.String stripInternalSpaces(java.lang.String) -> stripInternalSpaces
org.sandrob.bouncycastle.asn1.x500.style.RFC4519Style -> org.sandrob.bouncycastle.asn1.x500.style.RFC4519Style:
    org.sandrob.bouncycastle.asn1.x500.X500NameStyle INSTANCE -> INSTANCE
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier businessCategory -> businessCategory
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c -> c
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier cn -> cn
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dc -> dc
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier description -> description
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier destinationIndicator -> destinationIndicator
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier distinguishedName -> distinguishedName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dnQualifier -> dnQualifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier enhancedSearchGuide -> enhancedSearchGuide
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier facsimileTelephoneNumber -> facsimileTelephoneNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier generationQualifier -> generationQualifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier givenName -> givenName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier houseIdentifier -> houseIdentifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier initials -> initials
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier internationalISDNNumber -> internationalISDNNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier l -> l
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier member -> member
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier name -> name
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier o -> o
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ou -> ou
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier owner -> owner
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier physicalDeliveryOfficeName -> physicalDeliveryOfficeName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier postalAddress -> postalAddress
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier postalCode -> postalCode
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier postOfficeBox -> postOfficeBox
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier preferredDeliveryMethod -> preferredDeliveryMethod
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier registeredAddress -> registeredAddress
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier roleOccupant -> roleOccupant
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier searchGuide -> searchGuide
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier seeAlso -> seeAlso
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier serialNumber -> serialNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier sn -> sn
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier st -> st
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier street -> street
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier telephoneNumber -> telephoneNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier teletexTerminalIdentifier -> teletexTerminalIdentifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier telexNumber -> telexNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier title -> title
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier uid -> uid
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier uniqueMember -> uniqueMember
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier userPassword -> userPassword
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier x121Address -> x121Address
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier x500UniqueIdentifier -> x500UniqueIdentifier
    java.util.Hashtable DefaultSymbols -> a
    java.util.Hashtable DefaultLookUp -> b
    16:164:void <clinit>() -> <clinit>
    169:172:void <init>() -> <init>
    176:204:org.sandrob.bouncycastle.asn1.ASN1Encodable stringToValue(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> stringToValue
    209:209:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier attrNameToOID(java.lang.String) -> attrNameToOID
    214:237:boolean areEqual(org.sandrob.bouncycastle.asn1.x500.X500Name,org.sandrob.bouncycastle.asn1.x500.X500Name) -> areEqual
    242:265:boolean foundMatch(boolean,org.sandrob.bouncycastle.asn1.x500.RDN,org.sandrob.bouncycastle.asn1.x500.RDN[]) -> a
    270:307:boolean rdnAreEqual(org.sandrob.bouncycastle.asn1.x500.RDN,org.sandrob.bouncycastle.asn1.x500.RDN) -> rdnAreEqual
    312:343:boolean atvAreEqual(org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue,org.sandrob.bouncycastle.asn1.x500.AttributeTypeAndValue) -> a
    349:357:org.sandrob.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String) -> fromString
    362:385:int calculateHashCode(org.sandrob.bouncycastle.asn1.x500.X500Name) -> calculateHashCode
    390:394:int calcHashCode(org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
    400:441:java.lang.String toString(org.sandrob.bouncycastle.asn1.x500.X500Name) -> toString
org.sandrob.bouncycastle.asn1.x500.style.X500NameTokenizer -> org.sandrob.bouncycastle.asn1.x500.style.a:
    java.lang.String value -> a
    int index -> b
    char seperator -> c
    java.lang.StringBuffer buf -> d
    19:20:void <init>(java.lang.String) -> <init>
    14:29:void <init>(java.lang.String,char) -> <init>
    33:33:boolean hasMoreTokens() -> a
    38:97:java.lang.String nextToken() -> b
org.sandrob.bouncycastle.asn1.x509.AccessDescription -> org.sandrob.bouncycastle.asn1.x509.AccessDescription:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_ad_caIssuers -> id_ad_caIssuers
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id_ad_ocsp -> id_ad_ocsp
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier accessMethod -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName accessLocation -> b
    18:23:void <clinit>() -> <clinit>
    31:40:org.sandrob.bouncycastle.asn1.x509.AccessDescription getInstance(java.lang.Object) -> getInstance
    25:53:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    25:64:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    72:72:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getAccessMethod() -> getAccessMethod
    81:81:org.sandrob.bouncycastle.asn1.x509.GeneralName getAccessLocation() -> getAccessLocation
    86:91:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    96:96:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier -> org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier objectId -> a
    org.sandrob.bouncycastle.asn1.DEREncodable parameters -> b
    boolean parametersDefined -> c
    25:25:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    31:51:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object) -> getInstance
    19:58:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    19:64:void <init>(java.lang.String) -> <init>
    19:73:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    19:95:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    99:99:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> getAlgorithm
    108:108:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getObjectId() -> getObjectId
    113:113:org.sandrob.bouncycastle.asn1.DEREncodable getParameters() -> getParameters
    126:142:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.AttCertIssuer -> org.sandrob.bouncycastle.asn1.x509.AttCertIssuer:
    org.sandrob.bouncycastle.asn1.ASN1Encodable obj -> a
    org.sandrob.bouncycastle.asn1.DERObject choiceObj -> b
    20:41:org.sandrob.bouncycastle.asn1.x509.AttCertIssuer getInstance(java.lang.Object) -> getInstance
    48:48:org.sandrob.bouncycastle.asn1.x509.AttCertIssuer getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    57:62:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> <init>
    64:69:void <init>(org.sandrob.bouncycastle.asn1.x509.V2Form) -> <init>
    73:73:org.sandrob.bouncycastle.asn1.ASN1Encodable getIssuer() -> getIssuer
    88:88:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.AttCertValidityPeriod -> org.sandrob.bouncycastle.asn1.x509.AttCertValidityPeriod:
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime notBeforeTime -> a
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime notAfterTime -> b
    19:28:org.sandrob.bouncycastle.asn1.x509.AttCertValidityPeriod getInstance(java.lang.Object) -> getInstance
    31:42:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    48:54:void <init>(org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.DERGeneralizedTime) -> <init>
    58:58:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getNotBeforeTime() -> getNotBeforeTime
    63:63:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getNotAfterTime() -> getNotAfterTime
    77:82:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.Attribute -> org.sandrob.bouncycastle.asn1.x509.Attribute:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier attrType -> a
    org.sandrob.bouncycastle.asn1.ASN1Set attrValues -> b
    27:37:org.sandrob.bouncycastle.asn1.x509.Attribute getInstance(java.lang.Object) -> getInstance
    40:50:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    52:58:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Set) -> <init>
    62:62:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier getAttrType() -> getAttrType
    67:67:org.sandrob.bouncycastle.asn1.ASN1Encodable[] getAttributeValues() -> getAttributeValues
    72:72:org.sandrob.bouncycastle.asn1.ASN1Set getAttrValues() -> getAttrValues
    86:91:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.AttributeCertificate -> org.sandrob.bouncycastle.asn1.x509.AttributeCertificate:
    org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo acinfo -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> b
    org.sandrob.bouncycastle.asn1.DERBitString signatureValue -> c
    23:32:org.sandrob.bouncycastle.asn1.x509.AttributeCertificate getInstance(java.lang.Object) -> getInstance
    35:43:void <init>(org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    45:57:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    61:61:org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo getAcinfo() -> getAcinfo
    66:66:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    71:71:org.sandrob.bouncycastle.asn1.DERBitString getSignatureValue() -> getSignatureValue
    86:92:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo -> org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.Holder holder -> b
    org.sandrob.bouncycastle.asn1.x509.AttCertIssuer issuer -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> d
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> e
    org.sandrob.bouncycastle.asn1.x509.AttCertValidityPeriod attrCertValidityPeriod -> f
    org.sandrob.bouncycastle.asn1.ASN1Sequence attributes -> g
    org.sandrob.bouncycastle.asn1.DERBitString issuerUniqueID -> h
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> i
    29:29:org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    35:44:org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo getInstance(java.lang.Object) -> getInstance
    47:76:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    80:80:org.sandrob.bouncycastle.asn1.DERInteger getVersion() -> getVersion
    85:85:org.sandrob.bouncycastle.asn1.x509.Holder getHolder() -> getHolder
    90:90:org.sandrob.bouncycastle.asn1.x509.AttCertIssuer getIssuer() -> getIssuer
    95:95:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> getSignature
    100:100:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    105:105:org.sandrob.bouncycastle.asn1.x509.AttCertValidityPeriod getAttrCertValidityPeriod() -> getAttrCertValidityPeriod
    110:110:org.sandrob.bouncycastle.asn1.ASN1Sequence getAttributes() -> getAttributes
    115:115:org.sandrob.bouncycastle.asn1.DERBitString getIssuerUniqueID() -> getIssuerUniqueID
    120:120:org.sandrob.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    143:163:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.AuthorityInformationAccess -> org.sandrob.bouncycastle.asn1.x509.AuthorityInformationAccess:
    org.sandrob.bouncycastle.asn1.x509.AccessDescription[] descriptions -> a
    34:49:org.sandrob.bouncycastle.asn1.x509.AuthorityInformationAccess getInstance(java.lang.Object) -> getInstance
    52:66:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    71:78:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    87:87:org.sandrob.bouncycastle.asn1.x509.AccessDescription[] getAccessDescriptions() -> getAccessDescriptions
    92:99:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    104:104:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.AuthorityKeyIdentifier -> org.sandrob.bouncycastle.asn1.x509.AuthorityKeyIdentifier:
    org.sandrob.bouncycastle.asn1.ASN1OctetString keyidentifier -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralNames certissuer -> b
    org.sandrob.bouncycastle.asn1.DERInteger certserno -> c
    44:44:org.sandrob.bouncycastle.asn1.x509.AuthorityKeyIdentifier getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    50:63:org.sandrob.bouncycastle.asn1.x509.AuthorityKeyIdentifier getInstance(java.lang.Object) -> getInstance
    36:90:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    36:115:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    36:136:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo,org.sandrob.bouncycastle.asn1.x509.GeneralNames,java.math.BigInteger) -> <init>
    36:149:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames,java.math.BigInteger) -> <init>
    36:160:void <init>(byte[]) -> <init>
    36:174:void <init>(byte[],org.sandrob.bouncycastle.asn1.x509.GeneralNames,java.math.BigInteger) -> <init>
    178:183:byte[] getKeyIdentifier() -> getKeyIdentifier
    188:188:org.sandrob.bouncycastle.asn1.x509.GeneralNames getAuthorityCertIssuer() -> getAuthorityCertIssuer
    193:198:java.math.BigInteger getAuthorityCertSerialNumber() -> getAuthorityCertSerialNumber
    206:224:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    229:229:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.BasicConstraints -> org.sandrob.bouncycastle.asn1.x509.BasicConstraints:
    org.sandrob.bouncycastle.asn1.DERBoolean cA -> a
    org.sandrob.bouncycastle.asn1.DERInteger pathLenConstraint -> b
    24:24:org.sandrob.bouncycastle.asn1.x509.BasicConstraints getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    30:45:org.sandrob.bouncycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object) -> getInstance
    17:79:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    17:100:void <init>(boolean,int) -> <init>
    17:114:void <init>(boolean) -> <init>
    17:126:void <init>(int) -> <init>
    130:130:boolean isCA() -> isCA
    135:140:java.math.BigInteger getPathLenConstraint() -> getPathLenConstraint
    154:166:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    171:179:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.CRLDistPoint -> org.sandrob.bouncycastle.asn1.x509.CRLDistPoint:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    19:19:org.sandrob.bouncycastle.asn1.x509.CRLDistPoint getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    25:34:org.sandrob.bouncycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object) -> getInstance
    13:41:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    13:54:void <init>(org.sandrob.bouncycastle.asn1.x509.DistributionPoint[]) -> <init>
    63:70:org.sandrob.bouncycastle.asn1.x509.DistributionPoint[] getDistributionPoints() -> getDistributionPoints
    81:81:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    86:98:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.CRLNumber -> org.sandrob.bouncycastle.asn1.x509.CRLNumber:
    20:21:void <init>(java.math.BigInteger) -> <init>
    25:25:java.math.BigInteger getCRLNumber() -> getCRLNumber
    30:30:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.CRLReason -> org.sandrob.bouncycastle.asn1.x509.CRLReason:
    int UNSPECIFIED -> UNSPECIFIED
    int KEY_COMPROMISE -> KEY_COMPROMISE
    int CA_COMPROMISE -> CA_COMPROMISE
    int AFFILIATION_CHANGED -> AFFILIATION_CHANGED
    int SUPERSEDED -> SUPERSEDED
    int CESSATION_OF_OPERATION -> CESSATION_OF_OPERATION
    int CERTIFICATE_HOLD -> CERTIFICATE_HOLD
    int REMOVE_FROM_CRL -> REMOVE_FROM_CRL
    int PRIVILEGE_WITHDRAWN -> PRIVILEGE_WITHDRAWN
    int AA_COMPROMISE -> AA_COMPROMISE
    int unspecified -> unspecified
    int keyCompromise -> keyCompromise
    int cACompromise -> cACompromise
    int affiliationChanged -> affiliationChanged
    int superseded -> superseded
    int cessationOfOperation -> cessationOfOperation
    int certificateHold -> certificateHold
    int removeFromCRL -> removeFromCRL
    int privilegeWithdrawn -> privilegeWithdrawn
    int aACompromise -> aACompromise
    java.lang.String[] reasonString -> b
    22:82:void <clinit>() -> <clinit>
    88:89:void <init>(int) -> <init>
    94:95:void <init>(org.sandrob.bouncycastle.asn1.DEREnumerated) -> <init>
    100:109:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.CertPolicyId -> org.sandrob.bouncycastle.asn1.x509.CertPolicyId:
    18:19:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.asn1.x509.CertificateList -> org.sandrob.bouncycastle.asn1.x509.CertificateList:
    org.sandrob.bouncycastle.asn1.x509.TBSCertList tbsCertList -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> b
    org.sandrob.bouncycastle.asn1.DERBitString sig -> c
    38:38:org.sandrob.bouncycastle.asn1.x509.CertificateList getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    44:53:org.sandrob.bouncycastle.asn1.x509.CertificateList getInstance(java.lang.Object) -> getInstance
    56:69:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    73:73:org.sandrob.bouncycastle.asn1.x509.TBSCertList getTBSCertList() -> getTBSCertList
    78:78:org.sandrob.bouncycastle.asn1.x509.TBSCertList$CRLEntry[] getRevokedCertificates() -> getRevokedCertificates
    83:83:java.util.Enumeration getRevokedCertificateEnumeration() -> getRevokedCertificateEnumeration
    88:88:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    93:93:org.sandrob.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    98:98:int getVersion() -> getVersion
    103:103:org.sandrob.bouncycastle.asn1.x509.X509Name getIssuer() -> getIssuer
    108:108:org.sandrob.bouncycastle.asn1.x509.Time getThisUpdate() -> getThisUpdate
    113:113:org.sandrob.bouncycastle.asn1.x509.Time getNextUpdate() -> getNextUpdate
    118:124:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.CertificatePair -> org.sandrob.bouncycastle.asn1.x509.CertificatePair:
    org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure forward -> a
    org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure reverse -> b
    55:66:org.sandrob.bouncycastle.asn1.x509.CertificatePair getInstance(java.lang.Object) -> getInstance
    83:110:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    118:122:void <init>(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure,org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure) -> <init>
    140:151:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    159:159:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure getForward() -> getForward
    167:167:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure getReverse() -> getReverse
org.sandrob.bouncycastle.asn1.x509.CertificatePolicies -> org.sandrob.bouncycastle.asn1.x509.CertificatePolicies:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier anyPolicy -> a
    java.util.Vector policies -> b
    14:17:void <clinit>() -> <clinit>
    28:28:org.sandrob.bouncycastle.asn1.x509.CertificatePolicies getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    37:46:org.sandrob.bouncycastle.asn1.x509.CertificatePolicies getInstance(java.lang.Object) -> getInstance
    19:62:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    19:72:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    82:83:void <init>(java.lang.String) -> <init>
    88:89:void addPolicy(java.lang.String) -> addPolicy
    93:98:java.lang.String getPolicy(int) -> getPolicy
    123:131:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    136:145:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.DSAParameter -> org.sandrob.bouncycastle.asn1.x509.DSAParameter:
    org.sandrob.bouncycastle.asn1.DERInteger p -> a
    org.sandrob.bouncycastle.asn1.DERInteger q -> b
    org.sandrob.bouncycastle.asn1.DERInteger g -> c
    23:23:org.sandrob.bouncycastle.asn1.x509.DSAParameter getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    29:39:org.sandrob.bouncycastle.asn1.x509.DSAParameter getInstance(java.lang.Object) -> getInstance
    42:50:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    52:65:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    69:69:java.math.BigInteger getP() -> getP
    74:74:java.math.BigInteger getQ() -> getQ
    79:79:java.math.BigInteger getG() -> getG
    84:90:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.DigestInfo -> org.sandrob.bouncycastle.asn1.x509.DigestInfo:
    byte[] digest -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> b
    32:32:org.sandrob.bouncycastle.asn1.x509.DigestInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    38:47:org.sandrob.bouncycastle.asn1.x509.DigestInfo getInstance(java.lang.Object) -> getInstance
    50:56:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    58:65:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    69:69:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> getAlgorithmId
    74:74:byte[] getDigest() -> getDigest
    79:84:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.DisplayText -> org.sandrob.bouncycastle.asn1.x509.DisplayText:
    int CONTENT_TYPE_IA5STRING -> CONTENT_TYPE_IA5STRING
    int CONTENT_TYPE_BMPSTRING -> CONTENT_TYPE_BMPSTRING
    int CONTENT_TYPE_UTF8STRING -> CONTENT_TYPE_UTF8STRING
    int CONTENT_TYPE_VISIBLESTRING -> CONTENT_TYPE_VISIBLESTRING
    int DISPLAY_TEXT_MAXIMUM_SIZE -> DISPLAY_TEXT_MAXIMUM_SIZE
    int contentType -> a
    org.sandrob.bouncycastle.asn1.ASN1String contents -> b
    70:98:void <init>(int,java.lang.String) -> <init>
    106:116:void <init>(java.lang.String) -> <init>
    125:128:void <init>(org.sandrob.bouncycastle.asn1.ASN1String) -> <init>
    132:141:org.sandrob.bouncycastle.asn1.x509.DisplayText getInstance(java.lang.Object) -> getInstance
    148:148:org.sandrob.bouncycastle.asn1.x509.DisplayText getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    153:153:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    163:163:java.lang.String getString() -> getString
org.sandrob.bouncycastle.asn1.x509.DistributionPoint -> org.sandrob.bouncycastle.asn1.x509.DistributionPoint:
    org.sandrob.bouncycastle.asn1.x509.DistributionPointName distributionPoint -> a
    org.sandrob.bouncycastle.asn1.x509.ReasonFlags reasons -> b
    org.sandrob.bouncycastle.asn1.x509.GeneralNames cRLIssuer -> c
    33:33:org.sandrob.bouncycastle.asn1.x509.DistributionPoint getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    39:49:org.sandrob.bouncycastle.asn1.x509.DistributionPoint getInstance(java.lang.Object) -> getInstance
    52:70:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    72:80:void <init>(org.sandrob.bouncycastle.asn1.x509.DistributionPointName,org.sandrob.bouncycastle.asn1.x509.ReasonFlags,org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> <init>
    84:84:org.sandrob.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint() -> getDistributionPoint
    89:89:org.sandrob.bouncycastle.asn1.x509.ReasonFlags getReasons() -> getReasons
    94:94:org.sandrob.bouncycastle.asn1.x509.GeneralNames getCRLIssuer() -> getCRLIssuer
    99:119:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    124:142:java.lang.String toString() -> toString
    147:157:void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> a
org.sandrob.bouncycastle.asn1.x509.DistributionPointName -> org.sandrob.bouncycastle.asn1.x509.DistributionPointName:
    org.sandrob.bouncycastle.asn1.DEREncodable name -> a
    int type -> b
    int FULL_NAME -> FULL_NAME
    int NAME_RELATIVE_TO_CRL_ISSUER -> NAME_RELATIVE_TO_CRL_ISSUER
    34:34:org.sandrob.bouncycastle.asn1.x509.DistributionPointName getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    40:49:org.sandrob.bouncycastle.asn1.x509.DistributionPointName getInstance(java.lang.Object) -> getInstance
    55:61:void <init>(int,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    63:69:void <init>(int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    74:75:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> <init>
    84:84:int getType() -> getType
    94:94:org.sandrob.bouncycastle.asn1.ASN1Encodable getName() -> getName
    97:110:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    114:114:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    119:133:java.lang.String toString() -> toString
    138:148:void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> a
org.sandrob.bouncycastle.asn1.x509.ExtendedKeyUsage -> org.sandrob.bouncycastle.asn1.x509.ExtendedKeyUsage:
    java.util.Hashtable usageTable -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> b
    31:31:org.sandrob.bouncycastle.asn1.x509.ExtendedKeyUsage getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    37:52:org.sandrob.bouncycastle.asn1.x509.ExtendedKeyUsage getInstance(java.lang.Object) -> getInstance
    24:61:void <init>(org.sandrob.bouncycastle.asn1.x509.KeyPurposeId) -> <init>
    24:79:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    24:96:void <init>(java.util.Vector) -> <init>
    101:101:boolean hasKeyPurposeId(org.sandrob.bouncycastle.asn1.x509.KeyPurposeId) -> hasKeyPurposeId
    111:116:java.util.Vector getUsages() -> getUsages
    121:121:int size() -> size
    126:126:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.GeneralName -> org.sandrob.bouncycastle.asn1.x509.GeneralName:
    int otherName -> otherName
    int rfc822Name -> rfc822Name
    int dNSName -> dNSName
    int x400Address -> x400Address
    int directoryName -> directoryName
    int ediPartyName -> ediPartyName
    int uniformResourceIdentifier -> uniformResourceIdentifier
    int iPAddress -> iPAddress
    int registeredID -> registeredID
    org.sandrob.bouncycastle.asn1.DEREncodable obj -> a
    int tag -> b
    63:68:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Name) -> <init>
    70:75:void <init>(org.sandrob.bouncycastle.asn1.x500.X500Name) -> <init>
    80:85:void <init>(org.sandrob.bouncycastle.asn1.DERObject,int) -> <init>
    114:120:void <init>(int,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    145:179:void <init>(int,java.lang.String) -> <init>
    184:229:org.sandrob.bouncycastle.asn1.x509.GeneralName getInstance(java.lang.Object) -> getInstance
    236:236:org.sandrob.bouncycastle.asn1.x509.GeneralName getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    241:241:int getTagNo() -> getTagNo
    246:246:org.sandrob.bouncycastle.asn1.DEREncodable getName() -> getName
    251:268:java.lang.String toString() -> toString
    273:336:byte[] toGeneralNameEncoding(java.lang.String) -> a
    341:347:void parseIPv4Mask(java.lang.String,byte[],int) -> a
    351:358:void parseIPv4(java.lang.String,byte[],int) -> b
    362:369:int[] parseMask(java.lang.String) -> b
    374:379:void copyInts(int[],byte[],int) -> a
    383:432:int[] parseIPv6(java.lang.String) -> c
    437:443:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.GeneralNames -> org.sandrob.bouncycastle.asn1.x509.GeneralNames:
    org.sandrob.bouncycastle.asn1.x509.GeneralName[] names -> a
    17:27:org.sandrob.bouncycastle.asn1.x509.GeneralNames getInstance(java.lang.Object) -> getInstance
    34:34:org.sandrob.bouncycastle.asn1.x509.GeneralNames getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    42:46:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    48:57:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    61:65:org.sandrob.bouncycastle.asn1.x509.GeneralName[] getNames() -> getNames
    76:76:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    81:93:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.GeneralSubtree -> org.sandrob.bouncycastle.asn1.x509.GeneralSubtree:
    java.math.BigInteger ZERO -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName base -> b
    org.sandrob.bouncycastle.asn1.DERInteger minimum -> c
    org.sandrob.bouncycastle.asn1.DERInteger maximum -> d
    31:34:void <clinit>() -> <clinit>
    42:92:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    111:129:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName,java.math.BigInteger,java.math.BigInteger) -> <init>
    133:134:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    140:140:org.sandrob.bouncycastle.asn1.x509.GeneralSubtree getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    146:156:org.sandrob.bouncycastle.asn1.x509.GeneralSubtree getInstance(java.lang.Object) -> getInstance
    161:161:org.sandrob.bouncycastle.asn1.x509.GeneralName getBase() -> getBase
    166:171:java.math.BigInteger getMinimum() -> getMinimum
    176:181:java.math.BigInteger getMaximum() -> getMaximum
    202:216:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.Holder -> org.sandrob.bouncycastle.asn1.x509.Holder:
    org.sandrob.bouncycastle.asn1.x509.IssuerSerial baseCertificateID -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralNames entityName -> b
    org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo objectDigestInfo -> c
    int version -> d
    53:66:org.sandrob.bouncycastle.asn1.x509.Holder getInstance(java.lang.Object) -> getInstance
    49:88:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    49:124:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    49:129:void <init>(org.sandrob.bouncycastle.asn1.x509.IssuerSerial) -> <init>
    49:140:void <init>(org.sandrob.bouncycastle.asn1.x509.IssuerSerial,int) -> <init>
    149:149:int getVersion() -> getVersion
    49:161:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> <init>
    49:174:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames,int) -> <init>
    49:184:void <init>(org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo) -> <init>
    188:188:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getBaseCertificateID() -> getBaseCertificateID
    199:199:org.sandrob.bouncycastle.asn1.x509.GeneralNames getEntityName() -> getEntityName
    204:204:org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo getObjectDigestInfo() -> getObjectDigestInfo
    209:238:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.IetfAttrSyntax -> org.sandrob.bouncycastle.asn1.x509.IetfAttrSyntax:
    int VALUE_OCTETS -> VALUE_OCTETS
    int VALUE_OID -> VALUE_OID
    int VALUE_UTF8 -> VALUE_UTF8
    org.sandrob.bouncycastle.asn1.x509.GeneralNames policyAuthority -> a
    java.util.Vector values -> b
    int valueChoice -> c
    27:90:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    94:94:org.sandrob.bouncycastle.asn1.x509.GeneralNames getPolicyAuthority() -> getPolicyAuthority
    99:99:int getValueType() -> getValueType
    104:135:java.lang.Object[] getValues() -> getValues
    156:172:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.IssuerSerial -> org.sandrob.bouncycastle.asn1.x509.IssuerSerial:
    org.sandrob.bouncycastle.asn1.x509.GeneralNames issuer -> a
    org.sandrob.bouncycastle.asn1.DERInteger serial -> b
    org.sandrob.bouncycastle.asn1.DERBitString issuerUID -> c
    22:32:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getInstance(java.lang.Object) -> getInstance
    39:39:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    42:57:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    59:65:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames,org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    69:69:org.sandrob.bouncycastle.asn1.x509.GeneralNames getIssuer() -> getIssuer
    74:74:org.sandrob.bouncycastle.asn1.DERInteger getSerial() -> getSerial
    79:79:org.sandrob.bouncycastle.asn1.DERBitString getIssuerUID() -> getIssuerUID
    94:104:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.IssuingDistributionPoint -> org.sandrob.bouncycastle.asn1.x509.IssuingDistributionPoint:
    org.sandrob.bouncycastle.asn1.x509.DistributionPointName distributionPoint -> a
    boolean onlyContainsUserCerts -> b
    boolean onlyContainsCACerts -> c
    org.sandrob.bouncycastle.asn1.x509.ReasonFlags onlySomeReasons -> d
    boolean indirectCRL -> e
    boolean onlyContainsAttributeCerts -> f
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> g
    44:44:org.sandrob.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    50:59:org.sandrob.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object) -> getInstance
    77:119:void <init>(org.sandrob.bouncycastle.asn1.x509.DistributionPointName,boolean,boolean,org.sandrob.bouncycastle.asn1.x509.ReasonFlags,boolean,boolean) -> <init>
    124:159:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    163:163:boolean onlyContainsUserCerts() -> onlyContainsUserCerts
    168:168:boolean onlyContainsCACerts() -> onlyContainsCACerts
    173:173:boolean isIndirectCRL() -> isIndirectCRL
    178:178:boolean onlyContainsAttributeCerts() -> onlyContainsAttributeCerts
    186:186:org.sandrob.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint() -> getDistributionPoint
    194:194:org.sandrob.bouncycastle.asn1.x509.ReasonFlags getOnlySomeReasons() -> getOnlySomeReasons
    199:199:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    204:235:java.lang.String toString() -> toString
    240:250:void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> a
    254:254:java.lang.String booleanToString(boolean) -> a
org.sandrob.bouncycastle.asn1.x509.KeyPurposeId -> org.sandrob.bouncycastle.asn1.x509.KeyPurposeId:
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId anyExtendedKeyUsage -> anyExtendedKeyUsage
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_serverAuth -> id_kp_serverAuth
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_clientAuth -> id_kp_clientAuth
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_codeSigning -> id_kp_codeSigning
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_emailProtection -> id_kp_emailProtection
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecEndSystem -> id_kp_ipsecEndSystem
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecTunnel -> id_kp_ipsecTunnel
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecUser -> id_kp_ipsecUser
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_timeStamping -> id_kp_timeStamping
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_OCSPSigning -> id_kp_OCSPSigning
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_dvcs -> id_kp_dvcs
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_sbgpCertAAServerAuth -> id_kp_sbgpCertAAServerAuth
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_scvp_responder -> id_kp_scvp_responder
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_eapOverPPP -> id_kp_eapOverPPP
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_eapOverLAN -> id_kp_eapOverLAN
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_scvpServer -> id_kp_scvpServer
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_scvpClient -> id_kp_scvpClient
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecIKE -> id_kp_ipsecIKE
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_capwapAC -> id_kp_capwapAC
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_capwapWTP -> id_kp_capwapWTP
    org.sandrob.bouncycastle.asn1.x509.KeyPurposeId id_kp_smartcardlogon -> id_kp_smartcardlogon
    15:118:void <clinit>() -> <clinit>
    28:29:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.asn1.x509.KeyUsage -> org.sandrob.bouncycastle.asn1.x509.KeyUsage:
    int digitalSignature -> digitalSignature
    int nonRepudiation -> nonRepudiation
    int keyEncipherment -> keyEncipherment
    int dataEncipherment -> dataEncipherment
    int keyAgreement -> keyAgreement
    int keyCertSign -> keyCertSign
    int cRLSign -> cRLSign
    int encipherOnly -> encipherOnly
    int decipherOnly -> decipherOnly
    37:47:org.sandrob.bouncycastle.asn1.DERBitString getInstance(java.lang.Object) -> getInstance
    60:61:void <init>(int) -> <init>
    66:67:void <init>(org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
    71:75:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.NameConstraints -> org.sandrob.bouncycastle.asn1.x509.NameConstraints:
    org.sandrob.bouncycastle.asn1.ASN1Sequence permitted -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence excluded -> b
    19:35:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    48:60:void <init>(java.util.Vector,java.util.Vector) -> <init>
    64:71:org.sandrob.bouncycastle.asn1.DERSequence createSequence(java.util.Vector) -> a
    76:76:org.sandrob.bouncycastle.asn1.ASN1Sequence getPermittedSubtrees() -> getPermittedSubtrees
    81:81:org.sandrob.bouncycastle.asn1.ASN1Sequence getExcludedSubtrees() -> getExcludedSubtrees
    90:102:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.NoticeReference -> org.sandrob.bouncycastle.asn1.x509.NoticeReference:
    org.sandrob.bouncycastle.asn1.x509.DisplayText organization -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence noticeNumbers -> b
    41:63:void <init>(java.lang.String,java.util.Vector) -> <init>
    71:77:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    86:94:void <init>(int,java.lang.String,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    105:116:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    121:130:org.sandrob.bouncycastle.asn1.x509.NoticeReference getInstance(java.lang.Object) -> getInstance
    135:135:org.sandrob.bouncycastle.asn1.x509.DisplayText getOrganization() -> getOrganization
    140:140:org.sandrob.bouncycastle.asn1.ASN1Sequence getNoticeNumbers() -> getNoticeNumbers
    150:153:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo -> org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo:
    int publicKey -> publicKey
    int publicKeyCert -> publicKeyCert
    int otherObjectDigest -> otherObjectDigest
    org.sandrob.bouncycastle.asn1.DEREnumerated digestedObjectType -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier otherObjectTypeID -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> c
    org.sandrob.bouncycastle.asn1.DERBitString objectDigest -> d
    62:73:org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo getInstance(java.lang.Object) -> getInstance
    80:80:org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    96:111:void <init>(int,java.lang.String,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    113:135:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    139:139:org.sandrob.bouncycastle.asn1.DEREnumerated getDigestedObjectType() -> getDigestedObjectType
    144:144:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOtherObjectTypeID() -> getOtherObjectTypeID
    149:149:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    154:154:org.sandrob.bouncycastle.asn1.DERBitString getObjectDigest() -> getObjectDigest
    178:190:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.PolicyInformation -> org.sandrob.bouncycastle.asn1.x509.PolicyInformation:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier policyIdentifier -> a
    org.sandrob.bouncycastle.asn1.ASN1Sequence policyQualifiers -> b
    16:31:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    33:37:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    39:45:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    50:55:org.sandrob.bouncycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object) -> getInstance
    60:60:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getPolicyIdentifier() -> getPolicyIdentifier
    65:65:org.sandrob.bouncycastle.asn1.ASN1Sequence getPolicyQualifiers() -> getPolicyQualifiers
    76:85:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.PolicyMappings -> org.sandrob.bouncycastle.asn1.x509.PolicyMappings:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    26:37:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    26:62:void <init>(java.util.Hashtable) -> <init>
    66:66:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.PolicyQualifierId -> org.sandrob.bouncycastle.asn1.x509.PolicyQualifierId:
    org.sandrob.bouncycastle.asn1.x509.PolicyQualifierId id_qt_cps -> id_qt_cps
    org.sandrob.bouncycastle.asn1.x509.PolicyQualifierId id_qt_unotice -> id_qt_unotice
    18:30:void <clinit>() -> <clinit>
    24:25:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.asn1.x509.PolicyQualifierInfo -> org.sandrob.bouncycastle.asn1.x509.PolicyQualifierInfo:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier policyQualifierId -> a
    org.sandrob.bouncycastle.asn1.DEREncodable qualifier -> b
    34:40:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    49:54:void <init>(java.lang.String) -> <init>
    62:73:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    78:87:org.sandrob.bouncycastle.asn1.x509.PolicyQualifierInfo getInstance(java.lang.Object) -> getInstance
    93:93:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getPolicyQualifierId() -> getPolicyQualifierId
    98:98:org.sandrob.bouncycastle.asn1.DEREncodable getQualifier() -> getQualifier
    108:112:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.PrivateKeyUsagePeriod -> org.sandrob.bouncycastle.asn1.x509.PrivateKeyUsagePeriod:
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime _notBefore -> a
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime _notAfter -> b
    26:41:org.sandrob.bouncycastle.asn1.x509.PrivateKeyUsagePeriod getInstance(java.lang.Object) -> getInstance
    46:62:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    66:66:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getNotBefore() -> getNotBefore
    71:71:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getNotAfter() -> getNotAfter
    76:87:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.RSAPublicKeyStructure -> org.sandrob.bouncycastle.asn1.x509.RSAPublicKeyStructure:
    java.math.BigInteger modulus -> a
    java.math.BigInteger publicExponent -> b
    24:24:org.sandrob.bouncycastle.asn1.x509.RSAPublicKeyStructure getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    30:40:org.sandrob.bouncycastle.asn1.x509.RSAPublicKeyStructure getInstance(java.lang.Object) -> getInstance
    43:49:void <init>(java.math.BigInteger,java.math.BigInteger) -> <init>
    51:64:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    68:68:java.math.BigInteger getModulus() -> getModulus
    73:73:java.math.BigInteger getPublicExponent() -> getPublicExponent
    88:93:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.ReasonFlags -> org.sandrob.bouncycastle.asn1.x509.ReasonFlags:
    int UNUSED -> UNUSED
    int KEY_COMPROMISE -> KEY_COMPROMISE
    int CA_COMPROMISE -> CA_COMPROMISE
    int AFFILIATION_CHANGED -> AFFILIATION_CHANGED
    int SUPERSEDED -> SUPERSEDED
    int CESSATION_OF_OPERATION -> CESSATION_OF_OPERATION
    int CERTIFICATE_HOLD -> CERTIFICATE_HOLD
    int PRIVILEGE_WITHDRAWN -> PRIVILEGE_WITHDRAWN
    int AA_COMPROMISE -> AA_COMPROMISE
    int unused -> unused
    int keyCompromise -> keyCompromise
    int cACompromise -> cACompromise
    int affiliationChanged -> affiliationChanged
    int superseded -> superseded
    int cessationOfOperation -> cessationOfOperation
    int certificateHold -> certificateHold
    int privilegeWithdrawn -> privilegeWithdrawn
    int aACompromise -> aACompromise
    77:78:void <init>(int) -> <init>
    83:84:void <init>(org.sandrob.bouncycastle.asn1.DERBitString) -> <init>
org.sandrob.bouncycastle.asn1.x509.RoleSyntax -> org.sandrob.bouncycastle.asn1.x509.RoleSyntax:
    org.sandrob.bouncycastle.asn1.x509.GeneralNames roleAuthority -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName roleName -> b
    44:53:org.sandrob.bouncycastle.asn1.x509.RoleSyntax getInstance(java.lang.Object) -> getInstance
    61:74:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    84:85:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    96:98:void <init>(java.lang.String) -> <init>
    107:131:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    140:140:org.sandrob.bouncycastle.asn1.x509.GeneralNames getRoleAuthority() -> getRoleAuthority
    150:150:org.sandrob.bouncycastle.asn1.x509.GeneralName getRoleName() -> getRoleName
    160:162:java.lang.String getRoleNameAsString() -> getRoleNameAsString
    172:191:java.lang.String[] getRoleAuthorityAsString() -> getRoleAuthorityAsString
    207:214:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    219:235:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.SubjectDirectoryAttributes -> org.sandrob.bouncycastle.asn1.x509.SubjectDirectoryAttributes:
    java.util.Vector attributes -> a
    39:49:org.sandrob.bouncycastle.asn1.x509.SubjectDirectoryAttributes getInstance(java.lang.Object) -> getInstance
    34:82:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    34:101:void <init>(java.util.Vector) -> <init>
    125:134:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    142:142:java.util.Vector getAttributes() -> getAttributes
org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier -> org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier:
    byte[] keyidentifier -> a
    26:26:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    32:52:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier getInstance(java.lang.Object) -> getInstance
    55:59:void <init>(byte[]) -> <init>
    61:65:void <init>(org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    73:77:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    81:81:byte[] getKeyIdentifier() -> getKeyIdentifier
    86:86:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    101:101:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier createSHA1KeyIdentifier(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> createSHA1KeyIdentifier
    116:124:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier createTruncatedSHA1KeyIdentifier(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> createTruncatedSHA1KeyIdentifier
    129:135:byte[] getDigest(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo -> org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.sandrob.bouncycastle.asn1.DERBitString keyData -> b
    32:32:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    38:47:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object) -> getInstance
    50:56:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> <init>
    58:64:void <init>(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> <init>
    66:79:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    83:83:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> getAlgorithmId
    96:98:org.sandrob.bouncycastle.asn1.DERObject getPublicKey() -> getPublicKey
    106:106:org.sandrob.bouncycastle.asn1.DERBitString getPublicKeyData() -> getPublicKeyData
    119:124:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.TBSCertList -> org.sandrob.bouncycastle.asn1.x509.TBSCertList:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger version -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> c
    org.sandrob.bouncycastle.asn1.x509.X509Name issuer -> d
    org.sandrob.bouncycastle.asn1.x509.Time thisUpdate -> e
    org.sandrob.bouncycastle.asn1.x509.Time nextUpdate -> f
    org.sandrob.bouncycastle.asn1.ASN1Sequence revokedCertificates -> g
    org.sandrob.bouncycastle.asn1.x509.X509Extensions crlExtensions -> h
    136:136:org.sandrob.bouncycastle.asn1.x509.TBSCertList getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    142:151:org.sandrob.bouncycastle.asn1.x509.TBSCertList getInstance(java.lang.Object) -> getInstance
    154:198:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    202:202:int getVersion() -> getVersion
    207:207:org.sandrob.bouncycastle.asn1.DERInteger getVersionNumber() -> getVersionNumber
    212:212:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> getSignature
    217:217:org.sandrob.bouncycastle.asn1.x509.X509Name getIssuer() -> getIssuer
    222:222:org.sandrob.bouncycastle.asn1.x509.Time getThisUpdate() -> getThisUpdate
    227:227:org.sandrob.bouncycastle.asn1.x509.Time getNextUpdate() -> getNextUpdate
    232:244:org.sandrob.bouncycastle.asn1.x509.TBSCertList$CRLEntry[] getRevokedCertificates() -> getRevokedCertificates
    249:254:java.util.Enumeration getRevokedCertificateEnumeration() -> getRevokedCertificateEnumeration
    259:259:org.sandrob.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    264:264:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.TBSCertList$CRLEntry -> org.sandrob.bouncycastle.asn1.x509.TBSCertList$CRLEntry:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger userCertificate -> b
    org.sandrob.bouncycastle.asn1.x509.Time revocationDate -> c
    org.sandrob.bouncycastle.asn1.x509.X509Extensions crlEntryExtensions -> d
    47:59:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    63:63:org.sandrob.bouncycastle.asn1.DERInteger getUserCertificate() -> getUserCertificate
    68:68:org.sandrob.bouncycastle.asn1.x509.Time getRevocationDate() -> getRevocationDate
    73:78:org.sandrob.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    83:83:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.TBSCertList$EmptyEnumeration -> org.sandrob.bouncycastle.asn1.x509.TBSCertList$a:
    org.sandrob.bouncycastle.asn1.x509.TBSCertList this$0 -> a
    108:108:void <init>(org.sandrob.bouncycastle.asn1.x509.TBSCertList) -> <init>
    113:113:boolean hasMoreElements() -> hasMoreElements
    118:118:java.lang.Object nextElement() -> nextElement
    108:108:void <init>(org.sandrob.bouncycastle.asn1.x509.TBSCertList,org.sandrob.bouncycastle.asn1.x509.TBSCertList$EmptyEnumeration) -> <init>
org.sandrob.bouncycastle.asn1.x509.TBSCertList$RevokedCertificatesEnumeration -> org.sandrob.bouncycastle.asn1.x509.TBSCertList$b:
    java.util.Enumeration en -> b
    org.sandrob.bouncycastle.asn1.x509.TBSCertList this$0 -> a
    92:95:void <init>(org.sandrob.bouncycastle.asn1.x509.TBSCertList,java.util.Enumeration) -> <init>
    99:99:boolean hasMoreElements() -> hasMoreElements
    104:104:java.lang.Object nextElement() -> nextElement
org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure -> org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    org.sandrob.bouncycastle.asn1.DERInteger version -> b
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> d
    org.sandrob.bouncycastle.asn1.x509.X509Name issuer -> e
    org.sandrob.bouncycastle.asn1.x509.Time startDate -> f
    org.sandrob.bouncycastle.asn1.x509.Time endDate -> g
    org.sandrob.bouncycastle.asn1.x509.X509Name subject -> h
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> i
    org.sandrob.bouncycastle.asn1.DERBitString issuerUniqueId -> j
    org.sandrob.bouncycastle.asn1.DERBitString subjectUniqueId -> k
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> l
    53:53:org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    59:68:org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure getInstance(java.lang.Object) -> getInstance
    71:127:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    131:131:int getVersion() -> getVersion
    136:136:org.sandrob.bouncycastle.asn1.DERInteger getVersionNumber() -> getVersionNumber
    141:141:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    146:146:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> getSignature
    151:151:org.sandrob.bouncycastle.asn1.x509.X509Name getIssuer() -> getIssuer
    156:156:org.sandrob.bouncycastle.asn1.x509.Time getStartDate() -> getStartDate
    161:161:org.sandrob.bouncycastle.asn1.x509.Time getEndDate() -> getEndDate
    166:166:org.sandrob.bouncycastle.asn1.x509.X509Name getSubject() -> getSubject
    171:171:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    176:176:org.sandrob.bouncycastle.asn1.DERBitString getIssuerUniqueId() -> getIssuerUniqueId
    181:181:org.sandrob.bouncycastle.asn1.DERBitString getSubjectUniqueId() -> getSubjectUniqueId
    186:186:org.sandrob.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    191:191:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.Target -> org.sandrob.bouncycastle.asn1.x509.Target:
    int targetName -> targetName
    int targetGroup -> targetGroup
    org.sandrob.bouncycastle.asn1.x509.GeneralName targName -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName targGroup -> b
    47:57:org.sandrob.bouncycastle.asn1.x509.Target getInstance(java.lang.Object) -> getInstance
    66:79:void <init>(org.sandrob.bouncycastle.asn1.ASN1TaggedObject) -> <init>
    92:93:void <init>(int,org.sandrob.bouncycastle.asn1.x509.GeneralName) -> <init>
    100:100:org.sandrob.bouncycastle.asn1.x509.GeneralName getTargetGroup() -> getTargetGroup
    108:108:org.sandrob.bouncycastle.asn1.x509.GeneralName getTargetName() -> getTargetName
    129:135:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.TargetInformation -> org.sandrob.bouncycastle.asn1.x509.TargetInformation:
    org.sandrob.bouncycastle.asn1.ASN1Sequence targets -> a
    36:46:org.sandrob.bouncycastle.asn1.x509.TargetInformation getInstance(java.lang.Object) -> getInstance
    56:59:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    68:74:org.sandrob.bouncycastle.asn1.x509.Targets[] getTargetsObjects() -> getTargetsObjects
    83:86:void <init>(org.sandrob.bouncycastle.asn1.x509.Targets) -> <init>
    97:98:void <init>(org.sandrob.bouncycastle.asn1.x509.Target[]) -> <init>
    119:119:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.Targets -> org.sandrob.bouncycastle.asn1.x509.Targets:
    org.sandrob.bouncycastle.asn1.ASN1Sequence targets -> a
    50:60:org.sandrob.bouncycastle.asn1.x509.Targets getInstance(java.lang.Object) -> getInstance
    70:73:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    84:87:void <init>(org.sandrob.bouncycastle.asn1.x509.Target[]) -> <init>
    98:104:org.sandrob.bouncycastle.asn1.x509.Target[] getTargets() -> getTargets
    120:120:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.Time -> org.sandrob.bouncycastle.asn1.x509.Time:
    org.sandrob.bouncycastle.asn1.DERObject time -> a
    25:25:org.sandrob.bouncycastle.asn1.x509.Time getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    28:38:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    45:64:void <init>(java.util.Date) -> <init>
    69:82:org.sandrob.bouncycastle.asn1.x509.Time getInstance(java.lang.Object) -> getInstance
    87:93:java.lang.String getTime() -> getTime
    101:112:java.util.Date getDate() -> getDate
    126:126:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    131:131:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.UserNotice -> org.sandrob.bouncycastle.asn1.x509.UserNotice:
    org.sandrob.bouncycastle.asn1.x509.NoticeReference noticeRef -> a
    org.sandrob.bouncycastle.asn1.x509.DisplayText explicitText -> b
    35:41:void <init>(org.sandrob.bouncycastle.asn1.x509.NoticeReference,org.sandrob.bouncycastle.asn1.x509.DisplayText) -> <init>
    49:55:void <init>(org.sandrob.bouncycastle.asn1.x509.NoticeReference,java.lang.String) -> <init>
    66:89:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    93:93:org.sandrob.bouncycastle.asn1.x509.NoticeReference getNoticeRef() -> getNoticeRef
    98:98:org.sandrob.bouncycastle.asn1.x509.DisplayText getExplicitText() -> getExplicitText
    103:115:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.V1TBSCertificateGenerator -> org.sandrob.bouncycastle.asn1.x509.V1TBSCertificateGenerator:
    org.sandrob.bouncycastle.asn1.DERTaggedObject version -> a
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> c
    org.sandrob.bouncycastle.asn1.x509.X509Name issuer -> d
    org.sandrob.bouncycastle.asn1.x509.Time startDate -> e
    org.sandrob.bouncycastle.asn1.x509.Time endDate -> f
    org.sandrob.bouncycastle.asn1.x509.X509Name subject -> g
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> h
    27:38:void <init>() -> <init>
    43:44:void setSerialNumber(org.sandrob.bouncycastle.asn1.DERInteger) -> setSerialNumber
    49:50:void setSignature(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    55:56:void setIssuer(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setIssuer
    61:62:void setIssuer(org.sandrob.bouncycastle.asn1.x500.X500Name) -> setIssuer
    67:68:void setStartDate(org.sandrob.bouncycastle.asn1.x509.Time) -> setStartDate
    73:74:void setStartDate(org.sandrob.bouncycastle.asn1.DERUTCTime) -> setStartDate
    79:80:void setEndDate(org.sandrob.bouncycastle.asn1.x509.Time) -> setEndDate
    85:86:void setEndDate(org.sandrob.bouncycastle.asn1.DERUTCTime) -> setEndDate
    91:92:void setSubject(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setSubject
    97:98:void setSubject(org.sandrob.bouncycastle.asn1.x500.X500Name) -> setSubject
    103:104:void setSubjectPublicKeyInfo(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> setSubjectPublicKeyInfo
    108:136:org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure generateTBSCertificate() -> generateTBSCertificate
org.sandrob.bouncycastle.asn1.x509.V2AttributeCertificateInfoGenerator -> org.sandrob.bouncycastle.asn1.x509.V2AttributeCertificateInfoGenerator:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.Holder holder -> b
    org.sandrob.bouncycastle.asn1.x509.AttCertIssuer issuer -> c
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> d
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> e
    org.sandrob.bouncycastle.asn1.ASN1EncodableVector attributes -> f
    org.sandrob.bouncycastle.asn1.DERBitString issuerUniqueID -> g
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> h
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime startDate -> i
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime endDate -> j
    44:48:void <init>() -> <init>
    52:53:void setHolder(org.sandrob.bouncycastle.asn1.x509.Holder) -> setHolder
    57:58:void addAttribute(java.lang.String,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> addAttribute
    65:66:void addAttribute(org.sandrob.bouncycastle.asn1.x509.Attribute) -> addAttribute
    71:72:void setSerialNumber(org.sandrob.bouncycastle.asn1.DERInteger) -> setSerialNumber
    77:78:void setSignature(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    83:84:void setIssuer(org.sandrob.bouncycastle.asn1.x509.AttCertIssuer) -> setIssuer
    89:90:void setStartDate(org.sandrob.bouncycastle.asn1.DERGeneralizedTime) -> setStartDate
    95:96:void setEndDate(org.sandrob.bouncycastle.asn1.DERGeneralizedTime) -> setEndDate
    101:102:void setIssuerUniqueID(org.sandrob.bouncycastle.asn1.DERBitString) -> setIssuerUniqueID
    107:108:void setExtensions(org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    112:146:org.sandrob.bouncycastle.asn1.x509.AttributeCertificateInfo generateAttributeCertificateInfo() -> generateAttributeCertificateInfo
org.sandrob.bouncycastle.asn1.x509.V2Form -> org.sandrob.bouncycastle.asn1.x509.V2Form:
    org.sandrob.bouncycastle.asn1.x509.GeneralNames issuerName -> a
    org.sandrob.bouncycastle.asn1.x509.IssuerSerial baseCertificateID -> b
    org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo objectDigestInfo -> c
    22:22:org.sandrob.bouncycastle.asn1.x509.V2Form getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    28:37:org.sandrob.bouncycastle.asn1.x509.V2Form getInstance(java.lang.Object) -> getInstance
    40:44:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> <init>
    46:79:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    83:83:org.sandrob.bouncycastle.asn1.x509.GeneralNames getIssuerName() -> getIssuerName
    88:88:org.sandrob.bouncycastle.asn1.x509.IssuerSerial getBaseCertificateID() -> getBaseCertificateID
    93:93:org.sandrob.bouncycastle.asn1.x509.ObjectDigestInfo getObjectDigestInfo() -> getObjectDigestInfo
    111:128:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.V2TBSCertListGenerator -> org.sandrob.bouncycastle.asn1.x509.V2TBSCertListGenerator:
    org.sandrob.bouncycastle.asn1.DERInteger version -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> b
    org.sandrob.bouncycastle.asn1.x509.X509Name issuer -> c
    org.sandrob.bouncycastle.asn1.x509.Time thisUpdate -> d
    org.sandrob.bouncycastle.asn1.x509.Time nextUpdate -> e
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> f
    java.util.Vector crlentries -> g
    42:52:void <init>() -> <init>
    58:59:void setSignature(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    64:65:void setIssuer(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setIssuer
    69:70:void setIssuer(org.sandrob.bouncycastle.asn1.x500.X500Name) -> setIssuer
    75:76:void setThisUpdate(org.sandrob.bouncycastle.asn1.DERUTCTime) -> setThisUpdate
    81:82:void setNextUpdate(org.sandrob.bouncycastle.asn1.DERUTCTime) -> setNextUpdate
    87:88:void setThisUpdate(org.sandrob.bouncycastle.asn1.x509.Time) -> setThisUpdate
    93:94:void setNextUpdate(org.sandrob.bouncycastle.asn1.x509.Time) -> setNextUpdate
    99:105:void addCRLEntry(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> addCRLEntry
    109:110:void addCRLEntry(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERUTCTime,int) -> addCRLEntry
    114:115:void addCRLEntry(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x509.Time,int) -> addCRLEntry
    119:158:void addCRLEntry(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x509.Time,int,org.sandrob.bouncycastle.asn1.DERGeneralizedTime) -> addCRLEntry
    162:173:void addCRLEntry(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x509.Time,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> addCRLEntry
    178:179:void setExtensions(org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    183:217:org.sandrob.bouncycastle.asn1.x509.TBSCertList generateTBSCertList() -> generateTBSCertList
org.sandrob.bouncycastle.asn1.x509.V3TBSCertificateGenerator -> org.sandrob.bouncycastle.asn1.x509.V3TBSCertificateGenerator:
    org.sandrob.bouncycastle.asn1.DERTaggedObject version -> a
    org.sandrob.bouncycastle.asn1.DERInteger serialNumber -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> c
    org.sandrob.bouncycastle.asn1.x509.X509Name issuer -> d
    org.sandrob.bouncycastle.asn1.x509.Time startDate -> e
    org.sandrob.bouncycastle.asn1.x509.Time endDate -> f
    org.sandrob.bouncycastle.asn1.x509.X509Name subject -> g
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> h
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> i
    boolean altNamePresentAndCritical -> j
    org.sandrob.bouncycastle.asn1.DERBitString issuerUniqueID -> k
    org.sandrob.bouncycastle.asn1.DERBitString subjectUniqueID -> l
    31:47:void <init>() -> <init>
    52:53:void setSerialNumber(org.sandrob.bouncycastle.asn1.DERInteger) -> setSerialNumber
    58:59:void setSignature(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    64:65:void setIssuer(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setIssuer
    70:71:void setIssuer(org.sandrob.bouncycastle.asn1.x500.X500Name) -> setIssuer
    76:77:void setStartDate(org.sandrob.bouncycastle.asn1.DERUTCTime) -> setStartDate
    82:83:void setStartDate(org.sandrob.bouncycastle.asn1.x509.Time) -> setStartDate
    88:89:void setEndDate(org.sandrob.bouncycastle.asn1.DERUTCTime) -> setEndDate
    94:95:void setEndDate(org.sandrob.bouncycastle.asn1.x509.Time) -> setEndDate
    100:101:void setSubject(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setSubject
    106:107:void setSubject(org.sandrob.bouncycastle.asn1.x500.X500Name) -> setSubject
    112:113:void setIssuerUniqueID(org.sandrob.bouncycastle.asn1.DERBitString) -> setIssuerUniqueID
    118:119:void setSubjectUniqueID(org.sandrob.bouncycastle.asn1.DERBitString) -> setSubjectUniqueID
    124:125:void setSubjectPublicKeyInfo(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> setSubjectPublicKeyInfo
    130:140:void setExtensions(org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    144:194:org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure generateTBSCertificate() -> generateTBSCertificate
org.sandrob.bouncycastle.asn1.x509.X509Attributes -> org.sandrob.bouncycastle.asn1.x509.X509Attributes:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier RoleSyntax -> RoleSyntax
    5:7:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure -> org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure:
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> a
    org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure tbsCert -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> c
    org.sandrob.bouncycastle.asn1.DERBitString sig -> d
    34:34:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    40:49:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure getInstance(java.lang.Object) -> getInstance
    52:71:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    75:75:org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure getTBSCertificate() -> getTBSCertificate
    80:80:int getVersion() -> getVersion
    85:85:org.sandrob.bouncycastle.asn1.DERInteger getSerialNumber() -> getSerialNumber
    90:90:org.sandrob.bouncycastle.asn1.x509.X509Name getIssuer() -> getIssuer
    95:95:org.sandrob.bouncycastle.asn1.x509.Time getStartDate() -> getStartDate
    100:100:org.sandrob.bouncycastle.asn1.x509.Time getEndDate() -> getEndDate
    105:105:org.sandrob.bouncycastle.asn1.x509.X509Name getSubject() -> getSubject
    110:110:org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    115:115:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    120:120:org.sandrob.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    125:125:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.X509DefaultEntryConverter -> org.sandrob.bouncycastle.asn1.x509.X509DefaultEntryConverter:
    16:16:void <init>() -> <init>
    31:63:org.sandrob.bouncycastle.asn1.DERObject getConvertedValue(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.lang.String) -> getConvertedValue
org.sandrob.bouncycastle.asn1.x509.X509Extension -> org.sandrob.bouncycastle.asn1.x509.X509Extension:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier subjectDirectoryAttributes -> subjectDirectoryAttributes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier subjectKeyIdentifier -> subjectKeyIdentifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier keyUsage -> keyUsage
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier privateKeyUsagePeriod -> privateKeyUsagePeriod
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName -> subjectAlternativeName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier issuerAlternativeName -> issuerAlternativeName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier basicConstraints -> basicConstraints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier cRLNumber -> cRLNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier reasonCode -> reasonCode
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier instructionCode -> instructionCode
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier invalidityDate -> invalidityDate
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator -> deltaCRLIndicator
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint -> issuingDistributionPoint
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier certificateIssuer -> certificateIssuer
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier nameConstraints -> nameConstraints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier cRLDistributionPoints -> cRLDistributionPoints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier certificatePolicies -> certificatePolicies
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier policyMappings -> policyMappings
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier authorityKeyIdentifier -> authorityKeyIdentifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier policyConstraints -> policyConstraints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier extendedKeyUsage -> extendedKeyUsage
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier freshestCRL -> freshestCRL
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier inhibitAnyPolicy -> inhibitAnyPolicy
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier authorityInfoAccess -> authorityInfoAccess
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier subjectInfoAccess -> subjectInfoAccess
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier logoType -> logoType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier biometricInfo -> biometricInfo
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier qCStatements -> qCStatements
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier auditIdentity -> auditIdentity
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier noRevAvail -> noRevAvail
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier targetInformation -> targetInformation
    boolean critical -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString value -> b
    14:169:void <clinit>() -> <clinit>
    174:180:void <init>(org.sandrob.bouncycastle.asn1.DERBoolean,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    182:188:void <init>(boolean,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    192:192:boolean isCritical() -> isCritical
    197:197:org.sandrob.bouncycastle.asn1.ASN1OctetString getValue() -> getValue
    202:202:org.sandrob.bouncycastle.asn1.ASN1Encodable getParsedValue() -> getParsedValue
    207:213:int hashCode() -> hashCode
    219:227:boolean equals(java.lang.Object) -> equals
    242:246:org.sandrob.bouncycastle.asn1.ASN1Object convertValueToObject(org.sandrob.bouncycastle.asn1.x509.X509Extension) -> convertValueToObject
org.sandrob.bouncycastle.asn1.x509.X509Extensions -> org.sandrob.bouncycastle.asn1.x509.X509Extensions:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier SubjectDirectoryAttributes -> SubjectDirectoryAttributes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier SubjectKeyIdentifier -> SubjectKeyIdentifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier KeyUsage -> KeyUsage
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier PrivateKeyUsagePeriod -> PrivateKeyUsagePeriod
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier SubjectAlternativeName -> SubjectAlternativeName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier IssuerAlternativeName -> IssuerAlternativeName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier BasicConstraints -> BasicConstraints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier CRLNumber -> CRLNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ReasonCode -> ReasonCode
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier InstructionCode -> InstructionCode
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier InvalidityDate -> InvalidityDate
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier DeltaCRLIndicator -> DeltaCRLIndicator
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier IssuingDistributionPoint -> IssuingDistributionPoint
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier CertificateIssuer -> CertificateIssuer
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier NameConstraints -> NameConstraints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier CRLDistributionPoints -> CRLDistributionPoints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier CertificatePolicies -> CertificatePolicies
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier PolicyMappings -> PolicyMappings
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier AuthorityKeyIdentifier -> AuthorityKeyIdentifier
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier PolicyConstraints -> PolicyConstraints
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ExtendedKeyUsage -> ExtendedKeyUsage
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier FreshestCRL -> FreshestCRL
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier InhibitAnyPolicy -> InhibitAnyPolicy
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier AuthorityInfoAccess -> AuthorityInfoAccess
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier SubjectInfoAccess -> SubjectInfoAccess
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier LogoType -> LogoType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier BiometricInfo -> BiometricInfo
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier QCStatements -> QCStatements
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier AuditIdentity -> AuditIdentity
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier NoRevAvail -> NoRevAvail
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier TargetInformation -> TargetInformation
    java.util.Hashtable extensions -> a
    java.util.Vector ordering -> b
    18:205:void <clinit>() -> <clinit>
    214:214:org.sandrob.bouncycastle.asn1.x509.X509Extensions getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    220:235:org.sandrob.bouncycastle.asn1.x509.X509Extensions getInstance(java.lang.Object) -> getInstance
    207:267:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    277:278:void <init>(java.util.Hashtable) -> <init>
    207:314:void <init>(java.util.Vector,java.util.Hashtable) -> <init>
    207:345:void <init>(java.util.Vector,java.util.Vector) -> <init>
    352:352:java.util.Enumeration oids() -> oids
    364:364:org.sandrob.bouncycastle.asn1.x509.X509Extension getExtension(org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier) -> getExtension
    375:375:org.sandrob.bouncycastle.asn1.x509.X509Extension getExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getExtension
    390:411:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    417:434:boolean equivalent(org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> equivalent
    439:439:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[] getExtensionOIDs() -> getExtensionOIDs
    444:444:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[] getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    449:449:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[] getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    454:466:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[] getExtensionOIDs(boolean) -> a
    471:477:org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier[] toOidArray(java.util.Vector) -> a
org.sandrob.bouncycastle.asn1.x509.X509ExtensionsGenerator -> org.sandrob.bouncycastle.asn1.x509.X509ExtensionsGenerator:
    java.util.Hashtable extensions -> a
    java.util.Vector extOrdering -> b
    15:18:void <init>() -> <init>
    25:27:void reset() -> reset
    44:50:void addExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,org.sandrob.bouncycastle.asn1.DEREncodable) -> addExtension
    65:72:void addExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,byte[]) -> addExtension
    81:81:boolean isEmpty() -> isEmpty
    91:91:org.sandrob.bouncycastle.asn1.x509.X509Extensions generate() -> generate
org.sandrob.bouncycastle.asn1.x509.X509Name -> org.sandrob.bouncycastle.asn1.x509.X509Name:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier C -> C
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier O -> O
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier OU -> OU
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier T -> T
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier CN -> CN
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier SN -> SN
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier STREET -> STREET
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier SERIALNUMBER -> SERIALNUMBER
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier L -> L
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier ST -> ST
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier SURNAME -> SURNAME
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier GIVENNAME -> GIVENNAME
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier INITIALS -> INITIALS
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier GENERATION -> GENERATION
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier UNIQUE_IDENTIFIER -> UNIQUE_IDENTIFIER
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier BUSINESS_CATEGORY -> BUSINESS_CATEGORY
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier POSTAL_CODE -> POSTAL_CODE
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier DN_QUALIFIER -> DN_QUALIFIER
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier PSEUDONYM -> PSEUDONYM
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier DATE_OF_BIRTH -> DATE_OF_BIRTH
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier PLACE_OF_BIRTH -> PLACE_OF_BIRTH
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier GENDER -> GENDER
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier COUNTRY_OF_CITIZENSHIP -> COUNTRY_OF_CITIZENSHIP
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier COUNTRY_OF_RESIDENCE -> COUNTRY_OF_RESIDENCE
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier NAME_AT_BIRTH -> NAME_AT_BIRTH
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier POSTAL_ADDRESS -> POSTAL_ADDRESS
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier DMD_NAME -> DMD_NAME
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier TELEPHONE_NUMBER -> TELEPHONE_NUMBER
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier NAME -> NAME
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier EmailAddress -> EmailAddress
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier UnstructuredName -> UnstructuredName
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier UnstructuredAddress -> UnstructuredAddress
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier E -> E
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier DC -> DC
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier UID -> UID
    boolean DefaultReverse -> DefaultReverse
    java.util.Hashtable DefaultSymbols -> DefaultSymbols
    java.util.Hashtable RFC2253Symbols -> RFC2253Symbols
    java.util.Hashtable RFC1779Symbols -> RFC1779Symbols
    java.util.Hashtable DefaultLookUp -> DefaultLookUp
    java.util.Hashtable OIDLookUp -> OIDLookUp
    java.util.Hashtable SymbolLookUp -> SymbolLookUp
    java.lang.Boolean TRUE -> a
    java.lang.Boolean FALSE -> b
    org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter converter -> c
    java.util.Vector ordering -> d
    java.util.Vector values -> e
    java.util.Vector added -> f
    org.sandrob.bouncycastle.asn1.ASN1Sequence seq -> g
    boolean isHashCodeCalculated -> h
    int hashCodeValue -> i
    38:341:void <clinit>() -> <clinit>
    365:365:org.sandrob.bouncycastle.asn1.x509.X509Name getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    371:384:org.sandrob.bouncycastle.asn1.x509.X509Name getInstance(java.lang.Object) -> getInstance
    344:390:void <init>() -> <init>
    344:438:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    455:456:void <init>(java.util.Hashtable) -> <init>
    470:471:void <init>(java.util.Vector,java.util.Hashtable) -> <init>
    344:521:void <init>(java.util.Vector,java.util.Hashtable,org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter) -> <init>
    530:531:void <init>(java.util.Vector,java.util.Vector) -> <init>
    344:557:void <init>(java.util.Vector,java.util.Vector,org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter) -> <init>
    576:577:void <init>(java.lang.String) -> <init>
    589:590:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter) -> <init>
    602:603:void <init>(boolean,java.lang.String) -> <init>
    617:618:void <init>(boolean,java.lang.String,org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter) -> <init>
    638:639:void <init>(boolean,java.util.Hashtable,java.lang.String) -> <init>
    645:660:org.sandrob.bouncycastle.asn1.DERObjectIdentifier decodeOID(java.lang.String,java.util.Hashtable) -> a
    344:758:void <init>(boolean,java.util.Hashtable,java.lang.String,org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter) -> <init>
    765:772:java.util.Vector getOIDs() -> getOIDs
    781:788:java.util.Vector getValues() -> getValues
    798:817:java.util.Vector getValues(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getValues
    822:860:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    869:930:boolean equals(java.lang.Object,boolean) -> equals
    935:954:int hashCode() -> hashCode
    962:1047:boolean equals(java.lang.Object) -> equals
    1052:1066:boolean equivalentStrings(java.lang.String,java.lang.String) -> a
    1071:1083:java.lang.String canonicalize(java.lang.String) -> a
    1090:1094:org.sandrob.bouncycastle.asn1.ASN1Object decodeObject(java.lang.String) -> b
    1101:1120:java.lang.String stripInternalSpaces(java.lang.String) -> c
    1129:1171:void appendValue(java.lang.StringBuffer,java.util.Hashtable,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.lang.String) -> a
    1189:1247:java.lang.String toString(boolean,java.util.Hashtable) -> toString
    1253:1260:java.lang.String bytesToString(byte[]) -> a
    1265:1265:java.lang.String toString() -> toString
org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter -> org.sandrob.bouncycastle.asn1.x509.X509NameEntryConverter:
    49:49:void <init>() -> <init>
    64:91:org.sandrob.bouncycastle.asn1.DERObject convertHexEncoded(java.lang.String,int) -> convertHexEncoded
    101:101:boolean canBePrintable(java.lang.String) -> canBePrintable
    org.sandrob.bouncycastle.asn1.DERObject getConvertedValue(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.lang.String) -> getConvertedValue
org.sandrob.bouncycastle.asn1.x509.X509NameTokenizer -> org.sandrob.bouncycastle.asn1.x509.X509NameTokenizer:
    java.lang.String value -> a
    int index -> b
    char seperator -> c
    java.lang.StringBuffer buf -> d
    19:20:void <init>(java.lang.String) -> <init>
    14:29:void <init>(java.lang.String,char) -> <init>
    33:33:boolean hasMoreTokens() -> hasMoreTokens
    38:97:java.lang.String nextToken() -> nextToken
org.sandrob.bouncycastle.asn1.x509.X509ObjectIdentifiers -> org.sandrob.bouncycastle.asn1.x509.X509ObjectIdentifiers:
    java.lang.String id -> id
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier commonName -> commonName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier countryName -> countryName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier localityName -> localityName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier stateOrProvinceName -> stateOrProvinceName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier organization -> organization
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier organizationalUnitName -> organizationalUnitName
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_at_telephoneNumber -> id_at_telephoneNumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_at_name -> id_at_name
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_SHA1 -> id_SHA1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ripemd160 -> ripemd160
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ripemd160WithRSAEncryption -> ripemd160WithRSAEncryption
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ea_rsa -> id_ea_rsa
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix -> id_pkix
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_pe -> id_pe
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ad -> id_ad
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ad_caIssuers -> id_ad_caIssuers
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ad_ocsp -> id_ad_ocsp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ocspAccessMethod -> ocspAccessMethod
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier crlAccessMethod -> crlAccessMethod
    5:60:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.x509.qualified.BiometricData -> org.sandrob.bouncycastle.asn1.x509.qualified.BiometricData:
    org.sandrob.bouncycastle.asn1.x509.qualified.TypeOfBiometricData typeOfBiometricData -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> b
    org.sandrob.bouncycastle.asn1.ASN1OctetString biometricDataHash -> c
    org.sandrob.bouncycastle.asn1.DERIA5String sourceDataUri -> d
    35:46:org.sandrob.bouncycastle.asn1.x509.qualified.BiometricData getInstance(java.lang.Object) -> getInstance
    50:65:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    67:77:void <init>(org.sandrob.bouncycastle.asn1.x509.qualified.TypeOfBiometricData,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.DERIA5String) -> <init>
    79:88:void <init>(org.sandrob.bouncycastle.asn1.x509.qualified.TypeOfBiometricData,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    92:92:org.sandrob.bouncycastle.asn1.x509.qualified.TypeOfBiometricData getTypeOfBiometricData() -> getTypeOfBiometricData
    97:97:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    102:102:org.sandrob.bouncycastle.asn1.ASN1OctetString getBiometricDataHash() -> getBiometricDataHash
    107:107:org.sandrob.bouncycastle.asn1.DERIA5String getSourceDataUri() -> getSourceDataUri
    112:122:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.qualified.ETSIQCObjectIdentifiers -> org.sandrob.bouncycastle.asn1.x509.qualified.ETSIQCObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs -> id_etsi_qcs
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_QcCompliance -> id_etsi_qcs_QcCompliance
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_LimiteValue -> id_etsi_qcs_LimiteValue
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_RetentionPeriod -> id_etsi_qcs_RetentionPeriod
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_QcSSCD -> id_etsi_qcs_QcSSCD
    5:15:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode -> org.sandrob.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode:
    int ALPHABETIC_MAXSIZE -> a
    int NUMERIC_MINSIZE -> b
    int NUMERIC_MAXSIZE -> c
    org.sandrob.bouncycastle.asn1.DEREncodable obj -> d
    34:51:org.sandrob.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode getInstance(java.lang.Object) -> getInstance
    24:62:void <init>(int) -> <init>
    24:72:void <init>(java.lang.String) -> <init>
    76:76:boolean isAlphabetic() -> isAlphabetic
    81:81:java.lang.String getAlphabetic() -> getAlphabetic
    86:86:int getNumeric() -> getNumeric
    91:91:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.qualified.MonetaryValue -> org.sandrob.bouncycastle.asn1.x509.qualified.MonetaryValue:
    org.sandrob.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode currency -> a
    org.sandrob.bouncycastle.asn1.DERInteger amount -> b
    org.sandrob.bouncycastle.asn1.DERInteger exponent -> c
    33:43:org.sandrob.bouncycastle.asn1.x509.qualified.MonetaryValue getInstance(java.lang.Object) -> getInstance
    46:56:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    58:66:void <init>(org.sandrob.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode,int,int) -> <init>
    70:70:org.sandrob.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode getCurrency() -> getCurrency
    75:75:java.math.BigInteger getAmount() -> getAmount
    80:80:java.math.BigInteger getExponent() -> getExponent
    85:90:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.qualified.QCStatement -> org.sandrob.bouncycastle.asn1.x509.qualified.QCStatement:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier qcStatementId -> a
    org.sandrob.bouncycastle.asn1.ASN1Encodable qcStatementInfo -> b
    31:41:org.sandrob.bouncycastle.asn1.x509.qualified.QCStatement getInstance(java.lang.Object) -> getInstance
    44:56:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    58:63:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    65:71:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    75:75:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getStatementId() -> getStatementId
    80:80:org.sandrob.bouncycastle.asn1.ASN1Encodable getStatementInfo() -> getStatementInfo
    85:93:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.qualified.RFC3739QCObjectIdentifiers -> org.sandrob.bouncycastle.asn1.x509.qualified.RFC3739QCObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_qcs -> id_qcs
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_qcs_pkixQCSyntax_v1 -> id_qcs_pkixQCSyntax_v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_qcs_pkixQCSyntax_v2 -> id_qcs_pkixQCSyntax_v2
    5:13:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.x509.qualified.SemanticsInformation -> org.sandrob.bouncycastle.asn1.x509.qualified.SemanticsInformation:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier semanticsIdentifier -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName[] nameRegistrationAuthorities -> b
    34:44:org.sandrob.bouncycastle.asn1.x509.qualified.SemanticsInformation getInstance(java.lang.Object) -> getInstance
    47:78:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    80:86:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x509.GeneralName[]) -> <init>
    88:92:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    94:98:void <init>(org.sandrob.bouncycastle.asn1.x509.GeneralName[]) -> <init>
    102:102:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getSemanticsIdentifier() -> getSemanticsIdentifier
    107:107:org.sandrob.bouncycastle.asn1.x509.GeneralName[] getNameRegistrationAuthorities() -> getNameRegistrationAuthorities
    112:128:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.qualified.TypeOfBiometricData -> org.sandrob.bouncycastle.asn1.x509.qualified.TypeOfBiometricData:
    int PICTURE -> PICTURE
    int HANDWRITTEN_SIGNATURE -> HANDWRITTEN_SIGNATURE
    org.sandrob.bouncycastle.asn1.DEREncodable obj -> a
    33:51:org.sandrob.bouncycastle.asn1.x509.qualified.TypeOfBiometricData getInstance(java.lang.Object) -> getInstance
    54:64:void <init>(int) -> <init>
    66:69:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    73:73:boolean isPredefined() -> isPredefined
    78:78:int getPredefinedBiometricType() -> getPredefinedBiometricType
    83:83:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getBiometricDataOid() -> getBiometricDataOid
    88:88:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.sigi.NameOrPseudonym -> org.sandrob.bouncycastle.asn1.x509.sigi.NameOrPseudonym:
    org.sandrob.bouncycastle.asn1.x500.DirectoryString pseudonym -> a
    org.sandrob.bouncycastle.asn1.x500.DirectoryString surname -> b
    org.sandrob.bouncycastle.asn1.ASN1Sequence givenName -> c
    42:58:org.sandrob.bouncycastle.asn1.x509.sigi.NameOrPseudonym getInstance(java.lang.Object) -> getInstance
    77:80:void <init>(org.sandrob.bouncycastle.asn1.x500.DirectoryString) -> <init>
    99:115:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    124:125:void <init>(java.lang.String) -> <init>
    133:137:void <init>(org.sandrob.bouncycastle.asn1.x500.DirectoryString,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    141:141:org.sandrob.bouncycastle.asn1.x500.DirectoryString getPseudonym() -> getPseudonym
    146:146:org.sandrob.bouncycastle.asn1.x500.DirectoryString getSurname() -> getSurname
    151:157:org.sandrob.bouncycastle.asn1.x500.DirectoryString[] getGivenName() -> getGivenName
    179:188:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.sigi.PersonalData -> org.sandrob.bouncycastle.asn1.x509.sigi.PersonalData:
    org.sandrob.bouncycastle.asn1.x509.sigi.NameOrPseudonym nameOrPseudonym -> a
    java.math.BigInteger nameDistinguisher -> b
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime dateOfBirth -> c
    org.sandrob.bouncycastle.asn1.x500.DirectoryString placeOfBirth -> d
    java.lang.String gender -> e
    org.sandrob.bouncycastle.asn1.x500.DirectoryString postalAddress -> f
    48:58:org.sandrob.bouncycastle.asn1.x509.sigi.PersonalData getInstance(java.lang.Object) -> getInstance
    79:116:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    128:138:void <init>(org.sandrob.bouncycastle.asn1.x509.sigi.NameOrPseudonym,java.math.BigInteger,org.sandrob.bouncycastle.asn1.DERGeneralizedTime,org.sandrob.bouncycastle.asn1.x500.DirectoryString,java.lang.String,org.sandrob.bouncycastle.asn1.x500.DirectoryString) -> <init>
    142:142:org.sandrob.bouncycastle.asn1.x509.sigi.NameOrPseudonym getNameOrPseudonym() -> getNameOrPseudonym
    147:147:java.math.BigInteger getNameDistinguisher() -> getNameDistinguisher
    152:152:org.sandrob.bouncycastle.asn1.DERGeneralizedTime getDateOfBirth() -> getDateOfBirth
    157:157:org.sandrob.bouncycastle.asn1.x500.DirectoryString getPlaceOfBirth() -> getPlaceOfBirth
    162:162:java.lang.String getGender() -> getGender
    167:167:org.sandrob.bouncycastle.asn1.x500.DirectoryString getPostalAddress() -> getPostalAddress
    190:212:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x509.sigi.SigIObjectIdentifiers -> org.sandrob.bouncycastle.asn1.x509.sigi.SigIObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi -> id_sigi
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_kp -> id_sigi_kp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_cp -> id_sigi_cp
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_on -> id_sigi_on
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_kp_directoryService -> id_sigi_kp_directoryService
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_on_personalData -> id_sigi_on_personalData
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_cp_sigconform -> id_sigi_cp_sigconform
    9:43:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.asn1.x9.DHDomainParameters -> org.sandrob.bouncycastle.asn1.x9.DHDomainParameters:
    org.sandrob.bouncycastle.asn1.DERInteger p -> a
    org.sandrob.bouncycastle.asn1.DERInteger g -> b
    org.sandrob.bouncycastle.asn1.DERInteger q -> c
    org.sandrob.bouncycastle.asn1.DERInteger j -> d
    org.sandrob.bouncycastle.asn1.x9.DHValidationParms validationParms -> e
    22:22:org.sandrob.bouncycastle.asn1.x9.DHDomainParameters getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    27:38:org.sandrob.bouncycastle.asn1.x9.DHDomainParameters getInstance(java.lang.Object) -> getInstance
    41:62:void <init>(org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.DERInteger,org.sandrob.bouncycastle.asn1.x9.DHValidationParms) -> <init>
    64:88:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    92:92:org.sandrob.bouncycastle.asn1.DEREncodable getNext(java.util.Enumeration) -> a
    97:97:org.sandrob.bouncycastle.asn1.DERInteger getP() -> getP
    102:102:org.sandrob.bouncycastle.asn1.DERInteger getG() -> getG
    107:107:org.sandrob.bouncycastle.asn1.DERInteger getQ() -> getQ
    112:112:org.sandrob.bouncycastle.asn1.DERInteger getJ() -> getJ
    117:117:org.sandrob.bouncycastle.asn1.x9.DHValidationParms getValidationParms() -> getValidationParms
    122:137:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.DHPublicKey -> org.sandrob.bouncycastle.asn1.x9.DHPublicKey:
    org.sandrob.bouncycastle.asn1.DERInteger y -> a
    15:15:org.sandrob.bouncycastle.asn1.x9.DHPublicKey getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    20:30:org.sandrob.bouncycastle.asn1.x9.DHPublicKey getInstance(java.lang.Object) -> getInstance
    33:41:void <init>(org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    45:45:org.sandrob.bouncycastle.asn1.DERInteger getY() -> getY
    50:50:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.DHValidationParms -> org.sandrob.bouncycastle.asn1.x9.DHValidationParms:
    org.sandrob.bouncycastle.asn1.DERBitString seed -> a
    org.sandrob.bouncycastle.asn1.DERInteger pgenCounter -> b
    19:19:org.sandrob.bouncycastle.asn1.x9.DHValidationParms getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    24:34:org.sandrob.bouncycastle.asn1.x9.DHValidationParms getInstance(java.lang.Object) -> getInstance
    37:50:void <init>(org.sandrob.bouncycastle.asn1.DERBitString,org.sandrob.bouncycastle.asn1.DERInteger) -> <init>
    52:61:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    65:65:org.sandrob.bouncycastle.asn1.DERBitString getSeed() -> getSeed
    70:70:org.sandrob.bouncycastle.asn1.DERInteger getPgenCounter() -> getPgenCounter
    75:78:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.KeySpecificInfo -> org.sandrob.bouncycastle.asn1.x9.KeySpecificInfo:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier algorithm -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString counter -> b
    23:29:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    31:38:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    42:42:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getAlgorithm() -> getAlgorithm
    47:47:org.sandrob.bouncycastle.asn1.ASN1OctetString getCounter() -> getCounter
    61:66:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.OtherInfo -> org.sandrob.bouncycastle.asn1.x9.OtherInfo:
    org.sandrob.bouncycastle.asn1.x9.KeySpecificInfo keyInfo -> a
    org.sandrob.bouncycastle.asn1.ASN1OctetString partyAInfo -> b
    org.sandrob.bouncycastle.asn1.ASN1OctetString suppPubInfo -> c
    24:32:void <init>(org.sandrob.bouncycastle.asn1.x9.KeySpecificInfo,org.sandrob.bouncycastle.asn1.ASN1OctetString,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    34:54:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    58:58:org.sandrob.bouncycastle.asn1.x9.KeySpecificInfo getKeyInfo() -> getKeyInfo
    63:63:org.sandrob.bouncycastle.asn1.ASN1OctetString getPartyAInfo() -> getPartyAInfo
    68:68:org.sandrob.bouncycastle.asn1.ASN1OctetString getSuppPubInfo() -> getSuppPubInfo
    83:94:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves:
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder prime192v1 -> a
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder prime192v2 -> b
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder prime192v3 -> c
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder prime239v1 -> d
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder prime239v2 -> e
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder prime239v3 -> f
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder prime256v1 -> g
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb163v1 -> h
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb163v2 -> i
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb163v3 -> j
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb176w1 -> k
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb191v1 -> l
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb191v2 -> m
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb191v3 -> n
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb208w1 -> o
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb239v1 -> p
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb239v2 -> q
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb239v3 -> r
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb272w1 -> s
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb304w1 -> t
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb359v1 -> u
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb368w1 -> v
    org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb431r1 -> w
    java.util.Hashtable objIds -> x
    java.util.Hashtable curves -> y
    java.util.Hashtable names -> z
    16:557:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    528:531:void defineCurve(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder) -> a
    563:570:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    582:589:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getByOID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getByOID
    601:601:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> getOID
    610:610:java.lang.String getName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getName
    619:619:java.util.Enumeration getNames() -> getNames
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$1 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$1:
    1:18:void <init>() -> <init>
    22:33:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$10 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$2:
    1:200:void <init>() -> <init>
    204:219:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$11 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$3:
    1:223:void <init>() -> <init>
    227:242:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$12 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$4:
    1:246:void <init>() -> <init>
    250:265:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$13 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$5:
    1:269:void <init>() -> <init>
    273:288:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$14 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$6:
    1:292:void <init>() -> <init>
    296:311:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$15 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$7:
    1:315:void <init>() -> <init>
    319:334:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$16 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$8:
    1:338:void <init>() -> <init>
    342:357:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$17 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$9:
    1:361:void <init>() -> <init>
    365:380:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$18 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$10:
    1:384:void <init>() -> <init>
    388:403:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$19 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$11:
    1:407:void <init>() -> <init>
    411:426:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$2 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$12:
    1:37:void <init>() -> <init>
    41:52:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$20 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$13:
    1:430:void <init>() -> <init>
    434:449:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$21 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$14:
    1:453:void <init>() -> <init>
    457:472:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$22 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$15:
    1:476:void <init>() -> <init>
    480:495:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$23 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$16:
    1:499:void <init>() -> <init>
    503:518:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$3 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$17:
    1:56:void <init>() -> <init>
    60:71:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$4 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$18:
    1:75:void <init>() -> <init>
    79:90:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$5 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$19:
    1:94:void <init>() -> <init>
    98:109:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$6 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$20:
    1:113:void <init>() -> <init>
    117:128:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$7 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$21:
    1:132:void <init>() -> <init>
    136:147:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$8 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$22:
    1:154:void <init>() -> <init>
    158:173:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$9 -> org.sandrob.bouncycastle.asn1.x9.X962NamedCurves$23:
    1:177:void <init>() -> <init>
    181:196:org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X962Parameters -> org.sandrob.bouncycastle.asn1.x9.X962Parameters:
    org.sandrob.bouncycastle.asn1.DERObject params -> a
    19:29:org.sandrob.bouncycastle.asn1.x9.X962Parameters getInstance(java.lang.Object) -> getInstance
    36:36:org.sandrob.bouncycastle.asn1.x9.X962Parameters getInstance(org.sandrob.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    14:43:void <init>(org.sandrob.bouncycastle.asn1.x9.X9ECParameters) -> <init>
    14:49:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    14:55:void <init>(org.sandrob.bouncycastle.asn1.DERObject) -> <init>
    59:59:boolean isNamedCurve() -> isNamedCurve
    64:64:boolean isImplicitlyCA() -> isImplicitlyCA
    69:69:org.sandrob.bouncycastle.asn1.DERObject getParameters() -> getParameters
    84:84:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.X9Curve -> org.sandrob.bouncycastle.asn1.x9.X9Curve:
    org.sandrob.bouncycastle.math.ec.ECCurve curve -> a
    byte[] seed -> b
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier fieldIdentifier -> c
    26:34:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve) -> <init>
    26:43:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,byte[]) -> <init>
    26:100:void <init>(org.sandrob.bouncycastle.asn1.x9.X9FieldID,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    104:117:void setFieldIdentifier() -> a
    121:121:org.sandrob.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    126:126:byte[] getSeed() -> getSeed
    141:159:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.X9ECParameters -> org.sandrob.bouncycastle.asn1.x9.X9ECParameters:
    java.math.BigInteger ONE -> a
    org.sandrob.bouncycastle.asn1.x9.X9FieldID fieldID -> b
    org.sandrob.bouncycastle.math.ec.ECCurve curve -> c
    org.sandrob.bouncycastle.math.ec.ECPoint g -> d
    java.math.BigInteger n -> e
    java.math.BigInteger h -> f
    byte[] seed -> g
    19:23:void <clinit>() -> <clinit>
    32:54:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    61:62:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> <init>
    70:71:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger) -> <init>
    73:99:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[]) -> <init>
    103:103:org.sandrob.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    108:108:org.sandrob.bouncycastle.math.ec.ECPoint getG() -> getG
    113:113:java.math.BigInteger getN() -> getN
    118:123:java.math.BigInteger getH() -> getH
    128:128:byte[] getSeed() -> getSeed
    146:159:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder -> org.sandrob.bouncycastle.asn1.x9.X9ECParametersHolder:
    org.sandrob.bouncycastle.asn1.x9.X9ECParameters params -> a
    3:3:void <init>() -> <init>
    9:14:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getParameters() -> getParameters
    org.sandrob.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.sandrob.bouncycastle.asn1.x9.X9ECPoint -> org.sandrob.bouncycastle.asn1.x9.X9ECPoint:
    org.sandrob.bouncycastle.math.ec.ECPoint p -> a
    18:22:void <init>(org.sandrob.bouncycastle.math.ec.ECPoint) -> <init>
    24:29:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    33:33:org.sandrob.bouncycastle.math.ec.ECPoint getPoint() -> getPoint
    46:46:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.X9FieldElement -> org.sandrob.bouncycastle.asn1.x9.X9FieldElement:
    org.sandrob.bouncycastle.math.ec.ECFieldElement f -> f
    org.sandrob.bouncycastle.asn1.x9.X9IntegerConverter converter -> a
    14:19:void <clinit>() -> <clinit>
    21:24:void <init>(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> <init>
    28:29:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    33:34:void <init>(int,int,int,int,org.sandrob.bouncycastle.asn1.ASN1OctetString) -> <init>
    38:38:org.sandrob.bouncycastle.math.ec.ECFieldElement getValue() -> getValue
    59:62:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.X9FieldID -> org.sandrob.bouncycastle.asn1.x9.X9FieldID:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier id -> a
    org.sandrob.bouncycastle.asn1.DERObject parameters -> b
    29:33:void <init>(java.math.BigInteger) -> <init>
    50:72:void <init>(int,int,int,int) -> <init>
    74:79:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    83:83:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getIdentifier() -> getIdentifier
    88:88:org.sandrob.bouncycastle.asn1.DERObject getParameters() -> getParameters
    102:107:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.asn1.x9.X9IntegerConverter -> org.sandrob.bouncycastle.asn1.x9.X9IntegerConverter:
    8:8:void <init>() -> <init>
    13:13:int getByteLength(org.sandrob.bouncycastle.math.ec.ECCurve) -> getByteLength
    19:19:int getByteLength(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> getByteLength
    26:45:byte[] integerToBytes(java.math.BigInteger,int) -> integerToBytes
org.sandrob.bouncycastle.asn1.x9.X9ObjectIdentifiers -> org.sandrob.bouncycastle.asn1.x9.X9ObjectIdentifiers:
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ansi_X9_62 -> ansi_X9_62
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_fieldType -> id_fieldType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime_field -> prime_field
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier characteristic_two_field -> characteristic_two_field
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier gnBasis -> gnBasis
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier tpBasis -> tpBasis
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ppBasis -> ppBasis
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ecSigType -> id_ecSigType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA1 -> ecdsa_with_SHA1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_publicKeyType -> id_publicKeyType
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey -> id_ecPublicKey
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA2 -> ecdsa_with_SHA2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA224 -> ecdsa_with_SHA224
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA256 -> ecdsa_with_SHA256
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA384 -> ecdsa_with_SHA384
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA512 -> ecdsa_with_SHA512
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> ellipticCurve
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier cTwoCurve -> cTwoCurve
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb163v1 -> c2pnb163v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb163v2 -> c2pnb163v2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb163v3 -> c2pnb163v3
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb176w1 -> c2pnb176w1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb191v1 -> c2tnb191v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb191v2 -> c2tnb191v2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb191v3 -> c2tnb191v3
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2onb191v4 -> c2onb191v4
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2onb191v5 -> c2onb191v5
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb208w1 -> c2pnb208w1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb239v1 -> c2tnb239v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb239v2 -> c2tnb239v2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb239v3 -> c2tnb239v3
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2onb239v4 -> c2onb239v4
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2onb239v5 -> c2onb239v5
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb272w1 -> c2pnb272w1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb304w1 -> c2pnb304w1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb359v1 -> c2tnb359v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb368w1 -> c2pnb368w1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb431r1 -> c2tnb431r1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier primeCurve -> primeCurve
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime192v1 -> prime192v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime192v2 -> prime192v2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime192v3 -> prime192v3
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime239v1 -> prime239v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime239v2 -> prime239v2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime239v3 -> prime239v3
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier prime256v1 -> prime256v1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_dsa -> id_dsa
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier id_dsa_with_sha1 -> id_dsa_with_sha1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier x9_63_scheme -> x9_63_scheme
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhSinglePass_stdDH_sha1kdf_scheme -> dhSinglePass_stdDH_sha1kdf_scheme
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhSinglePass_cofactorDH_sha1kdf_scheme -> dhSinglePass_cofactorDH_sha1kdf_scheme
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier mqvSinglePass_sha1kdf_scheme -> mqvSinglePass_sha1kdf_scheme
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier ansi_X9_42 -> ansi_X9_42
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhpublicnumber -> dhpublicnumber
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier x9_42_schemes -> x9_42_schemes
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhStatic -> dhStatic
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhEphem -> dhEphem
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhOneFlow -> dhOneFlow
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhHybrid1 -> dhHybrid1
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhHybrid2 -> dhHybrid2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier dhHybridOneFlow -> dhHybridOneFlow
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier mqv2 -> mqv2
    org.sandrob.bouncycastle.asn1.ASN1ObjectIdentifier mqv1 -> mqv1
    5:131:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher -> org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair -> org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair:
    org.sandrob.bouncycastle.crypto.CipherParameters publicParam -> a
    org.sandrob.bouncycastle.crypto.CipherParameters privateParam -> b
    17:23:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters,org.sandrob.bouncycastle.crypto.CipherParameters) -> <init>
    32:32:org.sandrob.bouncycastle.crypto.CipherParameters getPublic() -> getPublic
    42:42:org.sandrob.bouncycastle.crypto.CipherParameters getPrivate() -> getPrivate
org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator -> org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator:
    void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.crypto.BasicAgreement -> org.sandrob.bouncycastle.crypto.BasicAgreement:
    void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger calculateAgreement(org.sandrob.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.sandrob.bouncycastle.crypto.BlockCipher -> org.sandrob.bouncycastle.crypto.BlockCipher:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
org.sandrob.bouncycastle.crypto.BufferedAsymmetricBlockCipher -> org.sandrob.bouncycastle.crypto.BufferedAsymmetricBlockCipher:
    byte[] buf -> buf
    int bufOff -> bufOff
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher cipher -> a
    19:23:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    32:32:org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    42:42:int getBufferPosition() -> getBufferPosition
    56:66:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    75:75:int getInputBlockSize() -> getInputBlockSize
    85:85:int getOutputBlockSize() -> getOutputBlockSize
    96:102:void processByte(byte) -> processByte
    116:133:void processBytes(byte[],int,int) -> processBytes
    146:150:byte[] doFinal() -> doFinal
    161:170:void reset() -> reset
org.sandrob.bouncycastle.crypto.BufferedBlockCipher -> org.sandrob.bouncycastle.crypto.BufferedBlockCipher:
    byte[] buf -> buf
    int bufOff -> bufOff
    boolean forEncryption -> forEncryption
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> cipher
    boolean partialBlockOkay -> partialBlockOkay
    boolean pgpCFB -> pgpCFB
    26:28:void <init>() -> <init>
    35:59:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    68:68:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    85:90:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    99:99:int getBlockSize() -> getBlockSize
    113:125:int getUpdateOutputSize(int) -> getUpdateOutputSize
    140:140:int getOutputSize(int) -> getOutputSize
    159:169:int processByte(byte,byte[],int) -> processByte
    192:240:int processBytes(byte[],int,int,byte[],int) -> processBytes
    264:289:int doFinal(byte[],int) -> doFinal
    301:312:void reset() -> reset
org.sandrob.bouncycastle.crypto.CipherKeyGenerator -> org.sandrob.bouncycastle.crypto.CipherKeyGenerator:
    java.security.SecureRandom random -> random
    int strength -> strength
    8:8:void <init>() -> <init>
    21:23:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    32:36:byte[] generateKey() -> generateKey
org.sandrob.bouncycastle.crypto.CipherParameters -> org.sandrob.bouncycastle.crypto.CipherParameters:
org.sandrob.bouncycastle.crypto.CryptoException -> org.sandrob.bouncycastle.crypto.CryptoException:
    12:14:void <init>() -> <init>
    24:25:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.crypto.DSA -> org.sandrob.bouncycastle.crypto.DSA:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
org.sandrob.bouncycastle.crypto.DataLengthException -> org.sandrob.bouncycastle.crypto.DataLengthException:
    15:17:void <init>() -> <init>
    27:28:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.crypto.DerivationFunction -> org.sandrob.bouncycastle.crypto.DerivationFunction:
    void init(org.sandrob.bouncycastle.crypto.DerivationParameters) -> init
    org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
    int generateBytes(byte[],int,int) -> generateBytes
org.sandrob.bouncycastle.crypto.DerivationParameters -> org.sandrob.bouncycastle.crypto.DerivationParameters:
org.sandrob.bouncycastle.crypto.Digest -> org.sandrob.bouncycastle.crypto.Digest:
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.sandrob.bouncycastle.crypto.ExtendedDigest -> org.sandrob.bouncycastle.crypto.ExtendedDigest:
    int getByteLength() -> getByteLength
org.sandrob.bouncycastle.crypto.InvalidCipherTextException -> org.sandrob.bouncycastle.crypto.InvalidCipherTextException:
    13:15:void <init>() -> <init>
    25:26:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.crypto.KeyGenerationParameters -> org.sandrob.bouncycastle.crypto.KeyGenerationParameters:
    java.security.SecureRandom random -> a
    int strength -> b
    20:26:void <init>(java.security.SecureRandom,int) -> <init>
    36:36:java.security.SecureRandom getRandom() -> getRandom
    46:46:int getStrength() -> getStrength
org.sandrob.bouncycastle.crypto.Mac -> org.sandrob.bouncycastle.crypto.Mac:
    void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.sandrob.bouncycastle.crypto.MaxBytesExceededException -> org.sandrob.bouncycastle.crypto.MaxBytesExceededException:
    13:15:void <init>() -> <init>
    25:26:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.crypto.PBEParametersGenerator -> org.sandrob.bouncycastle.crypto.PBEParametersGenerator:
    byte[] password -> password
    byte[] salt -> salt
    int iterationCount -> iterationCount
    17:19:void <init>() -> <init>
    34:37:void init(byte[],byte[],int) -> init
    46:46:byte[] getPassword() -> getPassword
    56:56:byte[] getSalt() -> getSalt
    66:66:int getIterationCount() -> getIterationCount
    org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
    106:113:byte[] PKCS5PasswordToBytes(char[]) -> PKCS5PasswordToBytes
    126:126:byte[] PKCS5PasswordToUTF8Bytes(char[]) -> PKCS5PasswordToUTF8Bytes
    139:154:byte[] PKCS12PasswordToBytes(char[]) -> PKCS12PasswordToBytes
org.sandrob.bouncycastle.crypto.RuntimeCryptoException -> org.sandrob.bouncycastle.crypto.RuntimeCryptoException:
    12:14:void <init>() -> <init>
    24:25:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.crypto.Signer -> org.sandrob.bouncycastle.crypto.Signer:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    void update(byte) -> update
    void update(byte[],int,int) -> update
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    void reset() -> reset
org.sandrob.bouncycastle.crypto.SignerWithRecovery -> org.sandrob.bouncycastle.crypto.SignerWithRecovery:
    boolean hasFullMessage() -> hasFullMessage
    byte[] getRecoveredMessage() -> getRecoveredMessage
    void updateWithRecoveredMessage(byte[]) -> updateWithRecoveredMessage
org.sandrob.bouncycastle.crypto.StreamBlockCipher -> org.sandrob.bouncycastle.crypto.StreamBlockCipher:
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> a
    byte[] oneByte -> b
    12:30:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    42:43:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    52:52:java.lang.String getAlgorithmName() -> getAlgorithmName
    64:68:byte returnByte(byte) -> returnByte
    89:98:void processBytes(byte[],int,int,byte[],int) -> processBytes
    106:107:void reset() -> reset
org.sandrob.bouncycastle.crypto.StreamCipher -> org.sandrob.bouncycastle.crypto.StreamCipher:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte returnByte(byte) -> returnByte
    void processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
org.sandrob.bouncycastle.crypto.Wrapper -> org.sandrob.bouncycastle.crypto.Wrapper:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte[] wrap(byte[],int,int) -> wrap
    byte[] unwrap(byte[],int,int) -> unwrap
org.sandrob.bouncycastle.crypto.agreement.DHAgreement -> org.sandrob.bouncycastle.crypto.agreement.DHAgreement:
    org.sandrob.bouncycastle.crypto.params.DHPrivateKeyParameters key -> a
    org.sandrob.bouncycastle.crypto.params.DHParameters dhParams -> b
    java.math.BigInteger privateValue -> c
    java.security.SecureRandom random -> d
    27:27:void <init>() -> <init>
    39:60:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    67:73:java.math.BigInteger calculateMessage() -> calculateMessage
    85:92:java.math.BigInteger calculateAgreement(org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters,java.math.BigInteger) -> calculateAgreement
org.sandrob.bouncycastle.crypto.agreement.DHBasicAgreement -> org.sandrob.bouncycastle.crypto.agreement.DHBasicAgreement:
    org.sandrob.bouncycastle.crypto.params.DHPrivateKeyParameters key -> a
    org.sandrob.bouncycastle.crypto.params.DHParameters dhParams -> b
    20:20:void <init>() -> <init>
    31:48:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    57:64:java.math.BigInteger calculateAgreement(org.sandrob.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.sandrob.bouncycastle.crypto.agreement.ECDHBasicAgreement -> org.sandrob.bouncycastle.crypto.agreement.ECDHBasicAgreement:
    org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters key -> a
    26:26:void <init>() -> <init>
    34:35:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    40:45:java.math.BigInteger calculateAgreement(org.sandrob.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.sandrob.bouncycastle.crypto.agreement.ECDHCBasicAgreement -> org.sandrob.bouncycastle.crypto.agreement.ECDHCBasicAgreement:
    org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters key -> a
    32:32:void <init>() -> <init>
    40:41:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    46:52:java.math.BigInteger calculateAgreement(org.sandrob.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.sandrob.bouncycastle.crypto.agreement.ECMQVBasicAgreement -> org.sandrob.bouncycastle.crypto.agreement.ECMQVBasicAgreement:
    org.sandrob.bouncycastle.crypto.params.MQVPrivateParameters privParams -> a
    16:16:void <init>() -> <init>
    24:25:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    29:37:java.math.BigInteger calculateAgreement(org.sandrob.bouncycastle.crypto.CipherParameters) -> calculateAgreement
    49:84:org.sandrob.bouncycastle.math.ec.ECPoint calculateMqvAgreement(org.sandrob.bouncycastle.crypto.params.ECDomainParameters,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters) -> a
org.sandrob.bouncycastle.crypto.agreement.kdf.DHKDFParameters -> org.sandrob.bouncycastle.crypto.agreement.kdf.DHKDFParameters:
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier algorithm -> a
    int keySize -> b
    byte[] z -> c
    byte[] extraInfo -> d
    14:23:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,int,byte[]) -> <init>
    25:35:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,int,byte[],byte[]) -> <init>
    39:39:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getAlgorithm() -> getAlgorithm
    44:44:int getKeySize() -> getKeySize
    49:49:byte[] getZ() -> getZ
    54:54:byte[] getExtraInfo() -> getExtraInfo
org.sandrob.bouncycastle.crypto.agreement.kdf.DHKEKGenerator -> org.sandrob.bouncycastle.crypto.agreement.kdf.DHKEKGenerator:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier algorithm -> b
    int keySize -> c
    byte[] z -> d
    byte[] partyAInfo -> e
    26:30:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    34:40:void init(org.sandrob.bouncycastle.crypto.DerivationParameters) -> init
    44:44:org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
    50:118:int generateBytes(byte[],int,int) -> generateBytes
    123:130:byte[] integerToBytes(int) -> a
org.sandrob.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator -> org.sandrob.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator:
    org.sandrob.bouncycastle.crypto.DerivationFunction kdf -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier algorithm -> b
    int keySize -> c
    byte[] z -> d
    29:33:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    37:42:void init(org.sandrob.bouncycastle.crypto.DerivationParameters) -> init
    46:46:org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
    54:61:int generateBytes(byte[],int,int) -> generateBytes
    66:73:byte[] integerToBytes(int) -> a
org.sandrob.bouncycastle.crypto.agreement.srp.SRP6Client -> org.sandrob.bouncycastle.crypto.agreement.srp.SRP6Client:
    java.math.BigInteger N -> N
    java.math.BigInteger g -> g
    java.math.BigInteger a -> a
    java.math.BigInteger A -> A
    java.math.BigInteger B -> B
    java.math.BigInteger x -> x
    java.math.BigInteger u -> u
    java.math.BigInteger S -> S
    org.sandrob.bouncycastle.crypto.Digest digest -> digest
    java.security.SecureRandom random -> random
    31:33:void <init>() -> <init>
    44:48:void init(java.math.BigInteger,java.math.BigInteger,org.sandrob.bouncycastle.crypto.Digest,java.security.SecureRandom) -> init
    59:63:java.math.BigInteger generateClientCredentials(byte[],byte[],byte[]) -> generateClientCredentials
    74:78:java.math.BigInteger calculateSecret(java.math.BigInteger) -> calculateSecret
    83:83:java.math.BigInteger selectPrivateValue() -> selectPrivateValue
    88:91:java.math.BigInteger calculateS() -> a
org.sandrob.bouncycastle.crypto.agreement.srp.SRP6Server -> org.sandrob.bouncycastle.crypto.agreement.srp.SRP6Server:
    java.math.BigInteger N -> N
    java.math.BigInteger g -> g
    java.math.BigInteger v -> v
    java.security.SecureRandom random -> random
    org.sandrob.bouncycastle.crypto.Digest digest -> digest
    java.math.BigInteger A -> A
    java.math.BigInteger b -> b
    java.math.BigInteger B -> B
    java.math.BigInteger u -> u
    java.math.BigInteger S -> S
    31:33:void <init>() -> <init>
    45:51:void init(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.sandrob.bouncycastle.crypto.Digest,java.security.SecureRandom) -> init
    59:63:java.math.BigInteger generateServerCredentials() -> generateServerCredentials
    74:78:java.math.BigInteger calculateSecret(java.math.BigInteger) -> calculateSecret
    83:83:java.math.BigInteger selectPrivateValue() -> selectPrivateValue
    88:88:java.math.BigInteger calculateS() -> a
org.sandrob.bouncycastle.crypto.agreement.srp.SRP6Util -> org.sandrob.bouncycastle.crypto.agreement.srp.SRP6Util:
    java.math.BigInteger ZERO -> a
    java.math.BigInteger ONE -> b
    10:13:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    17:17:java.math.BigInteger calculateK(org.sandrob.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger) -> calculateK
    22:22:java.math.BigInteger calculateU(org.sandrob.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateU
    27:38:java.math.BigInteger calculateX(org.sandrob.bouncycastle.crypto.Digest,java.math.BigInteger,byte[],byte[],byte[]) -> calculateX
    43:47:java.math.BigInteger generatePrivateValue(org.sandrob.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> generatePrivateValue
    53:61:java.math.BigInteger validatePublicValue(java.math.BigInteger,java.math.BigInteger) -> validatePublicValue
    66:77:java.math.BigInteger hashPaddedPair(org.sandrob.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> a
    82:89:byte[] getPadded(java.math.BigInteger,int) -> a
org.sandrob.bouncycastle.crypto.agreement.srp.SRP6VerifierGenerator -> org.sandrob.bouncycastle.crypto.agreement.srp.SRP6VerifierGenerator:
    java.math.BigInteger N -> N
    java.math.BigInteger g -> g
    org.sandrob.bouncycastle.crypto.Digest digest -> digest
    16:18:void <init>() -> <init>
    29:32:void init(java.math.BigInteger,java.math.BigInteger,org.sandrob.bouncycastle.crypto.Digest) -> init
    43:45:java.math.BigInteger generateVerifier(byte[],byte[],byte[]) -> generateVerifier
org.sandrob.bouncycastle.crypto.digests.GOST3411Digest -> org.sandrob.bouncycastle.crypto.digests.GOST3411Digest:
    byte[] H -> h
    byte[] L -> i
    byte[] M -> j
    byte[] Sum -> k
    byte[][] C -> l
    byte[] xBuf -> m
    int xBufOff -> n
    long byteCount -> o
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> p
    byte[] sBox -> q
    byte[] K -> r
    byte[] a -> a
    short[] wS -> b
    short[] w_S -> c
    byte[] S -> d
    byte[] U -> e
    byte[] V -> f
    byte[] W -> g
    byte[] C2 -> s
    14:272:void <clinit>() -> <clinit>
    19:180:void <init>() -> <init>
    19:180:void <init>(byte[]) -> <init>
    19:180:void <init>(org.sandrob.bouncycastle.crypto.digests.GOST3411Digest) -> <init>
    79:79:java.lang.String getAlgorithmName() -> getAlgorithmName
    84:84:int getDigestSize() -> getDigestSize
    89:97:void update(byte) -> update
    101:126:void update(byte[],int,int) -> update
    133:141:byte[] P(byte[]) -> a
    148:156:byte[] A(byte[]) -> b
    162:165:void E(byte[],byte[],int,byte[],int) -> a
    172:176:void fw(byte[]) -> c
    184:237:void processBlock(byte[],int) -> processBlock
    241:250:void finish() -> a
    256:262:int doFinal(byte[],int) -> doFinal
    276:309:void reset() -> reset
    314:324:void sumByteArray(byte[]) -> d
    328:332:void cpyBytesToShort(byte[],short[]) -> a
    336:341:void cpyShortToBytes(short[],byte[]) -> a
    345:345:int getByteLength() -> getByteLength
org.sandrob.bouncycastle.crypto.digests.GeneralDigest -> org.sandrob.bouncycastle.crypto.digests.GeneralDigest:
    byte[] xBuf -> a
    int xBufOff -> b
    long byteCount -> c
    21:25:void <init>() -> <init>
    32:39:void <init>(org.sandrob.bouncycastle.crypto.digests.GeneralDigest) -> <init>
    44:53:void update(byte) -> update
    63:93:void update(byte[],int,int) -> update
    97:112:void finish() -> finish
    116:123:void reset() -> reset
    127:127:int getByteLength() -> getByteLength
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.LongDigest -> org.sandrob.bouncycastle.crypto.digests.LongDigest:
    byte[] xBuf -> b
    int xBufOff -> c
    long byteCount1 -> d
    long byteCount2 -> e
    long H1 -> H1
    long H2 -> H2
    long H3 -> H3
    long H4 -> H4
    long H5 -> H5
    long H6 -> H6
    long H7 -> H7
    long H8 -> H8
    long[] W -> f
    int wOff -> g
    long[] K -> a
    9:352:void <clinit>() -> <clinit>
    22:34:void <init>() -> <init>
    22:61:void <init>(org.sandrob.bouncycastle.crypto.digests.LongDigest) -> <init>
    66:75:void update(byte) -> update
    85:115:void update(byte[],int,int) -> update
    119:137:void finish() -> finish
    141:155:void reset() -> reset
    159:159:int getByteLength() -> getByteLength
    166:172:void processWord(byte[],int) -> processWord
    180:185:void adjustByteCounts() -> a
    191:198:void processLength(long,long) -> processLength
    202:285:void processBlock() -> processBlock
    293:293:long Ch(long,long,long) -> a
    301:301:long Maj(long,long,long) -> b
    307:307:long Sum0(long) -> a
    313:313:long Sum1(long) -> b
    319:319:long Sigma0(long) -> c
    325:325:long Sigma1(long) -> d
org.sandrob.bouncycastle.crypto.digests.MD2Digest -> org.sandrob.bouncycastle.crypto.digests.MD2Digest:
    byte[] X -> a
    int xOff -> b
    byte[] M -> c
    int mOff -> d
    byte[] C -> e
    int COff -> f
    byte[] S -> g
    8:228:void <clinit>() -> <clinit>
    14:26:void <init>() -> <init>
    14:35:void <init>(org.sandrob.bouncycastle.crypto.digests.MD2Digest) -> <init>
    43:43:java.lang.String getAlgorithmName() -> getAlgorithmName
    52:52:int getDigestSize() -> getDigestSize
    64:80:int doFinal(byte[],int) -> doFinal
    87:102:void reset() -> reset
    110:118:void update(byte) -> update
    132:160:void update(byte[],int,int) -> update
    163:169:void processCheckSum(byte[]) -> processCheckSum
    172:189:void processBlock(byte[]) -> processBlock
    233:233:int getByteLength() -> getByteLength
org.sandrob.bouncycastle.crypto.digests.MD4Digest -> org.sandrob.bouncycastle.crypto.digests.MD4Digest:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int[] X -> e
    int xOff -> f
    18:27:void <init>() -> <init>
    18:44:void <init>(org.sandrob.bouncycastle.crypto.digests.MD4Digest) -> <init>
    48:48:java.lang.String getAlgorithmName() -> getAlgorithmName
    53:53:int getDigestSize() -> getDigestSize
    60:67:void processWord(byte[],int) -> processWord
    72:79:void processLength(long) -> processLength
    86:90:void unpackWord(int,byte[],int) -> a
    96:105:int doFinal(byte[],int) -> doFinal
    113:126:void reset() -> reset
    159:159:int rotateLeft(int,int) -> a
    170:170:int F(int,int,int) -> a
    178:178:int G(int,int,int) -> b
    186:186:int H(int,int,int) -> c
    191:269:void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.MD5Digest -> org.sandrob.bouncycastle.crypto.digests.MD5Digest:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int[] X -> e
    int xOff -> f
    14:23:void <init>() -> <init>
    14:40:void <init>(org.sandrob.bouncycastle.crypto.digests.MD5Digest) -> <init>
    44:44:java.lang.String getAlgorithmName() -> getAlgorithmName
    49:49:int getDigestSize() -> getDigestSize
    56:63:void processWord(byte[],int) -> processWord
    68:75:void processLength(long) -> processLength
    82:86:void unpackWord(int,byte[],int) -> a
    92:101:int doFinal(byte[],int) -> doFinal
    109:122:void reset() -> reset
    163:163:int rotateLeft(int,int) -> a
    174:174:int F(int,int,int) -> a
    182:182:int G(int,int,int) -> b
    190:190:int H(int,int,int) -> c
    198:198:int K(int,int,int) -> d
    203:301:void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.NullDigest -> org.sandrob.bouncycastle.crypto.digests.NullDigest:
    java.io.ByteArrayOutputStream bOut -> a
    8:11:void <init>() -> <init>
    15:15:java.lang.String getAlgorithmName() -> getAlgorithmName
    20:20:int getDigestSize() -> getDigestSize
    25:26:void update(byte) -> update
    30:31:void update(byte[],int,int) -> update
    35:41:int doFinal(byte[],int) -> doFinal
    46:47:void reset() -> reset
org.sandrob.bouncycastle.crypto.digests.RIPEMD128Digest -> org.sandrob.bouncycastle.crypto.digests.RIPEMD128Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int[] X -> e
    int xOff -> f
    14:23:void <init>() -> <init>
    14:40:void <init>(org.sandrob.bouncycastle.crypto.digests.RIPEMD128Digest) -> <init>
    44:44:java.lang.String getAlgorithmName() -> getAlgorithmName
    49:49:int getDigestSize() -> getDigestSize
    56:63:void processWord(byte[],int) -> processWord
    68:75:void processLength(long) -> processLength
    82:86:void unpackWord(int,byte[],int) -> a
    92:101:int doFinal(byte[],int) -> doFinal
    109:122:void reset() -> reset
    131:131:int RL(int,int) -> a
    146:146:int f1(int,int,int) -> a
    157:157:int f2(int,int,int) -> b
    168:168:int f3(int,int,int) -> c
    179:179:int f4(int,int,int) -> d
    190:190:int F1(int,int,int,int,int,int) -> a
    201:201:int F2(int,int,int,int,int,int) -> b
    212:212:int F3(int,int,int,int,int,int) -> c
    223:223:int F4(int,int,int,int,int,int) -> d
    234:234:int FF1(int,int,int,int,int,int) -> e
    245:245:int FF2(int,int,int,int,int,int) -> f
    256:256:int FF3(int,int,int,int,int,int) -> g
    267:267:int FF4(int,int,int,int,int,int) -> h
    277:460:void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.RIPEMD160Digest -> org.sandrob.bouncycastle.crypto.digests.RIPEMD160Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int[] X -> f
    int xOff -> g
    15:24:void <init>() -> <init>
    15:42:void <init>(org.sandrob.bouncycastle.crypto.digests.RIPEMD160Digest) -> <init>
    46:46:java.lang.String getAlgorithmName() -> getAlgorithmName
    51:51:int getDigestSize() -> getDigestSize
    58:65:void processWord(byte[],int) -> processWord
    70:77:void processLength(long) -> processLength
    84:88:void unpackWord(int,byte[],int) -> a
    94:104:int doFinal(byte[],int) -> doFinal
    112:126:void reset() -> reset
    135:135:int RL(int,int) -> a
    150:150:int f1(int,int,int) -> a
    161:161:int f2(int,int,int) -> b
    172:172:int f3(int,int,int) -> c
    183:183:int f4(int,int,int) -> d
    194:194:int f5(int,int,int) -> e
    205:421:void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.RIPEMD256Digest -> org.sandrob.bouncycastle.crypto.digests.RIPEMD256Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int[] X -> i
    int xOff -> j
    16:25:void <init>() -> <init>
    16:46:void <init>(org.sandrob.bouncycastle.crypto.digests.RIPEMD256Digest) -> <init>
    50:50:java.lang.String getAlgorithmName() -> getAlgorithmName
    55:55:int getDigestSize() -> getDigestSize
    62:69:void processWord(byte[],int) -> processWord
    74:81:void processLength(long) -> processLength
    88:92:void unpackWord(int,byte[],int) -> a
    98:111:int doFinal(byte[],int) -> doFinal
    119:136:void reset() -> reset
    145:145:int RL(int,int) -> a
    160:160:int f1(int,int,int) -> a
    171:171:int f2(int,int,int) -> b
    182:182:int f3(int,int,int) -> c
    193:193:int f4(int,int,int) -> d
    204:204:int F1(int,int,int,int,int,int) -> a
    215:215:int F2(int,int,int,int,int,int) -> b
    226:226:int F3(int,int,int,int,int,int) -> c
    237:237:int F4(int,int,int,int,int,int) -> d
    248:248:int FF1(int,int,int,int,int,int) -> e
    259:259:int FF2(int,int,int,int,int,int) -> f
    270:270:int FF3(int,int,int,int,int,int) -> g
    281:281:int FF4(int,int,int,int,int,int) -> h
    292:475:void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.RIPEMD320Digest -> org.sandrob.bouncycastle.crypto.digests.RIPEMD320Digest:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int H8 -> i
    int H9 -> j
    int[] X -> k
    int xOff -> l
    17:26:void <init>() -> <init>
    17:49:void <init>(org.sandrob.bouncycastle.crypto.digests.RIPEMD320Digest) -> <init>
    53:53:java.lang.String getAlgorithmName() -> getAlgorithmName
    58:58:int getDigestSize() -> getDigestSize
    65:72:void processWord(byte[],int) -> processWord
    77:84:void processLength(long) -> processLength
    91:95:void unpackWord(int,byte[],int) -> a
    101:116:int doFinal(byte[],int) -> doFinal
    124:143:void reset() -> reset
    152:152:int RL(int,int) -> a
    167:167:int f1(int,int,int) -> a
    178:178:int f2(int,int,int) -> b
    189:189:int f3(int,int,int) -> c
    200:200:int f4(int,int,int) -> d
    211:211:int f5(int,int,int) -> e
    223:460:void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.SHA1Digest -> org.sandrob.bouncycastle.crypto.digests.SHA1Digest:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int H5 -> e
    int[] X -> f
    int xOff -> g
    18:27:void <init>() -> <init>
    18:45:void <init>(org.sandrob.bouncycastle.crypto.digests.SHA1Digest) -> <init>
    49:49:java.lang.String getAlgorithmName() -> getAlgorithmName
    54:54:int getDigestSize() -> getDigestSize
    63:73:void processWord(byte[],int) -> processWord
    78:85:void processLength(long) -> processLength
    91:101:int doFinal(byte[],int) -> doFinal
    109:122:void reset() -> reset
    137:137:int f(int,int,int) -> a
    145:145:int h(int,int,int) -> b
    153:153:int g(int,int,int) -> c
    161:285:void processBlock() -> processBlock
org.sandrob.bouncycastle.crypto.digests.SHA224Digest -> org.sandrob.bouncycastle.crypto.digests.SHA224Digest:
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int H8 -> i
    int[] X -> j
    int xOff -> k
    int[] K -> a
    19:289:void <clinit>() -> <clinit>
    26:35:void <init>() -> <init>
    26:56:void <init>(org.sandrob.bouncycastle.crypto.digests.SHA224Digest) -> <init>
    60:60:java.lang.String getAlgorithmName() -> getAlgorithmName
    65:65:int getDigestSize() -> getDigestSize
    74:84:void processWord(byte[],int) -> processWord
    89:96:void processLength(long) -> processLength
    102:114:int doFinal(byte[],int) -> doFinal
    122:141:void reset() -> reset
    148:235:void processBlock() -> processBlock
    243:243:int Ch(int,int,int) -> a
    251:251:int Maj(int,int,int) -> b
    257:257:int Sum0(int) -> a
    263:263:int Sum1(int) -> b
    269:269:int Theta0(int) -> c
    275:275:int Theta1(int) -> d
org.sandrob.bouncycastle.crypto.digests.SHA256Digest -> org.sandrob.bouncycastle.crypto.digests.SHA256Digest:
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int H8 -> i
    int[] X -> j
    int xOff -> k
    int[] K -> a
    19:292:void <clinit>() -> <clinit>
    26:35:void <init>() -> <init>
    26:56:void <init>(org.sandrob.bouncycastle.crypto.digests.SHA256Digest) -> <init>
    60:60:java.lang.String getAlgorithmName() -> getAlgorithmName
    65:65:int getDigestSize() -> getDigestSize
    74:84:void processWord(byte[],int) -> processWord
    89:96:void processLength(long) -> processLength
    102:115:int doFinal(byte[],int) -> doFinal
    123:144:void reset() -> reset
    151:237:void processBlock() -> processBlock
    245:245:int Ch(int,int,int) -> a
    253:253:int Maj(int,int,int) -> b
    259:259:int Sum0(int) -> a
    265:265:int Sum1(int) -> b
    271:271:int Theta0(int) -> c
    277:277:int Theta1(int) -> d
org.sandrob.bouncycastle.crypto.digests.SHA384Digest -> org.sandrob.bouncycastle.crypto.digests.SHA384Digest:
    26:28:void <init>() -> <init>
    36:37:void <init>(org.sandrob.bouncycastle.crypto.digests.SHA384Digest) -> <init>
    41:41:java.lang.String getAlgorithmName() -> getAlgorithmName
    46:46:int getDigestSize() -> getDigestSize
    53:64:int doFinal(byte[],int) -> doFinal
    72:86:void reset() -> reset
org.sandrob.bouncycastle.crypto.digests.SHA512Digest -> org.sandrob.bouncycastle.crypto.digests.SHA512Digest:
    25:27:void <init>() -> <init>
    35:36:void <init>(org.sandrob.bouncycastle.crypto.digests.SHA512Digest) -> <init>
    40:40:java.lang.String getAlgorithmName() -> getAlgorithmName
    45:45:int getDigestSize() -> getDigestSize
    52:65:int doFinal(byte[],int) -> doFinal
    73:87:void reset() -> reset
org.sandrob.bouncycastle.crypto.digests.ShortenedDigest -> org.sandrob.bouncycastle.crypto.digests.ShortenedDigest:
    org.sandrob.bouncycastle.crypto.ExtendedDigest baseDigest -> a
    int length -> b
    22:38:void <init>(org.sandrob.bouncycastle.crypto.ExtendedDigest,int) -> <init>
    42:42:java.lang.String getAlgorithmName() -> getAlgorithmName
    47:47:int getDigestSize() -> getDigestSize
    52:53:void update(byte) -> update
    57:58:void update(byte[],int,int) -> update
    62:68:int doFinal(byte[],int) -> doFinal
    73:74:void reset() -> reset
    78:78:int getByteLength() -> getByteLength
org.sandrob.bouncycastle.crypto.digests.TigerDigest -> org.sandrob.bouncycastle.crypto.digests.TigerDigest:
    long[] t1 -> a
    long[] t2 -> b
    long[] t3 -> c
    long[] t4 -> d
    long a -> e
    long b -> f
    long c -> g
    long byteCount -> h
    byte[] buf -> i
    int bOff -> j
    long[] x -> k
    int xOff -> l
    10:539:void <clinit>() -> <clinit>
    553:565:void <init>() -> <init>
    553:584:void <init>(org.sandrob.bouncycastle.crypto.digests.TigerDigest) -> <init>
    588:588:java.lang.String getAlgorithmName() -> getAlgorithmName
    593:593:int getDigestSize() -> getDigestSize
    600:615:void processWord(byte[],int) -> a
    620:628:void update(byte) -> update
    638:668:void update(byte[],int,int) -> update
    674:680:void roundABC(long,long) -> a
    686:692:void roundBCA(long,long) -> b
    698:704:void roundCAB(long,long) -> c
    708:724:void keySchedule() -> a
    731:784:void processBlock() -> b
    791:799:void unpackWord(long,byte[],int) -> unpackWord
    804:805:void processLength(long) -> a
    809:821:void finish() -> c
    827:835:int doFinal(byte[],int) -> doFinal
    843:860:void reset() -> reset
    864:864:int getByteLength() -> getByteLength
org.sandrob.bouncycastle.crypto.digests.WhirlpoolDigest -> org.sandrob.bouncycastle.crypto.digests.WhirlpoolDigest:
    int[] SBOX -> a
    long[] C0 -> b
    long[] C1 -> c
    long[] C2 -> d
    long[] C3 -> e
    long[] C4 -> f
    long[] C5 -> g
    long[] C6 -> h
    long[] C7 -> i
    long[] _rc -> j
    byte[] _buffer -> k
    int _bufferPos -> l
    short[] _bitCount -> m
    long[] _hash -> n
    long[] _K -> o
    long[] _L -> p
    long[] _block -> q
    long[] _state -> r
    short[] EIGHT -> s
    12:314:void <clinit>() -> <clinit>
    49:129:void <init>() -> <init>
    91:99:long packIntoLong(int,int,int,int,int,int,int,int) -> a
    108:113:int maskWithReductionPolynomial(int) -> a
    49:152:void <init>(org.sandrob.bouncycastle.crypto.digests.WhirlpoolDigest) -> <init>
    156:156:java.lang.String getAlgorithmName() -> getAlgorithmName
    161:161:int getDigestSize() -> getDigestSize
    167:175:int doFinal(byte[],int) -> doFinal
    184:192:void reset() -> reset
    198:205:void processFilledBuffer(byte[],int) -> a
    209:218:long bytesToLongFromBuffer(byte[],int) -> b
    223:227:void convertLongToByteArray(long,byte[],int) -> a
    235:285:void processBlock() -> processBlock
    289:301:void update(byte) -> update
    319:327:void increment() -> a
    331:338:void update(byte[],int,int) -> update
    347:380:void finish() -> b
    384:389:byte[] copyBitLength() -> c
    394:394:int getByteLength() -> getByteLength
org.sandrob.bouncycastle.crypto.encodings.ISO9796d1Encoding -> org.sandrob.bouncycastle.crypto.encodings.ISO9796d1Encoding:
    java.math.BigInteger SIXTEEN -> a
    java.math.BigInteger SIX -> b
    byte[] shadows -> c
    byte[] inverse -> d
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher engine -> e
    boolean forEncryption -> f
    int bitSize -> g
    int padBits -> h
    java.math.BigInteger modulus -> i
    18:27:void <clinit>() -> <clinit>
    32:39:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    43:43:org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    50:69:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    78:86:int getInputBlockSize() -> getInputBlockSize
    95:103:int getOutputBlockSize() -> getOutputBlockSize
    114:120:void setPadBits(int) -> setPadBits
    127:127:int getPadBits() -> getPadBits
    136:142:byte[] processBlock(byte[],int,int) -> processBlock
    152:197:byte[] encodeBlock(byte[],int,int) -> a
    209:273:byte[] decodeBlock(byte[],int,int) -> b
    278:285:byte[] convertOutputDecryptOnly(java.math.BigInteger) -> a
org.sandrob.bouncycastle.crypto.encodings.OAEPEncoding -> org.sandrob.bouncycastle.crypto.encodings.OAEPEncoding:
    byte[] defHash -> a
    org.sandrob.bouncycastle.crypto.Digest hash -> b
    org.sandrob.bouncycastle.crypto.Digest mgf1Hash -> c
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher engine -> d
    java.security.SecureRandom random -> e
    boolean forEncryption -> f
    29:30:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    36:37:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    44:45:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,byte[]) -> <init>
    47:64:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.Digest,byte[]) -> <init>
    68:68:org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    75:89:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    93:101:int getInputBlockSize() -> getInputBlockSize
    107:115:int getOutputBlockSize() -> getOutputBlockSize
    125:131:byte[] processBlock(byte[],int,int) -> processBlock
    141:195:byte[] encodeBlock(byte[],int,int) -> encodeBlock
    208:291:byte[] decodeBlock(byte[],int,int) -> decodeBlock
    301:305:void ItoOSP(int,byte[]) -> a
    316:346:byte[] maskGeneratorFunction1(byte[],int,int,int) -> a
org.sandrob.bouncycastle.crypto.encodings.PKCS1Encoding -> org.sandrob.bouncycastle.crypto.encodings.PKCS1Encoding:
    java.lang.String STRICT_LENGTH_ENABLED_PROPERTY -> STRICT_LENGTH_ENABLED_PROPERTY
    java.security.SecureRandom random -> a
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher engine -> b
    boolean forEncryption -> c
    boolean forPrivateKey -> d
    boolean useStrictLength -> e
    42:47:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    55:63:boolean useStrict() -> a
    68:68:org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    77:94:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    98:106:int getInputBlockSize() -> getInputBlockSize
    112:120:int getOutputBlockSize() -> getOutputBlockSize
    130:136:byte[] processBlock(byte[],int,int) -> processBlock
    146:184:byte[] encodeBlock(byte[],int,int) -> a
    196:245:byte[] decodeBlock(byte[],int,int) -> b
org.sandrob.bouncycastle.crypto.encodings.PKCS1Encoding$1 -> org.sandrob.bouncycastle.crypto.encodings.PKCS1Encoding$1:
    org.sandrob.bouncycastle.crypto.encodings.PKCS1Encoding this$0 -> a
    1:55:void <init>(org.sandrob.bouncycastle.crypto.encodings.PKCS1Encoding) -> <init>
    59:59:java.lang.Object run() -> run
org.sandrob.bouncycastle.crypto.engines.AESEngine -> org.sandrob.bouncycastle.crypto.engines.AESEngine:
    byte[] S -> a
    byte[] Si -> b
    int[] rcon -> c
    int[] T0 -> d
    int[] Tinv0 -> e
    int ROUNDS -> f
    int[][] WorkingKey -> g
    int C0 -> h
    int C1 -> i
    int C2 -> j
    int C3 -> k
    boolean forEncryption -> l
    31:220:void <clinit>() -> <clinit>
    226:226:int shift(int,int) -> a
    237:237:int FFmulX(int) -> a
    252:257:int inv_mcol(int) -> b
    262:262:int subWord(int) -> c
    275:330:int[][] generateWorkingKey(byte[],boolean) -> a
    334:345:void <init>() -> <init>
    359:366:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    371:371:java.lang.String getAlgorithmName() -> getAlgorithmName
    376:376:int getBlockSize() -> getBlockSize
    385:413:int processBlock(byte[],int,byte[],int) -> processBlock
    418:418:void reset() -> reset
    424:445:void unpackBlock(byte[],int) -> a
    451:472:void packBlock(byte[],int) -> b
    479:510:void encryptBlock(int[][]) -> a
    516:546:void decryptBlock(int[][]) -> b
org.sandrob.bouncycastle.crypto.engines.AESFastEngine -> org.sandrob.bouncycastle.crypto.engines.AESFastEngine:
    byte[] S -> a
    byte[] Si -> b
    int[] rcon -> c
    int[] T0 -> d
    int[] T1 -> e
    int[] T2 -> f
    int[] T3 -> g
    int[] Tinv0 -> h
    int[] Tinv1 -> i
    int[] Tinv2 -> j
    int[] Tinv3 -> k
    int ROUNDS -> l
    int[][] WorkingKey -> m
    int C0 -> n
    int C1 -> o
    int C2 -> p
    int C3 -> q
    boolean forEncryption -> r
    31:550:void <clinit>() -> <clinit>
    556:556:int shift(int,int) -> a
    567:567:int FFmulX(int) -> a
    582:587:int inv_mcol(int) -> b
    593:593:int subWord(int) -> c
    606:661:int[][] generateWorkingKey(byte[],boolean) -> a
    665:676:void <init>() -> <init>
    690:697:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    702:702:java.lang.String getAlgorithmName() -> getAlgorithmName
    707:707:int getBlockSize() -> getBlockSize
    716:744:int processBlock(byte[],int,byte[],int) -> processBlock
    749:749:void reset() -> reset
    755:776:void unpackBlock(byte[],int) -> a
    782:803:void packBlock(byte[],int) -> b
    809:839:void encryptBlock(int[][]) -> a
    845:875:void decryptBlock(int[][]) -> b
org.sandrob.bouncycastle.crypto.engines.AESLightEngine -> org.sandrob.bouncycastle.crypto.engines.AESLightEngine:
    byte[] S -> a
    byte[] Si -> b
    int[] rcon -> c
    int ROUNDS -> d
    int[][] WorkingKey -> e
    int C0 -> f
    int C1 -> g
    int C2 -> h
    int C3 -> i
    boolean forEncryption -> j
    33:111:void <clinit>() -> <clinit>
    117:117:int shift(int,int) -> a
    128:128:int FFmulX(int) -> a
    143:144:int mcol(int) -> b
    149:154:int inv_mcol(int) -> c
    160:160:int subWord(int) -> d
    173:228:int[][] generateWorkingKey(byte[],boolean) -> a
    232:243:void <init>() -> <init>
    257:264:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    269:269:java.lang.String getAlgorithmName() -> getAlgorithmName
    274:274:int getBlockSize() -> getBlockSize
    283:311:int processBlock(byte[],int,byte[],int) -> processBlock
    316:316:void reset() -> reset
    322:343:void unpackBlock(byte[],int) -> a
    349:370:void packBlock(byte[],int) -> b
    376:405:void encryptBlock(int[][]) -> a
    411:439:void decryptBlock(int[][]) -> b
org.sandrob.bouncycastle.crypto.engines.AESWrapEngine -> org.sandrob.bouncycastle.crypto.engines.AESWrapEngine:
    14:15:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.engines.BlowfishEngine -> org.sandrob.bouncycastle.crypto.engines.BlowfishEngine:
    int[] KP -> a
    int[] KS0 -> b
    int[] KS1 -> c
    int[] KS2 -> d
    int[] KS3 -> e
    int[] S0 -> f
    int[] S1 -> g
    int[] S2 -> h
    int[] S3 -> i
    int[] P -> j
    boolean encrypting -> k
    byte[] workingKey -> l
    14:291:void <clinit>() -> <clinit>
    306:317:void <init>() -> <init>
    331:340:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    345:345:java.lang.String getAlgorithmName() -> getAlgorithmName
    354:378:int processBlock(byte[],int,byte[],int) -> processBlock
    383:383:void reset() -> reset
    387:387:int getBlockSize() -> getBlockSize
    396:397:int F(int) -> a
    408:428:void processTable(int,int,int[]) -> a
    441:503:void setKey(byte[]) -> a
    516:531:void encryptBlock(byte[],int,byte[],int) -> a
    544:559:void decryptBlock(byte[],int,byte[],int) -> b
    563:566:int BytesTo32bits(byte[],int) -> a
    571:575:void Bits32ToBytes(int,byte[],int) -> a
org.sandrob.bouncycastle.crypto.engines.CAST5Engine -> org.sandrob.bouncycastle.crypto.engines.CAST5Engine:
    int M32 -> M32
    int[] S1 -> S1
    int[] S2 -> S2
    int[] S3 -> S3
    int[] S4 -> S4
    int[] S5 -> S5
    int[] S6 -> S6
    int[] S7 -> S7
    int[] S8 -> S8
    int MAX_ROUNDS -> MAX_ROUNDS
    int RED_ROUNDS -> RED_ROUNDS
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] _Kr -> _Kr
    int[] _Km -> _Km
    boolean _encrypting -> a
    byte[] _workingKey -> b
    int _rounds -> c
    19:295:void <clinit>() -> <clinit>
    307:317:void <init>() -> <init>
    331:341:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    346:346:java.lang.String getAlgorithmName() -> getAlgorithmName
    355:377:int processBlock(byte[],int,byte[],int) -> processBlock
    383:383:void reset() -> reset
    387:387:int getBlockSize() -> getBlockSize
    411:570:void setKey(byte[]) -> setKey
    588:603:int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    621:635:int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    649:652:int F1(int,int,int) -> F1
    666:669:int F2(int,int,int) -> F2
    683:686:int F3(int,int,int) -> F3
    697:742:void CAST_Encipher(int,int,int[]) -> CAST_Encipher
    747:792:void CAST_Decipher(int,int,int[]) -> CAST_Decipher
    797:801:void Bits32ToInts(int,int[],int) -> Bits32ToInts
    805:812:int IntsTo32bits(int[],int) -> IntsTo32bits
    817:821:void Bits32ToBytes(int,byte[],int) -> Bits32ToBytes
    825:828:int BytesTo32bits(byte[],int) -> BytesTo32bits
org.sandrob.bouncycastle.crypto.engines.CAST6Engine -> org.sandrob.bouncycastle.crypto.engines.CAST6Engine:
    int ROUNDS -> ROUNDS
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] _Kr -> _Kr
    int[] _Km -> _Km
    int[] _Tr -> _Tr
    int[] _Tm -> _Tm
    int[] _workingKey -> a
    28:41:void <init>() -> <init>
    45:45:java.lang.String getAlgorithmName() -> getAlgorithmName
    50:50:void reset() -> reset
    54:54:int getBlockSize() -> getBlockSize
    69:142:void setKey(byte[]) -> setKey
    160:178:int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    196:213:int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    228:254:void CAST_Encipher(int,int,int,int,int[]) -> CAST_Encipher
    268:294:void CAST_Decipher(int,int,int,int,int[]) -> CAST_Decipher
org.sandrob.bouncycastle.crypto.engines.CamelliaEngine -> org.sandrob.bouncycastle.crypto.engines.CamelliaEngine:
    boolean initialised -> a
    boolean _keyIs128 -> b
    int[] subkey -> c
    int[] kw -> d
    int[] ke -> e
    int[] state -> f
    int[] SIGMA -> g
    int[] SBOX1_1110 -> h
    int[] SBOX4_4404 -> i
    int[] SBOX2_0222 -> j
    int[] SBOX3_3033 -> k
    11:220:void <clinit>() -> <clinit>
    225:225:int rightRotate(int,int) -> a
    230:230:int leftRotate(int,int) -> b
    236:244:void roldq(int,int[],int,int[],int) -> a
    249:257:void decroldq(int,int[],int,int[],int) -> b
    262:270:void roldqo32(int,int[],int,int[],int) -> c
    275:283:void decroldqo32(int,int[],int,int[],int) -> d
    287:293:int bytes2int(byte[],int) -> a
    298:303:void int2bytes(int,byte[],int) -> a
    309:336:void camelliaF2(int[],int[],int) -> a
    341:346:void camelliaFLs(int[],int[],int) -> b
    350:547:void setKey(boolean,byte[]) -> a
    552:580:int processBlock128(byte[],int,byte[],int) -> a
    586:617:int processBlock192or256(byte[],int,byte[],int) -> b
    14:622:void <init>() -> <init>
    627:634:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    638:638:java.lang.String getAlgorithmName() -> getAlgorithmName
    643:643:int getBlockSize() -> getBlockSize
    653:674:int processBlock(byte[],int,byte[],int) -> processBlock
    682:682:void reset() -> reset
org.sandrob.bouncycastle.crypto.engines.CamelliaLightEngine -> org.sandrob.bouncycastle.crypto.engines.CamelliaLightEngine:
    boolean initialized -> a
    boolean _keyis128 -> b
    int[] subkey -> c
    int[] kw -> d
    int[] ke -> e
    int[] state -> f
    int[] SIGMA -> g
    byte[] SBOX1 -> h
    12:103:void <clinit>() -> <clinit>
    108:108:int rightRotate(int,int) -> a
    113:113:int leftRotate(int,int) -> b
    119:127:void roldq(int,int[],int,int[],int) -> a
    132:140:void decroldq(int,int[],int,int[],int) -> b
    145:153:void roldqo32(int,int[],int,int[],int) -> c
    158:166:void decroldqo32(int,int[],int,int[],int) -> d
    170:176:int bytes2int(byte[],int) -> a
    181:186:void int2bytes(int,byte[],int) -> a
    190:190:byte lRot8(byte,int) -> a
    195:195:int sbox2(int) -> a
    200:200:int sbox3(int) -> b
    205:205:int sbox4(int) -> c
    212:249:void camelliaF2(int[],int[],int) -> a
    254:259:void camelliaFLs(int[],int[],int) -> b
    263:460:void setKey(boolean,byte[]) -> a
    465:493:int processBlock128(byte[],int,byte[],int) -> a
    499:530:int processBlock192or256(byte[],int,byte[],int) -> b
    20:535:void <init>() -> <init>
    539:539:java.lang.String getAlgorithmName() -> getAlgorithmName
    544:544:int getBlockSize() -> getBlockSize
    549:556:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    563:584:int processBlock(byte[],int,byte[],int) -> processBlock
    590:590:void reset() -> reset
org.sandrob.bouncycastle.crypto.engines.CamelliaWrapEngine -> org.sandrob.bouncycastle.crypto.engines.CamelliaWrapEngine:
    13:14:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.engines.DESEngine -> org.sandrob.bouncycastle.crypto.engines.DESEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey -> a
    short[] bytebit -> b
    int[] bigbyte -> c
    byte[] pc1 -> d
    byte[] totrot -> e
    byte[] pc2 -> f
    int[] SP1 -> g
    int[] SP2 -> h
    int[] SP3 -> i
    int[] SP4 -> j
    int[] SP5 -> k
    int[] SP6 -> l
    int[] SP7 -> m
    int[] SP8 -> n
    11:296:void <clinit>() -> <clinit>
    16:23:void <init>() -> <init>
    37:50:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    55:55:java.lang.String getAlgorithmName() -> getAlgorithmName
    60:60:int getBlockSize() -> getBlockSize
    69:86:int processBlock(byte[],int,byte[],int) -> processBlock
    91:91:void reset() -> reset
    310:394:int[] generateWorkingKey(boolean,byte[]) -> generateWorkingKey
    409:493:void desFunc(int[],byte[],int,byte[],int) -> desFunc
org.sandrob.bouncycastle.crypto.engines.DESedeEngine -> org.sandrob.bouncycastle.crypto.engines.DESedeEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey1 -> a
    int[] workingKey2 -> b
    int[] workingKey3 -> c
    boolean forEncryption -> d
    15:26:void <init>() -> <init>
    40:72:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    76:76:java.lang.String getAlgorithmName() -> getAlgorithmName
    81:81:int getBlockSize() -> getBlockSize
    90:120:int processBlock(byte[],int,byte[],int) -> processBlock
    125:125:void reset() -> reset
org.sandrob.bouncycastle.crypto.engines.DESedeWrapEngine -> org.sandrob.bouncycastle.crypto.engines.DESedeWrapEngine:
    org.sandrob.bouncycastle.crypto.modes.CBCBlockCipher engine -> c
    org.sandrob.bouncycastle.crypto.params.KeyParameter param -> d
    org.sandrob.bouncycastle.crypto.params.ParametersWithIV paramPlusIV -> e
    byte[] iv -> f
    boolean forWrapping -> g
    byte[] IV2 -> h
    org.sandrob.bouncycastle.crypto.Digest sha1 -> a
    byte[] digest -> b
    29:50:void <clinit>() -> <clinit>
    29:56:void <init>() -> <init>
    67:116:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    125:125:java.lang.String getAlgorithmName() -> getAlgorithmName
    138:196:byte[] wrap(byte[],int,int) -> wrap
    211:297:byte[] unwrap(byte[],int,int) -> unwrap
    316:323:byte[] calculateCMSKeyChecksum(byte[]) -> a
    336:336:boolean checkCMSKeyChecksum(byte[],byte[]) -> a
    341:346:byte[] reverse(byte[]) -> b
org.sandrob.bouncycastle.crypto.engines.ElGamalEngine -> org.sandrob.bouncycastle.crypto.engines.ElGamalEngine:
    org.sandrob.bouncycastle.crypto.params.ElGamalKeyParameters key -> a
    java.security.SecureRandom random -> b
    boolean forEncryption -> c
    int bitSize -> d
    java.math.BigInteger ZERO -> e
    java.math.BigInteger ONE -> f
    java.math.BigInteger TWO -> g
    18:28:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    40:73:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    84:89:int getInputBlockSize() -> getInputBlockSize
    101:106:int getOutputBlockSize() -> getOutputBlockSize
    123:214:byte[] processBlock(byte[],int,int) -> processBlock
org.sandrob.bouncycastle.crypto.engines.GOST28147Engine -> org.sandrob.bouncycastle.crypto.engines.GOST28147Engine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey -> a
    boolean forEncryption -> b
    byte[] S -> c
    byte[] Sbox_Default -> d
    byte[] ESbox_Test -> e
    byte[] ESbox_A -> f
    byte[] ESbox_B -> g
    byte[] ESbox_C -> h
    byte[] ESbox_D -> i
    byte[] DSbox_Test -> j
    byte[] DSbox_A -> k
    java.util.Hashtable sBoxes -> l
    16:135:void <clinit>() -> <clinit>
    140:141:void addSBox(java.lang.String,byte[]) -> a
    20:148:void <init>() -> <init>
    162:194:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    198:198:java.lang.String getAlgorithmName() -> getAlgorithmName
    203:203:int getBlockSize() -> getBlockSize
    212:229:int processBlock(byte[],int,byte[],int) -> processBlock
    234:234:void reset() -> reset
    240:253:int[] generateWorkingKey(boolean,byte[]) -> a
    258:271:int GOST28147_mainStep(int,int) -> a
    282:330:void GOST28147Func(int[],byte[],int,byte[],int) -> a
    337:338:int bytesToint(byte[],int) -> a
    347:351:void intTobytes(int,byte[],int) -> a
    361:369:byte[] getSBox(java.lang.String) -> getSBox
org.sandrob.bouncycastle.crypto.engines.Grain128Engine -> org.sandrob.bouncycastle.crypto.engines.Grain128Engine:
    byte[] workingKey -> a
    byte[] workingIV -> b
    byte[] out -> c
    int[] lfsr -> d
    int[] nfsr -> e
    int output -> f
    int index -> g
    boolean initialised -> h
    13:34:void <init>() -> <init>
    38:38:java.lang.String getAlgorithmName() -> getAlgorithmName
    55:93:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    100:107:void initGrain() -> a
    116:137:int getOutputNFSR() -> b
    147:154:int getOutputLFSR() -> c
    164:183:int getOutput() -> d
    195:200:int[] shift(int[],int) -> a
    211:233:void setKey(byte[],byte[]) -> a
    239:259:void processBytes(byte[],int,int,byte[],int) -> processBytes
    263:266:void reset() -> reset
    273:281:void oneRound() -> e
    285:290:byte returnByte(byte) -> returnByte
    295:300:byte getKeyStream() -> f
org.sandrob.bouncycastle.crypto.engines.Grainv1Engine -> org.sandrob.bouncycastle.crypto.engines.Grainv1Engine:
    byte[] workingKey -> a
    byte[] workingIV -> b
    byte[] out -> c
    int[] lfsr -> d
    int[] nfsr -> e
    int output -> f
    int index -> g
    boolean initialised -> h
    13:34:void <init>() -> <init>
    38:38:java.lang.String getAlgorithmName() -> getAlgorithmName
    55:93:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    100:107:void initGrain() -> a
    116:135:int getOutputNFSR() -> b
    145:152:int getOutputLFSR() -> c
    162:177:int getOutput() -> d
    189:195:int[] shift(int[],int) -> a
    206:221:void setKey(byte[],byte[]) -> a
    227:247:void processBytes(byte[],int,int,byte[],int) -> processBytes
    251:254:void reset() -> reset
    261:267:void oneRound() -> e
    271:276:byte returnByte(byte) -> returnByte
    281:286:byte getKeyStream() -> f
org.sandrob.bouncycastle.crypto.engines.HC128Engine -> org.sandrob.bouncycastle.crypto.engines.HC128Engine:
    int[] p -> a
    int[] q -> b
    int cnt -> c
    byte[] key -> d
    byte[] iv -> e
    boolean initialised -> f
    byte[] buf -> g
    int idx -> h
    22:201:void <init>() -> <init>
    31:32:int f1(int) -> a
    37:38:int f2(int) -> b
    43:44:int g1(int,int,int) -> a
    49:49:int g2(int,int,int) -> b
    56:56:int rotateLeft(int,int) -> a
    63:63:int rotateRight(int,int) -> b
    68:68:int h1(int) -> c
    73:73:int h2(int) -> d
    78:78:int mod1024(int) -> e
    83:83:int mod512(int) -> f
    88:88:int dim(int,int) -> c
    93:106:int step() -> a
    114:154:void init() -> b
    158:158:java.lang.String getAlgorithmName() -> getAlgorithmName
    173:198:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    205:218:byte getByte() -> c
    224:244:void processBytes(byte[],int,int,byte[],int) -> processBytes
    248:250:void reset() -> reset
    254:254:byte returnByte(byte) -> returnByte
org.sandrob.bouncycastle.crypto.engines.HC256Engine -> org.sandrob.bouncycastle.crypto.engines.HC256Engine:
    int[] p -> a
    int[] q -> b
    int cnt -> c
    byte[] key -> d
    byte[] iv -> e
    boolean initialised -> f
    byte[] buf -> g
    int idx -> h
    23:181:void <init>() -> <init>
    32:61:int step() -> a
    69:134:void init() -> b
    138:138:java.lang.String getAlgorithmName() -> getAlgorithmName
    153:178:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    185:198:byte getByte() -> c
    204:224:void processBytes(byte[],int,int,byte[],int) -> processBytes
    228:230:void reset() -> reset
    234:234:byte returnByte(byte) -> returnByte
    241:241:int rotateRight(int,int) -> a
org.sandrob.bouncycastle.crypto.engines.IDEAEngine -> org.sandrob.bouncycastle.crypto.engines.IDEAEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey -> a
    34:41:void <init>() -> <init>
    55:62:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    67:67:java.lang.String getAlgorithmName() -> getAlgorithmName
    72:72:int getBlockSize() -> getBlockSize
    81:98:int processBlock(byte[],int,byte[],int) -> processBlock
    103:103:void reset() -> reset
    112:112:int bytesToWord(byte[],int) -> a
    120:122:void wordToBytes(int,byte[],int) -> a
    137:154:int mul(int,int) -> a
    165:204:void ideaFunc(int[],byte[],int,byte[],int) -> a
    215:247:int[] expandKey(byte[]) -> a
    261:284:int mulInv(int) -> b
    295:295:int addInv(int) -> a
    306:350:int[] invertKey(int[]) -> a
    357:363:int[] generateWorkingKey(boolean,byte[]) -> a
org.sandrob.bouncycastle.crypto.engines.IESEngine -> org.sandrob.bouncycastle.crypto.engines.IESEngine:
    org.sandrob.bouncycastle.crypto.BasicAgreement agree -> a
    org.sandrob.bouncycastle.crypto.DerivationFunction kdf -> b
    org.sandrob.bouncycastle.crypto.Mac mac -> c
    org.sandrob.bouncycastle.crypto.BufferedBlockCipher cipher -> d
    byte[] macBuf -> e
    boolean forEncryption -> f
    org.sandrob.bouncycastle.crypto.CipherParameters privParam -> g
    org.sandrob.bouncycastle.crypto.CipherParameters pubParam -> h
    org.sandrob.bouncycastle.crypto.params.IESParameters param -> i
    40:50:void <init>(org.sandrob.bouncycastle.crypto.BasicAgreement,org.sandrob.bouncycastle.crypto.DerivationFunction,org.sandrob.bouncycastle.crypto.Mac) -> <init>
    61:72:void <init>(org.sandrob.bouncycastle.crypto.BasicAgreement,org.sandrob.bouncycastle.crypto.DerivationFunction,org.sandrob.bouncycastle.crypto.Mac,org.sandrob.bouncycastle.crypto.BufferedBlockCipher) -> <init>
    88:92:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters,org.sandrob.bouncycastle.crypto.CipherParameters,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    101:160:byte[] decryptBlock(byte[],int,int,byte[]) -> a
    170:222:byte[] encryptBlock(byte[],int,int,byte[]) -> b
    229:235:byte[] generateKdfBytes(org.sandrob.bouncycastle.crypto.params.KDFParameters,int) -> a
    244:254:byte[] processBlock(byte[],int,int) -> processBlock
org.sandrob.bouncycastle.crypto.engines.ISAACEngine -> org.sandrob.bouncycastle.crypto.engines.ISAACEngine:
    int sizeL -> a
    int stateArraySize -> b
    int[] engineState -> c
    int[] results -> d
    int a -> e
    int b -> f
    int c -> g
    int index -> h
    byte[] keyStream -> i
    byte[] workingKey -> j
    boolean initialised -> k
    12:28:void <init>() -> <init>
    42:54:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    59:67:byte returnByte(byte) -> returnByte
    77:102:void processBytes(byte[],int,int,byte[],int) -> processBytes
    106:106:java.lang.String getAlgorithmName() -> getAlgorithmName
    111:112:void reset() -> reset
    117:183:void setKey(byte[]) -> a
    189:204:void isaac() -> a
    208:216:void mix(int[]) -> a
    220:223:int byteToIntLittle(byte[],int) -> a
    228:233:byte[] intToByteLittle(int) -> a
    238:243:byte[] intToByteLittle(int[]) -> b
org.sandrob.bouncycastle.crypto.engines.NaccacheSternEngine -> org.sandrob.bouncycastle.crypto.engines.NaccacheSternEngine:
    boolean forEncryption -> a
    org.sandrob.bouncycastle.crypto.params.NaccacheSternKeyParameters key -> b
    java.util.Vector[] lookup -> c
    boolean debug -> d
    java.math.BigInteger ZERO -> e
    java.math.BigInteger ONE -> f
    19:31:void <clinit>() -> <clinit>
    19:28:void <init>() -> <init>
    41:83:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    87:88:void setDebug(boolean) -> setDebug
    97:105:int getInputBlockSize() -> getInputBlockSize
    116:124:int getOutputBlockSize() -> getOutputBlockSize
    136:246:byte[] processBlock(byte[],int,int) -> processBlock
    261:272:byte[] encrypt(java.math.BigInteger) -> encrypt
    289:326:byte[] addCryptedBlocks(byte[],byte[]) -> addCryptedBlocks
    340:403:byte[] processData(byte[]) -> processData
    419:435:java.math.BigInteger chineseRemainder(java.util.Vector,java.util.Vector) -> a
org.sandrob.bouncycastle.crypto.engines.NoekeonEngine -> org.sandrob.bouncycastle.crypto.engines.NoekeonEngine:
    int[] nullVector -> a
    int[] roundConstants -> b
    int[] state -> c
    int[] subKeys -> d
    int[] decryptKeys -> e
    boolean _initialised -> f
    boolean _forEncryption -> g
    12:28:void <clinit>() -> <clinit>
    31:45:void <init>() -> <init>
    49:49:java.lang.String getAlgorithmName() -> getAlgorithmName
    54:54:int getBlockSize() -> getBlockSize
    69:80:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    88:104:int processBlock(byte[],int,byte[],int) -> processBlock
    109:109:void reset() -> reset
    119:123:void setKey(byte[]) -> a
    131:154:int encryptBlock(byte[],int,byte[],int) -> a
    163:189:int decryptBlock(byte[],int,byte[],int) -> b
    194:204:void gamma(int[]) -> a
    210:224:void theta(int[],int[]) -> a
    228:231:void pi1(int[]) -> b
    235:238:void pi2(int[]) -> c
    244:247:int bytesToIntBig(byte[],int) -> a
    252:256:void intToBytesBig(int,byte[],int) -> a
    260:260:int rotl(int,int) -> a
org.sandrob.bouncycastle.crypto.engines.NullEngine -> org.sandrob.bouncycastle.crypto.engines.NullEngine:
    boolean initialised -> a
    int BLOCK_SIZE -> BLOCK_SIZE
    21:22:void <init>() -> <init>
    30:31:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    38:38:java.lang.String getAlgorithmName() -> getAlgorithmName
    46:46:int getBlockSize() -> getBlockSize
    55:74:int processBlock(byte[],int,byte[],int) -> processBlock
    83:83:void reset() -> reset
org.sandrob.bouncycastle.crypto.engines.RC2Engine -> org.sandrob.bouncycastle.crypto.engines.RC2Engine:
    byte[] piTable -> a
    int[] workingKey -> b
    boolean encrypting -> c
    13:52:void <clinit>() -> <clinit>
    13:13:void <init>() -> <init>
    65:108:int[] generateWorkingKey(byte[],int) -> a
    123:143:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    147:147:void reset() -> reset
    151:151:java.lang.String getAlgorithmName() -> getAlgorithmName
    156:156:int getBlockSize() -> getBlockSize
    165:189:int processBlock(byte[],int,byte[],int) -> processBlock
    199:200:int rotateWordLeft(int,int) -> a
    211:258:void encryptBlock(byte[],int,byte[],int) -> a
    268:315:void decryptBlock(byte[],int,byte[],int) -> b
org.sandrob.bouncycastle.crypto.engines.RC2WrapEngine -> org.sandrob.bouncycastle.crypto.engines.RC2WrapEngine:
    org.sandrob.bouncycastle.crypto.modes.CBCBlockCipher engine -> c
    org.sandrob.bouncycastle.crypto.CipherParameters param -> d
    org.sandrob.bouncycastle.crypto.params.ParametersWithIV paramPlusIV -> e
    byte[] iv -> f
    boolean forWrapping -> g
    java.security.SecureRandom sr -> h
    byte[] IV2 -> i
    org.sandrob.bouncycastle.crypto.Digest sha1 -> a
    byte[] digest -> b
    18:41:void <clinit>() -> <clinit>
    18:47:void <init>() -> <init>
    57:107:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    116:116:java.lang.String getAlgorithmName() -> getAlgorithmName
    130:215:byte[] wrap(byte[],int,int) -> wrap
    231:342:byte[] unwrap(byte[],int,int) -> unwrap
    361:368:byte[] calculateCMSKeyChecksum(byte[]) -> a
    381:381:boolean checkCMSKeyChecksum(byte[],byte[]) -> a
org.sandrob.bouncycastle.crypto.engines.RC4Engine -> org.sandrob.bouncycastle.crypto.engines.RC4Engine:
    byte[] engineState -> a
    int x -> b
    int y -> c
    byte[] workingKey -> d
    8:20:void <init>() -> <init>
    35:48:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    53:53:java.lang.String getAlgorithmName() -> getAlgorithmName
    58:67:byte returnByte(byte) -> returnByte
    77:101:void processBytes(byte[],int,int,byte[],int) -> processBytes
    105:106:void reset() -> reset
    112:142:void setKey(byte[]) -> a
org.sandrob.bouncycastle.crypto.engines.RC532Engine -> org.sandrob.bouncycastle.crypto.engines.RC532Engine:
    int _noRounds -> a
    int[] _S -> b
    boolean forEncryption -> c
    48:52:void <init>() -> <init>
    56:56:java.lang.String getAlgorithmName() -> getAlgorithmName
    61:61:int getBlockSize() -> getBlockSize
    76:96:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    104:105:int processBlock(byte[],int,byte[],int) -> processBlock
    110:110:void reset() -> reset
    132:179:void setKey(byte[]) -> a
    196:208:int encryptBlock(byte[],int,byte[],int) -> a
    217:229:int decryptBlock(byte[],int,byte[],int) -> b
    251:251:int rotateLeft(int,int) -> a
    266:266:int rotateRight(int,int) -> b
    273:274:int bytesToWord(byte[],int) -> a
    282:286:void wordToBytes(int,byte[],int) -> a
org.sandrob.bouncycastle.crypto.engines.RC564Engine -> org.sandrob.bouncycastle.crypto.engines.RC564Engine:
    int _noRounds -> a
    long[] _S -> b
    boolean forEncryption -> c
    50:54:void <init>() -> <init>
    58:58:java.lang.String getAlgorithmName() -> getAlgorithmName
    63:63:int getBlockSize() -> getBlockSize
    78:90:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    98:99:int processBlock(byte[],int,byte[],int) -> processBlock
    104:104:void reset() -> reset
    126:173:void setKey(byte[]) -> a
    190:202:int encryptBlock(byte[],int,byte[],int) -> a
    211:223:int decryptBlock(byte[],int,byte[],int) -> b
    245:245:long rotateLeft(long,long) -> a
    260:260:long rotateRight(long,long) -> b
    267:274:long bytesToWord(byte[],int) -> a
    282:287:void wordToBytes(long,byte[],int) -> a
org.sandrob.bouncycastle.crypto.engines.RC6Engine -> org.sandrob.bouncycastle.crypto.engines.RC6Engine:
    int[] _S -> a
    boolean forEncryption -> b
    47:50:void <init>() -> <init>
    54:54:java.lang.String getAlgorithmName() -> getAlgorithmName
    59:59:int getBlockSize() -> getBlockSize
    74:82:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    90:106:int processBlock(byte[],int,byte[],int) -> processBlock
    111:111:void reset() -> reset
    135:190:void setKey(byte[]) -> a
    199:243:int encryptBlock(byte[],int,byte[],int) -> a
    253:297:int decryptBlock(byte[],int,byte[],int) -> b
    319:319:int rotateLeft(int,int) -> a
    334:334:int rotateRight(int,int) -> b
    341:348:int bytesToWord(byte[],int) -> a
    356:361:void wordToBytes(int,byte[],int) -> a
org.sandrob.bouncycastle.crypto.engines.RFC3211WrapEngine -> org.sandrob.bouncycastle.crypto.engines.RFC3211WrapEngine:
    org.sandrob.bouncycastle.crypto.modes.CBCBlockCipher engine -> a
    org.sandrob.bouncycastle.crypto.params.ParametersWithIV param -> b
    boolean forWrapping -> c
    java.security.SecureRandom rand -> d
    25:28:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    34:52:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    56:56:java.lang.String getAlgorithmName() -> getAlgorithmName
    64:105:byte[] wrap(byte[],int,int) -> wrap
    114:173:byte[] unwrap(byte[],int,int) -> unwrap
org.sandrob.bouncycastle.crypto.engines.RFC3394WrapEngine -> org.sandrob.bouncycastle.crypto.engines.RFC3394WrapEngine:
    org.sandrob.bouncycastle.crypto.BlockCipher engine -> a
    org.sandrob.bouncycastle.crypto.params.KeyParameter param -> b
    boolean forWrapping -> c
    byte[] iv -> d
    27:34:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    40:60:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    64:64:java.lang.String getAlgorithmName() -> getAlgorithmName
    72:115:byte[] wrap(byte[],int,int) -> wrap
    124:175:byte[] unwrap(byte[],int,int) -> unwrap
org.sandrob.bouncycastle.crypto.engines.RSABlindedEngine -> org.sandrob.bouncycastle.crypto.engines.RSABlindedEngine:
    java.math.BigInteger ONE -> a
    org.sandrob.bouncycastle.crypto.engines.RSACoreEngine core -> b
    org.sandrob.bouncycastle.crypto.params.RSAKeyParameters key -> c
    java.security.SecureRandom random -> d
    17:20:void <clinit>() -> <clinit>
    17:22:void <init>() -> <init>
    36:50:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    61:61:int getInputBlockSize() -> getInputBlockSize
    73:73:int getOutputBlockSize() -> getOutputBlockSize
    90:124:byte[] processBlock(byte[],int,int) -> processBlock
org.sandrob.bouncycastle.crypto.engines.RSABlindingEngine -> org.sandrob.bouncycastle.crypto.engines.RSABlindingEngine:
    org.sandrob.bouncycastle.crypto.engines.RSACoreEngine core -> a
    org.sandrob.bouncycastle.crypto.params.RSAKeyParameters key -> b
    java.math.BigInteger blindingFactor -> c
    boolean forEncryption -> d
    18:21:void <init>() -> <init>
    40:56:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    67:67:int getInputBlockSize() -> getInputBlockSize
    79:79:int getOutputBlockSize() -> getOutputBlockSize
    96:107:byte[] processBlock(byte[],int,int) -> processBlock
    116:120:java.math.BigInteger blindMessage(java.math.BigInteger) -> a
    129:135:java.math.BigInteger unblindMessage(java.math.BigInteger) -> b
org.sandrob.bouncycastle.crypto.engines.RSACoreEngine -> org.sandrob.bouncycastle.crypto.engines.a:
    org.sandrob.bouncycastle.crypto.params.RSAKeyParameters key -> a
    boolean forEncryption -> b
    14:14:void <init>() -> <init>
    29:41:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> a
    52:60:int getInputBlockSize() -> a
    73:81:int getOutputBlockSize() -> b
    90:118:java.math.BigInteger convertInput(byte[],int,int) -> a
    124:158:byte[] convertOutput(java.math.BigInteger) -> a
    163:200:java.math.BigInteger processBlock(java.math.BigInteger) -> b
org.sandrob.bouncycastle.crypto.engines.RSAEngine -> org.sandrob.bouncycastle.crypto.engines.RSAEngine:
    org.sandrob.bouncycastle.crypto.engines.RSACoreEngine core -> a
    10:10:void <init>() -> <init>
    25:31:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    42:42:int getInputBlockSize() -> getInputBlockSize
    54:54:int getOutputBlockSize() -> getOutputBlockSize
    71:76:byte[] processBlock(byte[],int,int) -> processBlock
org.sandrob.bouncycastle.crypto.engines.RijndaelEngine -> org.sandrob.bouncycastle.crypto.engines.RijndaelEngine:
    byte[] logtable -> c
    byte[] aLogtable -> d
    byte[] S -> e
    byte[] Si -> f
    int[] rcon -> g
    byte[][] shifts0 -> a
    byte[][] shifts1 -> b
    int BC -> h
    long BC_MASK -> i
    int ROUNDS -> j
    int blockBits -> k
    long[][] workingKey -> l
    long A0 -> m
    long A1 -> n
    long A2 -> o
    long A3 -> p
    boolean forEncryption -> q
    byte[] shifts0SC -> r
    byte[] shifts1SC -> s
    14:147:void <clinit>() -> <clinit>
    157:163:byte mul0x2(int) -> a
    170:176:byte mul0x3(int) -> b
    183:189:byte mul0x9(int) -> c
    196:202:byte mul0xb(int) -> d
    209:215:byte mul0xd(int) -> e
    222:228:byte mul0xe(int) -> f
    238:242:void KeyAddition(long[]) -> a
    248:248:long shift(long,int) -> a
    258:261:void ShiftRow(byte[]) -> a
    267:274:long applyS(long,byte[]) -> a
    284:288:void Substitution(byte[]) -> b
    297:319:void MixColumn() -> a
    329:358:void InvMixColumn() -> b
    368:482:long[][] generateWorkingKey(byte[]) -> c
    500:501:void <init>() -> <init>
    508:548:void <init>(int) -> <init>
    562:569:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    574:574:java.lang.String getAlgorithmName() -> getAlgorithmName
    579:579:int getBlockSize() -> getBlockSize
    588:616:int processBlock(byte[],int,byte[],int) -> processBlock
    621:621:void reset() -> reset
    627:641:void unpackBlock(byte[],int) -> a
    647:656:void packBlock(byte[],int) -> b
    666:685:void encryptBlock(long[][]) -> a
    704:723:void decryptBlock(long[][]) -> b
org.sandrob.bouncycastle.crypto.engines.SEEDEngine -> org.sandrob.bouncycastle.crypto.engines.SEEDEngine:
    int BLOCK_SIZE -> a
    int[] SS0 -> b
    int[] SS1 -> c
    int[] SS2 -> d
    int[] SS3 -> e
    int[] KC -> f
    int[] wKey -> g
    boolean forEncryption -> h
    11:170:void <clinit>() -> <clinit>
    11:14:void <init>() -> <init>
    178:180:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    184:184:java.lang.String getAlgorithmName() -> getAlgorithmName
    189:189:int getBlockSize() -> getBlockSize
    194:236:int processBlock(byte[],int,byte[],int) -> processBlock
    241:241:void reset() -> reset
    245:273:int[] createWorkingKey(byte[]) -> a
    278:278:int extractW1(long) -> a
    283:283:int extractW0(long) -> b
    288:288:long rotateLeft8(long) -> c
    293:293:long rotateRight8(long) -> d
    300:307:long bytesToLong(byte[],int) -> a
    315:319:void longToBytes(byte[],int,long) -> a
    323:323:int G(int) -> a
    328:333:long F(int,int,long) -> a
    338:338:int phaseCalc1(int,int,int,int) -> a
    343:343:int phaseCalc2(int,int,int,int) -> b
org.sandrob.bouncycastle.crypto.engines.SEEDWrapEngine -> org.sandrob.bouncycastle.crypto.engines.SEEDWrapEngine:
    13:14:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.engines.Salsa20Engine -> org.sandrob.bouncycastle.crypto.engines.Salsa20Engine:
    byte[] sigma -> a
    byte[] tau -> b
    int index -> c
    int[] engineState -> d
    int[] x -> e
    byte[] keyStream -> f
    byte[] workingKey -> g
    byte[] workingIV -> h
    boolean initialised -> i
    int cW0 -> j
    int cW1 -> k
    int cW2 -> l
    15:23:void <clinit>() -> <clinit>
    15:35:void <init>() -> <init>
    61:86:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    90:90:java.lang.String getAlgorithmName() -> getAlgorithmName
    95:112:byte returnByte(byte) -> returnByte
    122:156:void processBytes(byte[],int,int,byte[],int) -> processBytes
    160:161:void reset() -> reset
    167:206:void setKey(byte[],byte[]) -> a
    217:267:void salsa20WordToByte(int[],byte[]) -> a
    278:282:byte[] intToByteLittle(int,byte[],int) -> a
    295:295:int rotl(int,int) -> a
    308:311:int byteToIntLittle(byte[],int) -> a
    316:319:void resetCounter() -> a
    323:334:boolean limitExceeded() -> b
    342:360:boolean limitExceeded(int) -> a
org.sandrob.bouncycastle.crypto.engines.SerpentEngine -> org.sandrob.bouncycastle.crypto.engines.SerpentEngine:
    boolean encrypting -> a
    int[] wKey -> b
    int X0 -> c
    int X1 -> d
    int X2 -> e
    int X3 -> f
    18:18:void <init>() -> <init>
    43:50:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    55:55:java.lang.String getAlgorithmName() -> getAlgorithmName
    60:60:int getBlockSize() -> getBlockSize
    82:106:int processBlock(byte[],int,byte[],int) -> processBlock
    111:111:void reset() -> reset
    126:242:int[] makeWorkingKey(byte[]) -> a
    249:249:int rotateLeft(int,int) -> a
    256:256:int rotateRight(int,int) -> b
    263:264:int bytesToWord(byte[],int) -> a
    272:276:void wordToBytes(int,byte[],int) -> a
    292:334:void encryptBlock(byte[],int,byte[],int) -> a
    350:423:void decryptBlock(byte[],int,byte[],int) -> b
    453:462:void sb0(int,int,int,int) -> a
    469:478:void ib0(int,int,int,int) -> b
    485:494:void sb1(int,int,int,int) -> c
    501:512:void ib1(int,int,int,int) -> d
    519:529:void sb2(int,int,int,int) -> e
    536:550:void ib2(int,int,int,int) -> f
    557:571:void sb3(int,int,int,int) -> g
    578:592:void ib3(int,int,int,int) -> h
    599:612:void sb4(int,int,int,int) -> i
    619:632:void ib4(int,int,int,int) -> j
    639:653:void sb5(int,int,int,int) -> k
    660:673:void ib5(int,int,int,int) -> l
    680:693:void sb6(int,int,int,int) -> m
    700:713:void ib6(int,int,int,int) -> n
    720:734:void sb7(int,int,int,int) -> o
    741:750:void ib7(int,int,int,int) -> p
    757:766:void LT() -> a
    773:781:void inverseLT() -> b
org.sandrob.bouncycastle.crypto.engines.SkipjackEngine -> org.sandrob.bouncycastle.crypto.engines.SkipjackEngine:
    short[] ftable -> a
    int[] key0 -> b
    int[] key1 -> c
    int[] key2 -> d
    int[] key3 -> e
    boolean encrypting -> f
    11:33:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    51:75:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    79:79:java.lang.String getAlgorithmName() -> getAlgorithmName
    84:84:int getBlockSize() -> getBlockSize
    93:117:int processBlock(byte[],int,byte[],int) -> processBlock
    122:122:void reset() -> reset
    133:141:int g(int,int) -> a
    150:189:int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    201:209:int h(int,int) -> b
    218:257:int decryptBlock(byte[],int,byte[],int) -> decryptBlock
org.sandrob.bouncycastle.crypto.engines.TEAEngine -> org.sandrob.bouncycastle.crypto.engines.TEAEngine:
    int _a -> a
    int _b -> b
    int _c -> c
    int _d -> d
    boolean _initialised -> e
    boolean _forEncryption -> f
    30:33:void <init>() -> <init>
    37:37:java.lang.String getAlgorithmName() -> getAlgorithmName
    42:42:int getBlockSize() -> getBlockSize
    57:68:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    76:92:int processBlock(byte[],int,byte[],int) -> processBlock
    97:97:void reset() -> reset
    107:111:void setKey(byte[]) -> a
    120:135:int encryptBlock(byte[],int,byte[],int) -> a
    145:160:int decryptBlock(byte[],int,byte[],int) -> b
    165:168:int bytesToInt(byte[],int) -> a
    173:177:void unpackInt(int,byte[],int) -> a
org.sandrob.bouncycastle.crypto.engines.TwofishEngine -> org.sandrob.bouncycastle.crypto.engines.TwofishEngine:
    byte[][] P -> a
    boolean encrypting -> b
    int[] gMDS0 -> c
    int[] gMDS1 -> d
    int[] gMDS2 -> e
    int[] gMDS3 -> f
    int[] gSubKeys -> g
    int[] gSBox -> h
    int k64Cnt -> i
    byte[] workingKey -> j
    15:148:void <clinit>() -> <clinit>
    206:256:void <init>() -> <init>
    270:280:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    285:285:java.lang.String getAlgorithmName() -> getAlgorithmName
    294:318:int processBlock(byte[],int,byte[],int) -> processBlock
    323:327:void reset() -> reset
    331:331:int getBlockSize() -> getBlockSize
    340:432:void setKey(byte[]) -> a
    448:474:void encryptBlock(byte[],int,byte[],int) -> a
    487:513:void decryptBlock(byte[],int,byte[],int) -> b
    522:558:int F32(int,int[]) -> a
    572:583:int RS_MDS_Encode(int,int) -> a
    595:600:int RS_rem(int) -> a
    605:606:int LFSR1(int) -> b
    611:613:int LFSR2(int) -> c
    618:618:int Mx_X(int) -> d
    623:623:int Mx_Y(int) -> e
    628:628:int b0(int) -> f
    633:633:int b1(int) -> g
    638:638:int b2(int) -> h
    643:643:int b3(int) -> i
    648:651:int Fe32_0(int) -> j
    656:659:int Fe32_3(int) -> k
    664:667:int BytesTo32Bits(byte[],int) -> a
    672:676:void Bits32ToBytes(int,byte[],int) -> a
org.sandrob.bouncycastle.crypto.engines.VMPCEngine -> org.sandrob.bouncycastle.crypto.engines.VMPCEngine:
    byte n -> n
    byte[] P -> P
    byte s -> s
    byte[] workingIV -> workingIV
    byte[] workingKey -> workingKey
    9:17:void <init>() -> <init>
    24:24:java.lang.String getAlgorithmName() -> getAlgorithmName
    39:64:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    68:90:void initKey(byte[],byte[]) -> initKey
    95:118:void processBytes(byte[],int,int,byte[],int) -> processBytes
    122:123:void reset() -> reset
    127:136:byte returnByte(byte) -> returnByte
org.sandrob.bouncycastle.crypto.engines.VMPCKSA3Engine -> org.sandrob.bouncycastle.crypto.engines.VMPCKSA3Engine:
    3:3:void <init>() -> <init>
    7:7:java.lang.String getAlgorithmName() -> getAlgorithmName
    12:44:void initKey(byte[],byte[]) -> initKey
org.sandrob.bouncycastle.crypto.engines.XTEAEngine -> org.sandrob.bouncycastle.crypto.engines.XTEAEngine:
    int[] _S -> a
    int[] _sum0 -> b
    int[] _sum1 -> c
    boolean _initialised -> d
    boolean _forEncryption -> e
    22:35:void <init>() -> <init>
    39:39:java.lang.String getAlgorithmName() -> getAlgorithmName
    44:44:int getBlockSize() -> getBlockSize
    59:70:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    78:94:int processBlock(byte[],int,byte[],int) -> processBlock
    99:99:void reset() -> reset
    110:121:void setKey(byte[]) -> a
    130:142:int encryptBlock(byte[],int,byte[],int) -> a
    152:164:int decryptBlock(byte[],int,byte[],int) -> b
    169:172:int bytesToInt(byte[],int) -> a
    177:181:void unpackInt(int,byte[],int) -> a
org.sandrob.bouncycastle.crypto.examples.DESExample -> org.sandrob.bouncycastle.crypto.examples.DESExample:
    boolean encrypt -> a
    org.sandrob.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher cipher -> b
    java.io.BufferedInputStream in -> c
    java.io.BufferedOutputStream out -> d
    byte[] key -> e
    74:99:void main(java.lang.String[]) -> main
    55:104:void <init>() -> <init>
    55:236:void <init>(java.lang.String,java.lang.String,java.lang.String,boolean) -> <init>
    244:274:void process() -> a
    284:349:void performEncrypt(byte[]) -> a
    359:416:void performDecrypt(byte[]) -> b
org.sandrob.bouncycastle.crypto.generators.BaseKDFBytesGenerator -> org.sandrob.bouncycastle.crypto.generators.BaseKDFBytesGenerator:
    int counterStart -> a
    org.sandrob.bouncycastle.crypto.Digest digest -> b
    byte[] shared -> c
    byte[] iv -> d
    29:35:void <init>(int,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    40:58:void init(org.sandrob.bouncycastle.crypto.DerivationParameters) -> init
    65:65:org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
    81:140:int generateBytes(byte[],int,int) -> generateBytes
org.sandrob.bouncycastle.crypto.generators.DESKeyGenerator -> org.sandrob.bouncycastle.crypto.generators.DESKeyGenerator:
    7:7:void <init>() -> <init>
    20:32:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    36:46:byte[] generateKey() -> generateKey
org.sandrob.bouncycastle.crypto.generators.DESedeKeyGenerator -> org.sandrob.bouncycastle.crypto.generators.DESedeKeyGenerator:
    6:6:void <init>() -> <init>
    21:40:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    44:54:byte[] generateKey() -> generateKey
org.sandrob.bouncycastle.crypto.generators.DHBasicKeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.DHBasicKeyPairGenerator:
    org.sandrob.bouncycastle.crypto.params.DHKeyGenerationParameters param -> a
    19:19:void <init>() -> <init>
    27:28:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    32:40:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.crypto.generators.DHKeyGeneratorHelper -> org.sandrob.bouncycastle.crypto.generators.a:
    org.sandrob.bouncycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE -> a
    java.math.BigInteger ONE -> b
    java.math.BigInteger TWO -> c
    9:14:void <clinit>() -> <clinit>
    16:18:void <init>() -> <init>
    22:44:java.math.BigInteger calculatePrivate(org.sandrob.bouncycastle.crypto.params.DHParameters,java.security.SecureRandom) -> a
    49:49:java.math.BigInteger calculatePublic(org.sandrob.bouncycastle.crypto.params.DHParameters,java.math.BigInteger) -> a
org.sandrob.bouncycastle.crypto.generators.DHKeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.DHKeyPairGenerator:
    org.sandrob.bouncycastle.crypto.params.DHKeyGenerationParameters param -> a
    19:19:void <init>() -> <init>
    27:28:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    32:40:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.crypto.generators.DHParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.DHParametersGenerator:
    int size -> a
    int certainty -> b
    java.security.SecureRandom random -> c
    java.math.BigInteger TWO -> d
    8:14:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    28:31:void init(int,int,java.security.SecureRandom) -> init
    44:50:org.sandrob.bouncycastle.crypto.params.DHParameters generateParameters() -> generateParameters
org.sandrob.bouncycastle.crypto.generators.DHParametersHelper -> org.sandrob.bouncycastle.crypto.generators.b:
    java.math.BigInteger ONE -> a
    java.math.BigInteger TWO -> b
    8:11:void <clinit>() -> <clinit>
    21:36:java.math.BigInteger[] generateSafePrimes(int,int,java.security.SecureRandom) -> a
    46:71:java.math.BigInteger selectGenerator(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> a
org.sandrob.bouncycastle.crypto.generators.DSAKeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.DSAKeyPairGenerator:
    java.math.BigInteger ONE -> a
    org.sandrob.bouncycastle.crypto.params.DSAKeyGenerationParameters param -> b
    21:24:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    31:32:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    36:43:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    54:54:java.math.BigInteger generatePrivateKey(java.math.BigInteger,java.security.SecureRandom) -> a
    59:59:java.math.BigInteger calculatePublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> a
org.sandrob.bouncycastle.crypto.generators.DSAParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.DSAParametersGenerator:
    int L -> a
    int N -> b
    int certainty -> c
    java.security.SecureRandom random -> d
    java.math.BigInteger ZERO -> e
    java.math.BigInteger ONE -> f
    java.math.BigInteger TWO -> g
    18:26:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    40:41:void init(int,int,java.security.SecureRandom) -> init
    53:57:void init(int,int,int,java.security.SecureRandom) -> a
    67:69:org.sandrob.bouncycastle.crypto.params.DSAParameters generateParameters() -> generateParameters
    74:139:org.sandrob.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_2() -> a
    147:156:java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> a
    169:266:org.sandrob.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_3() -> b
    281:281:java.math.BigInteger calculateGenerator_FIPS186_3_Unverifiable(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> b
    315:317:void hash(org.sandrob.bouncycastle.crypto.Digest,byte[],byte[]) -> a
    321:321:int getDefaultN(int) -> a
    326:336:void inc(byte[]) -> a
org.sandrob.bouncycastle.crypto.generators.ECKeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.ECKeyPairGenerator:
    org.sandrob.bouncycastle.crypto.params.ECDomainParameters params -> a
    java.security.SecureRandom random -> b
    16:16:void <init>() -> <init>
    25:29:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    37:51:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.crypto.generators.ElGamalKeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.ElGamalKeyPairGenerator:
    org.sandrob.bouncycastle.crypto.params.ElGamalKeyGenerationParameters param -> a
    20:20:void <init>() -> <init>
    28:29:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    33:42:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.crypto.generators.ElGamalParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.ElGamalParametersGenerator:
    int size -> a
    int certainty -> b
    java.security.SecureRandom random -> c
    8:8:void <init>() -> <init>
    19:22:void init(int,int,java.security.SecureRandom) -> init
    35:41:org.sandrob.bouncycastle.crypto.params.ElGamalParameters generateParameters() -> generateParameters
org.sandrob.bouncycastle.crypto.generators.GOST3410KeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.GOST3410KeyPairGenerator:
    java.math.BigInteger ZERO -> a
    org.sandrob.bouncycastle.crypto.params.GOST3410KeyGenerationParameters param -> b
    19:22:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    29:30:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    35:55:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.crypto.generators.GOST3410ParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.GOST3410ParametersGenerator:
    int size -> a
    int typeproc -> b
    java.security.SecureRandom init_random -> c
    java.math.BigInteger ONE -> d
    java.math.BigInteger TWO -> e
    12:19:void <clinit>() -> <clinit>
    12:12:void <init>() -> <init>
    33:36:void init(int,int,java.security.SecureRandom) -> init
    42:155:int procedure_A(int,int,java.math.BigInteger[],int) -> a
    162:275:long procedure_Aa(long,long,java.math.BigInteger[],int) -> a
    282:360:void procedure_B(int,int,java.math.BigInteger[]) -> a
    371:448:void procedure_Bb(long,long,java.math.BigInteger[]) -> a
    463:478:java.math.BigInteger procedure_C(java.math.BigInteger,java.math.BigInteger) -> a
    490:538:org.sandrob.bouncycastle.crypto.params.GOST3410Parameters generateParameters() -> generateParameters
org.sandrob.bouncycastle.crypto.generators.KDF1BytesGenerator -> org.sandrob.bouncycastle.crypto.generators.KDF1BytesGenerator:
    21:22:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
org.sandrob.bouncycastle.crypto.generators.KDF2BytesGenerator -> org.sandrob.bouncycastle.crypto.generators.KDF2BytesGenerator:
    22:23:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
org.sandrob.bouncycastle.crypto.generators.MGF1BytesGenerator -> org.sandrob.bouncycastle.crypto.generators.MGF1BytesGenerator:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    byte[] seed -> b
    int hLen -> c
    22:27:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    32:40:void init(org.sandrob.bouncycastle.crypto.DerivationParameters) -> init
    47:47:org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
    57:61:void ItoOSP(int,byte[]) -> a
    75:112:int generateBytes(byte[],int,int) -> generateBytes
org.sandrob.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator:
    int[] smallPrimes -> a
    org.sandrob.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param -> b
    java.math.BigInteger ONE -> c
    19:36:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    45:46:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    55:279:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    287:292:java.math.BigInteger generatePrime(int,int,java.security.SecureRandom) -> a
    309:322:java.util.Vector permuteList(java.util.Vector,java.security.SecureRandom) -> a
    329:342:int getInt(java.security.SecureRandom,int) -> a
    355:362:java.util.Vector findFirstPrimes(int) -> a
org.sandrob.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    20:27:void <init>() -> <init>
    39:40:void init(byte[],byte[]) -> init
    48:75:byte[] generateDerivedKey(int) -> a
    89:93:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    110:115:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    129:129:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.sandrob.bouncycastle.crypto.generators.PKCS12ParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.PKCS12ParametersGenerator:
    int KEY_MATERIAL -> KEY_MATERIAL
    int IV_MATERIAL -> IV_MATERIAL
    int MAC_MATERIAL -> MAC_MATERIAL
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    int u -> b
    int v -> c
    36:49:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    61:72:void adjust(byte[],int,byte[]) -> a
    81:162:byte[] generateDerivedKey(int,int) -> a
    175:179:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    195:202:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    215:219:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.sandrob.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    28:32:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    39:51:byte[] generateDerivedKey() -> a
    65:75:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    92:103:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    117:117:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.sandrob.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator -> org.sandrob.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator:
    org.sandrob.bouncycastle.crypto.Mac hMac -> a
    22:29:void <init>() -> <init>
    39:71:void F(byte[],byte[],int,byte[],byte[],int) -> a
    77:81:void intToOctet(byte[],int) -> a
    86:98:byte[] generateDerivedKey(int) -> a
    111:115:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    131:136:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    149:149:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.sandrob.bouncycastle.crypto.generators.RSABlindingFactorGenerator -> org.sandrob.bouncycastle.crypto.generators.RSABlindingFactorGenerator:
    java.math.BigInteger ZERO -> a
    java.math.BigInteger ONE -> b
    org.sandrob.bouncycastle.crypto.params.RSAKeyParameters key -> c
    java.security.SecureRandom random -> d
    16:19:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    32:49:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    58:75:java.math.BigInteger generateBlindingFactor() -> generateBlindingFactor
org.sandrob.bouncycastle.crypto.generators.RSAKeyPairGenerator -> org.sandrob.bouncycastle.crypto.generators.RSAKeyPairGenerator:
    java.math.BigInteger ONE -> a
    org.sandrob.bouncycastle.crypto.params.RSAKeyGenerationParameters param -> b
    15:18:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    25:26:void init(org.sandrob.bouncycastle.crypto.KeyGenerationParameters) -> init
    35:145:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.crypto.io.DigestInputStream -> org.sandrob.bouncycastle.crypto.io.DigestInputStream:
    org.sandrob.bouncycastle.crypto.Digest digest -> digest
    18:20:void <init>(java.io.InputStream,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    25:31:int read() -> read
    40:45:int read(byte[],int,int) -> read
    50:50:org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
org.sandrob.bouncycastle.crypto.io.DigestOutputStream -> org.sandrob.bouncycastle.crypto.io.DigestOutputStream:
    org.sandrob.bouncycastle.crypto.Digest digest -> digest
    18:20:void <init>(java.io.OutputStream,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    25:27:void write(int) -> write
    35:37:void write(byte[],int,int) -> write
    41:41:org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
org.sandrob.bouncycastle.crypto.io.MacInputStream -> org.sandrob.bouncycastle.crypto.io.MacInputStream:
    org.sandrob.bouncycastle.crypto.Mac mac -> mac
    18:20:void <init>(java.io.InputStream,org.sandrob.bouncycastle.crypto.Mac) -> <init>
    25:31:int read() -> read
    40:45:int read(byte[],int,int) -> read
    50:50:org.sandrob.bouncycastle.crypto.Mac getMac() -> getMac
org.sandrob.bouncycastle.crypto.io.MacOutputStream -> org.sandrob.bouncycastle.crypto.io.MacOutputStream:
    org.sandrob.bouncycastle.crypto.Mac mac -> mac
    18:20:void <init>(java.io.OutputStream,org.sandrob.bouncycastle.crypto.Mac) -> <init>
    25:27:void write(int) -> write
    35:37:void write(byte[],int,int) -> write
    41:41:org.sandrob.bouncycastle.crypto.Mac getMac() -> getMac
org.sandrob.bouncycastle.crypto.io.SignerInputStream -> org.sandrob.bouncycastle.crypto.io.SignerInputStream:
    org.sandrob.bouncycastle.crypto.Signer signer -> signer
    18:20:void <init>(java.io.InputStream,org.sandrob.bouncycastle.crypto.Signer) -> <init>
    25:31:int read() -> read
    40:45:int read(byte[],int,int) -> read
    50:50:org.sandrob.bouncycastle.crypto.Signer getSigner() -> getSigner
org.sandrob.bouncycastle.crypto.io.SignerOutputStream -> org.sandrob.bouncycastle.crypto.io.SignerOutputStream:
    org.sandrob.bouncycastle.crypto.Signer signer -> signer
    18:20:void <init>(java.io.OutputStream,org.sandrob.bouncycastle.crypto.Signer) -> <init>
    25:27:void write(int) -> write
    35:37:void write(byte[],int,int) -> write
    41:41:org.sandrob.bouncycastle.crypto.Signer getSigner() -> getSigner
org.sandrob.bouncycastle.crypto.macs.BlockCipherMac -> org.sandrob.bouncycastle.crypto.macs.BlockCipherMac:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> d
    int macSize -> e
    29:30:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    44:60:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    64:64:java.lang.String getAlgorithmName() -> getAlgorithmName
    70:73:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    77:77:int getMacSize() -> getMacSize
    83:90:void update(byte) -> update
    97:128:void update(byte[],int,int) -> update
    134:151:int doFinal(byte[],int) -> doFinal
    162:173:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.CBCBlockCipherMac -> org.sandrob.bouncycastle.crypto.macs.CBCBlockCipherMac:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> d
    org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding padding -> e
    int macSize -> f
    34:35:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    48:49:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    68:69:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    85:103:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    107:107:java.lang.String getAlgorithmName() -> getAlgorithmName
    113:116:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    120:120:int getMacSize() -> getMacSize
    126:133:void update(byte) -> update
    140:170:void update(byte[],int,int) -> update
    176:206:int doFinal(byte[],int) -> doFinal
    217:228:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.CFBBlockCipherMac -> org.sandrob.bouncycastle.crypto.macs.CFBBlockCipherMac:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.sandrob.bouncycastle.crypto.macs.MacCFBBlockCipher cipher -> d
    org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding padding -> e
    int macSize -> f
    191:192:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    206:207:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    228:229:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int,int) -> <init>
    176:265:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int,int,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    269:269:java.lang.String getAlgorithmName() -> getAlgorithmName
    275:278:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    282:282:int getMacSize() -> getMacSize
    288:295:void update(byte) -> update
    302:333:void update(byte[],int,int) -> update
    339:365:int doFinal(byte[],int) -> doFinal
    376:387:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.CMac -> org.sandrob.bouncycastle.crypto.macs.CMac:
    byte[] ZEROES -> a
    byte[] mac -> b
    byte[] buf -> c
    int bufOff -> d
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> e
    int macSize -> f
    byte[] L -> g
    byte[] Lu -> h
    byte[] Lu2 -> i
    54:55:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    69:99:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    103:103:java.lang.String getAlgorithmName() -> getAlgorithmName
    108:119:byte[] doubleLu(byte[]) -> a
    124:135:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    139:139:int getMacSize() -> getMacSize
    144:151:void update(byte) -> update
    155:186:void update(byte[],int,int) -> update
    190:214:int doFinal(byte[],int) -> doFinal
    225:236:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.GOST28147Mac -> org.sandrob.bouncycastle.crypto.macs.GOST28147Mac:
    int blockSize -> a
    int macSize -> b
    int bufOff -> c
    byte[] buf -> d
    byte[] mac -> e
    boolean firstStep -> f
    int[] workingKey -> g
    byte[] S -> h
    15:42:void <init>() -> <init>
    47:58:int[] generateWorkingKey(byte[]) -> a
    65:92:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    96:96:java.lang.String getAlgorithmName() -> getAlgorithmName
    101:101:int getMacSize() -> getMacSize
    106:119:int gost28147_mainStep(int,int) -> a
    130:145:void gost28147MacFunc(int[],byte[],int,byte[],int) -> a
    152:153:int bytesToint(byte[],int) -> a
    162:166:void intTobytes(int,byte[],int) -> a
    170:179:byte[] CM5func(byte[],int,byte[]) -> a
    185:204:void update(byte) -> update
    209:251:void update(byte[],int,int) -> update
    257:281:int doFinal(byte[],int) -> doFinal
    289:297:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.HMac -> org.sandrob.bouncycastle.crypto.macs.HMac:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    int digestSize -> b
    int blockLength -> c
    byte[] inputPad -> d
    byte[] outputPad -> e
    java.util.Hashtable blockLengths -> f
    16:51:void <clinit>() -> <clinit>
    57:69:int getByteLength(org.sandrob.bouncycastle.crypto.Digest) -> a
    81:82:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    84:95:void <init>(org.sandrob.bouncycastle.crypto.Digest,int) -> <init>
    99:99:java.lang.String getAlgorithmName() -> getAlgorithmName
    104:104:org.sandrob.bouncycastle.crypto.Digest getUnderlyingDigest() -> getUnderlyingDigest
    110:146:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    150:150:int getMacSize() -> getMacSize
    156:157:void update(byte) -> update
    164:165:void update(byte[],int,int) -> update
    171:181:int doFinal(byte[],int) -> doFinal
    192:198:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.ISO9797Alg3Mac -> org.sandrob.bouncycastle.crypto.macs.ISO9797Alg3Mac:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> d
    org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding padding -> e
    int macSize -> f
    org.sandrob.bouncycastle.crypto.params.KeyParameter lastKey2 -> g
    org.sandrob.bouncycastle.crypto.params.KeyParameter lastKey3 -> h
    43:44:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    57:58:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    77:78:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    95:118:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    122:122:java.lang.String getAlgorithmName() -> getAlgorithmName
    127:179:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    183:183:int getMacSize() -> getMacSize
    189:196:void update(byte) -> update
    204:235:void update(byte[],int,int) -> update
    241:281:int doFinal(byte[],int) -> doFinal
    293:304:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.MacCFBBlockCipher -> org.sandrob.bouncycastle.crypto.macs.a:
    byte[] IV -> a
    byte[] cfbV -> b
    byte[] cfbOutV -> c
    int blockSize -> d
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> e
    20:39:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    54:78:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> a
    88:88:java.lang.String getAlgorithmName() -> a
    98:98:int getBlockSize() -> b
    121:147:int processBlock(byte[],int,byte[],int) -> a
    156:159:void reset() -> c
    164:165:void getMacBlock(byte[]) -> a
org.sandrob.bouncycastle.crypto.macs.OldHMac -> org.sandrob.bouncycastle.crypto.macs.OldHMac:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    int digestSize -> b
    byte[] inputPad -> c
    byte[] outputPad -> d
    23:34:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    38:38:java.lang.String getAlgorithmName() -> getAlgorithmName
    43:43:org.sandrob.bouncycastle.crypto.Digest getUnderlyingDigest() -> getUnderlyingDigest
    49:85:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    89:89:int getMacSize() -> getMacSize
    95:96:void update(byte) -> update
    103:104:void update(byte[],int,int) -> update
    110:120:int doFinal(byte[],int) -> doFinal
    131:137:void reset() -> reset
org.sandrob.bouncycastle.crypto.macs.VMPCMac -> org.sandrob.bouncycastle.crypto.macs.VMPCMac:
    byte g -> a
    byte n -> b
    byte[] P -> c
    byte s -> d
    byte[] T -> e
    byte[] workingIV -> f
    byte[] workingKey -> g
    byte x1 -> h
    byte x2 -> i
    byte x3 -> j
    byte x4 -> k
    9:15:void <init>() -> <init>
    28:72:int doFinal(byte[],int) -> doFinal
    77:77:java.lang.String getAlgorithmName() -> getAlgorithmName
    82:82:int getMacSize() -> getMacSize
    87:114:void init(org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    118:139:void initKey(byte[],byte[]) -> a
    143:150:void reset() -> reset
    154:171:void update(byte) -> update
    176:185:void update(byte[],int,int) -> update
org.sandrob.bouncycastle.crypto.modes.AEADBlockCipher -> org.sandrob.bouncycastle.crypto.modes.AEADBlockCipher:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
    byte[] getMac() -> getMac
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int getOutputSize(int) -> getOutputSize
    void reset() -> reset
org.sandrob.bouncycastle.crypto.modes.CBCBlockCipher -> org.sandrob.bouncycastle.crypto.modes.CBCBlockCipher:
    byte[] IV -> a
    byte[] cbcV -> b
    byte[] cbcNextV -> c
    int blockSize -> d
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> e
    boolean encrypting -> f
    20:37:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    46:46:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    64:88:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    97:97:java.lang.String getAlgorithmName() -> getAlgorithmName
    107:107:int getBlockSize() -> getBlockSize
    130:130:int processBlock(byte[],int,byte[],int) -> processBlock
    139:143:void reset() -> reset
    164:185:int encryptBlock(byte[],int,byte[],int) -> a
    207:233:int decryptBlock(byte[],int,byte[],int) -> b
org.sandrob.bouncycastle.crypto.modes.CCMBlockCipher -> org.sandrob.bouncycastle.crypto.modes.CCMBlockCipher:
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> a
    int blockSize -> b
    boolean forEncryption -> c
    byte[] nonce -> d
    byte[] associatedText -> e
    int macSize -> f
    org.sandrob.bouncycastle.crypto.CipherParameters keyParam -> g
    byte[] macBlock -> h
    java.io.ByteArrayOutputStream data -> i
    32:49:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    58:58:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    65:89:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    93:93:java.lang.String getAlgorithmName() -> getAlgorithmName
    99:101:int processByte(byte,byte[],int) -> processByte
    107:109:int processBytes(byte[],int,int,byte[],int) -> processBytes
    115:122:int doFinal(byte[],int) -> doFinal
    127:129:void reset() -> reset
    139:143:byte[] getMac() -> getMac
    148:148:int getUpdateOutputSize(int) -> getUpdateOutputSize
    153:159:int getOutputSize(int) -> getOutputSize
    166:252:byte[] processPacket(byte[],int,int) -> processPacket
    257:331:int calculateMac(byte[],int,int,byte[]) -> a
    336:336:boolean hasAssociatedText() -> a
org.sandrob.bouncycastle.crypto.modes.CFBBlockCipher -> org.sandrob.bouncycastle.crypto.modes.CFBBlockCipher:
    byte[] IV -> a
    byte[] cfbV -> b
    byte[] cfbOutV -> c
    int blockSize -> d
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> e
    boolean encrypting -> f
    19:39:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    48:48:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    67:98:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    108:108:java.lang.String getAlgorithmName() -> getAlgorithmName
    118:118:int getBlockSize() -> getBlockSize
    141:141:int processBlock(byte[],int,byte[],int) -> processBlock
    163:189:int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    211:237:int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    246:249:void reset() -> reset
org.sandrob.bouncycastle.crypto.modes.CTSBlockCipher -> org.sandrob.bouncycastle.crypto.modes.CTSBlockCipher:
    int blockSize -> a
    22:36:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    49:57:int getUpdateOutputSize(int) -> getUpdateOutputSize
    71:71:int getOutputSize(int) -> getOutputSize
    90:102:int processByte(byte,byte[],int) -> processByte
    125:171:int processBytes(byte[],int,int,byte[],int) -> processBytes
    192:263:int doFinal(byte[],int) -> doFinal
org.sandrob.bouncycastle.crypto.modes.EAXBlockCipher -> org.sandrob.bouncycastle.crypto.modes.EAXBlockCipher:
    org.sandrob.bouncycastle.crypto.modes.SICBlockCipher cipher -> a
    boolean forEncryption -> b
    int blockSize -> c
    org.sandrob.bouncycastle.crypto.Mac mac -> d
    byte[] nonceMac -> e
    byte[] associatedTextMac -> f
    byte[] macBlock -> g
    int macSize -> h
    byte[] bufBlock -> i
    int bufOff -> j
    56:65:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    69:69:java.lang.String getAlgorithmName() -> getAlgorithmName
    74:74:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    79:79:int getBlockSize() -> getBlockSize
    85:130:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    134:141:void calculateMac() -> a
    145:146:void reset() -> reset
    151:165:void reset(boolean) -> a
    170:170:int processByte(byte,byte[],int) -> processByte
    176:183:int processBytes(byte[],int,int,byte[],int) -> processBytes
    189:232:int doFinal(byte[],int) -> doFinal
    238:242:byte[] getMac() -> getMac
    247:247:int getUpdateOutputSize(int) -> getUpdateOutputSize
    252:258:int getOutputSize(int) -> getOutputSize
    264:289:int process(byte,byte[],int) -> a
    294:302:boolean verifyMac(byte[],int) -> a
org.sandrob.bouncycastle.crypto.modes.GCMBlockCipher -> org.sandrob.bouncycastle.crypto.modes.GCMBlockCipher:
    byte[] ZEROES -> a
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> b
    org.sandrob.bouncycastle.crypto.modes.gcm.GCMMultiplier multiplier -> c
    boolean forEncryption -> d
    int macSize -> e
    byte[] nonce -> f
    byte[] A -> g
    org.sandrob.bouncycastle.crypto.params.KeyParameter keyParam -> h
    byte[] H -> i
    byte[] initS -> j
    byte[] J0 -> k
    byte[] bufBlock -> l
    byte[] macBlock -> m
    byte[] S -> n
    byte[] counter -> o
    int bufOff -> p
    long totalLength -> q
    19:23:void <clinit>() -> <clinit>
    49:50:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    52:68:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.modes.gcm.GCMMultiplier) -> <init>
    72:72:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    77:77:java.lang.String getAlgorithmName() -> getAlgorithmName
    83:162:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    166:166:byte[] getMac() -> getMac
    171:176:int getOutputSize(int) -> getOutputSize
    181:181:int getUpdateOutputSize(int) -> getUpdateOutputSize
    187:187:int processByte(byte,byte[],int) -> processByte
    193:214:int processBytes(byte[],int,int,byte[],int) -> processBytes
    220:235:int process(byte,byte[],int) -> a
    241:297:int doFinal(byte[],int) -> doFinal
    302:303:void reset() -> reset
    308:324:void reset(boolean) -> a
    329:365:void gCTRBlock(byte[],int,byte[],int) -> a
    369:380:byte[] gHASH(byte[]) -> a
    405:409:void xor(byte[],byte[]) -> a
    413:415:void packLength(long,byte[],int) -> a
org.sandrob.bouncycastle.crypto.modes.GOFBBlockCipher -> org.sandrob.bouncycastle.crypto.modes.GOFBBlockCipher:
    byte[] IV -> d
    byte[] ofbV -> e
    byte[] ofbOutV -> f
    int blockSize -> g
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> h
    boolean firstStep -> a
    int N3 -> b
    int N4 -> c
    21:48:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    57:57:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    76:109:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    119:119:java.lang.String getAlgorithmName() -> getAlgorithmName
    130:130:int getBlockSize() -> getBlockSize
    153:192:int processBlock(byte[],int,byte[],int) -> processBlock
    201:204:void reset() -> reset
    211:212:int bytesToint(byte[],int) -> a
    221:225:void intTobytes(int,byte[],int) -> a
org.sandrob.bouncycastle.crypto.modes.OFBBlockCipher -> org.sandrob.bouncycastle.crypto.modes.OFBBlockCipher:
    byte[] IV -> a
    byte[] ofbV -> b
    byte[] ofbOutV -> c
    int blockSize -> d
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> e
    28:38:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    47:47:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    66:95:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    105:105:java.lang.String getAlgorithmName() -> getAlgorithmName
    116:116:int getBlockSize() -> getBlockSize
    139:166:int processBlock(byte[],int,byte[],int) -> processBlock
    175:178:void reset() -> reset
org.sandrob.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher -> org.sandrob.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher:
    byte[] IV -> a
    byte[] FR -> b
    byte[] FRE -> c
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> d
    int count -> e
    int blockSize -> f
    boolean forEncryption -> g
    34:43:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    52:52:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    63:63:java.lang.String getAlgorithmName() -> getAlgorithmName
    73:73:int getBlockSize() -> getBlockSize
    96:96:int processBlock(byte[],int,byte[],int) -> processBlock
    105:110:void reset() -> reset
    128:133:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    143:143:byte encryptByte(byte,int) -> a
    165:221:int encryptBlock(byte[],int,byte[],int) -> a
    243:310:int decryptBlock(byte[],int,byte[],int) -> b
org.sandrob.bouncycastle.crypto.modes.PGPCFBBlockCipher -> org.sandrob.bouncycastle.crypto.modes.PGPCFBBlockCipher:
    byte[] IV -> a
    byte[] FR -> b
    byte[] FRE -> c
    byte[] tmp -> d
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> e
    int count -> f
    int blockSize -> g
    boolean forEncryption -> h
    boolean inlineIv -> i
    34:46:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,boolean) -> <init>
    55:55:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    66:72:java.lang.String getAlgorithmName() -> getAlgorithmName
    83:83:int getBlockSize() -> getBlockSize
    106:112:int processBlock(byte[],int,byte[],int) -> processBlock
    122:137:void reset() -> reset
    155:186:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    196:196:byte encryptByte(byte,int) -> a
    218:271:int encryptBlockWithIV(byte[],int,byte[],int) -> a
    293:360:int decryptBlockWithIV(byte[],int,byte[],int) -> b
    382:403:int encryptBlock(byte[],int,byte[],int) -> c
    426:447:int decryptBlock(byte[],int,byte[],int) -> d
org.sandrob.bouncycastle.crypto.modes.PaddedBlockCipher -> org.sandrob.bouncycastle.crypto.modes.PaddedBlockCipher:
    25:32:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    45:58:int getOutputSize(int) -> getOutputSize
    72:80:int getUpdateOutputSize(int) -> getUpdateOutputSize
    98:108:int processByte(byte,byte[],int) -> processByte
    130:172:int processBytes(byte[],int,int,byte[],int) -> processBytes
    193:251:int doFinal(byte[],int) -> doFinal
org.sandrob.bouncycastle.crypto.modes.SICBlockCipher -> org.sandrob.bouncycastle.crypto.modes.SICBlockCipher:
    org.sandrob.bouncycastle.crypto.BlockCipher cipher -> a
    int blockSize -> b
    byte[] IV -> c
    byte[] counter -> d
    byte[] counterOut -> e
    27:34:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    44:44:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    53:66:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    70:70:java.lang.String getAlgorithmName() -> getAlgorithmName
    75:75:int getBlockSize() -> getBlockSize
    82:110:int processBlock(byte[],int,byte[],int) -> processBlock
    116:118:void reset() -> reset
org.sandrob.bouncycastle.crypto.modes.gcm.BasicGCMExponentiator -> org.sandrob.bouncycastle.crypto.modes.gcm.BasicGCMExponentiator:
    byte[] x -> a
    5:5:void <init>() -> <init>
    11:12:void init(byte[]) -> init
    17:35:void exponentiateX(long,byte[]) -> exponentiateX
org.sandrob.bouncycastle.crypto.modes.gcm.BasicGCMMultiplier -> org.sandrob.bouncycastle.crypto.modes.gcm.BasicGCMMultiplier:
    byte[] H -> a
    5:5:void <init>() -> <init>
    11:12:void init(byte[]) -> init
    16:17:void multiplyH(byte[]) -> multiplyH
org.sandrob.bouncycastle.crypto.modes.gcm.GCMExponentiator -> org.sandrob.bouncycastle.crypto.modes.gcm.GCMExponentiator:
    void init(byte[]) -> init
    void exponentiateX(long,byte[]) -> exponentiateX
org.sandrob.bouncycastle.crypto.modes.gcm.GCMMultiplier -> org.sandrob.bouncycastle.crypto.modes.gcm.GCMMultiplier:
    void init(byte[]) -> init
    void multiplyH(byte[]) -> multiplyH
org.sandrob.bouncycastle.crypto.modes.gcm.GCMUtil -> org.sandrob.bouncycastle.crypto.modes.gcm.a:
    10:12:byte[] oneAsBytes() -> a
    24:29:int[] asInts(byte[]) -> a
    34:59:void multiply(byte[],byte[]) -> a
    64:72:void multiplyP(int[]) -> a
    76:80:void multiplyP8(int[]) -> b
    84:96:void shiftRight(byte[]) -> b
    100:112:void shiftRight(int[]) -> c
    116:120:void xor(byte[],byte[]) -> b
    124:128:void xor(int[],int[]) -> a
org.sandrob.bouncycastle.crypto.modes.gcm.Tables1kGCMExponentiator -> org.sandrob.bouncycastle.crypto.modes.gcm.Tables1kGCMExponentiator:
    byte[][] lookupPowX2 -> a
    5:8:void <init>() -> <init>
    13:24:void init(byte[]) -> init
    29:43:void exponentiateX(long,byte[]) -> exponentiateX
org.sandrob.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier -> org.sandrob.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier:
    int[][][] M -> a
    5:8:void <init>() -> <init>
    12:50:void init(byte[]) -> init
    59:74:void multiplyH(byte[]) -> multiplyH
org.sandrob.bouncycastle.crypto.modes.gcm.Tables8kGCMMultiplier -> org.sandrob.bouncycastle.crypto.modes.gcm.Tables8kGCMMultiplier:
    int[][][] M -> a
    5:7:void <init>() -> <init>
    11:70:void init(byte[]) -> init
    80:101:void multiplyH(byte[]) -> multiplyH
org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding -> org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding:
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.sandrob.bouncycastle.crypto.paddings.ISO10126d2Padding -> org.sandrob.bouncycastle.crypto.paddings.ISO10126d2Padding:
    java.security.SecureRandom random -> a
    10:10:void <init>() -> <init>
    23:31:void init(java.security.SecureRandom) -> init
    40:40:java.lang.String getPaddingName() -> getPaddingName
    51:61:int addPadding(byte[],int) -> addPadding
    70:77:int padCount(byte[]) -> padCount
org.sandrob.bouncycastle.crypto.paddings.ISO7816d4Padding -> org.sandrob.bouncycastle.crypto.paddings.ISO7816d4Padding:
    11:11:void <init>() -> <init>
    23:23:void init(java.security.SecureRandom) -> init
    32:32:java.lang.String getPaddingName() -> getPaddingName
    43:54:int addPadding(byte[],int) -> addPadding
    63:75:int padCount(byte[]) -> padCount
org.sandrob.bouncycastle.crypto.paddings.PKCS7Padding -> org.sandrob.bouncycastle.crypto.paddings.PKCS7Padding:
    10:10:void <init>() -> <init>
    22:22:void init(java.security.SecureRandom) -> init
    31:31:java.lang.String getPaddingName() -> getPaddingName
    42:50:int addPadding(byte[],int) -> addPadding
    59:74:int padCount(byte[]) -> padCount
org.sandrob.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher -> org.sandrob.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher:
    org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding padding -> a
    28:37:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    47:48:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    64:82:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    95:108:int getOutputSize(int) -> getOutputSize
    122:130:int getUpdateOutputSize(int) -> getUpdateOutputSize
    149:159:int processByte(byte,byte[],int) -> processByte
    182:224:int processBytes(byte[],int,int,byte[],int) -> processBytes
    246:296:int doFinal(byte[],int) -> doFinal
org.sandrob.bouncycastle.crypto.paddings.TBCPadding -> org.sandrob.bouncycastle.crypto.paddings.TBCPadding:
    14:14:void <init>() -> <init>
    26:26:void init(java.security.SecureRandom) -> init
    35:35:java.lang.String getPaddingName() -> getPaddingName
    52:70:int addPadding(byte[],int) -> addPadding
    79:87:int padCount(byte[]) -> padCount
org.sandrob.bouncycastle.crypto.paddings.X923Padding -> org.sandrob.bouncycastle.crypto.paddings.X923Padding:
    java.security.SecureRandom random -> a
    11:14:void <init>() -> <init>
    24:25:void init(java.security.SecureRandom) -> init
    34:34:java.lang.String getPaddingName() -> getPaddingName
    45:62:int addPadding(byte[],int) -> addPadding
    71:78:int padCount(byte[]) -> padCount
org.sandrob.bouncycastle.crypto.paddings.ZeroBytePadding -> org.sandrob.bouncycastle.crypto.paddings.ZeroBytePadding:
    10:10:void <init>() -> <init>
    22:22:void init(java.security.SecureRandom) -> init
    31:31:java.lang.String getPaddingName() -> getPaddingName
    42:50:int addPadding(byte[],int) -> addPadding
    59:71:int padCount(byte[]) -> padCount
org.sandrob.bouncycastle.crypto.params.AEADParameters -> org.sandrob.bouncycastle.crypto.params.AEADParameters:
    byte[] associatedText -> a
    byte[] nonce -> b
    org.sandrob.bouncycastle.crypto.params.KeyParameter key -> c
    int macSize -> d
    21:27:void <init>(org.sandrob.bouncycastle.crypto.params.KeyParameter,int,byte[],byte[]) -> <init>
    31:31:org.sandrob.bouncycastle.crypto.params.KeyParameter getKey() -> getKey
    36:36:int getMacSize() -> getMacSize
    41:41:byte[] getAssociatedText() -> getAssociatedText
    46:46:byte[] getNonce() -> getNonce
org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter -> org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter:
    boolean privateKey -> a
    10:14:void <init>(boolean) -> <init>
    18:18:boolean isPrivate() -> isPrivate
org.sandrob.bouncycastle.crypto.params.CCMParameters -> org.sandrob.bouncycastle.crypto.params.CCMParameters:
    16:17:void <init>(org.sandrob.bouncycastle.crypto.params.KeyParameter,int,byte[],byte[]) -> <init>
org.sandrob.bouncycastle.crypto.params.DESParameters -> org.sandrob.bouncycastle.crypto.params.DESParameters:
    int DES_KEY_LENGTH -> DES_KEY_LENGTH
    byte[] DES_weak_keys -> a
    3:47:void <clinit>() -> <clinit>
    9:15:void <init>(byte[]) -> <init>
    65:82:boolean isWeakKey(byte[],int) -> isWeakKey
    94:106:void setOddParity(byte[]) -> setOddParity
org.sandrob.bouncycastle.crypto.params.DESedeParameters -> org.sandrob.bouncycastle.crypto.params.DESedeParameters:
    int DES_EDE_KEY_LENGTH -> DES_EDE_KEY_LENGTH
    14:20:void <init>(byte[]) -> <init>
    34:42:boolean isWeakKey(byte[],int,int) -> isWeakKey
    55:55:boolean isWeakKey(byte[],int) -> isWeakKey
org.sandrob.bouncycastle.crypto.params.DHKeyGenerationParameters -> org.sandrob.bouncycastle.crypto.params.DHKeyGenerationParameters:
    org.sandrob.bouncycastle.crypto.params.DHParameters params -> a
    16:19:void <init>(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.params.DHParameters) -> <init>
    23:23:org.sandrob.bouncycastle.crypto.params.DHParameters getParameters() -> getParameters
    28:28:int getStrength(org.sandrob.bouncycastle.crypto.params.DHParameters) -> a
org.sandrob.bouncycastle.crypto.params.DHKeyParameters -> org.sandrob.bouncycastle.crypto.params.DHKeyParameters:
    org.sandrob.bouncycastle.crypto.params.DHParameters params -> b
    13:16:void <init>(boolean,org.sandrob.bouncycastle.crypto.params.DHParameters) -> <init>
    20:20:org.sandrob.bouncycastle.crypto.params.DHParameters getParameters() -> getParameters
    26:39:boolean equals(java.lang.Object) -> equals
    45:52:int hashCode() -> hashCode
org.sandrob.bouncycastle.crypto.params.DHParameters -> org.sandrob.bouncycastle.crypto.params.DHParameters:
    java.math.BigInteger g -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    java.math.BigInteger j -> d
    int m -> e
    int l -> f
    org.sandrob.bouncycastle.crypto.params.DHValidationParameters validation -> g
    24:29:int getDefaultMParam(int) -> a
    36:37:void <init>(java.math.BigInteger,java.math.BigInteger) -> <init>
    44:45:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    53:54:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int) -> <init>
    63:64:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int,int) -> <init>
    73:74:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.DHValidationParameters) -> <init>
    76:104:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int,int,java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.DHValidationParameters) -> <init>
    108:108:java.math.BigInteger getP() -> getP
    113:113:java.math.BigInteger getG() -> getG
    118:118:java.math.BigInteger getQ() -> getQ
    128:128:java.math.BigInteger getJ() -> getJ
    138:138:int getM() -> getM
    148:148:int getL() -> getL
    153:153:org.sandrob.bouncycastle.crypto.params.DHValidationParameters getValidationParameters() -> getValidationParameters
    159:181:boolean equals(java.lang.Object) -> equals
    186:186:int hashCode() -> hashCode
org.sandrob.bouncycastle.crypto.params.DHPrivateKeyParameters -> org.sandrob.bouncycastle.crypto.params.DHPrivateKeyParameters:
    java.math.BigInteger x -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.DHParameters) -> <init>
    21:21:java.math.BigInteger getX() -> getX
    26:26:int hashCode() -> hashCode
    32:39:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters -> org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters:
    java.math.BigInteger y -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.DHParameters) -> <init>
    21:21:java.math.BigInteger getY() -> getY
    26:26:int hashCode() -> hashCode
    32:39:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.crypto.params.DHValidationParameters -> org.sandrob.bouncycastle.crypto.params.DHValidationParameters:
    byte[] seed -> a
    int counter -> b
    10:16:void <init>(byte[],int) -> <init>
    20:20:int getCounter() -> getCounter
    25:25:byte[] getSeed() -> getSeed
    31:43:boolean equals(java.lang.Object) -> equals
    48:48:int hashCode() -> hashCode
org.sandrob.bouncycastle.crypto.params.DSAKeyGenerationParameters -> org.sandrob.bouncycastle.crypto.params.DSAKeyGenerationParameters:
    org.sandrob.bouncycastle.crypto.params.DSAParameters params -> a
    16:19:void <init>(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.params.DSAParameters) -> <init>
    23:23:org.sandrob.bouncycastle.crypto.params.DSAParameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.DSAKeyParameters -> org.sandrob.bouncycastle.crypto.params.DSAKeyParameters:
    org.sandrob.bouncycastle.crypto.params.DSAParameters params -> b
    12:15:void <init>(boolean,org.sandrob.bouncycastle.crypto.params.DSAParameters) -> <init>
    19:19:org.sandrob.bouncycastle.crypto.params.DSAParameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.DSAParameters -> org.sandrob.bouncycastle.crypto.params.DSAParameters:
    java.math.BigInteger g -> a
    java.math.BigInteger q -> b
    java.math.BigInteger p -> c
    org.sandrob.bouncycastle.crypto.params.DSAValidationParameters validation -> d
    15:23:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    25:35:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.DSAValidationParameters) -> <init>
    39:39:java.math.BigInteger getP() -> getP
    44:44:java.math.BigInteger getQ() -> getQ
    49:49:java.math.BigInteger getG() -> getG
    54:54:org.sandrob.bouncycastle.crypto.params.DSAValidationParameters getValidationParameters() -> getValidationParameters
    60:67:boolean equals(java.lang.Object) -> equals
    72:72:int hashCode() -> hashCode
org.sandrob.bouncycastle.crypto.params.DSAPrivateKeyParameters -> org.sandrob.bouncycastle.crypto.params.DSAPrivateKeyParameters:
    java.math.BigInteger x -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.DSAParameters) -> <init>
    21:21:java.math.BigInteger getX() -> getX
org.sandrob.bouncycastle.crypto.params.DSAPublicKeyParameters -> org.sandrob.bouncycastle.crypto.params.DSAPublicKeyParameters:
    java.math.BigInteger y -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.DSAParameters) -> <init>
    21:21:java.math.BigInteger getY() -> getY
org.sandrob.bouncycastle.crypto.params.DSAValidationParameters -> org.sandrob.bouncycastle.crypto.params.DSAValidationParameters:
    byte[] seed -> a
    int counter -> b
    10:16:void <init>(byte[],int) -> <init>
    20:20:int getCounter() -> getCounter
    25:25:byte[] getSeed() -> getSeed
    30:30:int hashCode() -> hashCode
    36:48:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.crypto.params.ECDomainParameters -> org.sandrob.bouncycastle.crypto.params.ECDomainParameters:
    org.sandrob.bouncycastle.math.ec.ECCurve curve -> a
    byte[] seed -> b
    org.sandrob.bouncycastle.math.ec.ECPoint G -> c
    java.math.BigInteger n -> d
    java.math.BigInteger h -> e
    18:28:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> <init>
    30:41:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger) -> <init>
    43:55:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[]) -> <init>
    59:59:org.sandrob.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    64:64:org.sandrob.bouncycastle.math.ec.ECPoint getG() -> getG
    69:69:java.math.BigInteger getN() -> getN
    74:74:java.math.BigInteger getH() -> getH
    79:79:byte[] getSeed() -> getSeed
org.sandrob.bouncycastle.crypto.params.ECKeyGenerationParameters -> org.sandrob.bouncycastle.crypto.params.ECKeyGenerationParameters:
    org.sandrob.bouncycastle.crypto.params.ECDomainParameters domainParams -> a
    16:19:void <init>(org.sandrob.bouncycastle.crypto.params.ECDomainParameters,java.security.SecureRandom) -> <init>
    23:23:org.sandrob.bouncycastle.crypto.params.ECDomainParameters getDomainParameters() -> getDomainParameters
org.sandrob.bouncycastle.crypto.params.ECKeyParameters -> org.sandrob.bouncycastle.crypto.params.ECKeyParameters:
    org.sandrob.bouncycastle.crypto.params.ECDomainParameters params -> b
    12:15:void <init>(boolean,org.sandrob.bouncycastle.crypto.params.ECDomainParameters) -> <init>
    19:19:org.sandrob.bouncycastle.crypto.params.ECDomainParameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters -> org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters:
    java.math.BigInteger d -> c
    14:16:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.ECDomainParameters) -> <init>
    20:20:java.math.BigInteger getD() -> getD
org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters -> org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters:
    org.sandrob.bouncycastle.math.ec.ECPoint Q -> c
    14:16:void <init>(org.sandrob.bouncycastle.math.ec.ECPoint,org.sandrob.bouncycastle.crypto.params.ECDomainParameters) -> <init>
    20:20:org.sandrob.bouncycastle.math.ec.ECPoint getQ() -> getQ
org.sandrob.bouncycastle.crypto.params.ElGamalKeyGenerationParameters -> org.sandrob.bouncycastle.crypto.params.ElGamalKeyGenerationParameters:
    org.sandrob.bouncycastle.crypto.params.ElGamalParameters params -> a
    16:19:void <init>(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.params.ElGamalParameters) -> <init>
    23:23:org.sandrob.bouncycastle.crypto.params.ElGamalParameters getParameters() -> getParameters
    28:28:int getStrength(org.sandrob.bouncycastle.crypto.params.ElGamalParameters) -> a
org.sandrob.bouncycastle.crypto.params.ElGamalKeyParameters -> org.sandrob.bouncycastle.crypto.params.ElGamalKeyParameters:
    org.sandrob.bouncycastle.crypto.params.ElGamalParameters params -> b
    13:16:void <init>(boolean,org.sandrob.bouncycastle.crypto.params.ElGamalParameters) -> <init>
    20:20:org.sandrob.bouncycastle.crypto.params.ElGamalParameters getParameters() -> getParameters
    25:25:int hashCode() -> hashCode
    31:44:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.crypto.params.ElGamalParameters -> org.sandrob.bouncycastle.crypto.params.ElGamalParameters:
    java.math.BigInteger g -> a
    java.math.BigInteger p -> b
    int l -> c
    18:19:void <init>(java.math.BigInteger,java.math.BigInteger) -> <init>
    21:29:void <init>(java.math.BigInteger,java.math.BigInteger,int) -> <init>
    33:33:java.math.BigInteger getP() -> getP
    41:41:java.math.BigInteger getG() -> getG
    49:49:int getL() -> getL
    55:62:boolean equals(java.lang.Object) -> equals
    67:67:int hashCode() -> hashCode
org.sandrob.bouncycastle.crypto.params.ElGamalPrivateKeyParameters -> org.sandrob.bouncycastle.crypto.params.ElGamalPrivateKeyParameters:
    java.math.BigInteger x -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.ElGamalParameters) -> <init>
    21:21:java.math.BigInteger getX() -> getX
    27:39:boolean equals(java.lang.Object) -> equals
    44:44:int hashCode() -> hashCode
org.sandrob.bouncycastle.crypto.params.ElGamalPublicKeyParameters -> org.sandrob.bouncycastle.crypto.params.ElGamalPublicKeyParameters:
    java.math.BigInteger y -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.ElGamalParameters) -> <init>
    21:21:java.math.BigInteger getY() -> getY
    26:26:int hashCode() -> hashCode
    32:39:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.crypto.params.GOST3410KeyGenerationParameters -> org.sandrob.bouncycastle.crypto.params.GOST3410KeyGenerationParameters:
    org.sandrob.bouncycastle.crypto.params.GOST3410Parameters params -> a
    16:19:void <init>(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.params.GOST3410Parameters) -> <init>
    23:23:org.sandrob.bouncycastle.crypto.params.GOST3410Parameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.GOST3410KeyParameters -> org.sandrob.bouncycastle.crypto.params.GOST3410KeyParameters:
    org.sandrob.bouncycastle.crypto.params.GOST3410Parameters params -> b
    12:15:void <init>(boolean,org.sandrob.bouncycastle.crypto.params.GOST3410Parameters) -> <init>
    19:19:org.sandrob.bouncycastle.crypto.params.GOST3410Parameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.GOST3410Parameters -> org.sandrob.bouncycastle.crypto.params.GOST3410Parameters:
    java.math.BigInteger p -> a
    java.math.BigInteger q -> b
    java.math.BigInteger a -> c
    org.sandrob.bouncycastle.crypto.params.GOST3410ValidationParameters validation -> d
    15:23:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    25:35:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.GOST3410ValidationParameters) -> <init>
    39:39:java.math.BigInteger getP() -> getP
    44:44:java.math.BigInteger getQ() -> getQ
    49:49:java.math.BigInteger getA() -> getA
    54:54:org.sandrob.bouncycastle.crypto.params.GOST3410ValidationParameters getValidationParameters() -> getValidationParameters
    59:59:int hashCode() -> hashCode
    65:72:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.crypto.params.GOST3410PrivateKeyParameters -> org.sandrob.bouncycastle.crypto.params.GOST3410PrivateKeyParameters:
    java.math.BigInteger x -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.GOST3410Parameters) -> <init>
    21:21:java.math.BigInteger getX() -> getX
org.sandrob.bouncycastle.crypto.params.GOST3410PublicKeyParameters -> org.sandrob.bouncycastle.crypto.params.GOST3410PublicKeyParameters:
    java.math.BigInteger y -> b
    14:17:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.crypto.params.GOST3410Parameters) -> <init>
    21:21:java.math.BigInteger getY() -> getY
org.sandrob.bouncycastle.crypto.params.GOST3410ValidationParameters -> org.sandrob.bouncycastle.crypto.params.GOST3410ValidationParameters:
    int x0 -> a
    int c -> b
    long x0L -> c
    long cL -> d
    11:17:void <init>(int,int) -> <init>
    19:25:void <init>(long,long) -> <init>
    29:29:int getC() -> getC
    34:34:int getX0() -> getX0
    39:39:long getCL() -> getCL
    44:44:long getX0L() -> getX0L
    50:77:boolean equals(java.lang.Object) -> equals
    82:82:int hashCode() -> hashCode
org.sandrob.bouncycastle.crypto.params.IESParameters -> org.sandrob.bouncycastle.crypto.params.IESParameters:
    byte[] derivation -> a
    byte[] encoding -> b
    int macKeySize -> c
    20:28:void <init>(byte[],byte[],int) -> <init>
    32:32:byte[] getDerivationV() -> getDerivationV
    37:37:byte[] getEncodingV() -> getEncodingV
    42:42:int getMacKeySize() -> getMacKeySize
org.sandrob.bouncycastle.crypto.params.IESWithCipherParameters -> org.sandrob.bouncycastle.crypto.params.IESWithCipherParameters:
    int cipherKeySize -> a
    21:24:void <init>(byte[],byte[],int,int) -> <init>
    28:28:int getCipherKeySize() -> getCipherKeySize
org.sandrob.bouncycastle.crypto.params.ISO18033KDFParameters -> org.sandrob.bouncycastle.crypto.params.ISO18033KDFParameters:
    byte[] seed -> a
    13:17:void <init>(byte[]) -> <init>
    21:21:byte[] getSeed() -> getSeed
org.sandrob.bouncycastle.crypto.params.KDFParameters -> org.sandrob.bouncycastle.crypto.params.KDFParameters:
    byte[] iv -> a
    byte[] shared -> b
    14:20:void <init>(byte[],byte[]) -> <init>
    24:24:byte[] getSharedSecret() -> getSharedSecret
    29:29:byte[] getIV() -> getIV
org.sandrob.bouncycastle.crypto.params.KeyParameter -> org.sandrob.bouncycastle.crypto.params.KeyParameter:
    byte[] key -> a
    13:14:void <init>(byte[]) -> <init>
    16:24:void <init>(byte[],int,int) -> <init>
    28:28:byte[] getKey() -> getKey
org.sandrob.bouncycastle.crypto.params.MGFParameters -> org.sandrob.bouncycastle.crypto.params.MGFParameters:
    byte[] seed -> a
    16:17:void <init>(byte[]) -> <init>
    19:26:void <init>(byte[],int,int) -> <init>
    30:30:byte[] getSeed() -> getSeed
org.sandrob.bouncycastle.crypto.params.MQVPrivateParameters -> org.sandrob.bouncycastle.crypto.params.MQVPrivateParameters:
    org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters staticPrivateKey -> a
    org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters ephemeralPrivateKey -> b
    org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters ephemeralPublicKey -> c
    16:17:void <init>(org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters) -> <init>
    19:27:void <init>(org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters) -> <init>
    31:31:org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters getStaticPrivateKey() -> getStaticPrivateKey
    36:36:org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters getEphemeralPrivateKey() -> getEphemeralPrivateKey
    41:41:org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey() -> getEphemeralPublicKey
org.sandrob.bouncycastle.crypto.params.MQVPublicParameters -> org.sandrob.bouncycastle.crypto.params.MQVPublicParameters:
    org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters staticPublicKey -> a
    org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters ephemeralPublicKey -> b
    11:17:void <init>(org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters) -> <init>
    21:21:org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters getStaticPublicKey() -> getStaticPublicKey
    26:26:org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey() -> getEphemeralPublicKey
org.sandrob.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters -> org.sandrob.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters:
    int certainty -> a
    int cntSmallPrimes -> b
    boolean debug -> c
    38:39:void <init>(java.security.SecureRandom,int,int,int) -> <init>
    21:74:void <init>(java.security.SecureRandom,int,int,int,boolean) -> <init>
    81:81:int getCertainty() -> getCertainty
    89:89:int getCntSmallPrimes() -> getCntSmallPrimes
    94:94:boolean isDebug() -> isDebug
org.sandrob.bouncycastle.crypto.params.NaccacheSternKeyParameters -> org.sandrob.bouncycastle.crypto.params.NaccacheSternKeyParameters:
    java.math.BigInteger g -> c
    java.math.BigInteger n -> d
    int lowerSigmaBound -> b
    23:27:void <init>(boolean,java.math.BigInteger,java.math.BigInteger,int) -> <init>
    34:34:java.math.BigInteger getG() -> getG
    42:42:int getLowerSigmaBound() -> getLowerSigmaBound
    50:50:java.math.BigInteger getModulus() -> getModulus
org.sandrob.bouncycastle.crypto.params.NaccacheSternPrivateKeyParameters -> org.sandrob.bouncycastle.crypto.params.NaccacheSternPrivateKeyParameters:
    java.math.BigInteger phi_n -> c
    java.util.Vector smallPrimes -> d
    36:39:void <init>(java.math.BigInteger,java.math.BigInteger,int,java.util.Vector,java.math.BigInteger) -> <init>
    43:43:java.math.BigInteger getPhi_n() -> getPhi_n
    48:48:java.util.Vector getSmallPrimes() -> getSmallPrimes
org.sandrob.bouncycastle.crypto.params.ParametersWithIV -> org.sandrob.bouncycastle.crypto.params.ParametersWithIV:
    byte[] iv -> a
    org.sandrob.bouncycastle.crypto.CipherParameters parameters -> b
    15:16:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters,byte[]) -> <init>
    18:28:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters,byte[],int,int) -> <init>
    32:32:byte[] getIV() -> getIV
    37:37:org.sandrob.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.ParametersWithRandom -> org.sandrob.bouncycastle.crypto.params.ParametersWithRandom:
    java.security.SecureRandom random -> a
    org.sandrob.bouncycastle.crypto.CipherParameters parameters -> b
    13:19:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters,java.security.SecureRandom) -> <init>
    24:25:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters) -> <init>
    29:29:java.security.SecureRandom getRandom() -> getRandom
    34:34:org.sandrob.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.ParametersWithSBox -> org.sandrob.bouncycastle.crypto.params.ParametersWithSBox:
    org.sandrob.bouncycastle.crypto.CipherParameters parameters -> a
    byte[] sBox -> b
    11:17:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters,byte[]) -> <init>
    21:21:byte[] getSBox() -> getSBox
    26:26:org.sandrob.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.ParametersWithSalt -> org.sandrob.bouncycastle.crypto.params.ParametersWithSalt:
    byte[] salt -> a
    org.sandrob.bouncycastle.crypto.CipherParameters parameters -> b
    18:19:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters,byte[]) -> <init>
    21:31:void <init>(org.sandrob.bouncycastle.crypto.CipherParameters,byte[],int,int) -> <init>
    35:35:byte[] getSalt() -> getSalt
    40:40:org.sandrob.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.sandrob.bouncycastle.crypto.params.RC2Parameters -> org.sandrob.bouncycastle.crypto.params.RC2Parameters:
    byte[] key -> a
    int bits -> b
    14:15:void <init>(byte[]) -> <init>
    17:25:void <init>(byte[],int) -> <init>
    29:29:byte[] getKey() -> getKey
    34:34:int getEffectiveKeyBits() -> getEffectiveKeyBits
org.sandrob.bouncycastle.crypto.params.RC5Parameters -> org.sandrob.bouncycastle.crypto.params.RC5Parameters:
    byte[] key -> a
    int rounds -> b
    11:24:void <init>(byte[],int) -> <init>
    28:28:byte[] getKey() -> getKey
    33:33:int getRounds() -> getRounds
org.sandrob.bouncycastle.crypto.params.RSABlindingParameters -> org.sandrob.bouncycastle.crypto.params.RSABlindingParameters:
    org.sandrob.bouncycastle.crypto.params.RSAKeyParameters publicKey -> a
    java.math.BigInteger blindingFactor -> b
    13:24:void <init>(org.sandrob.bouncycastle.crypto.params.RSAKeyParameters,java.math.BigInteger) -> <init>
    28:28:org.sandrob.bouncycastle.crypto.params.RSAKeyParameters getPublicKey() -> getPublicKey
    33:33:java.math.BigInteger getBlindingFactor() -> getBlindingFactor
org.sandrob.bouncycastle.crypto.params.RSAKeyGenerationParameters -> org.sandrob.bouncycastle.crypto.params.RSAKeyGenerationParameters:
    java.math.BigInteger publicExponent -> a
    int certainty -> b
    20:37:void <init>(java.math.BigInteger,java.security.SecureRandom,int,int) -> <init>
    41:41:java.math.BigInteger getPublicExponent() -> getPublicExponent
    46:46:int getCertainty() -> getCertainty
org.sandrob.bouncycastle.crypto.params.RSAKeyParameters -> org.sandrob.bouncycastle.crypto.params.RSAKeyParameters:
    java.math.BigInteger modulus -> b
    java.math.BigInteger exponent -> c
    16:20:void <init>(boolean,java.math.BigInteger,java.math.BigInteger) -> <init>
    24:24:java.math.BigInteger getModulus() -> getModulus
    29:29:java.math.BigInteger getExponent() -> getExponent
org.sandrob.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters -> org.sandrob.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters:
    java.math.BigInteger e -> b
    java.math.BigInteger p -> c
    java.math.BigInteger q -> d
    java.math.BigInteger dP -> e
    java.math.BigInteger dQ -> f
    java.math.BigInteger qInv -> g
    28:36:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    40:40:java.math.BigInteger getPublicExponent() -> getPublicExponent
    45:45:java.math.BigInteger getP() -> getP
    50:50:java.math.BigInteger getQ() -> getQ
    55:55:java.math.BigInteger getDP() -> getDP
    60:60:java.math.BigInteger getDQ() -> getDQ
    65:65:java.math.BigInteger getQInv() -> getQInv
org.sandrob.bouncycastle.crypto.prng.DigestRandomGenerator -> org.sandrob.bouncycastle.crypto.prng.DigestRandomGenerator:
    long CYCLE_COUNT -> a
    long stateCounter -> b
    long seedCounter -> c
    org.sandrob.bouncycastle.crypto.Digest digest -> d
    byte[] state -> e
    byte[] seed -> f
    12:15:void <clinit>() -> <clinit>
    24:34:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    38:44:void addSeedMaterial(byte[]) -> addSeedMaterial
    48:55:void addSeedMaterial(long) -> addSeedMaterial
    59:60:void nextBytes(byte[]) -> nextBytes
    64:81:void nextBytes(byte[],int,int) -> nextBytes
    85:89:void cycleSeed() -> a
    93:103:void generateState() -> b
    107:112:void digestAddCounter(long) -> a
    116:117:void digestUpdate(byte[]) -> a
    121:122:void digestDoFinal(byte[]) -> b
org.sandrob.bouncycastle.crypto.prng.RandomGenerator -> org.sandrob.bouncycastle.crypto.prng.RandomGenerator:
    void addSeedMaterial(byte[]) -> addSeedMaterial
    void addSeedMaterial(long) -> addSeedMaterial
    void nextBytes(byte[]) -> nextBytes
    void nextBytes(byte[],int,int) -> nextBytes
org.sandrob.bouncycastle.crypto.prng.ReversedWindowGenerator -> org.sandrob.bouncycastle.crypto.prng.ReversedWindowGenerator:
    org.sandrob.bouncycastle.crypto.prng.RandomGenerator generator -> a
    byte[] window -> b
    int windowCount -> c
    18:33:void <init>(org.sandrob.bouncycastle.crypto.prng.RandomGenerator,int) -> <init>
    43:48:void addSeedMaterial(byte[]) -> addSeedMaterial
    58:63:void addSeedMaterial(long) -> addSeedMaterial
    73:74:void nextBytes(byte[]) -> nextBytes
    88:89:void nextBytes(byte[],int,int) -> nextBytes
    96:110:void doNextBytes(byte[],int,int) -> a
org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator -> org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator:
    9:9:void <init>() -> <init>
    91:93:byte[] generateSeed(int,boolean) -> generateSeed
org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator -> org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator$a:
    int counter -> b
    boolean stop -> c
    org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator this$0 -> a
    11:15:void <init>(org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator) -> <init>
    19:24:void run() -> run
    30:72:byte[] generateSeed(int,boolean) -> a
    11:11:void <init>(org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator,org.sandrob.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator) -> <init>
org.sandrob.bouncycastle.crypto.prng.VMPCRandomGenerator -> org.sandrob.bouncycastle.crypto.prng.VMPCRandomGenerator:
    byte n -> a
    byte[] P -> b
    byte s -> c
    5:85:void <init>() -> <init>
    89:97:void addSeedMaterial(byte[]) -> addSeedMaterial
    101:107:void addSeedMaterial(long) -> addSeedMaterial
    111:112:void nextBytes(byte[]) -> nextBytes
    116:129:void nextBytes(byte[],int,int) -> nextBytes
org.sandrob.bouncycastle.crypto.signers.DSADigestSigner -> org.sandrob.bouncycastle.crypto.signers.DSADigestSigner:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    org.sandrob.bouncycastle.crypto.DSA dsaSigner -> b
    boolean forSigning -> c
    25:31:void <init>(org.sandrob.bouncycastle.crypto.DSA,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    37:63:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    71:72:void update(byte) -> update
    82:83:void update(byte[],int,int) -> update
    91:101:byte[] generateSignature() -> generateSignature
    107:122:boolean verifySignature(byte[]) -> verifySignature
    128:129:void reset() -> reset
    135:139:byte[] derEncode(java.math.BigInteger,java.math.BigInteger) -> a
    146:151:java.math.BigInteger[] derDecode(byte[]) -> a
org.sandrob.bouncycastle.crypto.signers.DSASigner -> org.sandrob.bouncycastle.crypto.signers.DSASigner:
    org.sandrob.bouncycastle.crypto.params.DSAKeyParameters key -> a
    java.security.SecureRandom random -> b
    18:18:void <init>() -> <init>
    29:48:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    60:83:java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    96:120:boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
    125:135:java.math.BigInteger calculateE(java.math.BigInteger,byte[]) -> a
org.sandrob.bouncycastle.crypto.signers.ECDSASigner -> org.sandrob.bouncycastle.crypto.signers.ECDSASigner:
    org.sandrob.bouncycastle.crypto.params.ECKeyParameters key -> a
    java.security.SecureRandom random -> b
    19:19:void <init>() -> <init>
    30:49:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    62:101:java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    115:142:boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
    147:161:java.math.BigInteger calculateE(java.math.BigInteger,byte[]) -> a
org.sandrob.bouncycastle.crypto.signers.ECGOST3410Signer -> org.sandrob.bouncycastle.crypto.signers.ECGOST3410Signer:
    org.sandrob.bouncycastle.crypto.params.ECKeyParameters key -> a
    java.security.SecureRandom random -> b
    19:19:void <init>() -> <init>
    30:49:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    61:104:java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    117:150:boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
org.sandrob.bouncycastle.crypto.signers.ECNRSigner -> org.sandrob.bouncycastle.crypto.signers.ECNRSigner:
    boolean forSigning -> a
    org.sandrob.bouncycastle.crypto.params.ECKeyParameters key -> b
    java.security.SecureRandom random -> c
    23:23:void <init>() -> <init>
    34:55:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    70:119:java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    141:180:boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
org.sandrob.bouncycastle.crypto.signers.GOST3410Signer -> org.sandrob.bouncycastle.crypto.signers.GOST3410Signer:
    org.sandrob.bouncycastle.crypto.params.GOST3410KeyParameters key -> a
    java.security.SecureRandom random -> b
    13:13:void <init>() -> <init>
    24:43:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    55:82:java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    95:125:boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
org.sandrob.bouncycastle.crypto.signers.GenericSigner -> org.sandrob.bouncycastle.crypto.signers.GenericSigner:
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher engine -> a
    org.sandrob.bouncycastle.crypto.Digest digest -> b
    boolean forSigning -> c
    20:26:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    40:65:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    73:74:void update(byte) -> update
    84:85:void update(byte[],int,int) -> update
    94:102:byte[] generateSignature() -> generateSignature
    112:128:boolean verifySignature(byte[]) -> verifySignature
    134:135:void reset() -> reset
org.sandrob.bouncycastle.crypto.signers.ISO9796d2PSSSigner -> org.sandrob.bouncycastle.crypto.signers.ISO9796d2PSSSigner:
    int TRAILER_IMPLICIT -> TRAILER_IMPLICIT
    int TRAILER_RIPEMD160 -> TRAILER_RIPEMD160
    int TRAILER_RIPEMD128 -> TRAILER_RIPEMD128
    int TRAILER_SHA1 -> TRAILER_SHA1
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher cipher -> b
    java.security.SecureRandom random -> c
    byte[] standardSalt -> d
    int hLen -> e
    int trailer -> f
    int keyBits -> g
    byte[] block -> h
    byte[] mBuf -> i
    int messageLength -> j
    int saltLength -> k
    boolean fullMessage -> l
    byte[] recoveredMessage -> m
    57:91:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,int,boolean) -> <init>
    105:106:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,int) -> <init>
    124:173:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    182:197:boolean isSameAs(byte[],byte[]) -> a
    206:210:void clearBlock(byte[]) -> a
    215:215:void updateWithRecoveredMessage(byte[]) -> updateWithRecoveredMessage
    224:232:void update(byte) -> update
    242:253:void update(byte[],int,int) -> update
    260:272:void reset() -> reset
    281:353:byte[] generateSignature() -> generateSignature
    367:525:boolean verifySignature(byte[]) -> verifySignature
    536:536:boolean hasFullMessage() -> hasFullMessage
    547:547:byte[] getRecoveredMessage() -> getRecoveredMessage
    557:561:void ItoOSP(int,byte[]) -> a
    570:578:void LtoOSP(long,byte[]) -> a
    588:619:byte[] maskGeneratorFunction1(byte[],int,int,int) -> a
org.sandrob.bouncycastle.crypto.signers.ISO9796d2Signer -> org.sandrob.bouncycastle.crypto.signers.ISO9796d2Signer:
    int TRAILER_IMPLICIT -> TRAILER_IMPLICIT
    int TRAILER_RIPEMD160 -> TRAILER_RIPEMD160
    int TRAILER_RIPEMD128 -> TRAILER_RIPEMD128
    int TRAILER_SHA1 -> TRAILER_SHA1
    int TRAILER_SHA256 -> TRAILER_SHA256
    int TRAILER_SHA512 -> TRAILER_SHA512
    int TRAILER_SHA384 -> TRAILER_SHA384
    int TRAILER_WHIRLPOOL -> TRAILER_WHIRLPOOL
    java.util.Hashtable trailerMap -> a
    org.sandrob.bouncycastle.crypto.Digest digest -> b
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher cipher -> c
    int trailer -> d
    int keyBits -> e
    byte[] block -> f
    byte[] mBuf -> g
    int messageLength -> h
    boolean fullMessage -> i
    byte[] recoveredMessage -> j
    byte[] preSig -> k
    byte[] preBlock -> l
    17:41:void <clinit>() -> <clinit>
    66:91:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,boolean) -> <init>
    103:104:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    110:128:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    137:170:boolean isSameAs(byte[],byte[]) -> a
    179:183:void clearBlock(byte[]) -> a
    188:274:void updateWithRecoveredMessage(byte[]) -> updateWithRecoveredMessage
    282:290:void update(byte) -> update
    300:311:void update(byte[],int,int) -> update
    318:329:void reset() -> reset
    338:400:byte[] generateSignature() -> generateSignature
    410:582:boolean verifySignature(byte[]) -> verifySignature
    587:590:boolean returnFalse(byte[]) -> b
    601:601:boolean hasFullMessage() -> hasFullMessage
    612:612:byte[] getRecoveredMessage() -> getRecoveredMessage
org.sandrob.bouncycastle.crypto.signers.PSSSigner -> org.sandrob.bouncycastle.crypto.signers.PSSSigner:
    byte TRAILER_IMPLICIT -> TRAILER_IMPLICIT
    org.sandrob.bouncycastle.crypto.Digest contentDigest -> a
    org.sandrob.bouncycastle.crypto.Digest mgfDigest -> b
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher cipher -> c
    java.security.SecureRandom random -> d
    int hLen -> e
    int mgfhLen -> f
    int sLen -> g
    int emBits -> h
    byte[] salt -> i
    byte[] mDash -> j
    byte[] block -> k
    byte trailer -> l
    52:53:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,int) -> <init>
    61:62:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.Digest,int) -> <init>
    70:71:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,int,byte) -> <init>
    73:89:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.Digest,int,byte) -> <init>
    97:136:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    144:148:void clearBlock(byte[]) -> a
    156:157:void update(byte) -> update
    167:168:void update(byte[],int,int) -> update
    175:176:void reset() -> reset
    185:219:byte[] generateSignature() -> generateSignature
    229:290:boolean verifySignature(byte[]) -> verifySignature
    300:304:void ItoOSP(int,byte[]) -> a
    315:346:byte[] maskGeneratorFunction1(byte[],int,int,int) -> a
org.sandrob.bouncycastle.crypto.signers.RSADigestSigner -> org.sandrob.bouncycastle.crypto.signers.RSADigestSigner:
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher rsaEngine -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> b
    org.sandrob.bouncycastle.crypto.Digest digest -> c
    boolean forSigning -> d
    java.util.Hashtable oidMap -> e
    24:51:void <clinit>() -> <clinit>
    27:60:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    67:67:java.lang.String getAlgorithmName() -> getAlgorithmName
    82:107:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> init
    115:116:void update(byte) -> update
    126:127:void update(byte[],int,int) -> update
    136:145:byte[] generateSignature() -> generateSignature
    155:215:boolean verifySignature(byte[]) -> verifySignature
    220:221:void reset() -> reset
    226:228:byte[] derEncode(byte[]) -> a
org.sandrob.bouncycastle.crypto.tls.AlertDescription -> org.sandrob.bouncycastle.crypto.tls.AlertDescription:
    short close_notify -> close_notify
    short unexpected_message -> unexpected_message
    short bad_record_mac -> bad_record_mac
    short decryption_failed -> decryption_failed
    short record_overflow -> record_overflow
    short decompression_failure -> decompression_failure
    short handshake_failure -> handshake_failure
    short bad_certificate -> bad_certificate
    short unsupported_certificate -> unsupported_certificate
    short certificate_revoked -> certificate_revoked
    short certificate_expired -> certificate_expired
    short certificate_unknown -> certificate_unknown
    short illegal_parameter -> illegal_parameter
    short unknown_ca -> unknown_ca
    short access_denied -> access_denied
    short decode_error -> decode_error
    short decrypt_error -> decrypt_error
    short export_restriction -> export_restriction
    short protocol_version -> protocol_version
    short insufficient_security -> insufficient_security
    short internal_error -> internal_error
    short user_canceled -> user_canceled
    short no_renegotiation -> no_renegotiation
    short unsupported_extension -> unsupported_extension
    short certificate_unobtainable -> certificate_unobtainable
    short unrecognized_name -> unrecognized_name
    short bad_certificate_status_response -> bad_certificate_status_response
    short bad_certificate_hash_value -> bad_certificate_hash_value
    short unknown_psk_identity -> unknown_psk_identity
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.AlertLevel -> org.sandrob.bouncycastle.crypto.tls.AlertLevel:
    short warning -> warning
    short fatal -> fatal
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.AlwaysValidVerifyer -> org.sandrob.bouncycastle.crypto.tls.AlwaysValidVerifyer:
    14:14:void <init>() -> <init>
    23:23:boolean isValid(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[]) -> isValid
org.sandrob.bouncycastle.crypto.tls.ByteQueue -> org.sandrob.bouncycastle.crypto.tls.ByteQueue:
    byte[] databuf -> a
    int skipped -> b
    int available -> c
    6:43:void <init>() -> <init>
    17:22:int nextTwoPow(int) -> nextTwoPow
    55:65:void read(byte[],int,int,int) -> read
    77:86:void addData(byte[],int,int) -> addData
    95:114:void removeData(int) -> removeData
    121:121:int size() -> size
org.sandrob.bouncycastle.crypto.tls.Certificate -> org.sandrob.bouncycastle.crypto.tls.Certificate:
    org.sandrob.bouncycastle.crypto.tls.Certificate EMPTY_CHAIN -> EMPTY_CHAIN
    org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[] certs -> certs
    17:19:void <clinit>() -> <clinit>
    36:63:org.sandrob.bouncycastle.crypto.tls.Certificate parse(java.io.InputStream) -> parse
    74:91:void encode(java.io.OutputStream) -> encode
    98:106:void <init>(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[]) -> <init>
    113:115:org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[] getCerts() -> getCerts
    120:120:boolean isEmpty() -> isEmpty
org.sandrob.bouncycastle.crypto.tls.CertificateRequest -> org.sandrob.bouncycastle.crypto.tls.CertificateRequest:
    short[] certificateTypes -> a
    java.util.Vector certificateAuthorities -> b
    10:14:void <init>(short[],java.util.Vector) -> <init>
    18:18:short[] getCertificateTypes() -> getCertificateTypes
    26:26:java.util.Vector getCertificateAuthorities() -> getCertificateAuthorities
org.sandrob.bouncycastle.crypto.tls.CertificateVerifyer -> org.sandrob.bouncycastle.crypto.tls.CertificateVerifyer:
    boolean isValid(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure[]) -> isValid
org.sandrob.bouncycastle.crypto.tls.CipherSuite -> org.sandrob.bouncycastle.crypto.tls.CipherSuite:
    int TLS_NULL_WITH_NULL_NULL -> TLS_NULL_WITH_NULL_NULL
    int TLS_RSA_WITH_NULL_MD5 -> TLS_RSA_WITH_NULL_MD5
    int TLS_RSA_WITH_NULL_SHA -> TLS_RSA_WITH_NULL_SHA
    int TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> TLS_RSA_EXPORT_WITH_RC4_40_MD5
    int TLS_RSA_WITH_RC4_128_MD5 -> TLS_RSA_WITH_RC4_128_MD5
    int TLS_RSA_WITH_RC4_128_SHA -> TLS_RSA_WITH_RC4_128_SHA
    int TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 -> TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5
    int TLS_RSA_WITH_IDEA_CBC_SHA -> TLS_RSA_WITH_IDEA_CBC_SHA
    int TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA
    int TLS_RSA_WITH_DES_CBC_SHA -> TLS_RSA_WITH_DES_CBC_SHA
    int TLS_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DH_DSS_WITH_DES_CBC_SHA -> TLS_DH_DSS_WITH_DES_CBC_SHA
    int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
    int TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DH_RSA_WITH_DES_CBC_SHA -> TLS_DH_RSA_WITH_DES_CBC_SHA
    int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DHE_DSS_WITH_DES_CBC_SHA -> TLS_DHE_DSS_WITH_DES_CBC_SHA
    int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
    int TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DHE_RSA_WITH_DES_CBC_SHA -> TLS_DHE_RSA_WITH_DES_CBC_SHA
    int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> TLS_DH_anon_EXPORT_WITH_RC4_40_MD5
    int TLS_DH_anon_WITH_RC4_128_MD5 -> TLS_DH_anon_WITH_RC4_128_MD5
    int TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DH_anon_WITH_DES_CBC_SHA -> TLS_DH_anon_WITH_DES_CBC_SHA
    int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
    int TLS_RSA_WITH_AES_128_CBC_SHA -> TLS_RSA_WITH_AES_128_CBC_SHA
    int TLS_DH_DSS_WITH_AES_128_CBC_SHA -> TLS_DH_DSS_WITH_AES_128_CBC_SHA
    int TLS_DH_RSA_WITH_AES_128_CBC_SHA -> TLS_DH_RSA_WITH_AES_128_CBC_SHA
    int TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA
    int TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA
    int TLS_DH_anon_WITH_AES_128_CBC_SHA -> TLS_DH_anon_WITH_AES_128_CBC_SHA
    int TLS_RSA_WITH_AES_256_CBC_SHA -> TLS_RSA_WITH_AES_256_CBC_SHA
    int TLS_DH_DSS_WITH_AES_256_CBC_SHA -> TLS_DH_DSS_WITH_AES_256_CBC_SHA
    int TLS_DH_RSA_WITH_AES_256_CBC_SHA -> TLS_DH_RSA_WITH_AES_256_CBC_SHA
    int TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA
    int TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA
    int TLS_DH_anon_WITH_AES_256_CBC_SHA -> TLS_DH_anon_WITH_AES_256_CBC_SHA
    int TLS_PSK_WITH_RC4_128_SHA -> TLS_PSK_WITH_RC4_128_SHA
    int TLS_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_PSK_WITH_3DES_EDE_CBC_SHA
    int TLS_PSK_WITH_AES_128_CBC_SHA -> TLS_PSK_WITH_AES_128_CBC_SHA
    int TLS_PSK_WITH_AES_256_CBC_SHA -> TLS_PSK_WITH_AES_256_CBC_SHA
    int TLS_DHE_PSK_WITH_RC4_128_SHA -> TLS_DHE_PSK_WITH_RC4_128_SHA
    int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA
    int TLS_DHE_PSK_WITH_AES_128_CBC_SHA -> TLS_DHE_PSK_WITH_AES_128_CBC_SHA
    int TLS_DHE_PSK_WITH_AES_256_CBC_SHA -> TLS_DHE_PSK_WITH_AES_256_CBC_SHA
    int TLS_RSA_PSK_WITH_RC4_128_SHA -> TLS_RSA_PSK_WITH_RC4_128_SHA
    int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA
    int TLS_RSA_PSK_WITH_AES_128_CBC_SHA -> TLS_RSA_PSK_WITH_AES_128_CBC_SHA
    int TLS_RSA_PSK_WITH_AES_256_CBC_SHA -> TLS_RSA_PSK_WITH_AES_256_CBC_SHA
    int TLS_ECDH_ECDSA_WITH_NULL_SHA -> TLS_ECDH_ECDSA_WITH_NULL_SHA
    int TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> TLS_ECDH_ECDSA_WITH_RC4_128_SHA
    int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    int TLS_ECDHE_ECDSA_WITH_NULL_SHA -> TLS_ECDHE_ECDSA_WITH_NULL_SHA
    int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
    int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    int TLS_ECDH_RSA_WITH_NULL_SHA -> TLS_ECDH_RSA_WITH_NULL_SHA
    int TLS_ECDH_RSA_WITH_RC4_128_SHA -> TLS_ECDH_RSA_WITH_RC4_128_SHA
    int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
    int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
    int TLS_ECDHE_RSA_WITH_NULL_SHA -> TLS_ECDHE_RSA_WITH_NULL_SHA
    int TLS_ECDHE_RSA_WITH_RC4_128_SHA -> TLS_ECDHE_RSA_WITH_RC4_128_SHA
    int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    int TLS_ECDH_anon_WITH_NULL_SHA -> TLS_ECDH_anon_WITH_NULL_SHA
    int TLS_ECDH_anon_WITH_RC4_128_SHA -> TLS_ECDH_anon_WITH_RC4_128_SHA
    int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> TLS_ECDH_anon_WITH_AES_128_CBC_SHA
    int TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> TLS_ECDH_anon_WITH_AES_256_CBC_SHA
    int TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA -> TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA
    int TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
    int TLS_SRP_SHA_WITH_AES_128_CBC_SHA -> TLS_SRP_SHA_WITH_AES_128_CBC_SHA
    int TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA -> TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
    int TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA -> TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
    int TLS_SRP_SHA_WITH_AES_256_CBC_SHA -> TLS_SRP_SHA_WITH_AES_256_CBC_SHA
    int TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA -> TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
    int TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA -> TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
    int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    int TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.ClientCertificateType -> org.sandrob.bouncycastle.crypto.tls.ClientCertificateType:
    short rsa_sign -> rsa_sign
    short dss_sign -> dss_sign
    short rsa_fixed_dh -> rsa_fixed_dh
    short dss_fixed_dh -> dss_fixed_dh
    short ecdsa_sign -> ecdsa_sign
    short rsa_fixed_ecdh -> rsa_fixed_ecdh
    short ecdsa_fixed_ecdh -> ecdsa_fixed_ecdh
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.CombinedHash -> org.sandrob.bouncycastle.crypto.tls.a:
    org.sandrob.bouncycastle.crypto.digests.MD5Digest md5 -> a
    org.sandrob.bouncycastle.crypto.digests.SHA1Digest sha1 -> b
    15:19:void <init>() -> <init>
    21:25:void <init>(org.sandrob.bouncycastle.crypto.tls.CombinedHash) -> <init>
    32:32:java.lang.String getAlgorithmName() -> getAlgorithmName
    40:40:int getDigestSize() -> getDigestSize
    48:50:void update(byte) -> update
    57:59:void update(byte[],int,int) -> update
    66:68:int doFinal(byte[],int) -> doFinal
    76:78:void reset() -> reset
org.sandrob.bouncycastle.crypto.tls.CompressionMethod -> org.sandrob.bouncycastle.crypto.tls.CompressionMethod:
    short NULL -> NULL
    short DEFLATE -> DEFLATE
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.ContentType -> org.sandrob.bouncycastle.crypto.tls.ContentType:
    short change_cipher_spec -> change_cipher_spec
    short alert -> alert
    short handshake -> handshake
    short application_data -> application_data
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.DefaultTlsAgreementCredentials -> org.sandrob.bouncycastle.crypto.tls.DefaultTlsAgreementCredentials:
    org.sandrob.bouncycastle.crypto.tls.Certificate clientCert -> clientCert
    org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter clientPrivateKey -> clientPrivateKey
    org.sandrob.bouncycastle.crypto.BasicAgreement basicAgreement -> basicAgreement
    20:55:void <init>(org.sandrob.bouncycastle.crypto.tls.Certificate,org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> <init>
    59:59:org.sandrob.bouncycastle.crypto.tls.Certificate getCertificate() -> getCertificate
    64:66:byte[] generateAgreement(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> generateAgreement
org.sandrob.bouncycastle.crypto.tls.DefaultTlsCipherFactory -> org.sandrob.bouncycastle.crypto.tls.DefaultTlsCipherFactory:
    15:15:void <init>() -> <init>
    19:28:org.sandrob.bouncycastle.crypto.tls.TlsCipher createCipher(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int,int) -> createCipher
    34:35:org.sandrob.bouncycastle.crypto.tls.TlsCipher createAESCipher(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int,int) -> createAESCipher
    40:41:org.sandrob.bouncycastle.crypto.tls.TlsCipher createDESedeCipher(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int,int) -> createDESedeCipher
    46:46:org.sandrob.bouncycastle.crypto.BlockCipher createAESBlockCipher() -> createAESBlockCipher
    51:51:org.sandrob.bouncycastle.crypto.BlockCipher createDESedeBlockCipher() -> createDESedeBlockCipher
    56:67:org.sandrob.bouncycastle.crypto.Digest createDigest(int) -> createDigest
org.sandrob.bouncycastle.crypto.tls.DefaultTlsClient -> org.sandrob.bouncycastle.crypto.tls.DefaultTlsClient:
    org.sandrob.bouncycastle.crypto.tls.TlsCipherFactory cipherFactory -> cipherFactory
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> context
    int selectedCipherSuite -> selectedCipherSuite
    int selectedCompressionMethod -> selectedCompressionMethod
    17:18:void <init>() -> <init>
    20:23:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsCipherFactory) -> <init>
    27:28:void init(org.sandrob.bouncycastle.crypto.tls.TlsClientContext) -> init
    32:41:int[] getCipherSuites() -> getCipherSuites
    47:47:java.util.Hashtable getClientExtensions() -> getClientExtensions
    52:52:short[] getCompressionMethods() -> getCompressionMethods
    58:58:void notifySessionID(byte[]) -> notifySessionID
    62:63:void notifySelectedCipherSuite(int) -> notifySelectedCipherSuite
    67:68:void notifySelectedCompressionMethod(short) -> notifySelectedCompressionMethod
    82:82:void notifySecureRenegotiation(boolean) -> notifySecureRenegotiation
    86:86:void processServerExtensions(java.util.Hashtable) -> processServerExtensions
    90:144:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    150:162:org.sandrob.bouncycastle.crypto.tls.TlsCompression getCompression() -> getCompression
    168:210:org.sandrob.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    216:216:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange createDHKeyExchange(int) -> createDHKeyExchange
    221:221:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange createDHEKeyExchange(int) -> createDHEKeyExchange
    226:226:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange createECDHKeyExchange(int) -> createECDHKeyExchange
    231:231:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange createECDHEKeyExchange(int) -> createECDHEKeyExchange
    236:236:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange createRSAKeyExchange() -> createRSAKeyExchange
org.sandrob.bouncycastle.crypto.tls.DefaultTlsSignerCredentials -> org.sandrob.bouncycastle.crypto.tls.DefaultTlsSignerCredentials:
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> context
    org.sandrob.bouncycastle.crypto.tls.Certificate clientCert -> clientCert
    org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter clientPrivateKey -> clientPrivateKey
    org.sandrob.bouncycastle.crypto.tls.TlsSigner clientSigner -> clientSigner
    19:60:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,org.sandrob.bouncycastle.crypto.tls.Certificate,org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> <init>
    64:64:org.sandrob.bouncycastle.crypto.tls.Certificate getCertificate() -> getCertificate
    71:76:byte[] generateCertificateSignature(byte[]) -> generateCertificateSignature
org.sandrob.bouncycastle.crypto.tls.DigestAlgorithm -> org.sandrob.bouncycastle.crypto.tls.DigestAlgorithm:
    int NULL -> NULL
    int MD5 -> MD5
    int SHA -> SHA
    int SHA256 -> SHA256
    int SHA384 -> SHA384
    3:3:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.ECCurveType -> org.sandrob.bouncycastle.crypto.tls.ECCurveType:
    short explicit_prime -> explicit_prime
    short explicit_char2 -> explicit_char2
    short named_curve -> named_curve
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.ECPointFormat -> org.sandrob.bouncycastle.crypto.tls.ECPointFormat:
    short uncompressed -> uncompressed
    short ansiX962_compressed_prime -> ansiX962_compressed_prime
    short ansiX962_compressed_char2 -> ansiX962_compressed_char2
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.EncryptionAlgorithm -> org.sandrob.bouncycastle.crypto.tls.EncryptionAlgorithm:
    int NULL -> NULL
    int RC4_40 -> RC4_40
    int RC4_128 -> RC4_128
    int RC2_CBC_40 -> RC2_CBC_40
    int IDEA_CBC -> IDEA_CBC
    int DES40_CBC -> DES40_CBC
    int DES_CBC -> DES_CBC
    int _3DES_EDE_CBC -> _3DES_EDE_CBC
    int AES_128_CBC -> AES_128_CBC
    int AES_256_CBC -> AES_256_CBC
    int AES_128_GCM -> AES_128_GCM
    int AES_256_GCM -> AES_256_GCM
    3:3:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.ExtensionType -> org.sandrob.bouncycastle.crypto.tls.ExtensionType:
    int server_name -> server_name
    int max_fragment_length -> max_fragment_length
    int client_certificate_url -> client_certificate_url
    int trusted_ca_keys -> trusted_ca_keys
    int truncated_hmac -> truncated_hmac
    int status_request -> status_request
    int elliptic_curves -> elliptic_curves
    int ec_point_formats -> ec_point_formats
    int srp -> srp
    int renegotiation_info -> renegotiation_info
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.HandshakeType -> org.sandrob.bouncycastle.crypto.tls.HandshakeType:
    short hello_request -> hello_request
    short client_hello -> client_hello
    short server_hello -> server_hello
    short certificate -> certificate
    short server_key_exchange -> server_key_exchange
    short certificate_request -> certificate_request
    short server_hello_done -> server_hello_done
    short certificate_verify -> certificate_verify
    short client_key_exchange -> client_key_exchange
    short finished -> finished
    6:6:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.KeyExchangeAlgorithm -> org.sandrob.bouncycastle.crypto.tls.KeyExchangeAlgorithm:
    int NULL -> NULL
    int RSA -> RSA
    int RSA_EXPORT -> RSA_EXPORT
    int DHE_DSS -> DHE_DSS
    int DHE_DSS_EXPORT -> DHE_DSS_EXPORT
    int DHE_RSA -> DHE_RSA
    int DHE_RSA_EXPORT -> DHE_RSA_EXPORT
    int DH_DSS -> DH_DSS
    int DH_DSS_EXPORT -> DH_DSS_EXPORT
    int DH_RSA -> DH_RSA
    int DH_RSA_EXPORT -> DH_RSA_EXPORT
    int DH_anon -> DH_anon
    int DH_anon_EXPORT -> DH_anon_EXPORT
    int PSK -> PSK
    int DHE_PSK -> DHE_PSK
    int RSA_PSK -> RSA_PSK
    int ECDH_ECDSA -> ECDH_ECDSA
    int ECDHE_ECDSA -> ECDHE_ECDSA
    int ECDH_RSA -> ECDH_RSA
    int ECDHE_RSA -> ECDHE_RSA
    int ECDH_anon -> ECDH_anon
    int SRP -> SRP
    int SRP_DSS -> SRP_DSS
    int SRP_RSA -> SRP_RSA
    3:3:void <init>() -> <init>
org.sandrob.bouncycastle.crypto.tls.LegacyTlsAuthentication -> org.sandrob.bouncycastle.crypto.tls.LegacyTlsAuthentication:
    org.sandrob.bouncycastle.crypto.tls.CertificateVerifyer verifyer -> verifyer
    14:17:void <init>(org.sandrob.bouncycastle.crypto.tls.CertificateVerifyer) -> <init>
    21:25:void notifyServerCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> notifyServerCertificate
    30:30:org.sandrob.bouncycastle.crypto.tls.TlsCredentials getClientCredentials(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> getClientCredentials
org.sandrob.bouncycastle.crypto.tls.LegacyTlsClient -> org.sandrob.bouncycastle.crypto.tls.LegacyTlsClient:
    org.sandrob.bouncycastle.crypto.tls.CertificateVerifyer verifyer -> verifyer
    20:23:void <init>(org.sandrob.bouncycastle.crypto.tls.CertificateVerifyer) -> <init>
    27:27:org.sandrob.bouncycastle.crypto.tls.TlsAuthentication getAuthentication() -> getAuthentication
org.sandrob.bouncycastle.crypto.tls.NamedCurve -> org.sandrob.bouncycastle.crypto.tls.NamedCurve:
    int sect163k1 -> sect163k1
    int sect163r1 -> sect163r1
    int sect163r2 -> sect163r2
    int sect193r1 -> sect193r1
    int sect193r2 -> sect193r2
    int sect233k1 -> sect233k1
    int sect233r1 -> sect233r1
    int sect239k1 -> sect239k1
    int sect283k1 -> sect283k1
    int sect283r1 -> sect283r1
    int sect409k1 -> sect409k1
    int sect409r1 -> sect409r1
    int sect571k1 -> sect571k1
    int sect571r1 -> sect571r1
    int secp160k1 -> secp160k1
    int secp160r1 -> secp160r1
    int secp160r2 -> secp160r2
    int secp192k1 -> secp192k1
    int secp192r1 -> secp192r1
    int secp224k1 -> secp224k1
    int secp224r1 -> secp224r1
    int secp256k1 -> secp256k1
    int secp256r1 -> secp256r1
    int secp384r1 -> secp384r1
    int secp521r1 -> secp521r1
    int arbitrary_explicit_prime_curves -> arbitrary_explicit_prime_curves
    int arbitrary_explicit_char2_curves -> arbitrary_explicit_char2_curves
    java.lang.String[] curveNames -> a
    16:76:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    80:98:org.sandrob.bouncycastle.crypto.params.ECDomainParameters getECParameters(int) -> a
org.sandrob.bouncycastle.crypto.tls.RecordStream -> org.sandrob.bouncycastle.crypto.tls.b:
    org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler handler -> a
    java.io.InputStream is -> b
    java.io.OutputStream os -> c
    org.sandrob.bouncycastle.crypto.tls.CombinedHash hash -> d
    org.sandrob.bouncycastle.crypto.tls.TlsCompression readCompression -> e
    org.sandrob.bouncycastle.crypto.tls.TlsCompression writeCompression -> f
    org.sandrob.bouncycastle.crypto.tls.TlsCipher readCipher -> g
    org.sandrob.bouncycastle.crypto.tls.TlsCipher writeCipher -> h
    java.io.ByteArrayOutputStream buffer -> i
    17:33:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler,java.io.InputStream,java.io.OutputStream) -> <init>
    37:39:void clientCipherSpecDecided(org.sandrob.bouncycastle.crypto.tls.TlsCompression,org.sandrob.bouncycastle.crypto.tls.TlsCipher) -> a
    43:45:void serverClientSpecReceived() -> a
    49:54:void readData() -> b
    58:71:byte[] decodeAndVerify(short,java.io.InputStream,int) -> a
    76:103:void writeMessage(short,byte[],int,int) -> a
    107:108:void updateHandshakeData(byte[],int,int) -> a
    112:112:byte[] getCurrentHash() -> c
    117:138:void close() -> d
    142:143:void flush() -> e
    147:149:byte[] getBufferContents() -> f
    154:156:byte[] doFinal(org.sandrob.bouncycastle.crypto.tls.CombinedHash) -> a
org.sandrob.bouncycastle.crypto.tls.SRPTlsClient -> org.sandrob.bouncycastle.crypto.tls.SRPTlsClient:
    java.lang.Integer EXT_SRP -> EXT_SRP
    org.sandrob.bouncycastle.crypto.tls.TlsCipherFactory cipherFactory -> cipherFactory
    byte[] identity -> identity
    byte[] password -> password
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> context
    int selectedCompressionMethod -> selectedCompressionMethod
    int selectedCipherSuite -> selectedCipherSuite
    9:11:void <clinit>() -> <clinit>
    24:25:void <init>(byte[],byte[]) -> <init>
    27:32:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsCipherFactory,byte[],byte[]) -> <init>
    36:37:void init(org.sandrob.bouncycastle.crypto.tls.TlsClientContext) -> init
    41:50:int[] getCipherSuites() -> getCipherSuites
    55:61:java.util.Hashtable getClientExtensions() -> getClientExtensions
    66:66:short[] getCompressionMethods() -> getCompressionMethods
    72:72:void notifySessionID(byte[]) -> notifySessionID
    76:77:void notifySelectedCipherSuite(int) -> notifySelectedCipherSuite
    81:82:void notifySelectedCompressionMethod(short) -> notifySelectedCompressionMethod
    96:96:void notifySecureRenegotiation(boolean) -> notifySecureRenegotiation
    101:101:void processServerExtensions(java.util.Hashtable) -> processServerExtensions
    105:129:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    135:147:org.sandrob.bouncycastle.crypto.tls.TlsCompression getCompression() -> getCompression
    153:180:org.sandrob.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    186:186:org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange createSRPKeyExchange(int) -> createSRPKeyExchange
org.sandrob.bouncycastle.crypto.tls.SecurityParameters -> org.sandrob.bouncycastle.crypto.tls.SecurityParameters:
    byte[] clientRandom -> a
    byte[] serverRandom -> b
    byte[] masterSecret -> c
    3:7:void <init>() -> <init>
    11:11:byte[] getClientRandom() -> getClientRandom
    16:16:byte[] getServerRandom() -> getServerRandom
    21:21:byte[] getMasterSecret() -> getMasterSecret
org.sandrob.bouncycastle.crypto.tls.TlsAgreementCredentials -> org.sandrob.bouncycastle.crypto.tls.TlsAgreementCredentials:
    byte[] generateAgreement(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> generateAgreement
org.sandrob.bouncycastle.crypto.tls.TlsAuthentication -> org.sandrob.bouncycastle.crypto.tls.TlsAuthentication:
    void notifyServerCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> notifyServerCertificate
    org.sandrob.bouncycastle.crypto.tls.TlsCredentials getClientCredentials(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> getClientCredentials
org.sandrob.bouncycastle.crypto.tls.TlsBlockCipher -> org.sandrob.bouncycastle.crypto.tls.TlsBlockCipher:
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> context
    org.sandrob.bouncycastle.crypto.BlockCipher encryptCipher -> encryptCipher
    org.sandrob.bouncycastle.crypto.BlockCipher decryptCipher -> decryptCipher
    org.sandrob.bouncycastle.crypto.tls.TlsMac writeMac -> writeMac
    org.sandrob.bouncycastle.crypto.tls.TlsMac readMac -> readMac
    25:57:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.Digest,int) -> <init>
    62:66:void initCipher(boolean,org.sandrob.bouncycastle.crypto.BlockCipher,byte[],int,int,int) -> initCipher
    70:92:byte[] encodePlaintext(short,byte[],int,int) -> encodePlaintext
    100:192:byte[] decodeCiphertext(short,byte[],int,int) -> decodeCiphertext
    199:201:int chooseExtraPadBlocks(java.security.SecureRandom,int) -> chooseExtraPadBlocks
    206:217:int lowestBitSet(int) -> lowestBitSet
org.sandrob.bouncycastle.crypto.tls.TlsCipher -> org.sandrob.bouncycastle.crypto.tls.TlsCipher:
    byte[] encodePlaintext(short,byte[],int,int) -> encodePlaintext
    byte[] decodeCiphertext(short,byte[],int,int) -> decodeCiphertext
org.sandrob.bouncycastle.crypto.tls.TlsCipherFactory -> org.sandrob.bouncycastle.crypto.tls.TlsCipherFactory:
    org.sandrob.bouncycastle.crypto.tls.TlsCipher createCipher(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int,int) -> createCipher
org.sandrob.bouncycastle.crypto.tls.TlsClient -> org.sandrob.bouncycastle.crypto.tls.TlsClient:
    void init(org.sandrob.bouncycastle.crypto.tls.TlsClientContext) -> init
    int[] getCipherSuites() -> getCipherSuites
    short[] getCompressionMethods() -> getCompressionMethods
    java.util.Hashtable getClientExtensions() -> getClientExtensions
    void notifySessionID(byte[]) -> notifySessionID
    void notifySelectedCipherSuite(int) -> notifySelectedCipherSuite
    void notifySelectedCompressionMethod(short) -> notifySelectedCompressionMethod
    void notifySecureRenegotiation(boolean) -> notifySecureRenegotiation
    void processServerExtensions(java.util.Hashtable) -> processServerExtensions
    org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    org.sandrob.bouncycastle.crypto.tls.TlsAuthentication getAuthentication() -> getAuthentication
    org.sandrob.bouncycastle.crypto.tls.TlsCompression getCompression() -> getCompression
    org.sandrob.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
org.sandrob.bouncycastle.crypto.tls.TlsClientContext -> org.sandrob.bouncycastle.crypto.tls.TlsClientContext:
    java.security.SecureRandom getSecureRandom() -> getSecureRandom
    org.sandrob.bouncycastle.crypto.tls.SecurityParameters getSecurityParameters() -> getSecurityParameters
    java.lang.Object getUserObject() -> getUserObject
    void setUserObject(java.lang.Object) -> setUserObject
org.sandrob.bouncycastle.crypto.tls.TlsClientContextImpl -> org.sandrob.bouncycastle.crypto.tls.c:
    java.security.SecureRandom secureRandom -> a
    org.sandrob.bouncycastle.crypto.tls.SecurityParameters securityParameters -> b
    java.lang.Object userObject -> c
    10:16:void <init>(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.tls.SecurityParameters) -> <init>
    20:20:java.security.SecureRandom getSecureRandom() -> getSecureRandom
    25:25:org.sandrob.bouncycastle.crypto.tls.SecurityParameters getSecurityParameters() -> getSecurityParameters
    30:30:java.lang.Object getUserObject() -> getUserObject
    35:36:void setUserObject(java.lang.Object) -> setUserObject
org.sandrob.bouncycastle.crypto.tls.TlsCompression -> org.sandrob.bouncycastle.crypto.tls.TlsCompression:
    java.io.OutputStream compress(java.io.OutputStream) -> compress
    java.io.OutputStream decompress(java.io.OutputStream) -> decompress
org.sandrob.bouncycastle.crypto.tls.TlsCredentials -> org.sandrob.bouncycastle.crypto.tls.TlsCredentials:
    org.sandrob.bouncycastle.crypto.tls.Certificate getCertificate() -> getCertificate
org.sandrob.bouncycastle.crypto.tls.TlsDHEKeyExchange -> org.sandrob.bouncycastle.crypto.tls.d:
    16:17:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int) -> <init>
    21:21:void skipServerKeyExchange() -> skipServerKeyExchange
    27:48:void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    52:55:org.sandrob.bouncycastle.crypto.Signer initSigner(org.sandrob.bouncycastle.crypto.tls.TlsSigner,org.sandrob.bouncycastle.crypto.tls.SecurityParameters) -> a
org.sandrob.bouncycastle.crypto.tls.TlsDHKeyExchange -> org.sandrob.bouncycastle.crypto.tls.e:
    java.math.BigInteger ONE -> a
    java.math.BigInteger TWO -> b
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> c
    int keyExchange -> d
    org.sandrob.bouncycastle.crypto.tls.TlsSigner tlsSigner -> e
    org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> f
    org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters dhAgreeServerPublicKey -> g
    org.sandrob.bouncycastle.crypto.tls.TlsAgreementCredentials agreementCredentials -> h
    org.sandrob.bouncycastle.crypto.params.DHPrivateKeyParameters dhAgreeClientPrivateKey -> i
    25:28:void <clinit>() -> <clinit>
    34:59:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int) -> <init>
    63:63:void skipServerCertificate() -> skipServerCertificate
    68:109:void processServerCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    114:114:void skipServerKeyExchange() -> skipServerKeyExchange
    119:119:void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    125:140:void validateCertificateRequest(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    144:145:void skipClientCredentials() -> skipClientCredentials
    149:163:void processClientCredentials(org.sandrob.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    172:180:void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    184:189:byte[] generatePremasterSecret() -> generatePremasterSecret
    200:203:byte[] calculateDHBasicAgreement(org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters,org.sandrob.bouncycastle.crypto.params.DHPrivateKeyParameters) -> a
    208:210:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateDHKeyPair(org.sandrob.bouncycastle.crypto.params.DHParameters) -> a
    216:223:void generateEphemeralClientKeyExchange(org.sandrob.bouncycastle.crypto.params.DHParameters,java.io.OutputStream) -> a
    228:248:org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters) -> a
org.sandrob.bouncycastle.crypto.tls.TlsDSASigner -> org.sandrob.bouncycastle.crypto.tls.f:
    14:14:void <init>() -> <init>
    20:23:byte[] calculateRawSignature(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> a
    28:30:org.sandrob.bouncycastle.crypto.Signer createVerifyer(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> a
    org.sandrob.bouncycastle.crypto.DSA createDSAImpl() -> a
org.sandrob.bouncycastle.crypto.tls.TlsDSSSigner -> org.sandrob.bouncycastle.crypto.tls.g:
    8:8:void <init>() -> <init>
    12:12:boolean isValidPublicKey(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> b
    17:17:org.sandrob.bouncycastle.crypto.DSA createDSAImpl() -> a
org.sandrob.bouncycastle.crypto.tls.TlsECDHEKeyExchange -> org.sandrob.bouncycastle.crypto.tls.h:
    19:20:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int) -> <init>
    24:24:void skipServerKeyExchange() -> skipServerKeyExchange
    30:67:void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    78:91:void validateCertificateRequest(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    95:103:void processClientCredentials(org.sandrob.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    107:110:org.sandrob.bouncycastle.crypto.Signer initSigner(org.sandrob.bouncycastle.crypto.tls.TlsSigner,org.sandrob.bouncycastle.crypto.tls.SecurityParameters) -> a
org.sandrob.bouncycastle.crypto.tls.TlsECDHKeyExchange -> org.sandrob.bouncycastle.crypto.tls.i:
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> a
    int keyExchange -> b
    org.sandrob.bouncycastle.crypto.tls.TlsSigner tlsSigner -> c
    org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> d
    org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters ecAgreeServerPublicKey -> e
    org.sandrob.bouncycastle.crypto.tls.TlsAgreementCredentials agreementCredentials -> f
    org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters ecAgreeClientPrivateKey -> g
    34:56:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int) -> <init>
    60:60:void skipServerCertificate() -> skipServerCertificate
    65:106:void processServerCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    111:111:void skipServerKeyExchange() -> skipServerKeyExchange
    116:116:void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    128:143:void validateCertificateRequest(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    147:148:void skipClientCredentials() -> skipClientCredentials
    152:166:void processClientCredentials(org.sandrob.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    170:178:void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    182:187:byte[] generatePremasterSecret() -> generatePremasterSecret
    207:207:byte[] externalizeKey(org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters) -> a
    212:216:org.sandrob.bouncycastle.crypto.AsymmetricCipherKeyPair generateECKeyPair(org.sandrob.bouncycastle.crypto.params.ECDomainParameters) -> a
    222:228:void generateEphemeralClientKeyExchange(org.sandrob.bouncycastle.crypto.params.ECDomainParameters,java.io.OutputStream) -> a
    233:236:byte[] calculateECDHBasicAgreement(org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters) -> a
    243:243:org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters validateECPublicKey(org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters) -> b
org.sandrob.bouncycastle.crypto.tls.TlsECDSASigner -> org.sandrob.bouncycastle.crypto.tls.j:
    8:8:void <init>() -> <init>
    12:12:boolean isValidPublicKey(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> b
    17:17:org.sandrob.bouncycastle.crypto.DSA createDSAImpl() -> a
org.sandrob.bouncycastle.crypto.tls.TlsFatalAlert -> org.sandrob.bouncycastle.crypto.tls.TlsFatalAlert:
    short alertDescription -> a
    11:14:void <init>(short) -> <init>
    18:18:short getAlertDescription() -> getAlertDescription
org.sandrob.bouncycastle.crypto.tls.TlsInputStream -> org.sandrob.bouncycastle.crypto.tls.k:
    byte[] buf -> a
    org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler handler -> b
    11:17:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler) -> <init>
    21:21:int read(byte[],int,int) -> read
    26:30:int read() -> read
    35:36:void close() -> close
org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange -> org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange:
    void skipServerCertificate() -> skipServerCertificate
    void processServerCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    void skipServerKeyExchange() -> skipServerKeyExchange
    void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    void validateCertificateRequest(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void skipClientCredentials() -> skipClientCredentials
    void processClientCredentials(org.sandrob.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    byte[] generatePremasterSecret() -> generatePremasterSecret
org.sandrob.bouncycastle.crypto.tls.TlsMac -> org.sandrob.bouncycastle.crypto.tls.TlsMac:
    long seqNo -> seqNo
    org.sandrob.bouncycastle.crypto.macs.HMac mac -> mac
    27:33:void <init>(org.sandrob.bouncycastle.crypto.Digest,byte[],int,int) -> <init>
    40:40:int getSize() -> getSize
    56:76:byte[] calculateMac(short,byte[],int,int) -> calculateMac
org.sandrob.bouncycastle.crypto.tls.TlsNullCipher -> org.sandrob.bouncycastle.crypto.tls.TlsNullCipher:
    6:6:void <init>() -> <init>
    10:10:byte[] encodePlaintext(short,byte[],int,int) -> encodePlaintext
    15:15:byte[] decodeCiphertext(short,byte[],int,int) -> decodeCiphertext
    20:22:byte[] copyData(byte[],int,int) -> copyData
org.sandrob.bouncycastle.crypto.tls.TlsNullCompression -> org.sandrob.bouncycastle.crypto.tls.TlsNullCompression:
    5:5:void <init>() -> <init>
    9:9:java.io.OutputStream compress(java.io.OutputStream) -> compress
    14:14:java.io.OutputStream decompress(java.io.OutputStream) -> decompress
org.sandrob.bouncycastle.crypto.tls.TlsOutputStream -> org.sandrob.bouncycastle.crypto.tls.l:
    byte[] buf -> a
    org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler handler -> b
    11:17:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler) -> <init>
    21:22:void write(byte[],int,int) -> write
    26:28:void write(int) -> write
    32:33:void close() -> close
    37:38:void flush() -> flush
org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler -> org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler:
    java.lang.Integer EXT_RenegotiationInfo -> a
    byte[] emptybuf -> b
    org.sandrob.bouncycastle.crypto.tls.ByteQueue applicationDataQueue -> c
    org.sandrob.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue -> d
    org.sandrob.bouncycastle.crypto.tls.ByteQueue alertQueue -> e
    org.sandrob.bouncycastle.crypto.tls.ByteQueue handshakeQueue -> f
    org.sandrob.bouncycastle.crypto.tls.RecordStream rs -> g
    java.security.SecureRandom random -> h
    org.sandrob.bouncycastle.crypto.tls.TlsInputStream tlsInputStream -> i
    org.sandrob.bouncycastle.crypto.tls.TlsOutputStream tlsOutputStream -> j
    boolean closed -> k
    boolean failedWithError -> l
    boolean appDataReady -> m
    java.util.Hashtable clientExtensions -> n
    org.sandrob.bouncycastle.crypto.tls.SecurityParameters securityParameters -> o
    org.sandrob.bouncycastle.crypto.tls.TlsClientContextImpl tlsClientContext -> p
    org.sandrob.bouncycastle.crypto.tls.TlsClient tlsClient -> q
    int[] offeredCipherSuites -> r
    short[] offeredCompressionMethods -> s
    org.sandrob.bouncycastle.crypto.tls.TlsKeyExchange keyExchange -> t
    org.sandrob.bouncycastle.crypto.tls.TlsAuthentication authentication -> u
    org.sandrob.bouncycastle.crypto.tls.CertificateRequest certificateRequest -> v
    short connection_state -> w
    21:41:void <clinit>() -> <clinit>
    85:93:java.security.SecureRandom createSecureRandom() -> a
    98:99:void <init>(java.io.InputStream,java.io.OutputStream) -> <init>
    48:105:void <init>(java.io.InputStream,java.io.OutputStream,java.security.SecureRandom) -> <init>
    112:141:void processData(short,byte[],int,int) -> processData
    146:198:void processHandshake() -> b
    202:656:void processHandshakeMessage(short,byte[]) -> a
    666:666:void processApplicationData() -> c
    670:717:void processAlert() -> d
    727:755:void processChangeCipherSpec() -> e
    759:765:void sendClientCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> a
    769:775:void sendClientKeyExchange() -> f
    783:790:void sendCertificateVerify(byte[]) -> a
    803:804:void connect(org.sandrob.bouncycastle.crypto.tls.CertificateVerifyer) -> connect
    814:921:void connect(org.sandrob.bouncycastle.crypto.tls.TlsClient) -> connect
    936:962:int readApplicationData(byte[],int,int) -> readApplicationData
    969:995:void safeReadData() -> g
    1001:1027:void safeWriteMessage(short,byte[],int,int) -> a
    1041:1072:void writeData(byte[],int,int) -> writeData
    1079:1079:java.io.OutputStream getOutputStream() -> getOutputStream
    1087:1087:java.io.InputStream getInputStream() -> getInputStream
    1104:1129:void failWithError(short,short) -> a
    1133:1138:void sendAlert(short,short) -> b
    1147:1151:void close() -> close
    1161:1165:void assertEmpty(java.io.ByteArrayInputStream) -> assertEmpty
    1169:1170:void flush() -> flush
    1174:1181:boolean arrayContains(short[],short) -> a
    1186:1193:boolean arrayContains(int[],int) -> a
    1199:1201:byte[] createRenegotiationInfo(byte[]) -> b
    1207:1209:void writeExtension(java.io.OutputStream,java.lang.Integer,byte[]) -> a
org.sandrob.bouncycastle.crypto.tls.TlsRSAKeyExchange -> org.sandrob.bouncycastle.crypto.tls.m:
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> a
    org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> b
    org.sandrob.bouncycastle.crypto.params.RSAKeyParameters rsaServerPublicKey -> c
    byte[] premasterSecret -> d
    25:34:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext) -> <init>
    38:38:void skipServerCertificate() -> skipServerCertificate
    43:71:void processServerCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    76:76:void skipServerKeyExchange() -> skipServerKeyExchange
    82:82:void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    88:101:void validateCertificateRequest(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    106:106:void skipClientCredentials() -> skipClientCredentials
    110:114:void processClientCredentials(org.sandrob.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    121:141:void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    145:147:byte[] generatePremasterSecret() -> generatePremasterSecret
    184:189:org.sandrob.bouncycastle.crypto.params.RSAKeyParameters validateRSAPublicKey(org.sandrob.bouncycastle.crypto.params.RSAKeyParameters) -> a
org.sandrob.bouncycastle.crypto.tls.TlsRSASigner -> org.sandrob.bouncycastle.crypto.tls.n:
    15:15:void <init>() -> <init>
    20:23:byte[] calculateRawSignature(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> a
    28:30:org.sandrob.bouncycastle.crypto.Signer createVerifyer(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> a
    35:35:boolean isValidPublicKey(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> b
org.sandrob.bouncycastle.crypto.tls.TlsRuntimeException -> org.sandrob.bouncycastle.crypto.tls.TlsRuntimeException:
    java.lang.Throwable e -> a
    11:14:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    18:19:void <init>(java.lang.String) -> <init>
    23:23:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.crypto.tls.TlsSRPKeyExchange -> org.sandrob.bouncycastle.crypto.tls.o:
    org.sandrob.bouncycastle.crypto.tls.TlsClientContext context -> a
    int keyExchange -> b
    org.sandrob.bouncycastle.crypto.tls.TlsSigner tlsSigner -> c
    byte[] identity -> d
    byte[] password -> e
    org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> f
    byte[] s -> g
    java.math.BigInteger B -> h
    org.sandrob.bouncycastle.crypto.agreement.srp.SRP6Client srpClient -> i
    32:59:void <init>(org.sandrob.bouncycastle.crypto.tls.TlsClientContext,int,byte[],byte[]) -> <init>
    63:67:void skipServerCertificate() -> skipServerCertificate
    71:101:void processServerCertificate(org.sandrob.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    105:105:void skipServerKeyExchange() -> skipServerKeyExchange
    110:158:void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    163:163:void validateCertificateRequest(org.sandrob.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    169:169:void skipClientCredentials() -> skipClientCredentials
    173:173:void processClientCredentials(org.sandrob.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    178:182:void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    189:193:byte[] generatePremasterSecret() -> generatePremasterSecret
    199:202:org.sandrob.bouncycastle.crypto.Signer initSigner(org.sandrob.bouncycastle.crypto.tls.TlsSigner,org.sandrob.bouncycastle.crypto.tls.SecurityParameters) -> a
org.sandrob.bouncycastle.crypto.tls.TlsSigner -> org.sandrob.bouncycastle.crypto.tls.p:
    byte[] calculateRawSignature(java.security.SecureRandom,org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> a
    org.sandrob.bouncycastle.crypto.Signer createVerifyer(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> a
    boolean isValidPublicKey(org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter) -> b
org.sandrob.bouncycastle.crypto.tls.TlsSignerCredentials -> org.sandrob.bouncycastle.crypto.tls.TlsSignerCredentials:
    byte[] generateCertificateSignature(byte[]) -> generateCertificateSignature
org.sandrob.bouncycastle.crypto.tls.TlsUtils -> org.sandrob.bouncycastle.crypto.tls.TlsUtils:
    24:24:void <init>() -> <init>
    28:29:void writeUint8(short,java.io.OutputStream) -> writeUint8
    33:34:void writeUint8(short,byte[],int) -> writeUint8
    38:40:void writeUint16(int,java.io.OutputStream) -> writeUint16
    44:46:void writeUint16(int,byte[],int) -> writeUint16
    50:53:void writeUint24(int,java.io.OutputStream) -> writeUint24
    57:60:void writeUint24(int,byte[],int) -> writeUint24
    64:68:void writeUint32(long,java.io.OutputStream) -> writeUint32
    72:76:void writeUint32(long,byte[],int) -> writeUint32
    80:88:void writeUint64(long,java.io.OutputStream) -> writeUint64
    93:101:void writeUint64(long,byte[],int) -> writeUint64
    105:107:void writeOpaque8(byte[],java.io.OutputStream) -> writeOpaque8
    111:113:void writeOpaque16(byte[],java.io.OutputStream) -> writeOpaque16
    117:119:void writeOpaque24(byte[],java.io.OutputStream) -> writeOpaque24
    123:127:void writeUint8Array(short[],java.io.OutputStream) -> writeUint8Array
    131:135:void writeUint16Array(int[],java.io.OutputStream) -> writeUint16Array
    139:144:short readUint8(java.io.InputStream) -> readUint8
    149:155:int readUint16(java.io.InputStream) -> readUint16
    160:167:int readUint24(java.io.InputStream) -> readUint24
    172:180:long readUint32(java.io.InputStream) -> readUint32
    185:189:void readFully(byte[],java.io.InputStream) -> readFully
    193:196:byte[] readOpaque8(java.io.InputStream) -> readOpaque8
    201:204:byte[] readOpaque16(java.io.InputStream) -> readOpaque16
    210:214:void checkVersion(byte[],org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler) -> checkVersion
    219:225:void checkVersion(java.io.InputStream,org.sandrob.bouncycastle.crypto.tls.TlsProtocolHandler) -> checkVersion
    229:234:void writeGMTUnixTime(byte[],int) -> writeGMTUnixTime
    238:240:void writeVersion(java.io.OutputStream) -> writeVersion
    244:246:void writeVersion(byte[],int) -> writeVersion
    250:269:void hmac_hash(org.sandrob.bouncycastle.crypto.Digest,byte[],byte[],byte[]) -> a
    273:291:byte[] PRF(byte[],java.lang.String,byte[],int) -> PRF
    296:299:byte[] concat(byte[],byte[]) -> a
    304:318:void validateKeyUsage(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure,int) -> a
org.sandrob.bouncycastle.crypto.util.Pack -> org.sandrob.bouncycastle.crypto.util.Pack:
    3:3:void <init>() -> <init>
    7:11:int bigEndianToInt(byte[],int) -> bigEndianToInt
    16:20:void intToBigEndian(int,byte[],int) -> intToBigEndian
    24:26:long bigEndianToLong(byte[],int) -> bigEndianToLong
    31:33:void longToBigEndian(long,byte[],int) -> longToBigEndian
    37:41:int littleEndianToInt(byte[],int) -> littleEndianToInt
    46:50:void intToLittleEndian(int,byte[],int) -> intToLittleEndian
    54:56:long littleEndianToLong(byte[],int) -> littleEndianToLong
    61:63:void longToLittleEndian(long,byte[],int) -> longToLittleEndian
org.sandrob.bouncycastle.crypto.util.PrivateKeyFactory -> org.sandrob.bouncycastle.crypto.util.PrivateKeyFactory:
    44:44:void <init>() -> <init>
    55:55:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(byte[]) -> createKey
    68:68:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(java.io.InputStream) -> createKey
    80:172:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> createKey
org.sandrob.bouncycastle.crypto.util.PublicKeyFactory -> org.sandrob.bouncycastle.crypto.util.PublicKeyFactory:
    53:53:void <init>() -> <init>
    64:64:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(byte[]) -> createKey
    76:76:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(java.io.InputStream) -> createKey
    88:212:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> createKey
org.sandrob.bouncycastle.i18n.ErrorBundle -> org.sandrob.bouncycastle.i18n.ErrorBundle:
    java.lang.String SUMMARY_ENTRY -> SUMMARY_ENTRY
    java.lang.String DETAIL_ENTRY -> DETAIL_ENTRY
    29:30:void <init>(java.lang.String,java.lang.String) -> <init>
    43:44:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    56:57:void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    71:72:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    83:83:java.lang.String getSummary(java.util.Locale,java.util.TimeZone) -> getSummary
    94:94:java.lang.String getSummary(java.util.Locale) -> getSummary
    106:106:java.lang.String getDetail(java.util.Locale,java.util.TimeZone) -> getDetail
    117:117:java.lang.String getDetail(java.util.Locale) -> getDetail
org.sandrob.bouncycastle.i18n.LocaleString -> org.sandrob.bouncycastle.i18n.LocaleString:
    11:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:17:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    21:21:java.lang.String getLocaleString(java.util.Locale) -> getLocaleString
org.sandrob.bouncycastle.i18n.LocalizedException -> org.sandrob.bouncycastle.i18n.LocalizedException:
    org.sandrob.bouncycastle.i18n.ErrorBundle message -> message
    java.lang.Throwable cause -> a
    20:22:void <init>(org.sandrob.bouncycastle.i18n.ErrorBundle) -> <init>
    31:34:void <init>(org.sandrob.bouncycastle.i18n.ErrorBundle,java.lang.Throwable) -> <init>
    42:42:org.sandrob.bouncycastle.i18n.ErrorBundle getErrorMessage() -> getErrorMessage
    47:47:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.i18n.LocalizedMessage -> org.sandrob.bouncycastle.i18n.LocalizedMessage:
    java.lang.String id -> id
    java.lang.String resource -> resource
    java.lang.String DEFAULT_ENCODING -> DEFAULT_ENCODING
    java.lang.String encoding -> encoding
    org.sandrob.bouncycastle.i18n.LocalizedMessage$FilteredArguments arguments -> arguments
    org.sandrob.bouncycastle.i18n.LocalizedMessage$FilteredArguments extraArgs -> extraArgs
    org.sandrob.bouncycastle.i18n.filter.Filter filter -> filter
    java.lang.ClassLoader loader -> loader
    26:51:void <init>(java.lang.String,java.lang.String) -> <init>
    26:76:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    26:95:void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    26:121:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    134:174:java.lang.String getEntry(java.lang.String,java.util.Locale,java.util.TimeZone) -> getEntry
    184:200:java.lang.String formatWithTimeZone(java.lang.String,java.lang.Object[],java.util.Locale,java.util.TimeZone) -> formatWithTimeZone
    205:215:java.lang.String addExtraArgs(java.lang.String,java.util.Locale) -> addExtraArgs
    224:230:void setFilter(org.sandrob.bouncycastle.i18n.filter.Filter) -> setFilter
    238:238:org.sandrob.bouncycastle.i18n.filter.Filter getFilter() -> getFilter
    248:249:void setClassLoader(java.lang.ClassLoader) -> setClassLoader
    258:258:java.lang.ClassLoader getClassLoader() -> getClassLoader
    267:267:java.lang.String getId() -> getId
    276:276:java.lang.String getResource() -> getResource
    285:285:java.lang.Object[] getArguments() -> getArguments
    294:295:void setExtraArgument(java.lang.Object) -> setExtraArgument
    303:312:void setExtraArguments(java.lang.Object[]) -> setExtraArguments
    320:320:java.lang.Object[] getExtraArgs() -> getExtraArgs
    463:473:java.lang.String toString() -> toString
org.sandrob.bouncycastle.i18n.LocalizedMessage$FilteredArguments -> org.sandrob.bouncycastle.i18n.LocalizedMessage$FilteredArguments:
    int NO_FILTER -> NO_FILTER
    int FILTER -> FILTER
    int FILTER_URL -> FILTER_URL
    org.sandrob.bouncycastle.i18n.filter.Filter filter -> filter
    boolean[] isLocaleSpecific -> isLocaleSpecific
    int[] argFilterType -> argFilterType
    java.lang.Object[] arguments -> arguments
    java.lang.Object[] unpackedArgs -> unpackedArgs
    java.lang.Object[] filteredArgs -> filteredArgs
    org.sandrob.bouncycastle.i18n.LocalizedMessage this$0 -> a
    339:340:void <init>(org.sandrob.bouncycastle.i18n.LocalizedMessage) -> <init>
    329:377:void <init>(org.sandrob.bouncycastle.i18n.LocalizedMessage,java.lang.Object[]) -> <init>
    381:381:boolean isEmpty() -> isEmpty
    386:386:java.lang.Object[] getArguments() -> getArguments
    391:416:java.lang.Object[] getFilteredArgs(java.util.Locale) -> getFilteredArgs
    421:438:java.lang.Object filter(int,java.lang.Object) -> a
    444:444:org.sandrob.bouncycastle.i18n.filter.Filter getFilter() -> getFilter
    449:457:void setFilter(org.sandrob.bouncycastle.i18n.filter.Filter) -> setFilter
org.sandrob.bouncycastle.i18n.MessageBundle -> org.sandrob.bouncycastle.i18n.MessageBundle:
    java.lang.String TITLE_ENTRY -> TITLE_ENTRY
    24:25:void <init>(java.lang.String,java.lang.String) -> <init>
    38:39:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    51:52:void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    66:67:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    78:78:java.lang.String getTitle(java.util.Locale,java.util.TimeZone) -> getTitle
    89:89:java.lang.String getTitle(java.util.Locale) -> getTitle
org.sandrob.bouncycastle.i18n.MissingEntryException -> org.sandrob.bouncycastle.i18n.MissingEntryException:
    java.lang.String resource -> resource
    java.lang.String key -> key
    java.lang.ClassLoader loader -> loader
    java.util.Locale locale -> locale
    java.lang.String debugMsg -> a
    19:24:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.ClassLoader) -> <init>
    28:33:void <init>(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.String,java.util.Locale,java.lang.ClassLoader) -> <init>
    37:37:java.lang.String getKey() -> getKey
    42:42:java.lang.String getResource() -> getResource
    47:47:java.lang.ClassLoader getClassLoader() -> getClassLoader
    52:52:java.util.Locale getLocale() -> getLocale
    57:70:java.lang.String getDebugMsg() -> getDebugMsg
org.sandrob.bouncycastle.i18n.TextBundle -> org.sandrob.bouncycastle.i18n.TextBundle:
    java.lang.String TEXT_ENTRY -> TEXT_ENTRY
    24:25:void <init>(java.lang.String,java.lang.String) -> <init>
    38:39:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    51:52:void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    66:67:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    78:78:java.lang.String getText(java.util.Locale,java.util.TimeZone) -> getText
    89:89:java.lang.String getText(java.util.Locale) -> getText
org.sandrob.bouncycastle.i18n.filter.Filter -> org.sandrob.bouncycastle.i18n.filter.Filter:
    java.lang.String doFilter(java.lang.String) -> doFilter
    java.lang.String doFilterUrl(java.lang.String) -> doFilterUrl
org.sandrob.bouncycastle.i18n.filter.HTMLFilter -> org.sandrob.bouncycastle.i18n.filter.HTMLFilter:
    7:7:void <init>() -> <init>
    12:60:java.lang.String doFilter(java.lang.String) -> doFilter
    65:65:java.lang.String doFilterUrl(java.lang.String) -> doFilterUrl
org.sandrob.bouncycastle.i18n.filter.SQLFilter -> org.sandrob.bouncycastle.i18n.filter.SQLFilter:
    9:9:void <init>() -> <init>
    14:61:java.lang.String doFilter(java.lang.String) -> doFilter
    66:66:java.lang.String doFilterUrl(java.lang.String) -> doFilterUrl
org.sandrob.bouncycastle.i18n.filter.TrustedInput -> org.sandrob.bouncycastle.i18n.filter.TrustedInput:
    java.lang.Object input -> input
    8:11:void <init>(java.lang.Object) -> <init>
    15:15:java.lang.Object getInput() -> getInput
    20:20:java.lang.String toString() -> toString
org.sandrob.bouncycastle.i18n.filter.UntrustedInput -> org.sandrob.bouncycastle.i18n.filter.UntrustedInput:
    java.lang.Object input -> input
    16:19:void <init>(java.lang.Object) -> <init>
    27:27:java.lang.Object getInput() -> getInput
    36:36:java.lang.String getString() -> getString
    41:41:java.lang.String toString() -> toString
org.sandrob.bouncycastle.i18n.filter.UntrustedUrlInput -> org.sandrob.bouncycastle.i18n.filter.UntrustedUrlInput:
    11:12:void <init>(java.lang.Object) -> <init>
org.sandrob.bouncycastle.jce.ECGOST3410NamedCurveTable -> org.sandrob.bouncycastle.jce.ECGOST3410NamedCurveTable:
    13:13:void <init>() -> <init>
    25:49:org.sandrob.bouncycastle.jce.spec.ECNamedCurveParameterSpec getParameterSpec(java.lang.String) -> getParameterSpec
    59:59:java.util.Enumeration getNames() -> getNames
org.sandrob.bouncycastle.jce.ECKeyUtil -> org.sandrob.bouncycastle.jce.ECKeyUtil:
    31:31:void <init>() -> <init>
    47:54:java.security.PublicKey publicToExplicitParameters(java.security.PublicKey,java.lang.String) -> publicToExplicitParameters
    72:119:java.security.PublicKey publicToExplicitParameters(java.security.PublicKey,java.security.Provider) -> publicToExplicitParameters
    137:144:java.security.PrivateKey privateToExplicitParameters(java.security.PrivateKey,java.lang.String) -> privateToExplicitParameters
    162:209:java.security.PrivateKey privateToExplicitParameters(java.security.PrivateKey,java.security.Provider) -> privateToExplicitParameters
org.sandrob.bouncycastle.jce.ECKeyUtil$UnexpectedException -> org.sandrob.bouncycastle.jce.ECKeyUtil$a:
    java.lang.Throwable cause -> a
    220:223:void <init>(java.lang.Throwable) -> <init>
    227:227:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.ECNamedCurveTable -> org.sandrob.bouncycastle.jce.ECNamedCurveTable:
    17:17:void <init>() -> <init>
    29:90:org.sandrob.bouncycastle.jce.spec.ECNamedCurveParameterSpec getParameterSpec(java.lang.String) -> getParameterSpec
    100:107:java.util.Enumeration getNames() -> getNames
    114:118:void addEnumeration(java.util.Vector,java.util.Enumeration) -> a
org.sandrob.bouncycastle.jce.ECPointUtil -> org.sandrob.bouncycastle.jce.ECPointUtil:
    13:13:void <init>() -> <init>
    29:54:java.security.spec.ECPoint decodePoint(java.security.spec.EllipticCurve,byte[]) -> decodePoint
org.sandrob.bouncycastle.jce.MultiCertStoreParameters -> org.sandrob.bouncycastle.jce.MultiCertStoreParameters:
    java.util.Collection certStores -> a
    boolean searchAllStores -> b
    19:20:void <init>(java.util.Collection) -> <init>
    31:35:void <init>(java.util.Collection,boolean) -> <init>
    39:39:java.util.Collection getCertStores() -> getCertStores
    44:44:boolean getSearchAllStores() -> getSearchAllStores
    49:49:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.PKCS10CertificationRequest -> org.sandrob.bouncycastle.jce.PKCS10CertificationRequest:
    java.util.Hashtable algorithms -> a
    java.util.Hashtable params -> b
    java.util.Hashtable keyAlgorithms -> c
    java.util.Hashtable oids -> d
    java.util.Set noParams -> e
    72:192:void <clinit>() -> <clinit>
    197:201:org.sandrob.bouncycastle.asn1.pkcs.RSASSAPSSparams creatPSSParams(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,int) -> a
    209:215:org.sandrob.bouncycastle.asn1.ASN1Sequence toDERSequence(byte[]) -> a
    226:227:void <init>(byte[]) -> <init>
    232:233:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    247:248:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.x509.X509Name,java.security.PublicKey,org.sandrob.bouncycastle.asn1.ASN1Set,java.security.PrivateKey) -> <init>
    255:259:org.sandrob.bouncycastle.asn1.x509.X509Name convertName(javax.security.auth.x500.X500Principal) -> a
    275:276:void <init>(java.lang.String,javax.security.auth.x500.X500Principal,java.security.PublicKey,org.sandrob.bouncycastle.asn1.ASN1Set,java.security.PrivateKey) -> <init>
    291:292:void <init>(java.lang.String,javax.security.auth.x500.X500Principal,java.security.PublicKey,org.sandrob.bouncycastle.asn1.ASN1Set,java.security.PrivateKey,java.lang.String) -> <init>
    297:377:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.x509.X509Name,java.security.PublicKey,org.sandrob.bouncycastle.asn1.ASN1Set,java.security.PrivateKey,java.lang.String) -> <init>
    386:386:java.security.PublicKey getPublicKey() -> getPublicKey
    394:435:java.security.PublicKey getPublicKey(java.lang.String) -> getPublicKey
    446:446:boolean verify() -> verify
    457:457:boolean verify(java.lang.String) -> verify
    473:519:boolean verify(java.security.PublicKey,java.lang.String) -> verify
    529:533:byte[] getEncoded() -> getEncoded
    542:567:void setSignatureParameters(java.security.Signature,org.sandrob.bouncycastle.asn1.DEREncodable) -> a
    572:583:java.lang.String getSignatureName(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> a
    589:631:java.lang.String getDigestAlgName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
org.sandrob.bouncycastle.jce.PKCS12Util -> org.sandrob.bouncycastle.jce.PKCS12Util:
    30:30:void <init>() -> <init>
    42:51:byte[] convertToDefiniteLength(byte[]) -> convertToDefiniteLength
    66:105:byte[] convertToDefiniteLength(byte[],char[],java.lang.String) -> convertToDefiniteLength
    117:126:byte[] calculatePbeMac(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,byte[],int,char[],byte[],java.lang.String) -> a
org.sandrob.bouncycastle.jce.PrincipalUtil -> org.sandrob.bouncycastle.jce.PrincipalUtil:
    16:16:void <init>() -> <init>
    27:34:org.sandrob.bouncycastle.jce.X509Principal getIssuerX509Principal(java.security.cert.X509Certificate) -> getIssuerX509Principal
    47:53:org.sandrob.bouncycastle.jce.X509Principal getSubjectX509Principal(java.security.cert.X509Certificate) -> getSubjectX509Principal
    66:73:org.sandrob.bouncycastle.jce.X509Principal getIssuerX509Principal(java.security.cert.X509CRL) -> getIssuerX509Principal
org.sandrob.bouncycastle.jce.ProviderConfigurationPermission -> org.sandrob.bouncycastle.jce.ProviderConfigurationPermission:
    java.lang.String actions -> a
    int permissionMask -> b
    44:47:void <init>(java.lang.String) -> <init>
    51:54:void <init>(java.lang.String,java.lang.String) -> <init>
    59:85:int calculateMask(java.lang.String) -> a
    90:90:java.lang.String getActions() -> getActions
    96:108:boolean implies(java.security.Permission) -> implies
    114:126:boolean equals(java.lang.Object) -> equals
    131:131:int hashCode() -> hashCode
org.sandrob.bouncycastle.jce.X509KeyUsage -> org.sandrob.bouncycastle.jce.X509KeyUsage:
    int digitalSignature -> digitalSignature
    int nonRepudiation -> nonRepudiation
    int keyEncipherment -> keyEncipherment
    int dataEncipherment -> dataEncipherment
    int keyAgreement -> keyAgreement
    int keyCertSign -> keyCertSign
    int cRLSign -> cRLSign
    int encipherOnly -> encipherOnly
    int decipherOnly -> decipherOnly
    int usage -> a
    38:51:void <init>(int) -> <init>
    55:55:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters -> org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters:
    java.lang.String ldapURL -> a
    java.lang.String baseDN -> b
    java.lang.String userCertificateAttribute -> c
    java.lang.String cACertificateAttribute -> d
    java.lang.String crossCertificateAttribute -> e
    java.lang.String certificateRevocationListAttribute -> f
    java.lang.String deltaRevocationListAttribute -> g
    java.lang.String authorityRevocationListAttribute -> h
    java.lang.String attributeCertificateAttributeAttribute -> i
    java.lang.String aACertificateAttribute -> j
    java.lang.String attributeDescriptorCertificateAttribute -> k
    java.lang.String attributeCertificateRevocationListAttribute -> l
    java.lang.String attributeAuthorityRevocationListAttribute -> m
    java.lang.String ldapUserCertificateAttributeName -> n
    java.lang.String ldapCACertificateAttributeName -> o
    java.lang.String ldapCrossCertificateAttributeName -> p
    java.lang.String ldapCertificateRevocationListAttributeName -> q
    java.lang.String ldapDeltaRevocationListAttributeName -> r
    java.lang.String ldapAuthorityRevocationListAttributeName -> s
    java.lang.String ldapAttributeCertificateAttributeAttributeName -> t
    java.lang.String ldapAACertificateAttributeName -> u
    java.lang.String ldapAttributeDescriptorCertificateAttributeName -> v
    java.lang.String ldapAttributeCertificateRevocationListAttributeName -> w
    java.lang.String ldapAttributeAuthorityRevocationListAttributeName -> x
    java.lang.String userCertificateSubjectAttributeName -> y
    java.lang.String cACertificateSubjectAttributeName -> z
    java.lang.String crossCertificateSubjectAttributeName -> A
    java.lang.String certificateRevocationListIssuerAttributeName -> B
    java.lang.String deltaRevocationListIssuerAttributeName -> C
    java.lang.String authorityRevocationListIssuerAttributeName -> D
    java.lang.String attributeCertificateAttributeSubjectAttributeName -> E
    java.lang.String aACertificateSubjectAttributeName -> F
    java.lang.String attributeDescriptorCertificateSubjectAttributeName -> G
    java.lang.String attributeCertificateRevocationListIssuerAttributeName -> H
    java.lang.String attributeAuthorityRevocationListIssuerAttributeName -> I
    java.lang.String searchForSerialNumberIn -> J
    801:840:void <init>(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> <init>
    847:847:java.lang.Object clone() -> clone
    852:898:boolean equal(java.lang.Object) -> equal
    903:913:boolean checkField(java.lang.Object,java.lang.Object) -> a
    918:955:int hashCode() -> hashCode
    960:960:int addHashCode(int,java.lang.Object) -> a
    968:968:java.lang.String getAACertificateAttribute() -> getAACertificateAttribute
    976:976:java.lang.String getAACertificateSubjectAttributeName() -> getAACertificateSubjectAttributeName
    984:984:java.lang.String getAttributeAuthorityRevocationListAttribute() -> getAttributeAuthorityRevocationListAttribute
    992:992:java.lang.String getAttributeAuthorityRevocationListIssuerAttributeName() -> getAttributeAuthorityRevocationListIssuerAttributeName
    1000:1000:java.lang.String getAttributeCertificateAttributeAttribute() -> getAttributeCertificateAttributeAttribute
    1008:1008:java.lang.String getAttributeCertificateAttributeSubjectAttributeName() -> getAttributeCertificateAttributeSubjectAttributeName
    1016:1016:java.lang.String getAttributeCertificateRevocationListAttribute() -> getAttributeCertificateRevocationListAttribute
    1025:1025:java.lang.String getAttributeCertificateRevocationListIssuerAttributeName() -> getAttributeCertificateRevocationListIssuerAttributeName
    1033:1033:java.lang.String getAttributeDescriptorCertificateAttribute() -> getAttributeDescriptorCertificateAttribute
    1041:1041:java.lang.String getAttributeDescriptorCertificateSubjectAttributeName() -> getAttributeDescriptorCertificateSubjectAttributeName
    1049:1049:java.lang.String getAuthorityRevocationListAttribute() -> getAuthorityRevocationListAttribute
    1057:1057:java.lang.String getAuthorityRevocationListIssuerAttributeName() -> getAuthorityRevocationListIssuerAttributeName
    1065:1065:java.lang.String getBaseDN() -> getBaseDN
    1073:1073:java.lang.String getCACertificateAttribute() -> getCACertificateAttribute
    1081:1081:java.lang.String getCACertificateSubjectAttributeName() -> getCACertificateSubjectAttributeName
    1089:1089:java.lang.String getCertificateRevocationListAttribute() -> getCertificateRevocationListAttribute
    1097:1097:java.lang.String getCertificateRevocationListIssuerAttributeName() -> getCertificateRevocationListIssuerAttributeName
    1105:1105:java.lang.String getCrossCertificateAttribute() -> getCrossCertificateAttribute
    1113:1113:java.lang.String getCrossCertificateSubjectAttributeName() -> getCrossCertificateSubjectAttributeName
    1121:1121:java.lang.String getDeltaRevocationListAttribute() -> getDeltaRevocationListAttribute
    1129:1129:java.lang.String getDeltaRevocationListIssuerAttributeName() -> getDeltaRevocationListIssuerAttributeName
    1137:1137:java.lang.String getLdapAACertificateAttributeName() -> getLdapAACertificateAttributeName
    1145:1145:java.lang.String getLdapAttributeAuthorityRevocationListAttributeName() -> getLdapAttributeAuthorityRevocationListAttributeName
    1153:1153:java.lang.String getLdapAttributeCertificateAttributeAttributeName() -> getLdapAttributeCertificateAttributeAttributeName
    1161:1161:java.lang.String getLdapAttributeCertificateRevocationListAttributeName() -> getLdapAttributeCertificateRevocationListAttributeName
    1169:1169:java.lang.String getLdapAttributeDescriptorCertificateAttributeName() -> getLdapAttributeDescriptorCertificateAttributeName
    1177:1177:java.lang.String getLdapAuthorityRevocationListAttributeName() -> getLdapAuthorityRevocationListAttributeName
    1185:1185:java.lang.String getLdapCACertificateAttributeName() -> getLdapCACertificateAttributeName
    1193:1193:java.lang.String getLdapCertificateRevocationListAttributeName() -> getLdapCertificateRevocationListAttributeName
    1201:1201:java.lang.String getLdapCrossCertificateAttributeName() -> getLdapCrossCertificateAttributeName
    1209:1209:java.lang.String getLdapDeltaRevocationListAttributeName() -> getLdapDeltaRevocationListAttributeName
    1217:1217:java.lang.String getLdapURL() -> getLdapURL
    1225:1225:java.lang.String getLdapUserCertificateAttributeName() -> getLdapUserCertificateAttributeName
    1233:1233:java.lang.String getSearchForSerialNumberIn() -> getSearchForSerialNumberIn
    1241:1241:java.lang.String getUserCertificateAttribute() -> getUserCertificateAttribute
    1249:1249:java.lang.String getUserCertificateSubjectAttributeName() -> getUserCertificateSubjectAttributeName
    1254:1256:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters getInstance(java.security.cert.LDAPCertStoreParameters) -> getInstance
    801:801:void <init>(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder,org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters) -> <init>
org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder -> org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder:
    java.lang.String ldapURL -> a
    java.lang.String baseDN -> b
    java.lang.String userCertificateAttribute -> c
    java.lang.String cACertificateAttribute -> d
    java.lang.String crossCertificateAttribute -> e
    java.lang.String certificateRevocationListAttribute -> f
    java.lang.String deltaRevocationListAttribute -> g
    java.lang.String authorityRevocationListAttribute -> h
    java.lang.String attributeCertificateAttributeAttribute -> i
    java.lang.String aACertificateAttribute -> j
    java.lang.String attributeDescriptorCertificateAttribute -> k
    java.lang.String attributeCertificateRevocationListAttribute -> l
    java.lang.String attributeAuthorityRevocationListAttribute -> m
    java.lang.String ldapUserCertificateAttributeName -> n
    java.lang.String ldapCACertificateAttributeName -> o
    java.lang.String ldapCrossCertificateAttributeName -> p
    java.lang.String ldapCertificateRevocationListAttributeName -> q
    java.lang.String ldapDeltaRevocationListAttributeName -> r
    java.lang.String ldapAuthorityRevocationListAttributeName -> s
    java.lang.String ldapAttributeCertificateAttributeAttributeName -> t
    java.lang.String ldapAACertificateAttributeName -> u
    java.lang.String ldapAttributeDescriptorCertificateAttributeName -> v
    java.lang.String ldapAttributeCertificateRevocationListAttributeName -> w
    java.lang.String ldapAttributeAuthorityRevocationListAttributeName -> x
    java.lang.String userCertificateSubjectAttributeName -> y
    java.lang.String cACertificateSubjectAttributeName -> z
    java.lang.String crossCertificateSubjectAttributeName -> A
    java.lang.String certificateRevocationListIssuerAttributeName -> B
    java.lang.String deltaRevocationListIssuerAttributeName -> C
    java.lang.String authorityRevocationListIssuerAttributeName -> D
    java.lang.String attributeCertificateAttributeSubjectAttributeName -> E
    java.lang.String aACertificateSubjectAttributeName -> F
    java.lang.String attributeDescriptorCertificateSubjectAttributeName -> G
    java.lang.String attributeCertificateRevocationListIssuerAttributeName -> H
    java.lang.String attributeAuthorityRevocationListIssuerAttributeName -> I
    java.lang.String searchForSerialNumberIn -> J
    177:178:void <init>() -> <init>
    180:226:void <init>(java.lang.String,java.lang.String) -> <init>
    237:239:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setUserCertificateAttribute(java.lang.String) -> setUserCertificateAttribute
    251:253:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCACertificateAttribute(java.lang.String) -> setCACertificateAttribute
    265:267:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCrossCertificateAttribute(java.lang.String) -> setCrossCertificateAttribute
    280:282:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCertificateRevocationListAttribute(java.lang.String) -> setCertificateRevocationListAttribute
    294:296:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setDeltaRevocationListAttribute(java.lang.String) -> setDeltaRevocationListAttribute
    309:311:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAuthorityRevocationListAttribute(java.lang.String) -> setAuthorityRevocationListAttribute
    324:326:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateAttributeAttribute(java.lang.String) -> setAttributeCertificateAttributeAttribute
    338:340:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAACertificateAttribute(java.lang.String) -> setAACertificateAttribute
    354:356:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeDescriptorCertificateAttribute(java.lang.String) -> setAttributeDescriptorCertificateAttribute
    370:372:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateRevocationListAttribute(java.lang.String) -> setAttributeCertificateRevocationListAttribute
    386:388:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeAuthorityRevocationListAttribute(java.lang.String) -> setAttributeAuthorityRevocationListAttribute
    403:405:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapUserCertificateAttributeName(java.lang.String) -> setLdapUserCertificateAttributeName
    419:421:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapCACertificateAttributeName(java.lang.String) -> setLdapCACertificateAttributeName
    436:438:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapCrossCertificateAttributeName(java.lang.String) -> setLdapCrossCertificateAttributeName
    453:455:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapCertificateRevocationListAttributeName(java.lang.String) -> setLdapCertificateRevocationListAttributeName
    470:472:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapDeltaRevocationListAttributeName(java.lang.String) -> setLdapDeltaRevocationListAttributeName
    487:489:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAuthorityRevocationListAttributeName(java.lang.String) -> setLdapAuthorityRevocationListAttributeName
    504:506:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeCertificateAttributeAttributeName(java.lang.String) -> setLdapAttributeCertificateAttributeAttributeName
    520:522:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAACertificateAttributeName(java.lang.String) -> setLdapAACertificateAttributeName
    538:540:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeDescriptorCertificateAttributeName(java.lang.String) -> setLdapAttributeDescriptorCertificateAttributeName
    555:557:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeCertificateRevocationListAttributeName(java.lang.String) -> setLdapAttributeCertificateRevocationListAttributeName
    572:574:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeAuthorityRevocationListAttributeName(java.lang.String) -> setLdapAttributeAuthorityRevocationListAttributeName
    588:590:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setUserCertificateSubjectAttributeName(java.lang.String) -> setUserCertificateSubjectAttributeName
    604:606:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCACertificateSubjectAttributeName(java.lang.String) -> setCACertificateSubjectAttributeName
    620:622:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCrossCertificateSubjectAttributeName(java.lang.String) -> setCrossCertificateSubjectAttributeName
    636:638:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCertificateRevocationListIssuerAttributeName(java.lang.String) -> setCertificateRevocationListIssuerAttributeName
    652:654:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setDeltaRevocationListIssuerAttributeName(java.lang.String) -> setDeltaRevocationListIssuerAttributeName
    668:670:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAuthorityRevocationListIssuerAttributeName(java.lang.String) -> setAuthorityRevocationListIssuerAttributeName
    684:686:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateAttributeSubjectAttributeName(java.lang.String) -> setAttributeCertificateAttributeSubjectAttributeName
    700:702:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAACertificateSubjectAttributeName(java.lang.String) -> setAACertificateSubjectAttributeName
    716:718:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeDescriptorCertificateSubjectAttributeName(java.lang.String) -> setAttributeDescriptorCertificateSubjectAttributeName
    733:735:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateRevocationListIssuerAttributeName(java.lang.String) -> setAttributeCertificateRevocationListIssuerAttributeName
    749:751:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeAuthorityRevocationListIssuerAttributeName(java.lang.String) -> setAttributeAuthorityRevocationListIssuerAttributeName
    763:765:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setSearchForSerialNumberIn(java.lang.String) -> setSearchForSerialNumberIn
    770:796:org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters build() -> build
    96:96:java.lang.String access$0(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> a
    98:98:java.lang.String access$1(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> b
    102:102:java.lang.String access$2(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> c
    104:104:java.lang.String access$3(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> d
    106:106:java.lang.String access$4(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> e
    108:108:java.lang.String access$5(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> f
    110:110:java.lang.String access$6(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> g
    112:112:java.lang.String access$7(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> h
    114:114:java.lang.String access$8(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> i
    116:116:java.lang.String access$9(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> j
    118:118:java.lang.String access$10(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> k
    120:120:java.lang.String access$11(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> l
    122:122:java.lang.String access$12(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> m
    126:126:java.lang.String access$13(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> n
    128:128:java.lang.String access$14(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> o
    130:130:java.lang.String access$15(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> p
    132:132:java.lang.String access$16(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> q
    134:134:java.lang.String access$17(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> r
    136:136:java.lang.String access$18(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> s
    138:138:java.lang.String access$19(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> t
    140:140:java.lang.String access$20(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> u
    142:142:java.lang.String access$21(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> v
    144:144:java.lang.String access$22(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> w
    146:146:java.lang.String access$23(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> x
    151:151:java.lang.String access$24(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> y
    153:153:java.lang.String access$25(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> z
    155:155:java.lang.String access$26(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> A
    157:157:java.lang.String access$27(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> B
    159:159:java.lang.String access$28(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> C
    161:161:java.lang.String access$29(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> D
    163:163:java.lang.String access$30(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> E
    165:165:java.lang.String access$31(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> F
    167:167:java.lang.String access$32(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> G
    169:169:java.lang.String access$33(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> H
    171:171:java.lang.String access$34(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> I
    173:173:java.lang.String access$35(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> J
org.sandrob.bouncycastle.jce.X509Principal -> org.sandrob.bouncycastle.jce.X509Principal:
    32:36:org.sandrob.bouncycastle.asn1.ASN1Sequence readSequence(org.sandrob.bouncycastle.asn1.ASN1InputStream) -> a
    47:48:void <init>(byte[]) -> <init>
    56:57:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Name) -> <init>
    67:68:void <init>(java.util.Hashtable) -> <init>
    80:81:void <init>(java.util.Vector,java.util.Hashtable) -> <init>
    90:91:void <init>(java.util.Vector,java.util.Vector) -> <init>
    100:101:void <init>(java.lang.String) -> <init>
    114:115:void <init>(boolean,java.lang.String) -> <init>
    132:133:void <init>(boolean,java.util.Hashtable,java.lang.String) -> <init>
    137:137:java.lang.String getName() -> getName
    147:151:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.examples.PKCS12Example -> org.sandrob.bouncycastle.jce.examples.PKCS12Example:
    char[] passwd -> a
    org.sandrob.bouncycastle.x509.X509V1CertificateGenerator v1CertGen -> b
    org.sandrob.bouncycastle.x509.X509V3CertificateGenerator v3CertGen -> c
    38:43:void <clinit>() -> <clinit>
    38:38:void <init>() -> <init>
    56:91:java.security.cert.Certificate createMasterCert(java.security.PublicKey,java.security.PrivateKey) -> createMasterCert
    106:166:java.security.cert.Certificate createIntermediateCert(java.security.PublicKey,java.security.PrivateKey,java.security.cert.X509Certificate) -> createIntermediateCert
    181:260:java.security.cert.Certificate createCert(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey) -> createCert
    267:378:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.exception.ExtCertPathBuilderException -> org.sandrob.bouncycastle.jce.exception.ExtCertPathBuilderException:
    java.lang.Throwable cause -> a
    14:16:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    21:23:void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int) -> <init>
    27:27:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.exception.ExtCertPathValidatorException -> org.sandrob.bouncycastle.jce.exception.ExtCertPathValidatorException:
    java.lang.Throwable cause -> a
    15:17:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    22:24:void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int) -> <init>
    28:28:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.exception.ExtCertificateEncodingException -> org.sandrob.bouncycastle.jce.exception.ExtCertificateEncodingException:
    java.lang.Throwable cause -> a
    13:15:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    19:19:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.exception.ExtException -> org.sandrob.bouncycastle.jce.exception.ExtException:
    java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.exception.ExtIOException -> org.sandrob.bouncycastle.jce.exception.ExtIOException:
    java.lang.Throwable cause -> a
    13:15:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    19:19:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.interfaces.BCKeyStore -> org.sandrob.bouncycastle.jce.interfaces.BCKeyStore:
    void setRandom(java.security.SecureRandom) -> setRandom
org.sandrob.bouncycastle.jce.interfaces.ConfigurableProvider -> org.sandrob.bouncycastle.jce.interfaces.ConfigurableProvider:
    java.lang.String THREAD_LOCAL_EC_IMPLICITLY_CA -> THREAD_LOCAL_EC_IMPLICITLY_CA
    java.lang.String EC_IMPLICITLY_CA -> EC_IMPLICITLY_CA
    void setParameter(java.lang.String,java.lang.Object) -> setParameter
org.sandrob.bouncycastle.jce.interfaces.ECKey -> org.sandrob.bouncycastle.jce.interfaces.ECKey:
    org.sandrob.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
org.sandrob.bouncycastle.jce.interfaces.ECPointEncoder -> org.sandrob.bouncycastle.jce.interfaces.ECPointEncoder:
    void setPointFormat(java.lang.String) -> setPointFormat
org.sandrob.bouncycastle.jce.interfaces.ECPrivateKey -> org.sandrob.bouncycastle.jce.interfaces.ECPrivateKey:
    java.math.BigInteger getD() -> getD
org.sandrob.bouncycastle.jce.interfaces.ECPublicKey -> org.sandrob.bouncycastle.jce.interfaces.ECPublicKey:
    org.sandrob.bouncycastle.math.ec.ECPoint getQ() -> getQ
org.sandrob.bouncycastle.jce.interfaces.ElGamalKey -> org.sandrob.bouncycastle.jce.interfaces.ElGamalKey:
    org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
org.sandrob.bouncycastle.jce.interfaces.ElGamalPrivateKey -> org.sandrob.bouncycastle.jce.interfaces.ElGamalPrivateKey:
    java.math.BigInteger getX() -> getX
org.sandrob.bouncycastle.jce.interfaces.ElGamalPublicKey -> org.sandrob.bouncycastle.jce.interfaces.ElGamalPublicKey:
    java.math.BigInteger getY() -> getY
org.sandrob.bouncycastle.jce.interfaces.GOST3410Key -> org.sandrob.bouncycastle.jce.interfaces.GOST3410Key:
    org.sandrob.bouncycastle.jce.interfaces.GOST3410Params getParameters() -> getParameters
org.sandrob.bouncycastle.jce.interfaces.GOST3410Params -> org.sandrob.bouncycastle.jce.interfaces.GOST3410Params:
    java.lang.String getPublicKeyParamSetOID() -> getPublicKeyParamSetOID
    java.lang.String getDigestParamSetOID() -> getDigestParamSetOID
    java.lang.String getEncryptionParamSetOID() -> getEncryptionParamSetOID
    org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec getPublicKeyParameters() -> getPublicKeyParameters
org.sandrob.bouncycastle.jce.interfaces.GOST3410PrivateKey -> org.sandrob.bouncycastle.jce.interfaces.GOST3410PrivateKey:
    java.math.BigInteger getX() -> getX
org.sandrob.bouncycastle.jce.interfaces.GOST3410PublicKey -> org.sandrob.bouncycastle.jce.interfaces.GOST3410PublicKey:
    java.math.BigInteger getY() -> getY
org.sandrob.bouncycastle.jce.interfaces.IESKey -> org.sandrob.bouncycastle.jce.interfaces.IESKey:
    java.security.PublicKey getPublic() -> getPublic
    java.security.PrivateKey getPrivate() -> getPrivate
org.sandrob.bouncycastle.jce.interfaces.MQVPrivateKey -> org.sandrob.bouncycastle.jce.interfaces.MQVPrivateKey:
    java.security.PrivateKey getStaticPrivateKey() -> getStaticPrivateKey
    java.security.PrivateKey getEphemeralPrivateKey() -> getEphemeralPrivateKey
    java.security.PublicKey getEphemeralPublicKey() -> getEphemeralPublicKey
org.sandrob.bouncycastle.jce.interfaces.MQVPublicKey -> org.sandrob.bouncycastle.jce.interfaces.MQVPublicKey:
    java.security.PublicKey getStaticKey() -> getStaticKey
    java.security.PublicKey getEphemeralKey() -> getEphemeralKey
org.sandrob.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier -> org.sandrob.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier:
    void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.sandrob.bouncycastle.jce.netscape.NetscapeCertRequest -> org.sandrob.bouncycastle.jce.netscape.NetscapeCertRequest:
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlg -> a
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier keyAlg -> b
    byte[] sigBits -> c
    java.lang.String challenge -> d
    org.sandrob.bouncycastle.asn1.DERBitString content -> e
    java.security.PublicKey pubkey -> f
    58:60:org.sandrob.bouncycastle.asn1.ASN1Sequence getReq(byte[]) -> a
    67:68:void <init>(byte[]) -> <init>
    70:127:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    129:146:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,java.security.PublicKey) -> <init>
    150:150:java.lang.String getChallenge() -> getChallenge
    155:156:void setChallenge(java.lang.String) -> setChallenge
    160:160:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlgorithm() -> getSigningAlgorithm
    165:166:void setSigningAlgorithm(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSigningAlgorithm
    170:170:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlgorithm() -> getKeyAlgorithm
    175:176:void setKeyAlgorithm(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setKeyAlgorithm
    180:180:java.security.PublicKey getPublicKey() -> getPublicKey
    185:186:void setPublicKey(java.security.PublicKey) -> setPublicKey
    191:205:boolean verify(java.lang.String) -> verify
    212:213:void sign(java.security.PrivateKey) -> sign
    220:247:void sign(java.security.PrivateKey,java.security.SecureRandom) -> sign
    252:270:org.sandrob.bouncycastle.asn1.DERObject getKeySpec() -> a
    275:293:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.jce.provider.AnnotatedException -> org.sandrob.bouncycastle.jce.provider.AnnotatedException:
    java.lang.Throwable _underlyingException -> a
    13:16:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    20:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.provider.BouncyCastleProvider -> org.sandrob.bouncycastle.jce.provider.BouncyCastleProvider:
    java.lang.String info -> a
    java.lang.String PROVIDER_NAME -> PROVIDER_NAME
    java.lang.String[] SYMMETRIC_CIPHERS -> b
    java.lang.String[] ASYMMETRIC_CIPHERS -> c
    43:66:void <clinit>() -> <clinit>
    76:86:void <init>() -> <init>
    90:529:void setup() -> a
    533:567:void loadAlgorithms(java.lang.String,java.lang.String[]) -> a
    572:582:void addMappings(java.util.Map) -> a
    589:643:void addMacAlgorithms() -> b
    650:658:void addHMACAlgorithm(java.lang.String,java.lang.String,java.lang.String) -> a
    664:668:void addHMACAlias(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    675:713:void addMessageDigestAlgorithms() -> c
    720:875:void addSignatureAlgorithms() -> d
    883:894:void addSignatureAlgorithm(java.lang.String,java.lang.String,java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    898:899:void setParameter(java.lang.String,java.lang.Object) -> setParameter
    88:88:void access$0(org.sandrob.bouncycastle.jce.provider.BouncyCastleProvider) -> a
org.sandrob.bouncycastle.jce.provider.BouncyCastleProvider$1 -> org.sandrob.bouncycastle.jce.provider.BouncyCastleProvider$1:
    org.sandrob.bouncycastle.jce.provider.BouncyCastleProvider this$0 -> a
    1:78:void <init>(org.sandrob.bouncycastle.jce.provider.BouncyCastleProvider) -> <init>
    82:83:java.lang.Object run() -> run
org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher -> org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher:
    java.lang.Class[] availableSpecs -> a
    org.sandrob.bouncycastle.crypto.BufferedBlockCipher cipher -> b
    org.sandrob.bouncycastle.crypto.params.ParametersWithIV ivParam -> c
    int pbeType -> d
    int pbeHash -> e
    int pbeKeySize -> f
    int pbeIvSize -> g
    int ivLength -> h
    java.security.AlgorithmParameters engineParams -> i
    51:75:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    51:90:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int,int,int,int) -> <init>
    94:94:int engineGetBlockSize() -> engineGetBlockSize
    99:99:byte[] engineGetIV() -> engineGetIV
    105:105:int engineGetKeySize(java.security.Key) -> engineGetKeySize
    111:111:int engineGetOutputSize(int) -> engineGetOutputSize
    116:139:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    145:194:void engineSetMode(java.lang.String) -> engineSetMode
    200:218:void engineSetPadding(java.lang.String) -> engineSetPadding
    232:324:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    333:358:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    368:374:void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    381:393:byte[] engineUpdate(byte[],int,int) -> engineUpdate
    403:403:int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    412:437:byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    448:465:int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    473:485:byte[] engineWrap(java.security.Key) -> engineWrap
    495:541:java.security.Key engineUnwrap(byte[],java.lang.String,int) -> engineUnwrap
org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES -> org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES:
    557:558:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES -> org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES:
    569:570:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES2Key -> org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES2Key:
    605:606:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES3Key -> org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES3Key:
    581:582:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndDES3Key -> org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndDES3Key:
    593:594:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish -> org.sandrob.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish:
    617:618:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.BrokenKDF2BytesGenerator -> org.sandrob.bouncycastle.jce.provider.BrokenKDF2BytesGenerator:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    byte[] shared -> b
    byte[] iv -> c
    34:38:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    43:52:void init(org.sandrob.bouncycastle.crypto.DerivationParameters) -> init
    59:59:org.sandrob.bouncycastle.crypto.Digest getDigest() -> getDigest
    75:125:int generateBytes(byte[],int,int) -> generateBytes
org.sandrob.bouncycastle.jce.provider.BrokenPBE -> org.sandrob.bouncycastle.jce.provider.BrokenPBE:
    int MD5 -> MD5
    int SHA1 -> SHA1
    int RIPEMD160 -> RIPEMD160
    int PKCS5S1 -> PKCS5S1
    int PKCS5S2 -> PKCS5S2
    int PKCS12 -> PKCS12
    int OLD_PKCS12 -> OLD_PKCS12
org.sandrob.bouncycastle.jce.provider.BrokenPBE$Util -> org.sandrob.bouncycastle.jce.provider.BrokenPBE$Util:
    262:262:void <init>() -> <init>
    272:284:void setOddParity(byte[]) -> a
    292:345:org.sandrob.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int) -> a
    361:403:org.sandrob.bouncycastle.crypto.CipherParameters makePBEParameters(org.sandrob.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,int,int,java.lang.String,int,int) -> a
org.sandrob.bouncycastle.jce.provider.CertPathValidatorUtilities -> org.sandrob.bouncycastle.jce.provider.CertPathValidatorUtilities:
    org.sandrob.bouncycastle.jce.provider.PKIXCRLUtil CRL_UTIL -> CRL_UTIL
    java.lang.String CERTIFICATE_POLICIES -> CERTIFICATE_POLICIES
    java.lang.String BASIC_CONSTRAINTS -> BASIC_CONSTRAINTS
    java.lang.String POLICY_MAPPINGS -> POLICY_MAPPINGS
    java.lang.String SUBJECT_ALTERNATIVE_NAME -> SUBJECT_ALTERNATIVE_NAME
    java.lang.String NAME_CONSTRAINTS -> NAME_CONSTRAINTS
    java.lang.String KEY_USAGE -> KEY_USAGE
    java.lang.String INHIBIT_ANY_POLICY -> INHIBIT_ANY_POLICY
    java.lang.String ISSUING_DISTRIBUTION_POINT -> ISSUING_DISTRIBUTION_POINT
    java.lang.String DELTA_CRL_INDICATOR -> DELTA_CRL_INDICATOR
    java.lang.String POLICY_CONSTRAINTS -> POLICY_CONSTRAINTS
    java.lang.String FRESHEST_CRL -> FRESHEST_CRL
    java.lang.String CRL_DISTRIBUTION_POINTS -> CRL_DISTRIBUTION_POINTS
    java.lang.String AUTHORITY_KEY_IDENTIFIER -> AUTHORITY_KEY_IDENTIFIER
    java.lang.String ANY_POLICY -> ANY_POLICY
    java.lang.String CRL_NUMBER -> CRL_NUMBER
    int KEY_CERT_SIGN -> KEY_CERT_SIGN
    int CRL_SIGN -> CRL_SIGN
    java.lang.String[] crlReasons -> crlReasons
    74:113:void <clinit>() -> <clinit>
    74:74:void <init>() -> <init>
    135:135:java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set) -> findTrustAnchor
    161:236:java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set,java.lang.String) -> findTrustAnchor
    246:261:void addAdditionalStoresFromAltNames(java.security.cert.X509Certificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> addAdditionalStoresFromAltNames
    270:276:javax.security.auth.x500.X500Principal getEncodedIssuerPrincipal(java.lang.Object) -> getEncodedIssuerPrincipal
    282:289:java.util.Date getValidDate(java.security.cert.PKIXParameters) -> getValidDate
    294:294:javax.security.auth.x500.X500Principal getSubjectPrincipal(java.security.cert.X509Certificate) -> getSubjectPrincipal
    299:299:boolean isSelfIssued(java.security.cert.X509Certificate) -> isSelfIssued
    318:324:org.sandrob.bouncycastle.asn1.DERObject getExtensionValue(java.security.cert.X509Extension,java.lang.String) -> getExtensionValue
    334:342:org.sandrob.bouncycastle.asn1.DERObject getObject(java.lang.String,byte[]) -> a
    348:348:javax.security.auth.x500.X500Principal getIssuerPrincipal(java.security.cert.X509CRL) -> getIssuerPrincipal
    357:365:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier(java.security.PublicKey) -> getAlgorithmIdentifier
    379:407:java.util.Set getQualifierSet(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> getQualifierSet
    415:436:org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode) -> removePolicyNode
    444:455:void removePolicyNodeRecurse(java.util.List[],org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode) -> a
    464:490:boolean processCertD1i(int,java.util.List[],org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.util.Set) -> processCertD1i
    499:522:void processCertD1ii(int,java.util.List[],org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.util.Set) -> processCertD1ii
    532:612:void prepareNextCertB1(int,java.util.List[],java.lang.String,java.util.Map,java.security.cert.X509Certificate) -> prepareNextCertB1
    620:647:org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode prepareNextCertB2(int,java.util.List[],java.lang.String,org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode) -> prepareNextCertB2
    653:653:boolean isAnyPolicy(java.util.Set) -> isAnyPolicy
    659:702:void addAdditionalStoreFromLocation(java.lang.String,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> addAdditionalStoreFromLocation
    720:758:java.util.Collection findCertificates(org.sandrob.bouncycastle.x509.X509CertStoreSelector,java.util.List) -> findCertificates
    765:788:java.util.Collection findCertificates(org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector,java.util.List) -> findCertificates
    795:833:void addAdditionalStoresFromCRLDistributionPoint(org.sandrob.bouncycastle.asn1.x509.CRLDistPoint,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> addAdditionalStoresFromCRLDistributionPoint
    861:959:void getCRLIssuersFromDistributionPoint(org.sandrob.bouncycastle.asn1.x509.DistributionPoint,java.util.Collection,java.security.cert.X509CRLSelector,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> getCRLIssuersFromDistributionPoint
    964:970:java.math.BigInteger getSerialNumber(java.lang.Object) -> a
    982:1039:void getCertStatus(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.sandrob.bouncycastle.jce.provider.CertStatus) -> getCertStatus
    1056:1124:java.util.Set getDeltaCRLs(java.util.Date,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509CRL) -> getDeltaCRLs
    1129:1131:boolean isDeltaCRL(java.security.cert.X509CRL) -> a
    1152:1202:java.util.Set getCompleteCRLs(org.sandrob.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.util.Date,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> getCompleteCRLs
    1209:1265:java.util.Date getValidCertDateFromValidityModel(org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.CertPath,int) -> getValidCertDateFromValidityModel
    1293:1331:java.security.PublicKey getNextWorkingKey(java.util.List,int) -> getNextWorkingKey
    1351:1388:java.util.Collection findIssuerCerts(java.security.cert.X509Certificate,org.sandrob.bouncycastle.x509.ExtendedPKIXBuilderParameters) -> findIssuerCerts
    1395:1403:void verifyX509Certificate(java.security.cert.X509Certificate,java.security.PublicKey,java.lang.String) -> verifyX509Certificate
org.sandrob.bouncycastle.jce.provider.CertStatus -> org.sandrob.bouncycastle.jce.provider.a:
    int certStatus -> a
    java.util.Date revocationDate -> b
    5:13:void <init>() -> <init>
    20:20:java.util.Date getRevocationDate() -> a
    28:29:void setRevocationDate(java.util.Date) -> a
    36:36:int getCertStatus() -> b
    44:45:void setCertStatus(int) -> a
org.sandrob.bouncycastle.jce.provider.CertStoreCollectionSpi -> org.sandrob.bouncycastle.jce.provider.CertStoreCollectionSpi:
    java.security.cert.CollectionCertStoreParameters params -> a
    24:32:void <init>(java.security.cert.CertStoreParameters) -> <init>
    38:66:java.util.Collection engineGetCertificates(java.security.cert.CertSelector) -> engineGetCertificates
    74:102:java.util.Collection engineGetCRLs(java.security.cert.CRLSelector) -> engineGetCRLs
org.sandrob.bouncycastle.jce.provider.DHUtil -> org.sandrob.bouncycastle.jce.provider.DHUtil:
    19:19:void <init>() -> <init>
    25:33:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    40:48:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.sandrob.bouncycastle.jce.provider.DSABase -> org.sandrob.bouncycastle.jce.provider.DSABase:
    org.sandrob.bouncycastle.crypto.Digest digest -> digest
    org.sandrob.bouncycastle.crypto.DSA signer -> signer
    org.sandrob.bouncycastle.jce.provider.DSAEncoder encoder -> encoder
    23:31:void <init>(org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.DSA,org.sandrob.bouncycastle.jce.provider.DSAEncoder) -> <init>
    37:38:void engineInitSign(java.security.PrivateKey) -> engineInitSign
    44:45:void engineUpdate(byte) -> engineUpdate
    53:54:void engineUpdate(byte[],int,int) -> engineUpdate
    59:71:byte[] engineSign() -> engineSign
    79:94:boolean engineVerify(byte[]) -> engineVerify
    100:100:void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    110:110:void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    119:119:java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.sandrob.bouncycastle.jce.provider.DSAEncoder -> org.sandrob.bouncycastle.jce.provider.DSAEncoder:
    byte[] encode(java.math.BigInteger,java.math.BigInteger) -> encode
    java.math.BigInteger[] decode(byte[]) -> decode
org.sandrob.bouncycastle.jce.provider.DSAUtil -> org.sandrob.bouncycastle.jce.provider.DSAUtil:
    18:18:void <init>() -> <init>
    24:32:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    39:47:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.sandrob.bouncycastle.jce.provider.ElGamalUtil -> org.sandrob.bouncycastle.jce.provider.ElGamalUtil:
    21:21:void <init>() -> <init>
    27:42:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    49:64:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.sandrob.bouncycastle.jce.provider.ExtCRLException -> org.sandrob.bouncycastle.jce.provider.b:
    java.lang.Throwable cause -> a
    12:14:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    18:18:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.jce.provider.GOST3410Util -> org.sandrob.bouncycastle.jce.provider.GOST3410Util:
    19:19:void <init>() -> <init>
    25:34:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    41:50:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.sandrob.bouncycastle.jce.provider.IndexedPKIXParameters -> org.sandrob.bouncycastle.jce.provider.IndexedPKIXParameters:
    java.util.Map encodings -> a
    java.util.Map bySubject -> b
    java.util.Map byCA -> c
    43:76:void <init>(java.util.Set) -> <init>
    133:138:boolean isDirectlyTrusted(java.security.cert.X509Certificate) -> isDirectlyTrusted
org.sandrob.bouncycastle.jce.provider.IndexedPKIXParameters$Bytes -> org.sandrob.bouncycastle.jce.provider.IndexedPKIXParameters$a:
    byte[] bytes -> a
    int hash -> b
    148:151:void <init>(byte[]) -> <init>
    153:153:int hashCode() -> hashCode
    156:156:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher:
    java.lang.Class[] availableSpecs -> a
    org.sandrob.bouncycastle.crypto.BlockCipher baseEngine -> b
    org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher cipher -> c
    org.sandrob.bouncycastle.crypto.params.ParametersWithIV ivParam -> d
    int ivLength -> e
    boolean padded -> f
    javax.crypto.spec.PBEParameterSpec pbeSpec -> g
    java.lang.String pbeAlgorithm -> h
    java.lang.String modeName -> i
    68:96:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    68:106:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    68:116:void <init>(org.sandrob.bouncycastle.crypto.BufferedBlockCipher,int) -> <init>
    120:120:int engineGetBlockSize() -> engineGetBlockSize
    125:125:byte[] engineGetIV() -> engineGetIV
    131:131:int engineGetKeySize(java.security.Key) -> engineGetKeySize
    137:137:int engineGetOutputSize(int) -> engineGetOutputSize
    142:177:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    184:289:void engineSetMode(java.lang.String) -> engineSetMode
    295:345:void engineSetPadding(java.lang.String) -> engineSetPadding
    356:550:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    559:585:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    595:601:void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    608:634:byte[] engineUpdate(byte[],int,int) -> engineUpdate
    647:651:int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    661:691:byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    702:719:int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    726:726:boolean isAEADModeName(java.lang.String) -> a
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$AEADGenericBlockCipher -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$a:
    org.sandrob.bouncycastle.crypto.modes.AEADBlockCipher cipher -> a
    1019:1022:void <init>(org.sandrob.bouncycastle.crypto.modes.AEADBlockCipher) -> <init>
    1027:1028:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> a
    1037:1037:boolean wrapOnNoPadding() -> a
    1042:1042:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> b
    1047:1047:int getOutputSize(int) -> a
    1052:1052:int getUpdateOutputSize(int) -> b
    1062:1062:int processBytes(byte[],int,int,byte[],int) -> a
    1067:1067:int doFinal(byte[],int) -> a
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$b:
    org.sandrob.bouncycastle.crypto.BufferedBlockCipher cipher -> a
    952:955:void <init>(org.sandrob.bouncycastle.crypto.BufferedBlockCipher) -> <init>
    957:960:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher) -> <init>
    962:965:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,org.sandrob.bouncycastle.crypto.paddings.BlockCipherPadding) -> <init>
    970:971:void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> a
    975:975:boolean wrapOnNoPadding() -> a
    985:985:org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> b
    990:990:int getOutputSize(int) -> a
    995:995:int getUpdateOutputSize(int) -> b
    1005:1005:int processBytes(byte[],int,int,byte[],int) -> a
    1010:1010:int doFinal(byte[],int) -> a
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$DES -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$DES:
    741:742:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$DESCBC -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$DESCBC:
    753:754:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$GOST28147 -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$GOST28147:
    765:766:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$GOST28147cbc -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$GOST28147cbc:
    774:775:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$GenericBlockCipher -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$c:
    void init(boolean,org.sandrob.bouncycastle.crypto.CipherParameters) -> a
    boolean wrapOnNoPadding() -> a
    org.sandrob.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> b
    int getOutputSize(int) -> a
    int getUpdateOutputSize(int) -> b
    int processBytes(byte[],int,int,byte[],int) -> a
    int doFinal(byte[],int) -> a
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithAESCBC -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithAESCBC:
    918:919:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndDES -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndDES:
    810:811:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndRC2 -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithMD5AndRC2:
    822:823:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndDES -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndDES:
    834:835:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndRC2 -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHA1AndRC2:
    846:847:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd128BitRC2 -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd128BitRC2:
    882:883:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd40BitRC2 -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAnd40BitRC2:
    894:895:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES2Key -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES2Key:
    870:871:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES3Key -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndDES3Key:
    858:859:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndTwofish -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$PBEWithSHAAndTwofish:
    906:907:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$RC2 -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$RC2:
    786:787:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$RC2CBC -> org.sandrob.bouncycastle.jce.provider.JCEBlockCipher$RC2CBC:
    798:799:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEDHKeyAgreement -> org.sandrob.bouncycastle.jce.provider.JCEDHKeyAgreement:
    java.math.BigInteger x -> a
    java.math.BigInteger p -> b
    java.math.BigInteger g -> c
    java.math.BigInteger result -> d
    java.util.Hashtable algorithms -> e
    27:47:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    53:63:byte[] bigIntToBytes(java.math.BigInteger) -> a
    71:97:java.security.Key engineDoPhase(java.security.Key,boolean) -> engineDoPhase
    103:108:byte[] engineGenerateSecret() -> engineGenerateSecret
    116:130:int engineGenerateSecret(byte[],int) -> engineGenerateSecret
    136:159:javax.crypto.SecretKey engineGenerateSecret(java.lang.String) -> engineGenerateSecret
    168:192:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    199:209:void engineInit(java.security.Key,java.security.SecureRandom) -> engineInit
org.sandrob.bouncycastle.jce.provider.JCEDHPrivateKey -> org.sandrob.bouncycastle.jce.provider.JCEDHPrivateKey:
    java.math.BigInteger x -> a
    javax.crypto.spec.DHParameterSpec dhSpec -> b
    org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo info -> c
    org.sandrob.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> d
    36:40:void <init>() -> <init>
    36:47:void <init>(javax.crypto.interfaces.DHPrivateKey) -> <init>
    36:54:void <init>(javax.crypto.spec.DHPrivateKeySpec) -> <init>
    36:89:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> <init>
    36:96:void <init>(org.sandrob.bouncycastle.crypto.params.DHPrivateKeyParameters) -> <init>
    100:100:java.lang.String getAlgorithm() -> getAlgorithm
    110:110:java.lang.String getFormat() -> getFormat
    121:128:byte[] getEncoded() -> getEncoded
    133:133:javax.crypto.spec.DHParameterSpec getParams() -> getParams
    138:138:java.math.BigInteger getX() -> getX
    164:165:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    170:170:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    175:175:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.sandrob.bouncycastle.jce.provider.JCEDHPublicKey -> org.sandrob.bouncycastle.jce.provider.JCEDHPublicKey:
    java.math.BigInteger y -> a
    javax.crypto.spec.DHParameterSpec dhSpec -> b
    org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo info -> c
    32:37:void <init>(javax.crypto.spec.DHPublicKeySpec) -> <init>
    39:44:void <init>(javax.crypto.interfaces.DHPublicKey) -> <init>
    46:51:void <init>(org.sandrob.bouncycastle.crypto.params.DHPublicKeyParameters) -> <init>
    53:59:void <init>(java.math.BigInteger,javax.crypto.spec.DHParameterSpec) -> <init>
    61:105:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    109:109:java.lang.String getAlgorithm() -> getAlgorithm
    114:114:java.lang.String getFormat() -> getFormat
    119:126:byte[] getEncoded() -> getEncoded
    131:131:javax.crypto.spec.DHParameterSpec getParams() -> getParams
    136:136:java.math.BigInteger getY() -> getY
    141:159:boolean isPKCSParam(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> a
org.sandrob.bouncycastle.jce.provider.JCEDigestUtil -> org.sandrob.bouncycastle.jce.provider.c:
    java.util.Set md5 -> a
    java.util.Set sha1 -> b
    java.util.Set sha224 -> c
    java.util.Set sha256 -> d
    java.util.Set sha384 -> e
    java.util.Set sha512 -> f
    java.util.Map oids -> g
    21:78:void <clinit>() -> <clinit>
    84:111:org.sandrob.bouncycastle.crypto.Digest getDigest(java.lang.String) -> a
    118:123:boolean isSameDigest(java.lang.String,java.lang.String) -> a
    129:129:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID(java.lang.String) -> b
org.sandrob.bouncycastle.jce.provider.JCEECPrivateKey -> org.sandrob.bouncycastle.jce.provider.JCEECPrivateKey:
    java.lang.String algorithm -> a
    java.math.BigInteger d -> b
    java.security.spec.ECParameterSpec ecSpec -> c
    boolean withCompression -> d
    org.sandrob.bouncycastle.asn1.DERBitString publicKey -> e
    org.sandrob.bouncycastle.jce.provider.PKCS12BagAttributeCarrierImpl attrCarrier -> f
    43:54:void <init>() -> <init>
    43:62:void <init>(java.security.interfaces.ECPrivateKey) -> <init>
    43:84:void <init>(java.lang.String,org.sandrob.bouncycastle.jce.spec.ECPrivateKeySpec) -> <init>
    43:94:void <init>(java.lang.String,java.security.spec.ECPrivateKeySpec) -> <init>
    43:106:void <init>(java.lang.String,org.sandrob.bouncycastle.jce.provider.JCEECPrivateKey) -> <init>
    43:137:void <init>(java.lang.String,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters,org.sandrob.bouncycastle.jce.provider.JCEECPublicKey,java.security.spec.ECParameterSpec) -> <init>
    43:176:void <init>(java.lang.String,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters,org.sandrob.bouncycastle.jce.provider.JCEECPublicKey,org.sandrob.bouncycastle.jce.spec.ECParameterSpec) -> <init>
    43:185:void <init>(java.lang.String,org.sandrob.bouncycastle.crypto.params.ECPrivateKeyParameters) -> <init>
    43:191:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> <init>
    195:261:void populateFromPrivKeyInfo(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> a
    265:265:java.lang.String getAlgorithm() -> getAlgorithm
    275:275:java.lang.String getFormat() -> getFormat
    288:337:byte[] getEncoded() -> getEncoded
    342:342:java.security.spec.ECParameterSpec getParams() -> getParams
    347:352:org.sandrob.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    357:362:org.sandrob.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> a
    367:367:java.math.BigInteger getS() -> getS
    372:372:java.math.BigInteger getD() -> getD
    379:380:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    385:385:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    390:390:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    395:396:void setPointFormat(java.lang.String) -> setPointFormat
    400:407:boolean equals(java.lang.Object) -> equals
    412:412:int hashCode() -> hashCode
    417:423:java.lang.String toString() -> toString
    431:437:org.sandrob.bouncycastle.asn1.DERBitString getPublicKeyDetails(org.sandrob.bouncycastle.jce.provider.JCEECPublicKey) -> a
org.sandrob.bouncycastle.jce.provider.JCEECPublicKey -> org.sandrob.bouncycastle.jce.provider.JCEECPublicKey:
    java.lang.String algorithm -> a
    org.sandrob.bouncycastle.math.ec.ECPoint q -> b
    java.security.spec.ECParameterSpec ecSpec -> c
    boolean withCompression -> d
    org.sandrob.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters gostParams -> e
    45:60:void <init>(java.lang.String,org.sandrob.bouncycastle.jce.provider.JCEECPublicKey) -> <init>
    45:69:void <init>(java.lang.String,java.security.spec.ECPublicKeySpec) -> <init>
    45:95:void <init>(java.lang.String,org.sandrob.bouncycastle.jce.spec.ECPublicKeySpec) -> <init>
    45:117:void <init>(java.lang.String,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters,java.security.spec.ECParameterSpec) -> <init>
    45:141:void <init>(java.lang.String,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters,org.sandrob.bouncycastle.jce.spec.ECParameterSpec) -> <init>
    45:153:void <init>(java.lang.String,org.sandrob.bouncycastle.crypto.params.ECPublicKeyParameters) -> <init>
    157:163:java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.sandrob.bouncycastle.crypto.params.ECDomainParameters) -> a
    45:172:void <init>(java.security.interfaces.ECPublicKey) -> <init>
    45:178:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    182:301:void populateFromPubKeyInfo(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    305:305:java.lang.String getAlgorithm() -> getAlgorithm
    310:310:java.lang.String getFormat() -> getFormat
    318:392:byte[] getEncoded() -> getEncoded
    397:409:void extractBytes(byte[],int,java.math.BigInteger) -> a
    413:413:java.security.spec.ECParameterSpec getParams() -> getParams
    418:423:org.sandrob.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    428:428:java.security.spec.ECPoint getW() -> getW
    433:445:org.sandrob.bouncycastle.math.ec.ECPoint getQ() -> getQ
    450:450:org.sandrob.bouncycastle.math.ec.ECPoint engineGetQ() -> engineGetQ
    455:460:org.sandrob.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> a
    465:472:java.lang.String toString() -> toString
    478:479:void setPointFormat(java.lang.String) -> setPointFormat
    483:490:boolean equals(java.lang.Object) -> equals
    495:495:int hashCode() -> hashCode
org.sandrob.bouncycastle.jce.provider.JCEElGamalCipher -> org.sandrob.bouncycastle.jce.provider.JCEElGamalCipher:
    org.sandrob.bouncycastle.crypto.BufferedAsymmetricBlockCipher cipher -> a
    java.security.spec.AlgorithmParameterSpec paramSpec -> b
    java.security.AlgorithmParameters engineParams -> c
    44:48:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    54:64:void initFromSpec(javax.crypto.spec.OAEPParameterSpec) -> a
    68:68:int engineGetBlockSize() -> engineGetBlockSize
    73:73:byte[] engineGetIV() -> engineGetIV
    79:92:int engineGetKeySize(java.security.Key) -> engineGetKeySize
    98:98:int engineGetOutputSize(int) -> engineGetOutputSize
    103:119:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    126:133:void engineSetMode(java.lang.String) -> engineSetMode
    140:186:void engineSetPadding(java.lang.String) -> engineSetPadding
    197:235:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    244:244:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    253:254:void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    261:262:byte[] engineUpdate(byte[],int,int) -> engineUpdate
    272:273:int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    282:289:byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    303:319:int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.sandrob.bouncycastle.jce.provider.JCEElGamalCipher$NoPadding -> org.sandrob.bouncycastle.jce.provider.JCEElGamalCipher$NoPadding:
    330:331:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEElGamalCipher$PKCS1v1_5Padding -> org.sandrob.bouncycastle.jce.provider.JCEElGamalCipher$PKCS1v1_5Padding:
    339:340:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEElGamalPrivateKey -> org.sandrob.bouncycastle.jce.provider.JCEElGamalPrivateKey:
    java.math.BigInteger x -> a
    org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> b
    org.sandrob.bouncycastle.jce.provider.PKCS12BagAttributeCarrierImpl attrCarrier -> c
    35:39:void <init>() -> <init>
    35:46:void <init>(org.sandrob.bouncycastle.jce.interfaces.ElGamalPrivateKey) -> <init>
    35:53:void <init>(javax.crypto.interfaces.DHPrivateKey) -> <init>
    35:60:void <init>(org.sandrob.bouncycastle.jce.spec.ElGamalPrivateKeySpec) -> <init>
    35:67:void <init>(javax.crypto.spec.DHPrivateKeySpec) -> <init>
    35:77:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> <init>
    35:84:void <init>(org.sandrob.bouncycastle.crypto.params.ElGamalPrivateKeyParameters) -> <init>
    88:88:java.lang.String getAlgorithm() -> getAlgorithm
    98:98:java.lang.String getFormat() -> getFormat
    109:111:byte[] getEncoded() -> getEncoded
    116:116:org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
    121:121:javax.crypto.spec.DHParameterSpec getParams() -> getParams
    126:126:java.math.BigInteger getX() -> getX
    151:152:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    157:157:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    162:162:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.sandrob.bouncycastle.jce.provider.JCEElGamalPublicKey -> org.sandrob.bouncycastle.jce.provider.JCEElGamalPublicKey:
    java.math.BigInteger y -> a
    org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> b
    31:36:void <init>(org.sandrob.bouncycastle.jce.spec.ElGamalPublicKeySpec) -> <init>
    38:43:void <init>(javax.crypto.spec.DHPublicKeySpec) -> <init>
    45:50:void <init>(org.sandrob.bouncycastle.jce.interfaces.ElGamalPublicKey) -> <init>
    52:57:void <init>(javax.crypto.interfaces.DHPublicKey) -> <init>
    59:64:void <init>(org.sandrob.bouncycastle.crypto.params.ElGamalPublicKeyParameters) -> <init>
    74:91:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    95:95:java.lang.String getAlgorithm() -> getAlgorithm
    100:100:java.lang.String getFormat() -> getFormat
    105:107:byte[] getEncoded() -> getEncoded
    112:112:org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
    117:117:javax.crypto.spec.DHParameterSpec getParams() -> getParams
    122:122:java.math.BigInteger getY() -> getY
org.sandrob.bouncycastle.jce.provider.JCEIESCipher -> org.sandrob.bouncycastle.jce.provider.JCEIESCipher:
    org.sandrob.bouncycastle.crypto.engines.IESEngine cipher -> a
    int state -> b
    java.io.ByteArrayOutputStream buffer -> c
    java.security.AlgorithmParameters engineParam -> d
    org.sandrob.bouncycastle.jce.spec.IESParameterSpec engineParams -> e
    java.lang.Class[] availableSpecs -> f
    35:52:void <init>(org.sandrob.bouncycastle.crypto.engines.IESEngine) -> <init>
    56:56:int engineGetBlockSize() -> engineGetBlockSize
    61:61:byte[] engineGetIV() -> engineGetIV
    67:87:int engineGetKeySize(java.security.Key) -> engineGetKeySize
    93:103:int engineGetOutputSize(int) -> engineGetOutputSize
    109:127:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    133:133:void engineSetMode(java.lang.String) -> engineSetMode
    140:140:void engineSetPadding(java.lang.String) -> engineSetPadding
    150:216:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    225:250:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    258:271:void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    279:280:byte[] engineUpdate(byte[],int,int) -> engineUpdate
    290:291:int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    300:315:byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    327:346:int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.sandrob.bouncycastle.jce.provider.JCEIESCipher$BrokenECIES -> org.sandrob.bouncycastle.jce.provider.JCEIESCipher$BrokenECIES:
    358:362:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEIESCipher$BrokenIES -> org.sandrob.bouncycastle.jce.provider.JCEIESCipher$BrokenIES:
    370:374:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEIESCipher$ECIES -> org.sandrob.bouncycastle.jce.provider.JCEIESCipher$ECIES:
    382:386:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEIESCipher$IES -> org.sandrob.bouncycastle.jce.provider.JCEIESCipher$IES:
    394:398:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator:
    java.lang.String algName -> algName
    int keySize -> keySize
    int defaultKeySize -> defaultKeySize
    org.sandrob.bouncycastle.crypto.CipherKeyGenerator engine -> engine
    boolean uninitialised -> uninitialised
    24:34:void <init>(java.lang.String,int,org.sandrob.bouncycastle.crypto.CipherKeyGenerator) -> <init>
    41:41:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    47:52:void engineInit(java.security.SecureRandom) -> engineInit
    60:67:void engineInit(int,java.security.SecureRandom) -> engineInit
    71:77:javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$DES -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$DES:
    92:93:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$GOST28147 -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$GOST28147:
    116:117:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA1 -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA1:
    193:194:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA224 -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA224:
    205:206:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA256 -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA256:
    217:218:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA384 -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA384:
    229:230:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA512 -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACSHA512:
    241:242:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACTIGER -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$HMACTIGER:
    253:254:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$MD2HMAC -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$MD2HMAC:
    130:131:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$MD4HMAC -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$MD4HMAC:
    143:144:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$MD5HMAC -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$MD5HMAC:
    155:156:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$RC2 -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$RC2:
    104:105:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD128HMAC:
    168:169:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD160HMAC -> org.sandrob.bouncycastle.jce.provider.JCEKeyGenerator$RIPEMD160HMAC:
    180:181:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac -> org.sandrob.bouncycastle.jce.provider.JCEMac:
    org.sandrob.bouncycastle.crypto.Mac macEngine -> a
    int pbeType -> b
    int pbeHash -> c
    int keySize -> d
    42:50:void <init>(org.sandrob.bouncycastle.crypto.Mac) -> <init>
    42:62:void <init>(org.sandrob.bouncycastle.crypto.Mac,int,int,int) -> <init>
    71:107:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> engineInit
    111:111:int engineGetMacLength() -> engineGetMacLength
    116:117:void engineReset() -> engineReset
    122:123:void engineUpdate(byte) -> engineUpdate
    130:131:void engineUpdate(byte[],int,int) -> engineUpdate
    135:139:byte[] engineDoFinal() -> engineDoFinal
org.sandrob.bouncycastle.jce.provider.JCEMac$DES -> org.sandrob.bouncycastle.jce.provider.JCEMac$DES:
    154:155:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$DES9797Alg3 -> org.sandrob.bouncycastle.jce.provider.JCEMac$DES9797Alg3:
    228:229:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$DES9797Alg3with7816d4 -> org.sandrob.bouncycastle.jce.provider.JCEMac$DES9797Alg3with7816d4:
    216:217:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$DESCFB8 -> org.sandrob.bouncycastle.jce.provider.JCEMac$DESCFB8:
    192:193:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$GOST28147 -> org.sandrob.bouncycastle.jce.provider.JCEMac$GOST28147:
    178:179:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$MD2 -> org.sandrob.bouncycastle.jce.provider.JCEMac$MD2:
    240:241:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$MD4 -> org.sandrob.bouncycastle.jce.provider.JCEMac$MD4:
    252:253:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$MD5 -> org.sandrob.bouncycastle.jce.provider.JCEMac$MD5:
    264:265:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$OldSHA384 -> org.sandrob.bouncycastle.jce.provider.JCEMac$OldSHA384:
    321:322:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$OldSHA512 -> org.sandrob.bouncycastle.jce.provider.JCEMac$OldSHA512:
    345:346:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$PBEWithRIPEMD160 -> org.sandrob.bouncycastle.jce.provider.JCEMac$PBEWithRIPEMD160:
    399:400:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$PBEWithSHA -> org.sandrob.bouncycastle.jce.provider.JCEMac$PBEWithSHA:
    411:412:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$PBEWithTiger -> org.sandrob.bouncycastle.jce.provider.JCEMac$PBEWithTiger:
    423:424:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$RC2 -> org.sandrob.bouncycastle.jce.provider.JCEMac$RC2:
    166:167:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$RC2CFB8 -> org.sandrob.bouncycastle.jce.provider.JCEMac$RC2CFB8:
    204:205:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$RIPEMD128 -> org.sandrob.bouncycastle.jce.provider.JCEMac$RIPEMD128:
    357:358:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$RIPEMD160 -> org.sandrob.bouncycastle.jce.provider.JCEMac$RIPEMD160:
    369:370:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$SHA1 -> org.sandrob.bouncycastle.jce.provider.JCEMac$SHA1:
    276:277:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$SHA224 -> org.sandrob.bouncycastle.jce.provider.JCEMac$SHA224:
    288:289:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$SHA256 -> org.sandrob.bouncycastle.jce.provider.JCEMac$SHA256:
    300:301:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$SHA384 -> org.sandrob.bouncycastle.jce.provider.JCEMac$SHA384:
    312:313:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$SHA512 -> org.sandrob.bouncycastle.jce.provider.JCEMac$SHA512:
    333:334:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEMac$Tiger -> org.sandrob.bouncycastle.jce.provider.JCEMac$Tiger:
    381:382:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEPBEKey -> org.sandrob.bouncycastle.jce.provider.JCEPBEKey:
    java.lang.String algorithm -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier oid -> b
    int type -> c
    int digest -> d
    int keySize -> e
    int ivSize -> f
    org.sandrob.bouncycastle.crypto.CipherParameters param -> g
    javax.crypto.spec.PBEKeySpec pbeKeySpec -> h
    boolean tryWrong -> i
    23:46:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.sandrob.bouncycastle.crypto.CipherParameters) -> <init>
    50:50:java.lang.String getAlgorithm() -> getAlgorithm
    55:55:java.lang.String getFormat() -> getFormat
    60:83:byte[] getEncoded() -> getEncoded
    90:90:int getType() -> a
    95:95:int getDigest() -> b
    100:100:int getKeySize() -> c
    105:105:int getIvSize() -> d
    110:110:org.sandrob.bouncycastle.crypto.CipherParameters getParam() -> e
    118:118:char[] getPassword() -> getPassword
    126:126:byte[] getSalt() -> getSalt
    134:134:int getIterationCount() -> getIterationCount
    139:139:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getOID() -> getOID
    144:145:void setTryWrongPKCS12Zero(boolean) -> a
    149:149:boolean shouldTryWrongPKCS12() -> f
org.sandrob.bouncycastle.jce.provider.JCERSACipher -> org.sandrob.bouncycastle.jce.provider.JCERSACipher:
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher cipher -> a
    java.security.spec.AlgorithmParameterSpec paramSpec -> b
    java.security.AlgorithmParameters engineParams -> c
    boolean publicKeyOnly -> d
    boolean privateKeyOnly -> e
    java.io.ByteArrayOutputStream bOut -> f
    41:49:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    41:62:void <init>(javax.crypto.spec.OAEPParameterSpec) -> <init>
    41:72:void <init>(boolean,boolean,org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    78:88:void initFromSpec(javax.crypto.spec.OAEPParameterSpec) -> a
    94:98:int engineGetBlockSize() -> engineGetBlockSize
    104:104:byte[] engineGetIV() -> engineGetIV
    110:123:int engineGetKeySize(java.security.Key) -> engineGetKeySize
    131:135:int engineGetOutputSize(int) -> engineGetOutputSize
    141:157:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    164:184:void engineSetMode(java.lang.String) -> engineSetMode
    191:237:void engineSetPadding(java.lang.String) -> engineSetPadding
    248:339:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    348:364:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    374:381:void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    388:405:byte[] engineUpdate(byte[],int,int) -> engineUpdate
    415:432:int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    441:471:byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    483:522:int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.sandrob.bouncycastle.jce.provider.JCERSACipher$ISO9796d1Padding -> org.sandrob.bouncycastle.jce.provider.JCERSACipher$ISO9796d1Padding:
    579:580:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCERSACipher$NoPadding -> org.sandrob.bouncycastle.jce.provider.JCERSACipher$NoPadding:
    534:535:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCERSACipher$OAEPPadding -> org.sandrob.bouncycastle.jce.provider.JCERSACipher$OAEPPadding:
    570:571:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding -> org.sandrob.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding:
    543:544:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PrivateOnly -> org.sandrob.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PrivateOnly:
    552:553:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PublicOnly -> org.sandrob.bouncycastle.jce.provider.JCERSACipher$PKCS1v1_5Padding_PublicOnly:
    561:562:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCERSAPrivateCrtKey -> org.sandrob.bouncycastle.jce.provider.JCERSAPrivateCrtKey:
    java.math.BigInteger publicExponent -> a
    java.math.BigInteger primeP -> b
    java.math.BigInteger primeQ -> c
    java.math.BigInteger primeExponentP -> d
    java.math.BigInteger primeExponentQ -> e
    java.math.BigInteger crtCoefficient -> f
    39:47:void <init>(org.sandrob.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters) -> <init>
    54:65:void <init>(java.security.spec.RSAPrivateCrtKeySpec) -> <init>
    72:83:void <init>(java.security.interfaces.RSAPrivateCrtKey) -> <init>
    91:92:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> <init>
    97:108:void <init>(org.sandrob.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure) -> <init>
    117:117:java.lang.String getFormat() -> getFormat
    128:130:byte[] getEncoded() -> getEncoded
    140:140:java.math.BigInteger getPublicExponent() -> getPublicExponent
    150:150:java.math.BigInteger getPrimeP() -> getPrimeP
    160:160:java.math.BigInteger getPrimeQ() -> getPrimeQ
    170:170:java.math.BigInteger getPrimeExponentP() -> getPrimeExponentP
    180:180:java.math.BigInteger getPrimeExponentQ() -> getPrimeExponentQ
    190:190:java.math.BigInteger getCrtCoefficient() -> getCrtCoefficient
    195:197:int hashCode() -> hashCode
    202:221:boolean equals(java.lang.Object) -> equals
    226:239:java.lang.String toString() -> toString
org.sandrob.bouncycastle.jce.provider.JCERSAPrivateKey -> org.sandrob.bouncycastle.jce.provider.JCERSAPrivateKey:
    java.math.BigInteger ZERO -> a
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger privateExponent -> privateExponent
    org.sandrob.bouncycastle.jce.provider.PKCS12BagAttributeCarrierImpl attrCarrier -> b
    21:26:void <clinit>() -> <clinit>
    31:35:void <init>() -> <init>
    31:42:void <init>(org.sandrob.bouncycastle.crypto.params.RSAKeyParameters) -> <init>
    31:49:void <init>(java.security.spec.RSAPrivateKeySpec) -> <init>
    31:56:void <init>(java.security.interfaces.RSAPrivateKey) -> <init>
    60:60:java.math.BigInteger getModulus() -> getModulus
    65:65:java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    70:70:java.lang.String getAlgorithm() -> getAlgorithm
    75:75:java.lang.String getFormat() -> getFormat
    80:82:byte[] getEncoded() -> getEncoded
    87:100:boolean equals(java.lang.Object) -> equals
    105:105:int hashCode() -> hashCode
    112:113:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    118:118:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    123:123:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.sandrob.bouncycastle.jce.provider.JCERSAPublicKey -> org.sandrob.bouncycastle.jce.provider.JCERSAPublicKey:
    java.math.BigInteger modulus -> a
    java.math.BigInteger publicExponent -> b
    24:29:void <init>(org.sandrob.bouncycastle.crypto.params.RSAKeyParameters) -> <init>
    31:36:void <init>(java.security.spec.RSAPublicKeySpec) -> <init>
    38:43:void <init>(java.security.interfaces.RSAPublicKey) -> <init>
    45:59:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    68:68:java.math.BigInteger getModulus() -> getModulus
    78:78:java.math.BigInteger getPublicExponent() -> getPublicExponent
    83:83:java.lang.String getAlgorithm() -> getAlgorithm
    88:88:java.lang.String getFormat() -> getFormat
    93:95:byte[] getEncoded() -> getEncoded
    100:100:int hashCode() -> hashCode
    105:118:boolean equals(java.lang.Object) -> equals
    123:130:java.lang.String toString() -> toString
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory:
    java.lang.String algName -> algName
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier algOid -> algOid
    28:34:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    40:45:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
    53:80:java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class) -> engineGetKeySpec
    88:98:javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey) -> engineTranslateKey
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$DES -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$DES:
    236:237:void <init>() -> <init>
    243:249:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory:
    boolean forCipher -> a
    int scheme -> b
    int digest -> c
    int keySize -> d
    int ivSize -> e
    180:187:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,int,int,int,int) -> <init>
    193:227:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEKeyFactory -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEKeyFactory:
    boolean forCipher -> a
    int scheme -> b
    int digest -> c
    int keySize -> d
    int ivSize -> e
    123:130:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,int,int,int,int) -> <init>
    136:158:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD2AndDES -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD2AndDES:
    261:262:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD2AndRC2 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD2AndRC2:
    273:274:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5And128BitAESCBCOpenSSL -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5And128BitAESCBCOpenSSL:
    525:526:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5And192BitAESCBCOpenSSL -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5And192BitAESCBCOpenSSL:
    537:538:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5And256BitAESCBCOpenSSL -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5And256BitAESCBCOpenSSL:
    549:550:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5AndDES -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5AndDES:
    285:286:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5AndRC2 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithMD5AndRC2:
    297:298:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithRIPEMD160 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithRIPEMD160:
    417:418:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA:
    429:430:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA1AndDES -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA1AndDES:
    309:310:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA1AndRC2 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA1AndRC2:
    321:322:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA256And128BitAESBC -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA256And128BitAESBC:
    489:490:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA256And192BitAESBC -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA256And192BitAESBC:
    501:502:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA256And256BitAESBC -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA256And256BitAESBC:
    513:514:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd128BitAESBC -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd128BitAESBC:
    453:454:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd128BitRC2 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd128BitRC2:
    357:358:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd128BitRC4 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd128BitRC4:
    393:394:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd192BitAESBC -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd192BitAESBC:
    465:466:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd256BitAESBC -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd256BitAESBC:
    477:478:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd40BitRC2 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd40BitRC2:
    369:370:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd40BitRC4 -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAnd40BitRC4:
    405:406:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAndDES2Key -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAndDES2Key:
    345:346:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAndDES3Key -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAndDES3Key:
    333:334:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAndTwofish -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHAAndTwofish:
    381:382:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithTiger -> org.sandrob.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithTiger:
    441:442:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher:
    java.lang.Class[] availableSpecs -> a
    org.sandrob.bouncycastle.crypto.StreamCipher cipher -> b
    org.sandrob.bouncycastle.crypto.params.ParametersWithIV ivParam -> c
    int ivLength -> d
    javax.crypto.spec.PBEParameterSpec pbeSpec -> e
    java.lang.String pbeAlgorithm -> f
    41:63:void <init>(org.sandrob.bouncycastle.crypto.StreamCipher,int) -> <init>
    41:72:void <init>(org.sandrob.bouncycastle.crypto.BlockCipher,int) -> <init>
    76:76:int engineGetBlockSize() -> engineGetBlockSize
    81:81:byte[] engineGetIV() -> engineGetIV
    87:87:int engineGetKeySize(java.security.Key) -> engineGetKeySize
    93:93:int engineGetOutputSize(int) -> engineGetOutputSize
    98:116:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    125:129:void engineSetMode(java.lang.String) -> engineSetMode
    138:142:void engineSetPadding(java.lang.String) -> engineSetPadding
    153:249:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    258:283:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    293:299:void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    306:310:byte[] engineUpdate(byte[],int,int) -> engineUpdate
    323:329:int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    338:349:byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    359:366:int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_CFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_CFB8:
    417:418:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_OFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_OFB8:
    477:478:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DES_CFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DES_CFB8:
    381:382:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DES_OFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DES_OFB8:
    441:442:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DESede_CFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DESede_CFB8:
    393:394:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DESede_OFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$DESede_OFB8:
    453:454:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd128BitRC4 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd128BitRC4:
    501:502:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd40BitRC4 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$PBEWithSHAAnd40BitRC4:
    513:514:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_CFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_CFB8:
    405:406:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_OFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_OFB8:
    465:466:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Twofish_CFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Twofish_CFB8:
    429:430:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Twofish_OFB8 -> org.sandrob.bouncycastle.jce.provider.JCEStreamCipher$Twofish_OFB8:
    489:490:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator:
    java.security.SecureRandom random -> random
    int strength -> strength
    27:31:void <init>() -> <init>
    37:39:void engineInit(int,java.security.SecureRandom) -> engineInit
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DES:
    242:242:void <init>() -> <init>
    250:250:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    255:276:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DH -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DH:
    int l -> a
    41:44:void <init>() -> <init>
    51:60:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    64:89:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DSA -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$DSA:
    93:93:void <init>() -> <init>
    100:107:void engineInit(int,java.security.SecureRandom) -> engineInit
    114:114:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    119:144:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$ElGamal -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$ElGamal:
    int l -> a
    190:193:void <init>() -> <init>
    200:209:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    213:238:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$GOST3410 -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$GOST3410:
    148:148:void <init>() -> <init>
    156:156:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    161:186:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$RC2 -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameterGenerator$RC2:
    javax.crypto.spec.RC2ParameterSpec spec -> a
    280:283:void <init>() -> <init>
    290:296:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    303:337:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters:
    44:44:void <init>() -> <init>
    49:49:boolean isASN1FormatString(java.lang.String) -> isASN1FormatString
    56:61:java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$DH -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$DH:
    javax.crypto.spec.DHParameterSpec currentSpec -> a
    511:511:void <init>() -> <init>
    528:536:byte[] engineGetEncoded() -> engineGetEncoded
    543:548:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    555:560:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    567:573:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    581:600:void engineInit(byte[]) -> engineInit
    607:615:void engineInit(byte[],java.lang.String) -> engineInit
    619:619:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$DSA -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$DSA:
    java.security.spec.DSAParameterSpec currentSpec -> a
    623:623:void <init>() -> <init>
    640:648:byte[] engineGetEncoded() -> engineGetEncoded
    655:660:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    667:672:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    679:685:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    693:705:void engineInit(byte[]) -> engineInit
    712:720:void engineInit(byte[],java.lang.String) -> engineInit
    724:724:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$ElGamal -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$ElGamal:
    org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec currentSpec -> a
    834:834:void <init>() -> <init>
    850:858:byte[] engineGetEncoded() -> engineGetEncoded
    865:870:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    877:886:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    893:908:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    916:928:void engineInit(byte[]) -> engineInit
    935:943:void engineInit(byte[],java.lang.String) -> engineInit
    947:947:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$GOST3410 -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$GOST3410:
    org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec currentSpec -> a
    728:728:void <init>() -> <init>
    745:753:byte[] engineGetEncoded() -> engineGetEncoded
    760:765:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    772:777:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    784:790:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    798:811:void engineInit(byte[]) -> engineInit
    818:826:void engineInit(byte[],java.lang.String) -> engineInit
    830:830:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$IES -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$IES:
    org.sandrob.bouncycastle.jce.spec.IESParameterSpec currentSpec -> a
    951:951:void <init>() -> <init>
    964:974:byte[] engineGetEncoded() -> engineGetEncoded
    981:986:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    993:998:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    1005:1011:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    1019:1034:void engineInit(byte[]) -> engineInit
    1041:1049:void engineInit(byte[],java.lang.String) -> engineInit
    1053:1053:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$IVAlgorithmParameters:
    byte[] iv -> a
    67:67:void <init>() -> <init>
    75:75:byte[] engineGetEncoded() -> engineGetEncoded
    82:92:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    99:104:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    111:117:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    126:135:void engineInit(byte[]) -> engineInit
    142:164:void engineInit(byte[],java.lang.String) -> engineInit
    169:169:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$OAEP -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$OAEP:
    javax.crypto.spec.OAEPParameterSpec currentSpec -> a
    1057:1057:void <init>() -> <init>
    1067:1085:byte[] engineGetEncoded() -> engineGetEncoded
    1092:1097:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    1104:1109:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    1116:1122:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    1130:1146:void engineInit(byte[]) -> engineInit
    1153:1162:void engineInit(byte[],java.lang.String) -> engineInit
    1166:1166:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$PBKDF2 -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$PBKDF2:
    org.sandrob.bouncycastle.asn1.pkcs.PBKDF2Params params -> a
    345:345:void <init>() -> <init>
    354:358:byte[] engineGetEncoded() -> engineGetEncoded
    365:370:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    377:383:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    390:399:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    405:406:void engineInit(byte[]) -> engineInit
    413:419:void engineInit(byte[],java.lang.String) -> engineInit
    424:424:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$PKCS12PBE -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$PKCS12PBE:
    org.sandrob.bouncycastle.asn1.pkcs.PKCS12PBEParams params -> a
    428:428:void <init>() -> <init>
    437:441:byte[] engineGetEncoded() -> engineGetEncoded
    448:453:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    460:466:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    473:482:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    488:489:void engineInit(byte[]) -> engineInit
    496:502:void engineInit(byte[],java.lang.String) -> engineInit
    507:507:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$PSS -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$PSS:
    java.security.spec.PSSParameterSpec currentSpec -> a
    1170:1170:void <init>() -> <init>
    1181:1191:byte[] engineGetEncoded() -> engineGetEncoded
    1198:1204:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    1211:1216:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    1223:1229:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    1237:1254:void engineInit(byte[]) -> engineInit
    1261:1269:void engineInit(byte[],java.lang.String) -> engineInit
    1273:1273:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$RC2AlgorithmParameters -> org.sandrob.bouncycastle.jce.provider.JDKAlgorithmParameters$RC2AlgorithmParameters:
    short[] table -> a
    short[] ekb -> b
    byte[] iv -> c
    int parameterVersion -> d
    173:211:void <clinit>() -> <clinit>
    173:215:void <init>() -> <init>
    219:219:byte[] engineGetEncoded() -> engineGetEncoded
    226:243:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    250:270:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    277:302:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    308:309:void engineInit(byte[]) -> engineInit
    316:336:void engineInit(byte[],java.lang.String) -> engineInit
    341:341:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKDSAPrivateKey -> org.sandrob.bouncycastle.jce.provider.JDKDSAPrivateKey:
    java.math.BigInteger x -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    org.sandrob.bouncycastle.jce.provider.PKCS12BagAttributeCarrierImpl attrCarrier -> c
    32:36:void <init>() -> <init>
    32:43:void <init>(java.security.interfaces.DSAPrivateKey) -> <init>
    32:50:void <init>(java.security.spec.DSAPrivateKeySpec) -> <init>
    32:60:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> <init>
    32:67:void <init>(org.sandrob.bouncycastle.crypto.params.DSAPrivateKeyParameters) -> <init>
    71:71:java.lang.String getAlgorithm() -> getAlgorithm
    81:81:java.lang.String getFormat() -> getFormat
    92:94:byte[] getEncoded() -> getEncoded
    99:99:java.security.interfaces.DSAParams getParams() -> getParams
    104:104:java.math.BigInteger getX() -> getX
    110:120:boolean equals(java.lang.Object) -> equals
    125:126:int hashCode() -> hashCode
    133:134:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    139:139:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    144:144:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.sandrob.bouncycastle.jce.provider.JDKDSAPublicKey -> org.sandrob.bouncycastle.jce.provider.JDKDSAPublicKey:
    java.math.BigInteger y -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    30:35:void <init>(java.security.spec.DSAPublicKeySpec) -> <init>
    37:42:void <init>(java.security.interfaces.DSAPublicKey) -> <init>
    44:49:void <init>(org.sandrob.bouncycastle.crypto.params.DSAPublicKeyParameters) -> <init>
    59:82:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    86:86:boolean isNotNull(org.sandrob.bouncycastle.asn1.DEREncodable) -> a
    91:91:java.lang.String getAlgorithm() -> getAlgorithm
    96:96:java.lang.String getFormat() -> getFormat
    101:106:byte[] getEncoded() -> getEncoded
    111:111:java.security.interfaces.DSAParams getParams() -> getParams
    116:116:java.math.BigInteger getY() -> getY
    121:127:java.lang.String toString() -> toString
    132:133:int hashCode() -> hashCode
    139:149:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.jce.provider.JDKDSASigner -> org.sandrob.bouncycastle.jce.provider.JDKDSASigner:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    org.sandrob.bouncycastle.crypto.DSA signer -> b
    java.security.SecureRandom random -> c
    42:48:void <init>(org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.DSA) -> <init>
    56:89:void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    96:98:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    106:122:void engineInitSign(java.security.PrivateKey) -> engineInitSign
    128:129:void engineUpdate(byte) -> engineUpdate
    137:138:void engineUpdate(byte[],int,int) -> engineUpdate
    143:155:byte[] engineSign() -> engineSign
    163:178:boolean engineVerify(byte[]) -> engineVerify
    184:184:void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    194:194:void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    203:203:java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    211:212:byte[] derEncode(java.math.BigInteger,java.math.BigInteger) -> a
    219:222:java.math.BigInteger[] derDecode(byte[]) -> a
org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa224 -> org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa224:
    240:241:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa256 -> org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa256:
    249:250:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa384 -> org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa384:
    258:259:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa512 -> org.sandrob.bouncycastle.jce.provider.JDKDSASigner$dsa512:
    267:268:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDSASigner$noneDSA -> org.sandrob.bouncycastle.jce.provider.JDKDSASigner$noneDSA:
    276:277:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDSASigner$stdDSA -> org.sandrob.bouncycastle.jce.provider.JDKDSASigner$stdDSA:
    231:232:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher cipher -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> c
    49:56:void <init>(org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    59:67:void <init>(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    73:82:void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    88:98:void engineInitSign(java.security.PrivateKey) -> engineInitSign
    103:108:java.lang.String getType(java.lang.Object) -> a
    115:116:void engineUpdate(byte) -> engineUpdate
    124:125:void engineUpdate(byte[],int,int) -> engineUpdate
    130:146:byte[] engineSign() -> engineSign
    154:211:boolean engineVerify(byte[]) -> engineVerify
    217:217:void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    227:227:void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    236:236:java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    241:241:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    248:256:byte[] derEncode(byte[]) -> a
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$MD2WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$MD2WithRSAEncryption:
    309:310:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$MD4WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$MD4WithRSAEncryption:
    318:319:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$MD5WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$MD5WithRSAEncryption:
    327:328:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD128WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD128WithRSAEncryption:
    345:346:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD160WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD160WithRSAEncryption:
    336:337:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD256WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$RIPEMD256WithRSAEncryption:
    354:355:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA1WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA1WithRSAEncryption:
    264:265:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA224WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA224WithRSAEncryption:
    273:274:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA256WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA256WithRSAEncryption:
    282:283:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA384WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA384WithRSAEncryption:
    291:292:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA512WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$SHA512WithRSAEncryption:
    300:301:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$noneRSA -> org.sandrob.bouncycastle.jce.provider.JDKDigestSignature$noneRSA:
    363:364:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKECDSAAlgParameters -> org.sandrob.bouncycastle.jce.provider.JDKECDSAAlgParameters:
    10:10:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKECDSAAlgParameters$SigAlgParameters -> org.sandrob.bouncycastle.jce.provider.JDKECDSAAlgParameters$SigAlgParameters:
    13:13:void <init>() -> <init>
    19:19:byte[] engineGetEncoded() -> engineGetEncoded
    26:36:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    43:43:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    50:50:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    57:57:void engineInit(byte[]) -> engineInit
    64:64:void engineInit(byte[],java.lang.String) -> engineInit
    69:69:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.JDKGOST3410PrivateKey -> org.sandrob.bouncycastle.jce.provider.JDKGOST3410PrivateKey:
    java.math.BigInteger x -> a
    org.sandrob.bouncycastle.jce.interfaces.GOST3410Params gost3410Spec -> b
    org.sandrob.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> c
    28:32:void <init>() -> <init>
    28:46:void <init>(org.sandrob.bouncycastle.jce.spec.GOST3410PrivateKeySpec) -> <init>
    28:63:void <init>(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> <init>
    28:76:void <init>(org.sandrob.bouncycastle.crypto.params.GOST3410PrivateKeyParameters,org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec) -> <init>
    80:80:java.lang.String getAlgorithm() -> getAlgorithm
    90:90:java.lang.String getFormat() -> getFormat
    102:128:byte[] getEncoded() -> getEncoded
    133:133:org.sandrob.bouncycastle.jce.interfaces.GOST3410Params getParameters() -> getParameters
    138:138:java.math.BigInteger getX() -> getX
    145:146:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    151:151:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    156:156:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.sandrob.bouncycastle.jce.provider.JDKGOST3410PublicKey -> org.sandrob.bouncycastle.jce.provider.JDKGOST3410PublicKey:
    java.math.BigInteger y -> a
    org.sandrob.bouncycastle.jce.interfaces.GOST3410Params gost3410Spec -> b
    26:31:void <init>(org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeySpec) -> <init>
    40:46:void <init>(org.sandrob.bouncycastle.crypto.params.GOST3410PublicKeyParameters,org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec) -> <init>
    56:82:void <init>(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> <init>
    86:86:java.lang.String getAlgorithm() -> getAlgorithm
    91:91:java.lang.String getFormat() -> getFormat
    97:130:byte[] getEncoded() -> getEncoded
    135:135:org.sandrob.bouncycastle.jce.interfaces.GOST3410Params getParameters() -> getParameters
    140:140:java.math.BigInteger getY() -> getY
    145:151:java.lang.String toString() -> toString
    156:163:boolean equals(java.lang.Object) -> equals
    168:168:int hashCode() -> hashCode
org.sandrob.bouncycastle.jce.provider.JDKGOST3410Signer -> org.sandrob.bouncycastle.jce.provider.JDKGOST3410Signer:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    org.sandrob.bouncycastle.crypto.DSA signer -> b
    java.security.SecureRandom random -> c
    34:40:void <init>(org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.DSA) -> <init>
    48:81:void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    88:90:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    98:117:void engineInitSign(java.security.PrivateKey) -> engineInitSign
    123:124:void engineUpdate(byte) -> engineUpdate
    132:133:void engineUpdate(byte[],int,int) -> engineUpdate
    138:171:byte[] engineSign() -> engineSign
    179:203:boolean engineVerify(byte[]) -> engineVerify
    209:209:void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    219:219:void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    228:228:java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.sandrob.bouncycastle.jce.provider.JDKGOST3410Signer$ecgost3410 -> org.sandrob.bouncycastle.jce.provider.JDKGOST3410Signer$ecgost3410:
    245:246:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKGOST3410Signer$gost3410 -> org.sandrob.bouncycastle.jce.provider.JDKGOST3410Signer$gost3410:
    236:237:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKISOSignature -> org.sandrob.bouncycastle.jce.provider.JDKISOSignature:
    org.sandrob.bouncycastle.crypto.signers.ISO9796d2Signer signer -> a
    26:31:void <init>(org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher) -> <init>
    37:40:void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    46:49:void engineInitSign(java.security.PrivateKey) -> engineInitSign
    55:56:void engineUpdate(byte) -> engineUpdate
    64:65:void engineUpdate(byte[],int,int) -> engineUpdate
    72:78:byte[] engineSign() -> engineSign
    86:88:boolean engineVerify(byte[]) -> engineVerify
    94:94:void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    104:104:void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    113:113:java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.sandrob.bouncycastle.jce.provider.JDKISOSignature$MD5WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKISOSignature$MD5WithRSAEncryption:
    130:131:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKISOSignature$RIPEMD160WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKISOSignature$RIPEMD160WithRSAEncryption:
    139:140:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKISOSignature$SHA1WithRSAEncryption -> org.sandrob.bouncycastle.jce.provider.JDKISOSignature$SHA1WithRSAEncryption:
    121:122:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKKeyFactory -> org.sandrob.bouncycastle.jce.provider.JDKKeyFactory:
    boolean elGamalFactory -> elGamalFactory
    49:53:void <init>() -> <init>
    59:72:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    79:92:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    100:144:java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    151:202:java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    212:213:java.security.PublicKey createPublicKeyFromDERStream(byte[]) -> createPublicKeyFromDERStream
    222:262:java.security.PublicKey createPublicKeyFromPublicKeyInfo(org.sandrob.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    273:274:java.security.PrivateKey createPrivateKeyFromDERStream(byte[]) -> createPrivateKeyFromDERStream
    283:319:java.security.PrivateKey createPrivateKeyFromPrivateKeyInfo(org.sandrob.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> a
org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$DH -> org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$DH:
    386:388:void <init>() -> <init>
    394:399:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    406:411:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$DSA -> org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$DSA:
    418:420:void <init>() -> <init>
    426:431:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    438:443:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$ElGamal -> org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$ElGamal:
    482:485:void <init>() -> <init>
    491:500:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    507:516:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$GOST3410 -> org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$GOST3410:
    450:452:void <init>() -> <init>
    458:463:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    470:475:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$RSA -> org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$RSA:
    326:328:void <init>() -> <init>
    334:367:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    374:379:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$X509 -> org.sandrob.bouncycastle.jce.provider.JDKKeyFactory$X509:
    528:530:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator -> org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator:
    55:56:void <init>(java.lang.String) -> <init>
    void initialize(int,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$DH -> org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$DH:
    java.util.Hashtable params -> g
    org.sandrob.bouncycastle.crypto.params.DHKeyGenerationParameters param -> a
    org.sandrob.bouncycastle.crypto.generators.DHBasicKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    120:123:void <clinit>() -> <clinit>
    126:135:void <init>() -> <init>
    141:143:void initialize(int,java.security.SecureRandom) -> initialize
    150:160:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    164:193:java.security.KeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA -> org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$DSA:
    org.sandrob.bouncycastle.crypto.params.DSAKeyGenerationParameters param -> a
    org.sandrob.bouncycastle.crypto.generators.DSAKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    201:210:void <init>() -> <init>
    216:223:void initialize(int,java.security.SecureRandom) -> initialize
    230:240:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    244:259:java.security.KeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$ElGamal -> org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$ElGamal:
    org.sandrob.bouncycastle.crypto.params.ElGamalKeyGenerationParameters param -> a
    org.sandrob.bouncycastle.crypto.generators.ElGamalKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    267:276:void <init>() -> <init>
    282:284:void initialize(int,java.security.SecureRandom) -> initialize
    291:311:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    315:330:java.security.KeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$GOST3410 -> org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$GOST3410:
    org.sandrob.bouncycastle.crypto.params.GOST3410KeyGenerationParameters param -> a
    org.sandrob.bouncycastle.crypto.generators.GOST3410KeyPairGenerator engine -> b
    org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec gost3410Params -> c
    int strength -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    338:347:void <init>() -> <init>
    353:355:void initialize(int,java.security.SecureRandom) -> initialize
    361:369:void init(org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec,java.security.SecureRandom) -> a
    376:382:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    386:395:java.security.KeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA -> org.sandrob.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA:
    java.math.BigInteger defaultPublicExponent -> a
    org.sandrob.bouncycastle.crypto.params.RSAKeyGenerationParameters param -> b
    org.sandrob.bouncycastle.crypto.generators.RSAKeyPairGenerator engine -> c
    62:65:void <clinit>() -> <clinit>
    73:79:void <init>() -> <init>
    85:89:void initialize(int,java.security.SecureRandom) -> initialize
    96:107:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    111:116:java.security.KeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.jce.provider.JDKKeyStore -> org.sandrob.bouncycastle.jce.provider.JDKKeyStore:
    java.util.Hashtable table -> table
    java.security.SecureRandom random -> random
    83:89:void <init>() -> <init>
    336:346:void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream) -> a
    352:370:java.security.cert.Certificate decodeCertificate(java.io.DataInputStream) -> a
    379:398:void encodeKey(java.security.Key,java.io.DataOutputStream) -> a
    404:445:java.security.Key decodeKey(java.io.DataInputStream) -> b
    459:471:javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int) -> makePBECipher
    478:479:void setRandom(java.security.SecureRandom) -> setRandom
    483:483:java.util.Enumeration engineAliases() -> engineAliases
    489:489:boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    496:504:void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    509:528:java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    534:559:java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    565:572:java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    577:584:java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    592:599:java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    605:612:boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    618:625:boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    633:641:void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    649:650:void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    659:672:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    676:676:int engineSize() -> engineSize
    683:727:void loadStore(java.io.InputStream) -> loadStore
    733:779:void saveStore(java.io.OutputStream) -> saveStore
    786:852:void engineLoad(java.io.InputStream,char[]) -> engineLoad
    858:892:void engineStore(java.io.OutputStream,char[]) -> engineStore
    374:374:void access$0(org.sandrob.bouncycastle.jce.provider.JDKKeyStore,java.security.Key,java.io.DataOutputStream) -> a
    400:400:java.security.Key access$1(org.sandrob.bouncycastle.jce.provider.JDKKeyStore,java.io.DataInputStream) -> a
org.sandrob.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore -> org.sandrob.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore:
    904:904:void <init>() -> <init>
    912:978:void engineLoad(java.io.InputStream,char[]) -> engineLoad
    985:1011:void engineStore(java.io.OutputStream,char[]) -> engineStore
org.sandrob.bouncycastle.jce.provider.JDKKeyStore$StoreEntry -> org.sandrob.bouncycastle.jce.provider.JDKKeyStore$a:
    int type -> a
    java.lang.String alias -> b
    java.lang.Object obj -> c
    java.security.cert.Certificate[] certChain -> d
    java.util.Date date -> e
    org.sandrob.bouncycastle.jce.provider.JDKKeyStore this$0 -> f
    97:107:void <init>(org.sandrob.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.security.cert.Certificate) -> <init>
    97:118:void <init>(org.sandrob.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,byte[],java.security.cert.Certificate[]) -> <init>
    97:156:void <init>(org.sandrob.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> <init>
    97:168:void <init>(org.sandrob.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object) -> <init>
    97:182:void <init>(org.sandrob.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object,java.security.cert.Certificate[]) -> <init>
    186:186:int getType() -> a
    191:191:java.lang.String getAlias() -> b
    196:196:java.lang.Object getObject() -> c
    203:309:java.lang.Object getObject(char[]) -> a
    320:320:java.security.cert.Certificate[] getCertificateChain() -> d
    325:325:java.util.Date getDate() -> e
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    16:19:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    23:24:void engineReset() -> engineReset
    29:30:void engineUpdate(byte) -> engineUpdate
    37:38:void engineUpdate(byte[],int,int) -> engineUpdate
    42:46:byte[] engineDigest() -> engineDigest
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$GOST3411 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$GOST3411:
    305:306:void <init>() -> <init>
    311:314:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$MD2 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$MD2:
    153:154:void <init>() -> <init>
    159:162:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$MD4 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$MD4:
    172:173:void <init>() -> <init>
    178:181:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$MD5 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$MD5:
    191:192:void <init>() -> <init>
    197:200:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD128 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD128:
    210:211:void <init>() -> <init>
    216:219:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD160 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD160:
    229:230:void <init>() -> <init>
    235:238:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD256 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD256:
    248:249:void <init>() -> <init>
    254:257:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD320 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$RIPEMD320:
    267:268:void <init>() -> <init>
    273:276:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA1 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA1:
    58:59:void <init>() -> <init>
    64:67:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA224 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA224:
    77:78:void <init>() -> <init>
    83:86:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA256 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA256:
    96:97:void <init>() -> <init>
    102:105:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA384 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA384:
    115:116:void <init>() -> <init>
    121:124:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA512 -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$SHA512:
    134:135:void <init>() -> <init>
    140:143:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$Tiger -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$Tiger:
    286:287:void <init>() -> <init>
    292:295:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$Whirlpool -> org.sandrob.bouncycastle.jce.provider.JDKMessageDigest$Whirlpool:
    324:325:void <init>() -> <init>
    330:333:java.lang.Object clone() -> clone
org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore:
    java.security.Provider bcProvider -> a
    org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$IgnoresCaseHashtable keys -> b
    java.util.Hashtable localIds -> c
    org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$IgnoresCaseHashtable certs -> d
    java.util.Hashtable chainCerts -> e
    java.util.Hashtable keyCerts -> f
    java.security.SecureRandom random -> random
    java.security.cert.CertificateFactory certFact -> g
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier keyAlgorithm -> h
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier certAlgorithm -> i
    79:86:void <clinit>() -> <clinit>
    88:180:void <init>(java.security.Provider,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> <init>
    187:194:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier createSubjectKeyId(java.security.PublicKey) -> a
    201:202:void setRandom(java.security.SecureRandom) -> setRandom
    206:224:java.util.Enumeration engineAliases() -> engineAliases
    230:230:boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    241:267:void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    275:298:java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    304:332:java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    338:436:java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    441:441:java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    449:454:java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    460:460:boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    466:466:boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    474:481:void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    489:489:void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    499:516:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    520:538:int engineSize() -> engineSize
    548:578:java.security.PrivateKey unwrapKey(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],char[],boolean) -> unwrapKey
    588:610:byte[] wrapKey(java.lang.String,java.security.Key,org.sandrob.bouncycastle.asn1.pkcs.PKCS12PBEParams,char[]) -> wrapKey
    621:642:byte[] cryptData(boolean,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,char[],boolean,byte[]) -> cryptData
    651:1086:void engineLoad(java.io.InputStream,char[]) -> engineLoad
    1091:1121:void engineStore(java.security.KeyStore$LoadStoreParameter) -> engineStore
    1126:1127:void engineStore(java.io.OutputStream,char[]) -> engineStore
    1132:1516:void doStore(java.io.OutputStream,char[],boolean) -> a
    1527:1536:byte[] calculatePbeMac(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,byte[],int,char[],boolean,byte[]) -> a
    182:182:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier access$0(org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore,java.security.PublicKey) -> a
    86:86:java.security.Provider access$1() -> a
org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore:
    1544:1545:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore3DES -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$BCPKCS12KeyStore3DES:
    1553:1554:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$CertId -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$a:
    byte[] id -> a
    org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore this$0 -> b
    121:125:void <init>(org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore,java.security.PublicKey) -> <init>
    127:131:void <init>(org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore,byte[]) -> <init>
    135:135:int hashCode() -> hashCode
    141:153:boolean equals(java.lang.Object) -> equals
org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$DefPKCS12KeyStore -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$DefPKCS12KeyStore:
    1562:1563:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$DefPKCS12KeyStore3DES -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$DefPKCS12KeyStore3DES:
    1571:1572:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$IgnoresCaseHashtable -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$b:
    java.util.Hashtable orig -> a
    java.util.Hashtable keys -> b
    1575:1578:void <init>() -> <init>
    1582:1591:void put(java.lang.String,java.lang.Object) -> a
    1595:1595:java.util.Enumeration keys() -> a
    1600:1606:java.lang.Object remove(java.lang.String) -> a
    1611:1617:java.lang.Object get(java.lang.String) -> b
    1622:1622:java.util.Enumeration elements() -> b
    1575:1575:void <init>(org.sandrob.bouncycastle.jce.provider.JDKPKCS12KeyStore$IgnoresCaseHashtable) -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPKCS12StoreParameter -> org.sandrob.bouncycastle.jce.provider.JDKPKCS12StoreParameter:
    java.io.OutputStream outputStream -> a
    java.security.KeyStore$ProtectionParameter protectionParameter -> b
    boolean useDEREncoding -> c
    8:8:void <init>() -> <init>
    16:16:java.io.OutputStream getOutputStream() -> getOutputStream
    21:21:java.security.KeyStore$ProtectionParameter getProtectionParameter() -> getProtectionParameter
    26:26:boolean isUseDEREncoding() -> isUseDEREncoding
    31:32:void setOutputStream(java.io.OutputStream) -> setOutputStream
    36:37:void setPassword(char[]) -> setPassword
    41:42:void setProtectionParameter(java.security.KeyStore$ProtectionParameter) -> setProtectionParameter
    46:47:void setUseDEREncoding(boolean) -> setUseDEREncoding
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner:
    java.security.AlgorithmParameters engineParams -> a
    java.security.spec.PSSParameterSpec paramSpec -> b
    java.security.spec.PSSParameterSpec originalSpec -> c
    org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher signer -> d
    org.sandrob.bouncycastle.crypto.Digest contentDigest -> e
    org.sandrob.bouncycastle.crypto.Digest mgfDigest -> f
    int saltLength -> g
    byte trailer -> h
    boolean isRaw -> i
    org.sandrob.bouncycastle.crypto.signers.PSSSigner pss -> j
    44:49:byte getTrailer(int) -> a
    54:62:void setupContentDigest() -> a
    69:70:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,java.security.spec.PSSParameterSpec) -> <init>
    73:96:void <init>(org.sandrob.bouncycastle.crypto.AsymmetricBlockCipher,java.security.spec.PSSParameterSpec,boolean) -> <init>
    102:110:void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    117:124:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    130:137:void engineInitSign(java.security.PrivateKey) -> engineInitSign
    143:144:void engineUpdate(byte) -> engineUpdate
    152:153:void engineUpdate(byte[],int,int) -> engineUpdate
    160:164:byte[] engineSign() -> engineSign
    172:172:boolean engineVerify(byte[]) -> engineVerify
    179:226:void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    230:246:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    256:256:void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    262:262:java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$NullPssDigest -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$a:
    java.io.ByteArrayOutputStream bOut -> b
    org.sandrob.bouncycastle.crypto.Digest baseDigest -> c
    boolean oddTime -> d
    org.sandrob.bouncycastle.jce.provider.JDKPSSSigner this$0 -> a
    331:338:void <init>(org.sandrob.bouncycastle.jce.provider.JDKPSSSigner,org.sandrob.bouncycastle.crypto.Digest) -> <init>
    342:342:java.lang.String getAlgorithmName() -> getAlgorithmName
    347:347:int getDigestSize() -> getDigestSize
    352:353:void update(byte) -> update
    357:358:void update(byte[],int,int) -> update
    362:379:int doFinal(byte[],int) -> doFinal
    384:386:void reset() -> reset
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$PSSwithRSA -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$PSSwithRSA:
    279:280:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA1withRSA -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA1withRSA:
    288:289:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA224withRSA -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA224withRSA:
    297:298:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA256withRSA -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA256withRSA:
    306:307:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA384withRSA -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA384withRSA:
    315:316:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA512withRSA -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$SHA512withRSA:
    324:325:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$nonePSS -> org.sandrob.bouncycastle.jce.provider.JDKPSSSigner$nonePSS:
    270:271:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.JDKX509CertificateFactory -> org.sandrob.bouncycastle.jce.provider.JDKX509CertificateFactory:
    org.sandrob.bouncycastle.jce.provider.PEMUtil PEM_CERT_PARSER -> a
    org.sandrob.bouncycastle.jce.provider.PEMUtil PEM_CRL_PARSER -> b
    org.sandrob.bouncycastle.asn1.ASN1Set sData -> c
    int sDataObjectCount -> d
    java.io.InputStream currentStream -> e
    org.sandrob.bouncycastle.asn1.ASN1Set sCrlData -> f
    int sCrlDataObjectCount -> g
    java.io.InputStream currentCrlStream -> h
    36:40:void <clinit>() -> <clinit>
    36:48:void <init>() -> <init>
    54:69:java.security.cert.Certificate readDERCertificate(org.sandrob.bouncycastle.asn1.ASN1InputStream) -> a
    75:89:java.security.cert.Certificate getCertificate() -> a
    96:104:java.security.cert.Certificate readPEMCertificate(java.io.InputStream) -> a
    110:110:java.security.cert.CRL createCRL(org.sandrob.bouncycastle.asn1.x509.CertificateList) -> createCRL
    117:125:java.security.cert.CRL readPEMCRL(java.io.InputStream) -> b
    132:147:java.security.cert.CRL readDERCRL(org.sandrob.bouncycastle.asn1.ASN1InputStream) -> b
    153:160:java.security.cert.CRL getCRL() -> b
    171:223:java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream) -> engineGenerateCertificate
    236:243:java.util.Collection engineGenerateCertificates(java.io.InputStream) -> engineGenerateCertificates
    254:310:java.security.cert.CRL engineGenerateCRL(java.io.InputStream) -> engineGenerateCRL
    328:335:java.util.Collection engineGenerateCRLs(java.io.InputStream) -> engineGenerateCRLs
    340:340:java.util.Iterator engineGetCertPathEncodings() -> engineGetCertPathEncodings
    347:347:java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) -> engineGenerateCertPath
    355:355:java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String) -> engineGenerateCertPath
    362:375:java.security.cert.CertPath engineGenerateCertPath(java.util.List) -> engineGenerateCertPath
org.sandrob.bouncycastle.jce.provider.MultiCertStoreSpi -> org.sandrob.bouncycastle.jce.provider.MultiCertStoreSpi:
    org.sandrob.bouncycastle.jce.MultiCertStoreParameters params -> a
    26:34:void <init>(java.security.cert.CertStoreParameters) -> <init>
    39:58:java.util.Collection engineGetCertificates(java.security.cert.CertSelector) -> engineGetCertificates
    64:83:java.util.Collection engineGetCRLs(java.security.cert.CRLSelector) -> engineGetCRLs
org.sandrob.bouncycastle.jce.provider.OldPKCS12ParametersGenerator -> org.sandrob.bouncycastle.jce.provider.d:
    org.sandrob.bouncycastle.crypto.Digest digest -> a
    int u -> b
    int v -> c
    48:71:void <init>(org.sandrob.bouncycastle.crypto.Digest) -> <init>
    83:94:void adjust(byte[],int,byte[]) -> a
    103:184:byte[] generateDerivedKey(int,int) -> a
    197:201:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    217:224:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    237:241:org.sandrob.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.sandrob.bouncycastle.jce.provider.PBE -> org.sandrob.bouncycastle.jce.provider.PBE:
    int MD5 -> MD5
    int SHA1 -> SHA1
    int RIPEMD160 -> RIPEMD160
    int TIGER -> TIGER
    int SHA256 -> SHA256
    int MD2 -> MD2
    int PKCS5S1 -> PKCS5S1
    int PKCS5S2 -> PKCS5S2
    int PKCS12 -> PKCS12
    int OPENSSL -> OPENSSL
org.sandrob.bouncycastle.jce.provider.PBE$Util -> org.sandrob.bouncycastle.jce.provider.PBE$Util:
    44:44:void <init>() -> <init>
    52:104:org.sandrob.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int) -> a
    116:163:org.sandrob.bouncycastle.crypto.CipherParameters makePBEParameters(org.sandrob.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String) -> a
    175:199:org.sandrob.bouncycastle.crypto.CipherParameters makePBEMacParameters(org.sandrob.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec) -> a
    213:242:org.sandrob.bouncycastle.crypto.CipherParameters makePBEParameters(javax.crypto.spec.PBEKeySpec,int,int,int,int) -> a
    256:278:org.sandrob.bouncycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec,int,int,int) -> a
org.sandrob.bouncycastle.jce.provider.PEMUtil -> org.sandrob.bouncycastle.jce.provider.PEMUtil:
    java.lang.String _header1 -> a
    java.lang.String _header2 -> b
    java.lang.String _footer1 -> c
    java.lang.String _footer2 -> d
    18:25:void <init>(java.lang.String) -> <init>
    32:53:java.lang.String readLine(java.io.InputStream) -> b
    61:92:org.sandrob.bouncycastle.asn1.ASN1Sequence readPEMObject(java.io.InputStream) -> a
org.sandrob.bouncycastle.jce.provider.PKCS12BagAttributeCarrierImpl -> org.sandrob.bouncycastle.jce.provider.e:
    java.util.Hashtable pkcs12Attributes -> a
    java.util.Vector pkcs12Ordering -> b
    23:27:void <init>(java.util.Hashtable,java.util.Vector) -> <init>
    31:32:void <init>() -> <init>
    38:47:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    52:52:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    57:57:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.sandrob.bouncycastle.jce.provider.PKIXAttrCertPathBuilderSpi -> org.sandrob.bouncycastle.jce.provider.PKIXAttrCertPathBuilderSpi:
    java.lang.Exception certPathException -> a
    34:34:void <init>() -> <init>
    47:159:java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters) -> engineBuild
    171:300:java.security.cert.CertPathBuilderResult build(org.sandrob.bouncycastle.x509.X509AttributeCertificate,java.security.cert.X509Certificate,org.sandrob.bouncycastle.x509.ExtendedPKIXBuilderParameters,java.util.List) -> a
org.sandrob.bouncycastle.jce.provider.PKIXAttrCertPathValidatorSpi -> org.sandrob.bouncycastle.jce.provider.PKIXAttrCertPathValidatorSpi:
    24:24:void <init>() -> <init>
    56:97:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters) -> engineValidate
org.sandrob.bouncycastle.jce.provider.PKIXCRLUtil -> org.sandrob.bouncycastle.jce.provider.PKIXCRLUtil:
    20:20:void <init>() -> <init>
    25:70:java.util.Set findCRLs(org.sandrob.bouncycastle.x509.X509CRLStoreSelector,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.util.Date) -> findCRLs
    76:88:java.util.Set findCRLs(org.sandrob.bouncycastle.x509.X509CRLStoreSelector,java.security.cert.PKIXParameters) -> findCRLs
    107:152:java.util.Collection findCRLs(org.sandrob.bouncycastle.x509.X509CRLStoreSelector,java.util.List) -> a
org.sandrob.bouncycastle.jce.provider.PKIXCertPath -> org.sandrob.bouncycastle.jce.provider.PKIXCertPath:
    java.util.List certPathEncodings -> a
    java.util.List certificates -> b
    42:53:void <clinit>() -> <clinit>
    64:148:java.util.List sortCerts(java.util.List) -> a
    153:155:void <init>(java.util.List) -> <init>
    167:215:void <init>(java.io.InputStream,java.lang.String) -> <init>
    227:227:java.util.Iterator getEncodings() -> getEncodings
    240:249:byte[] getEncoded() -> getEncoded
    265:321:byte[] getEncoded(java.lang.String) -> getEncoded
    333:333:java.util.List getCertificates() -> getCertificates
    349:353:org.sandrob.bouncycastle.asn1.DERObject toASN1Object(java.security.cert.X509Certificate) -> a
    362:366:byte[] toDEREncoded(org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
org.sandrob.bouncycastle.jce.provider.PKIXCertPathBuilderSpi -> org.sandrob.bouncycastle.jce.provider.PKIXCertPathBuilderSpi:
    java.lang.Exception certPathException -> a
    32:32:void <init>() -> <init>
    44:125:java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters) -> engineBuild
    136:258:java.security.cert.CertPathBuilderResult build(java.security.cert.X509Certificate,org.sandrob.bouncycastle.x509.ExtendedPKIXBuilderParameters,java.util.List) -> build
org.sandrob.bouncycastle.jce.provider.PKIXCertPathValidatorSpi -> org.sandrob.bouncycastle.jce.provider.PKIXCertPathValidatorSpi:
    33:33:void <init>() -> <init>
    43:428:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters) -> engineValidate
org.sandrob.bouncycastle.jce.provider.PKIXNameConstraintValidator -> org.sandrob.bouncycastle.jce.provider.PKIXNameConstraintValidator:
    java.util.Set excludedSubtreesDN -> a
    java.util.Set excludedSubtreesDNS -> b
    java.util.Set excludedSubtreesEmail -> c
    java.util.Set excludedSubtreesURI -> d
    java.util.Set excludedSubtreesIP -> e
    java.util.Set permittedSubtreesDN -> f
    java.util.Set permittedSubtreesDNS -> g
    java.util.Set permittedSubtreesEmail -> h
    java.util.Set permittedSubtreesURI -> i
    java.util.Set permittedSubtreesIP -> j
    22:44:void <init>() -> <init>
    50:68:boolean withinDNSubtree(org.sandrob.bouncycastle.asn1.ASN1Sequence,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> a
    74:75:void checkPermittedDN(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> checkPermittedDN
    80:81:void checkExcludedDN(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> checkExcludedDN
    86:108:void checkPermittedDN(java.util.Set,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> a
    114:131:void checkExcludedDN(java.util.Set,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> b
    135:165:java.util.Set intersectDN(java.util.Set,java.util.Set) -> a
    170:204:java.util.Set unionDN(java.util.Set,org.sandrob.bouncycastle.asn1.ASN1Sequence) -> c
    210:234:java.util.Set intersectEmail(java.util.Set,java.util.Set) -> b
    239:260:java.util.Set unionEmail(java.util.Set,java.lang.String) -> a
    276:298:java.util.Set intersectIP(java.util.Set,java.util.Set) -> c
    313:334:java.util.Set unionIP(java.util.Set,byte[]) -> a
    347:359:java.util.Set unionIPRange(byte[],byte[]) -> a
    372:396:java.util.Set intersectIPRange(byte[],byte[]) -> b
    408:412:byte[] ipWithSubnetMask(byte[],byte[]) -> c
    427:438:byte[][] extractIPsAndSubnetMasks(byte[],byte[]) -> d
    460:476:byte[][] minMaxIPs(byte[],byte[],byte[],byte[]) -> a
    482:505:void checkPermittedEmail(java.util.Set,java.lang.String) -> b
    511:528:void checkExcludedEmail(java.util.Set,java.lang.String) -> c
    543:564:void checkPermittedIP(java.util.Set,byte[]) -> b
    580:597:void checkExcludedIP(java.util.Set,byte[]) -> c
    611:632:boolean isIPConstrained(byte[],byte[]) -> e
    637:659:boolean emailIsConstrained(java.lang.String,java.lang.String) -> a
    664:691:boolean withinDomain(java.lang.String,java.lang.String) -> b
    697:719:void checkPermittedDNS(java.util.Set,java.lang.String) -> d
    725:743:void checkExcludedDNS(java.util.Set,java.lang.String) -> e
    757:890:void unionEmail(java.lang.String,java.lang.String,java.util.Set) -> a
    895:1028:void unionURI(java.lang.String,java.lang.String,java.util.Set) -> b
    1032:1063:java.util.Set intersectDNS(java.util.Set,java.util.Set) -> d
    1068:1102:java.util.Set unionDNS(java.util.Set,java.lang.String) -> unionDNS
    1117:1205:void intersectEmail(java.lang.String,java.lang.String,java.util.Set) -> c
    1210:1227:void checkExcludedURI(java.util.Set,java.lang.String) -> f
    1231:1253:java.util.Set intersectURI(java.util.Set,java.util.Set) -> e
    1258:1280:java.util.Set unionURI(java.util.Set,java.lang.String) -> g
    1287:1375:void intersectURI(java.lang.String,java.lang.String,java.util.Set) -> d
    1380:1401:void checkPermittedURI(java.util.Set,java.lang.String) -> h
    1406:1422:boolean isUriConstrained(java.lang.String,java.lang.String) -> c
    1429:1448:java.lang.String extractHostFromURL(java.lang.String) -> a
    1461:1484:void checkPermitted(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> checkPermitted
    1497:1519:void checkExcluded(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> checkExcluded
    1530:1572:void intersectPermittedSubtree(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> intersectPermittedSubtree
    1576:1576:java.lang.String extractNameAsString(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> a
    1581:1598:void intersectEmptyPermittedSubtree(int) -> intersectEmptyPermittedSubtree
    1607:1632:void addExcludedSubtree(org.sandrob.bouncycastle.asn1.x509.GeneralSubtree) -> addExcludedSubtree
    1643:1650:byte[] max(byte[],byte[]) -> f
    1662:1669:byte[] min(byte[],byte[]) -> g
    1683:1691:int compareTo(byte[],byte[]) -> h
    1704:1709:byte[] or(byte[],byte[]) -> i
    1714:1723:int hashCode() -> hashCode
    1728:1746:int hashCollection(java.util.Collection) -> a
    1751:1765:boolean equals(java.lang.Object) -> equals
    1770:1803:boolean collectionsAreEqual(java.util.Collection,java.util.Collection) -> a
    1808:1822:boolean equals(java.lang.Object,java.lang.Object) -> a
    1834:1846:java.lang.String stringifyIP(byte[]) -> a
    1851:1862:java.lang.String stringifyIPCollection(java.util.Set) -> a
    1867:1920:java.lang.String toString() -> toString
org.sandrob.bouncycastle.jce.provider.PKIXNameConstraintValidatorException -> org.sandrob.bouncycastle.jce.provider.PKIXNameConstraintValidatorException:
    8:9:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode -> org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode:
    java.util.List children -> children
    int depth -> depth
    java.util.Set expectedPolicies -> expectedPolicies
    java.security.cert.PolicyNode parent -> parent
    java.util.Set policyQualifiers -> policyQualifiers
    java.lang.String validPolicy -> validPolicy
    boolean critical -> critical
    27:43:void <init>(java.util.List,int,java.util.Set,java.security.cert.PolicyNode,java.util.Set,java.lang.String,boolean) -> <init>
    48:50:void addChild(org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode) -> addChild
    54:54:java.util.Iterator getChildren() -> getChildren
    59:59:int getDepth() -> getDepth
    64:64:java.util.Set getExpectedPolicies() -> getExpectedPolicies
    69:69:java.security.cert.PolicyNode getParent() -> getParent
    74:74:java.util.Set getPolicyQualifiers() -> getPolicyQualifiers
    79:79:java.lang.String getValidPolicy() -> getValidPolicy
    84:84:boolean hasChildren() -> hasChildren
    89:89:boolean isCritical() -> isCritical
    94:95:void removeChild(org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode) -> removeChild
    99:100:void setCritical(boolean) -> setCritical
    104:105:void setParent(org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode) -> setParent
    109:109:java.lang.String toString() -> toString
    114:126:java.lang.String toString(java.lang.String) -> toString
    131:131:java.lang.Object clone() -> clone
    136:166:org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode copy() -> copy
org.sandrob.bouncycastle.jce.provider.ProviderUtil -> org.sandrob.bouncycastle.jce.provider.ProviderUtil:
    long MAX_MEMORY -> a
    java.security.Permission BC_EC_LOCAL_PERMISSION -> b
    java.security.Permission BC_EC_PERMISSION -> c
    java.lang.ThreadLocal threadSpec -> d
    org.sandrob.bouncycastle.jce.spec.ECParameterSpec ecImplicitCaParams -> e
    13:22:void <clinit>() -> <clinit>
    13:13:void <init>() -> <init>
    27:72:void setParameter(java.lang.String,java.lang.Object) -> a
    76:83:org.sandrob.bouncycastle.jce.spec.ECParameterSpec getEcImplicitlyCa() -> getEcImplicitlyCa
    89:99:int getReadLimit(java.io.InputStream) -> a
org.sandrob.bouncycastle.jce.provider.RFC3280CertPathUtilities -> org.sandrob.bouncycastle.jce.provider.RFC3280CertPathUtilities:
    org.sandrob.bouncycastle.jce.provider.PKIXCRLUtil CRL_UTIL -> a
    java.lang.String CERTIFICATE_POLICIES -> CERTIFICATE_POLICIES
    java.lang.String POLICY_MAPPINGS -> POLICY_MAPPINGS
    java.lang.String INHIBIT_ANY_POLICY -> INHIBIT_ANY_POLICY
    java.lang.String ISSUING_DISTRIBUTION_POINT -> ISSUING_DISTRIBUTION_POINT
    java.lang.String FRESHEST_CRL -> FRESHEST_CRL
    java.lang.String DELTA_CRL_INDICATOR -> DELTA_CRL_INDICATOR
    java.lang.String POLICY_CONSTRAINTS -> POLICY_CONSTRAINTS
    java.lang.String BASIC_CONSTRAINTS -> BASIC_CONSTRAINTS
    java.lang.String CRL_DISTRIBUTION_POINTS -> CRL_DISTRIBUTION_POINTS
    java.lang.String SUBJECT_ALTERNATIVE_NAME -> SUBJECT_ALTERNATIVE_NAME
    java.lang.String NAME_CONSTRAINTS -> NAME_CONSTRAINTS
    java.lang.String AUTHORITY_KEY_IDENTIFIER -> AUTHORITY_KEY_IDENTIFIER
    java.lang.String KEY_USAGE -> KEY_USAGE
    java.lang.String CRL_NUMBER -> CRL_NUMBER
    java.lang.String ANY_POLICY -> ANY_POLICY
    int KEY_CERT_SIGN -> KEY_CERT_SIGN
    int CRL_SIGN -> CRL_SIGN
    java.lang.String[] crlReasons -> crlReasons
    60:2293:void <clinit>() -> <clinit>
    60:60:void <init>() -> <init>
    101:267:void processCRLB2(org.sandrob.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL) -> processCRLB2
    288:342:void processCRLB1(org.sandrob.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL) -> processCRLB1
    349:375:org.sandrob.bouncycastle.jce.provider.ReasonsMask processCRLD(java.security.cert.X509CRL,org.sandrob.bouncycastle.asn1.x509.DistributionPoint) -> processCRLD
    447:565:java.util.Set processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.util.List) -> processCRLF
    573:587:java.security.PublicKey processCRLG(java.security.cert.X509CRL,java.util.Set) -> processCRLG
    595:615:java.security.cert.X509CRL processCRLH(java.util.Set,java.security.PublicKey) -> processCRLH
    625:672:java.util.Set processCRLA1i(java.util.Date,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.security.cert.X509CRL) -> processCRLA1i
    682:713:java.util.Set[] processCRLA1ii(java.util.Date,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.security.cert.X509CRL) -> processCRLA1ii
    732:830:void processCRLC(java.security.cert.X509CRL,java.security.cert.X509CRL,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> processCRLC
    840:844:void processCRLI(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.sandrob.bouncycastle.jce.provider.CertStatus,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> processCRLI
    853:857:void processCRLJ(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.sandrob.bouncycastle.jce.provider.CertStatus) -> processCRLJ
    867:1043:org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode prepareCertB(java.security.cert.CertPath,int,java.util.List[],org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode,int) -> prepareCertB
    1051:1102:void prepareNextCertA(java.security.cert.CertPath,int) -> prepareNextCertA
    1114:1119:void processCertF(java.security.cert.CertPath,int,org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode,int) -> processCertF
    1127:1147:org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode processCertE(java.security.cert.CertPath,int,org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode) -> processCertE
    1156:1246:void processCertBC(java.security.cert.CertPath,int,org.sandrob.bouncycastle.jce.provider.PKIXNameConstraintValidator) -> processCertBC
    1257:1447:org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode processCertD(java.security.cert.CertPath,int,java.util.Set,org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],int) -> processCertD
    1460:1530:void processCertA(java.security.cert.CertPath,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,int,java.security.PublicKey,boolean,javax.security.auth.x500.X500Principal,java.security.cert.X509Certificate) -> processCertA
    1538:1584:int prepareNextCertI1(java.security.cert.CertPath,int,int) -> prepareNextCertI1
    1593:1638:int prepareNextCertI2(java.security.cert.CertPath,int,int) -> prepareNextCertI2
    1647:1709:void prepareNextCertG(java.security.cert.CertPath,int,org.sandrob.bouncycastle.jce.provider.PKIXNameConstraintValidator) -> prepareNextCertG
    1741:1885:void checkCRL(org.sandrob.bouncycastle.asn1.x509.DistributionPoint,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.sandrob.bouncycastle.jce.provider.CertStatus,org.sandrob.bouncycastle.jce.provider.ReasonsMask,java.util.List) -> a
    1909:2024:void checkCRLs(org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List) -> checkCRLs
    2032:2058:int prepareNextCertJ(java.security.cert.CertPath,int,int) -> prepareNextCertJ
    2066:2093:void prepareNextCertK(java.security.cert.CertPath,int) -> prepareNextCertK
    2101:2115:int prepareNextCertL(java.security.cert.CertPath,int,int) -> prepareNextCertL
    2124:2155:int prepareNextCertM(java.security.cert.CertPath,int,int) -> prepareNextCertM
    2163:2177:void prepareNextCertN(java.security.cert.CertPath,int) -> prepareNextCertN
    2186:2210:void prepareNextCertO(java.security.cert.CertPath,int,java.util.Set,java.util.List) -> prepareNextCertO
    2217:2232:int prepareNextCertH1(java.security.cert.CertPath,int,int) -> prepareNextCertH1
    2240:2255:int prepareNextCertH2(java.security.cert.CertPath,int,int) -> prepareNextCertH2
    2263:2278:int prepareNextCertH3(java.security.cert.CertPath,int,int) -> prepareNextCertH3
    2302:2306:int wrapupCertA(int,java.security.cert.X509Certificate) -> wrapupCertA
    2315:2359:int wrapupCertB(java.security.cert.CertPath,int,int) -> wrapupCertB
    2369:2391:void wrapupCertF(java.security.cert.CertPath,int,java.util.List,java.util.Set) -> wrapupCertF
    2403:2567:org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode wrapupCertG(java.security.cert.CertPath,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.util.Set,int,java.util.List[],org.sandrob.bouncycastle.jce.provider.PKIXPolicyNode,java.util.Set) -> wrapupCertG
org.sandrob.bouncycastle.jce.provider.RFC3281CertPathUtilities -> org.sandrob.bouncycastle.jce.provider.f:
    java.lang.String TARGET_INFORMATION -> a
    java.lang.String NO_REV_AVAIL -> b
    java.lang.String CRL_DISTRIBUTION_POINTS -> c
    java.lang.String AUTHORITY_INFO_ACCESS -> d
    46:59:void <clinit>() -> <clinit>
    69:105:void processAttrCert7(org.sandrob.bouncycastle.x509.X509AttributeCertificate,java.security.cert.CertPath,java.security.cert.CertPath,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> a
    126:278:void checkCRLs(org.sandrob.bouncycastle.x509.X509AttributeCertificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.util.List) -> a
    284:306:void additionalChecks(org.sandrob.bouncycastle.x509.X509AttributeCertificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> a
    313:326:void processAttrCert5(org.sandrob.bouncycastle.x509.X509AttributeCertificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> b
    331:348:void processAttrCert4(java.security.cert.X509Certificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> a
    353:364:void processAttrCert3(java.security.cert.X509Certificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> b
    370:398:java.security.cert.CertPathValidatorResult processAttrCert2(java.security.cert.CertPath,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> a
    423:540:java.security.cert.CertPath processAttrCert1(org.sandrob.bouncycastle.x509.X509AttributeCertificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters) -> c
    573:702:void checkCRL(org.sandrob.bouncycastle.asn1.x509.DistributionPoint,org.sandrob.bouncycastle.x509.X509AttributeCertificate,org.sandrob.bouncycastle.x509.ExtendedPKIXParameters,java.util.Date,java.security.cert.X509Certificate,org.sandrob.bouncycastle.jce.provider.CertStatus,org.sandrob.bouncycastle.jce.provider.ReasonsMask,java.util.List) -> a
org.sandrob.bouncycastle.jce.provider.RSAUtil -> org.sandrob.bouncycastle.jce.provider.g:
    22:25:boolean isRsaOid(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    31:31:org.sandrob.bouncycastle.crypto.params.RSAKeyParameters generatePublicKeyParameter(java.security.interfaces.RSAPublicKey) -> a
    38:50:org.sandrob.bouncycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey) -> a
org.sandrob.bouncycastle.jce.provider.ReasonsMask -> org.sandrob.bouncycastle.jce.provider.h:
    int _reasons -> b
    org.sandrob.bouncycastle.jce.provider.ReasonsMask allReasons -> a
    9:35:void <clinit>() -> <clinit>
    18:21:void <init>(int) -> <init>
    29:30:void <init>() -> <init>
    48:49:void addReasons(org.sandrob.bouncycastle.jce.provider.ReasonsMask) -> a
    60:60:boolean isAllReasons() -> a
    71:73:org.sandrob.bouncycastle.jce.provider.ReasonsMask intersect(org.sandrob.bouncycastle.jce.provider.ReasonsMask) -> b
    84:84:boolean hasNewReasons(org.sandrob.bouncycastle.jce.provider.ReasonsMask) -> c
    94:94:int getReasons() -> b
org.sandrob.bouncycastle.jce.provider.WrapCipherSpi -> org.sandrob.bouncycastle.jce.provider.WrapCipherSpi:
    java.lang.Class[] availableSpecs -> a
    int pbeType -> pbeType
    int pbeHash -> pbeHash
    int pbeKeySize -> pbeKeySize
    int pbeIvSize -> pbeIvSize
    java.security.AlgorithmParameters engineParams -> engineParams
    org.sandrob.bouncycastle.crypto.Wrapper wrapEngine -> wrapEngine
    int ivSize -> b
    byte[] iv -> c
    49:71:void <init>() -> <init>
    76:77:void <init>(org.sandrob.bouncycastle.crypto.Wrapper) -> <init>
    49:85:void <init>(org.sandrob.bouncycastle.crypto.Wrapper,int) -> <init>
    89:89:int engineGetBlockSize() -> engineGetBlockSize
    94:94:byte[] engineGetIV() -> engineGetIV
    100:100:int engineGetKeySize(java.security.Key) -> engineGetKeySize
    106:106:int engineGetOutputSize(int) -> engineGetOutputSize
    111:111:java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    118:118:void engineSetMode(java.lang.String) -> engineSetMode
    125:125:void engineSetPadding(java.lang.String) -> engineSetPadding
    137:186:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    195:220:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    230:236:void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    243:243:byte[] engineUpdate(byte[],int,int) -> engineUpdate
    254:254:int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    263:263:byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    274:274:int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    281:300:byte[] engineWrap(java.security.Key) -> engineWrap
    313:415:java.security.Key engineUnwrap(byte[],java.lang.String,int) -> engineUnwrap
org.sandrob.bouncycastle.jce.provider.WrapCipherSpi$RC2Wrap -> org.sandrob.bouncycastle.jce.provider.WrapCipherSpi$RC2Wrap:
    428:429:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.X509AttrCertParser -> org.sandrob.bouncycastle.jce.provider.X509AttrCertParser:
    org.sandrob.bouncycastle.jce.provider.PEMUtil PEM_PARSER -> a
    org.sandrob.bouncycastle.asn1.ASN1Set sData -> b
    int sDataObjectCount -> c
    java.io.InputStream currentStream -> d
    22:25:void <clinit>() -> <clinit>
    22:29:void <init>() -> <init>
    35:50:org.sandrob.bouncycastle.x509.X509AttributeCertificate readDERCertificate(java.io.InputStream) -> a
    56:70:org.sandrob.bouncycastle.x509.X509AttributeCertificate getCertificate() -> a
    77:84:org.sandrob.bouncycastle.x509.X509AttributeCertificate readPEMCertificate(java.io.InputStream) -> b
    89:97:void engineInit(java.io.InputStream) -> engineInit
    104:139:java.lang.Object engineRead() -> engineRead
    147:154:java.util.Collection engineReadAll() -> engineReadAll
org.sandrob.bouncycastle.jce.provider.X509CRLEntryObject -> org.sandrob.bouncycastle.jce.provider.X509CRLEntryObject:
    org.sandrob.bouncycastle.asn1.x509.TBSCertList$CRLEntry c -> a
    boolean isIndirect -> b
    javax.security.auth.x500.X500Principal previousCertificateIssuer -> c
    javax.security.auth.x500.X500Principal certificateIssuer -> d
    int hashValue -> e
    boolean isHashValueSet -> f
    45:49:void <init>(org.sandrob.bouncycastle.asn1.x509.TBSCertList$CRLEntry) -> <init>
    68:77:void <init>(org.sandrob.bouncycastle.asn1.x509.TBSCertList$CRLEntry,boolean,javax.security.auth.x500.X500Principal) -> <init>
    85:87:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    92:118:javax.security.auth.x500.X500Principal loadCertificateIssuer() -> a
    124:124:javax.security.auth.x500.X500Principal getCertificateIssuer() -> getCertificateIssuer
    129:150:java.util.Set getExtensionOIDs(boolean) -> a
    155:155:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    160:160:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    165:184:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    193:199:int hashCode() -> hashCode
    207:211:byte[] getEncoded() -> getEncoded
    217:217:java.math.BigInteger getSerialNumber() -> getSerialNumber
    222:222:java.util.Date getRevocationDate() -> getRevocationDate
    227:227:boolean hasExtensions() -> hasExtensions
    232:287:java.lang.String toString() -> toString
org.sandrob.bouncycastle.jce.provider.X509CRLObject -> org.sandrob.bouncycastle.jce.provider.X509CRLObject:
    org.sandrob.bouncycastle.asn1.x509.CertificateList c -> a
    java.lang.String sigAlgName -> b
    byte[] sigAlgParams -> c
    boolean isIndirect -> d
    62:87:void <init>(org.sandrob.bouncycastle.asn1.x509.CertificateList) -> <init>
    95:105:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    110:134:java.util.Set getExtensionOIDs(boolean) -> a
    139:139:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    144:144:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    149:168:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    176:180:byte[] getEncoded() -> getEncoded
    188:189:void verify(java.security.PublicKey) -> verify
    195:208:void verify(java.security.PublicKey,java.lang.String) -> verify
    212:212:int getVersion() -> getVersion
    217:217:java.security.Principal getIssuerDN() -> getIssuerDN
    224:233:javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    239:239:java.util.Date getThisUpdate() -> getThisUpdate
    244:249:java.util.Date getNextUpdate() -> getNextUpdate
    254:266:java.util.Set loadCRLEntries() -> a
    271:287:java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger) -> getRevokedCertificate
    292:299:java.util.Set getRevokedCertificates() -> getRevokedCertificates
    307:311:byte[] getTBSCertList() -> getTBSCertList
    317:317:byte[] getSignature() -> getSignature
    322:322:java.lang.String getSigAlgName() -> getSigAlgName
    327:327:java.lang.String getSigAlgOID() -> getSigAlgOID
    332:341:byte[] getSigAlgParams() -> getSigAlgParams
    351:472:java.lang.String toString() -> toString
    484:504:boolean isRevoked(java.security.cert.Certificate) -> isRevoked
    510:527:boolean isIndirectCRL() -> b
org.sandrob.bouncycastle.jce.provider.X509CRLParser -> org.sandrob.bouncycastle.jce.provider.X509CRLParser:
    org.sandrob.bouncycastle.jce.provider.PEMUtil PEM_PARSER -> a
    org.sandrob.bouncycastle.asn1.ASN1Set sData -> b
    int sDataObjectCount -> c
    java.io.InputStream currentStream -> d
    23:26:void <clinit>() -> <clinit>
    23:30:void <init>() -> <init>
    36:51:java.security.cert.CRL readDERCRL(java.io.InputStream) -> a
    57:64:java.security.cert.CRL getCRL() -> a
    71:78:java.security.cert.CRL readPEMCRL(java.io.InputStream) -> b
    83:91:void engineInit(java.io.InputStream) -> engineInit
    98:133:java.lang.Object engineRead() -> engineRead
    141:148:java.util.Collection engineReadAll() -> engineReadAll
org.sandrob.bouncycastle.jce.provider.X509CertPairParser -> org.sandrob.bouncycastle.jce.provider.X509CertPairParser:
    java.io.InputStream currentStream -> a
    18:21:void <init>() -> <init>
    27:30:org.sandrob.bouncycastle.x509.X509CertificatePair readDERCrossCertificatePair(java.io.InputStream) -> a
    35:41:void engineInit(java.io.InputStream) -> engineInit
    48:61:java.lang.Object engineRead() -> engineRead
    68:75:java.util.Collection engineReadAll() -> engineReadAll
org.sandrob.bouncycastle.jce.provider.X509CertParser -> org.sandrob.bouncycastle.jce.provider.X509CertParser:
    org.sandrob.bouncycastle.jce.provider.PEMUtil PEM_PARSER -> a
    org.sandrob.bouncycastle.asn1.ASN1Set sData -> b
    int sDataObjectCount -> c
    java.io.InputStream currentStream -> d
    23:26:void <clinit>() -> <clinit>
    23:30:void <init>() -> <init>
    36:52:java.security.cert.Certificate readDERCertificate(java.io.InputStream) -> a
    58:72:java.security.cert.Certificate getCertificate() -> a
    79:87:java.security.cert.Certificate readPEMCertificate(java.io.InputStream) -> b
    92:100:void engineInit(java.io.InputStream) -> engineInit
    107:142:java.lang.Object engineRead() -> engineRead
    150:157:java.util.Collection engineReadAll() -> engineReadAll
org.sandrob.bouncycastle.jce.provider.X509CertificateObject -> org.sandrob.bouncycastle.jce.provider.X509CertificateObject:
    org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure c -> a
    org.sandrob.bouncycastle.asn1.x509.BasicConstraints basicConstraints -> b
    boolean[] keyUsage -> c
    boolean hashValueSet -> d
    int hashValue -> e
    org.sandrob.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> f
    68:116:void <init>(org.sandrob.bouncycastle.asn1.x509.X509CertificateStructure) -> <init>
    121:122:void checkValidity() -> checkValidity
    128:137:void checkValidity(java.util.Date) -> checkValidity
    141:141:int getVersion() -> getVersion
    146:146:java.math.BigInteger getSerialNumber() -> getSerialNumber
    151:151:java.security.Principal getIssuerDN() -> getIssuerDN
    158:167:javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    173:173:java.security.Principal getSubjectDN() -> getSubjectDN
    180:189:javax.security.auth.x500.X500Principal getSubjectX500Principal() -> getSubjectX500Principal
    195:195:java.util.Date getNotBefore() -> getNotBefore
    200:200:java.util.Date getNotAfter() -> getNotAfter
    208:212:byte[] getTBSCertificate() -> getTBSCertificate
    218:218:byte[] getSignature() -> getSignature
    227:253:java.lang.String getSigAlgName() -> getSigAlgName
    261:261:java.lang.String getSigAlgOID() -> getSigAlgOID
    269:275:byte[] getSigAlgParams() -> getSigAlgParams
    281:296:boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    301:316:boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    321:321:boolean[] getKeyUsage() -> getKeyUsage
    327:350:java.util.List getExtendedKeyUsage() -> getExtendedKeyUsage
    355:374:int getBasicConstraints() -> getBasicConstraints
    379:403:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    408:419:byte[] getExtensionBytes(java.lang.String) -> a
    424:443:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    448:472:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    477:515:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    520:520:java.security.PublicKey getPublicKey() -> getPublicKey
    528:532:byte[] getEncoded() -> getEncoded
    539:560:boolean equals(java.lang.Object) -> equals
    566:572:int hashCode() -> hashCode
    579:589:int calculateHashCode() -> a
    597:598:void setBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DEREncodable) -> setBagAttribute
    603:603:org.sandrob.bouncycastle.asn1.DEREncodable getBagAttribute(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getBagAttribute
    608:608:java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    613:704:java.lang.String toString() -> toString
    713:725:void verify(java.security.PublicKey) -> verify
    733:737:void verify(java.security.PublicKey,java.lang.String) -> verify
    745:763:void checkSignature(java.security.PublicKey,java.security.Signature) -> a
    767:792:boolean isAlgIdEqual(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> a
org.sandrob.bouncycastle.jce.provider.X509LDAPCertStoreSpi -> org.sandrob.bouncycastle.jce.provider.X509LDAPCertStoreSpi:
    org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters params -> a
    java.lang.String LDAP_PROVIDER -> b
    java.lang.String REFERRALS_IGNORE -> c
    50:78:void <clinit>() -> <clinit>
    58:68:void <init>(java.security.cert.CertStoreParameters) -> <init>
    92:103:javax.naming.directory.DirContext connectLDAP() -> a
    108:140:java.lang.String parseDN(java.lang.String,java.lang.String) -> a
    146:225:java.util.Collection engineGetCertificates(java.security.cert.CertSelector) -> engineGetCertificates
    232:280:java.util.Set certSubjectSerialSearch(java.security.cert.X509CertSelector,java.lang.String[],java.lang.String,java.lang.String) -> a
    286:292:java.util.Set getEndCertificates(java.security.cert.X509CertSelector) -> a
    298:310:java.util.Set getCACertificates(java.security.cert.X509CertSelector) -> b
    316:328:java.util.Set getCrossCertificates(java.security.cert.X509CertSelector) -> c
    334:396:java.util.Collection engineGetCRLs(java.security.cert.CRLSelector) -> engineGetCRLs
    411:474:java.util.Set search(java.lang.String,java.lang.String,java.lang.String[]) -> a
org.sandrob.bouncycastle.jce.provider.X509SignatureUtil -> org.sandrob.bouncycastle.jce.provider.i:
    org.sandrob.bouncycastle.asn1.ASN1Null derNull -> a
    26:28:void <clinit>() -> <clinit>
    35:60:void setSignatureParameters(java.security.Signature,org.sandrob.bouncycastle.asn1.DEREncodable) -> a
    65:83:java.lang.String getSignatureName(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier) -> a
    93:135:java.lang.String getDigestAlgName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
org.sandrob.bouncycastle.jce.provider.X509StoreAttrCertCollection -> org.sandrob.bouncycastle.jce.provider.X509StoreAttrCertCollection:
    org.sandrob.bouncycastle.util.CollectionStore _store -> a
    16:18:void <init>() -> <init>
    22:28:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    32:32:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.jce.provider.X509StoreCRLCollection -> org.sandrob.bouncycastle.jce.provider.X509StoreCRLCollection:
    org.sandrob.bouncycastle.util.CollectionStore _store -> a
    16:18:void <init>() -> <init>
    22:28:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    32:32:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.jce.provider.X509StoreCertCollection -> org.sandrob.bouncycastle.jce.provider.X509StoreCertCollection:
    org.sandrob.bouncycastle.util.CollectionStore _store -> a
    16:18:void <init>() -> <init>
    22:28:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    32:32:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.jce.provider.X509StoreCertPairCollection -> org.sandrob.bouncycastle.jce.provider.X509StoreCertPairCollection:
    org.sandrob.bouncycastle.util.CollectionStore _store -> a
    24:26:void <init>() -> <init>
    37:47:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    62:62:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.jce.provider.X509StoreLDAPAttrCerts -> org.sandrob.bouncycastle.jce.provider.X509StoreLDAPAttrCerts:
    org.sandrob.bouncycastle.x509.util.LDAPStoreHelper helper -> a
    27:29:void <init>() -> <init>
    40:47:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    67:76:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.jce.provider.X509StoreLDAPCRLs -> org.sandrob.bouncycastle.jce.provider.X509StoreLDAPCRLs:
    org.sandrob.bouncycastle.x509.util.LDAPStoreHelper helper -> a
    27:29:void <init>() -> <init>
    40:47:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    63:85:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.jce.provider.X509StoreLDAPCertPairs -> org.sandrob.bouncycastle.jce.provider.X509StoreLDAPCertPairs:
    org.sandrob.bouncycastle.x509.util.LDAPStoreHelper helper -> a
    27:29:void <init>() -> <init>
    40:47:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    65:72:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.jce.provider.X509StoreLDAPCerts -> org.sandrob.bouncycastle.jce.provider.X509StoreLDAPCerts:
    org.sandrob.bouncycastle.x509.util.LDAPStoreHelper helper -> a
    31:33:void <init>() -> <init>
    44:51:void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    72:96:java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
    102:126:java.util.Collection getCertificatesFromCrossCertificatePairs(org.sandrob.bouncycastle.x509.X509CertStoreSelector) -> a
org.sandrob.bouncycastle.jce.provider.asymmetric.EC -> org.sandrob.bouncycastle.jce.provider.asymmetric.EC:
    11:11:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.EC$Mappings -> org.sandrob.bouncycastle.jce.provider.asymmetric.EC$Mappings:
    16:80:void <init>() -> <init>
    88:99:void addSignatureAlgorithm(java.lang.String,java.lang.String,java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.EC5Util -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.EC5Util:
    15:15:void <init>() -> <init>
    23:42:java.security.spec.EllipticCurve convertCurve(org.sandrob.bouncycastle.math.ec.ECCurve,byte[]) -> convertCurve
    50:63:org.sandrob.bouncycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve) -> convertCurve
    71:90:java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.sandrob.bouncycastle.jce.spec.ECParameterSpec) -> convertSpec
    98:105:org.sandrob.bouncycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean) -> convertSpec
    113:113:org.sandrob.bouncycastle.math.ec.ECPoint convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean) -> convertPoint
    121:121:org.sandrob.bouncycastle.math.ec.ECPoint convertPoint(org.sandrob.bouncycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean) -> convertPoint
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.ECUtil -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.ECUtil:
    28:28:void <init>() -> <init>
    40:97:int[] convertMidTerms(int[]) -> a
    104:133:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    140:155:org.sandrob.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
    161:180:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getNamedCurveOid(java.lang.String) -> getNamedCurveOid
    186:201:org.sandrob.bouncycastle.asn1.x9.X9ECParameters getNamedCurveByOid(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getNamedCurveByOid
    207:226:java.lang.String getCurveName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> getCurveName
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement:
    org.sandrob.bouncycastle.asn1.x9.X9IntegerConverter converter -> a
    java.util.Hashtable algorithms -> b
    java.lang.String kaAlgorithm -> c
    java.math.BigInteger result -> d
    org.sandrob.bouncycastle.crypto.params.ECDomainParameters parameters -> e
    org.sandrob.bouncycastle.crypto.BasicAgreement agreement -> f
    org.sandrob.bouncycastle.crypto.DerivationFunction kdf -> g
    48:66:void <clinit>() -> <clinit>
    78:78:byte[] bigIntToBytes(java.math.BigInteger) -> a
    81:89:void <init>(java.lang.String,org.sandrob.bouncycastle.crypto.BasicAgreement,org.sandrob.bouncycastle.crypto.DerivationFunction) -> <init>
    96:140:java.security.Key engineDoPhase(java.security.Key,boolean) -> engineDoPhase
    146:152:byte[] engineGenerateSecret() -> engineGenerateSecret
    160:169:int engineGenerateSecret(byte[],int) -> engineGenerateSecret
    176:199:javax.crypto.SecretKey engineGenerateSecret(java.lang.String) -> engineGenerateSecret
    208:209:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    216:217:void engineInit(java.security.Key,java.security.SecureRandom) -> engineInit
    222:263:void initFromKey(java.security.Key) -> a
    267:269:java.lang.String getSimpleName(java.lang.Class) -> a
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$DH -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$DH:
    277:278:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$DHC -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$DHC:
    286:287:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$DHwithSHA1KDF -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$DHwithSHA1KDF:
    304:305:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$MQV -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$MQV:
    295:296:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$MQVwithSHA1KDF -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyAgreement$MQVwithSHA1KDF:
    313:314:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory:
    java.lang.String algorithm -> a
    27:31:void <init>(java.lang.String) -> <init>
    37:46:java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    54:92:java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    99:122:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    129:152:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$EC -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$EC:
    160:161:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECDH -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECDH:
    187:188:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECDHC -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECDHC:
    196:197:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECDSA -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECDSA:
    169:170:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECGOST3410 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECGOST3410:
    178:179:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECMQV -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyFactory$ECMQV:
    205:206:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator:
    39:40:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$EC -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$EC:
    org.sandrob.bouncycastle.crypto.params.ECKeyGenerationParameters param -> a
    org.sandrob.bouncycastle.crypto.generators.ECKeyPairGenerator engine -> b
    java.lang.Object ecParams -> c
    int strength -> d
    int certainty -> e
    java.security.SecureRandom random -> f
    boolean initialised -> g
    java.lang.String algorithm -> h
    java.util.Hashtable ecParameters -> i
    42:65:void <clinit>() -> <clinit>
    46:72:void <init>() -> <init>
    46:79:void <init>(java.lang.String) -> <init>
    85:104:void initialize(int,java.security.SecureRandom) -> initialize
    111:236:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    240:268:java.security.KeyPair generateKeyPair() -> generateKeyPair
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECDH -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECDH:
    296:297:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECDHC -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECDHC:
    305:306:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECDSA -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECDSA:
    278:279:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECGOST3410 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECGOST3410:
    287:288:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECMQV -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.KeyPairGenerator$ECMQV:
    314:315:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature:
    40:41:void <init>(org.sandrob.bouncycastle.crypto.Digest,org.sandrob.bouncycastle.crypto.DSA,org.sandrob.bouncycastle.jce.provider.DSAEncoder) -> <init>
    48:77:void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    86:105:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$CVCDSAEncoder -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$a:
    272:272:void <init>() -> <init>
    280:296:byte[] encode(java.math.BigInteger,java.math.BigInteger) -> encode
    302:313:byte[] makeUnsigned(java.math.BigInteger) -> a
    320:331:java.math.BigInteger[] decode(byte[]) -> decode
    272:272:void <init>(org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$CVCDSAEncoder) -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$StdDSAEncoder -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$b:
    242:242:void <init>() -> <init>
    250:255:byte[] encode(java.math.BigInteger,java.math.BigInteger) -> encode
    262:268:java.math.BigInteger[] decode(byte[]) -> decode
    242:242:void <init>(org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$StdDSAEncoder) -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecCVCDSA -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecCVCDSA:
    220:221:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecCVCDSA224 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecCVCDSA224:
    229:230:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecCVCDSA256 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecCVCDSA256:
    238:239:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA:
    112:113:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA224 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA224:
    130:131:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA256 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA256:
    139:140:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA384 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA384:
    148:149:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA512 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSA512:
    157:158:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSARipeMD160 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSARipeMD160:
    166:167:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSAnone -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecDSAnone:
    121:122:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR:
    175:176:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR224 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR224:
    184:185:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR256 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR256:
    193:194:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR384 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR384:
    202:203:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR512 -> org.sandrob.bouncycastle.jce.provider.asymmetric.ec.Signature$ecNR512:
    211:212:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES -> org.sandrob.bouncycastle.jce.provider.symmetric.AES:
    31:33:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$AESCMAC -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$AESCMAC:
    76:77:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$AlgParamGen:
    139:139:void <init>() -> <init>
    147:147:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    152:173:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.AES$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$AlgParams:
    177:177:void <init>() -> <init>
    182:182:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.AES$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$CBC:
    49:50:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$CFB -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$CFB:
    58:59:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$ECB:
    40:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen:
    103:104:void <init>() -> <init>
    108:109:void <init>(int) -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen128 -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen128:
    117:118:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen192 -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen192:
    126:127:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen256 -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$KeyGen256:
    135:136:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$Mappings:
    198:260:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$OFB -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$OFB:
    67:68:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$RFC3211Wrap -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$RFC3211Wrap:
    94:95:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.AES$Wrap -> org.sandrob.bouncycastle.jce.provider.symmetric.AES$Wrap:
    85:86:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.ARC4 -> org.sandrob.bouncycastle.jce.provider.symmetric.ARC4:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.ARC4$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.ARC4$Base:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.ARC4$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.ARC4$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.ARC4$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.ARC4$Mappings:
    37:46:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish -> org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish:
    14:16:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$AlgParams:
    45:45:void <init>() -> <init>
    50:50:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$CBC:
    32:33:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$ECB:
    23:24:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$KeyGen:
    41:42:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Blowfish$Mappings:
    57:65:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST5 -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST5:
    26:28:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$AlgParamGen:
    57:57:void <init>() -> <init>
    65:65:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    70:91:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$AlgParams:
    byte[] iv -> a
    int keyLength -> b
    95:99:void <init>() -> <init>
    103:106:byte[] engineGetEncoded() -> engineGetEncoded
    113:124:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    131:136:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    143:151:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    157:160:void engineInit(byte[]) -> engineInit
    167:185:void engineInit(byte[],java.lang.String) -> engineInit
    190:190:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$CBC:
    44:45:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$ECB:
    35:36:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$KeyGen:
    53:54:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST5$Mappings:
    197:210:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST6 -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST6:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST6$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST6$ECB:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST6$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST6$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.CAST6$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.CAST6$Mappings:
    37:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia:
    26:28:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$AlgParamGen:
    107:107:void <init>() -> <init>
    115:115:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    120:141:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$AlgParams:
    145:145:void <init>() -> <init>
    150:150:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$CBC:
    44:45:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$ECB:
    35:36:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen:
    71:72:void <init>() -> <init>
    76:77:void <init>(int) -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen128 -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen128:
    85:86:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen192 -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen192:
    94:95:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen256 -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$KeyGen256:
    103:104:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$Mappings:
    157:187:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$RFC3211Wrap -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$RFC3211Wrap:
    62:63:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$Wrap -> org.sandrob.bouncycastle.jce.provider.symmetric.Camellia$Wrap:
    53:54:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede:
    32:34:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$CBC:
    50:51:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$CBCMAC -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$CBCMAC:
    95:96:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$CMAC -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$CMAC:
    104:105:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$DESede64 -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$DESede64:
    74:75:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$DESede64with7816d4 -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$DESede64with7816d4:
    86:87:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$DESedeCFB8 -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$DESedeCFB8:
    62:63:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$ECB:
    41:42:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$KeyFactory -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$KeyFactory:
    195:196:void <init>() -> <init>
    203:242:java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class) -> engineGetKeySpec
    249:255:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$KeyGenerator -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$KeyGenerator:
    boolean keySizeSet -> a
    136:141:void <init>() -> <init>
    147:149:void engineInit(int,java.security.SecureRandom) -> engineInit
    153:173:javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$KeyGenerator3 -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$KeyGenerator3:
    186:187:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$Mappings:
    262:291:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$RFC3211 -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$RFC3211:
    122:123:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.DESede$Wrap -> org.sandrob.bouncycastle.jce.provider.symmetric.DESede$Wrap:
    113:114:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grain128 -> org.sandrob.bouncycastle.jce.provider.symmetric.Grain128:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grain128$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.Grain128$Base:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grain128$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Grain128$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grain128$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Grain128$Mappings:
    37:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1 -> org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1$Base:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Grainv1$Mappings:
    37:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC128 -> org.sandrob.bouncycastle.jce.provider.symmetric.HC128:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC128$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.HC128$Base:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC128$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.HC128$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC128$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.HC128$Mappings:
    37:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC256 -> org.sandrob.bouncycastle.jce.provider.symmetric.HC256:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC256$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.HC256$Base:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC256$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.HC256$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.HC256$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.HC256$Mappings:
    37:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA:
    31:33:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$AlgParamGen:
    80:80:void <init>() -> <init>
    88:88:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    93:114:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$AlgParams:
    byte[] iv -> a
    118:118:void <init>() -> <init>
    126:126:byte[] engineGetEncoded() -> engineGetEncoded
    133:146:byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    153:158:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    165:171:void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    177:180:void engineInit(byte[]) -> engineInit
    187:201:void engineInit(byte[],java.lang.String) -> engineInit
    206:206:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$CBC:
    49:50:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$CFB8Mac -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$CFB8Mac:
    224:225:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$ECB:
    40:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$KeyGen:
    58:59:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$Mac -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$Mac:
    215:216:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$Mappings:
    231:250:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$PBEWithSHAAndIDEA -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$PBEWithSHAAndIDEA:
    76:77:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$PBEWithSHAAndIDEAKeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.IDEA$PBEWithSHAAndIDEAKeyGen:
    67:68:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon -> org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon:
    21:23:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$AlgParamGen:
    43:43:void <init>() -> <init>
    51:51:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    56:77:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$AlgParams:
    81:81:void <init>() -> <init>
    86:86:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$ECB:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$KeyGen:
    39:40:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Noekeon$Mappings:
    93:102:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5:
    26:28:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$AlgParamGen:
    84:84:void <init>() -> <init>
    92:92:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    97:118:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$AlgParams:
    140:140:void <init>() -> <init>
    145:145:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$CBC32 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$CBC32:
    59:60:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$CFB8Mac32 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$CFB8Mac32:
    136:137:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$ECB32 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$ECB32:
    38:39:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$ECB64 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$ECB64:
    50:51:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$KeyGen32 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$KeyGen32:
    68:69:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$KeyGen64 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$KeyGen64:
    80:81:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$Mac32 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$Mac32:
    127:128:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC5$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.RC5$Mappings:
    152:166:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC6 -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6:
    25:27:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$AlgParamGen:
    74:74:void <init>() -> <init>
    82:82:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    87:108:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$AlgParams:
    112:112:void <init>() -> <init>
    117:117:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$CBC:
    43:44:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$CFB -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$CFB:
    52:53:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$ECB:
    34:35:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$KeyGen:
    70:71:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$Mappings:
    124:129:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.RC6$OFB -> org.sandrob.bouncycastle.jce.provider.symmetric.RC6$OFB:
    61:62:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael -> org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael:
    13:15:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$AlgParams:
    35:35:void <init>() -> <init>
    40:40:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$ECB:
    22:23:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$KeyGen:
    31:32:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Rijndael$Mappings:
    47:52:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.SEED -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED:
    25:27:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.SEED$AlgParamGen -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED$AlgParamGen:
    65:65:void <init>() -> <init>
    73:73:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    78:99:java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.sandrob.bouncycastle.jce.provider.symmetric.SEED$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED$AlgParams:
    103:103:void <init>() -> <init>
    108:108:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.SEED$CBC -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED$CBC:
    43:44:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.SEED$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED$ECB:
    34:35:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.SEED$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED$KeyGen:
    61:62:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.SEED$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED$Mappings:
    115:132:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.SEED$Wrap -> org.sandrob.bouncycastle.jce.provider.symmetric.SEED$Wrap:
    52:53:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20 -> org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20$Base:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Salsa20$Mappings:
    37:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Serpent -> org.sandrob.bouncycastle.jce.provider.symmetric.Serpent:
    13:15:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$AlgParams:
    35:35:void <init>() -> <init>
    40:40:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$ECB:
    22:23:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$KeyGen:
    31:32:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Serpent$Mappings:
    47:52:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack -> org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack:
    16:18:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$AlgParams:
    38:38:void <init>() -> <init>
    43:43:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$ECB:
    25:26:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$KeyGen:
    34:35:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$Mac -> org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$Mac:
    52:53:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$MacCFB8 -> org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$MacCFB8:
    61:62:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Skipjack$Mappings:
    68:77:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.TEA -> org.sandrob.bouncycastle.jce.provider.symmetric.TEA:
    13:15:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.TEA$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.TEA$AlgParams:
    35:35:void <init>() -> <init>
    40:40:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.TEA$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.TEA$ECB:
    22:23:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.TEA$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.TEA$KeyGen:
    31:32:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.TEA$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.TEA$Mappings:
    47:52:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Twofish -> org.sandrob.bouncycastle.jce.provider.symmetric.Twofish:
    13:15:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$AlgParams:
    35:35:void <init>() -> <init>
    40:40:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$ECB:
    22:23:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$KeyGen:
    31:32:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.Twofish$Mappings:
    47:52:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPC -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPC:
    14:16:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$Base:
    23:24:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$KeyGen:
    32:33:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$Mac -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$Mac:
    41:42:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPC$Mappings:
    48:55:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3 -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3:
    12:14:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3$Base -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3$Base:
    21:22:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3$KeyGen:
    30:31:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.VMPCKSA3$Mappings:
    37:41:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.XTEA -> org.sandrob.bouncycastle.jce.provider.symmetric.XTEA:
    13:15:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$AlgParams -> org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$AlgParams:
    35:35:void <init>() -> <init>
    40:40:java.lang.String engineToString() -> engineToString
org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$ECB -> org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$ECB:
    22:23:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$KeyGen -> org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$KeyGen:
    31:32:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$Mappings -> org.sandrob.bouncycastle.jce.provider.symmetric.XTEA$Mappings:
    47:52:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.test.AESSICTest -> org.sandrob.bouncycastle.jce.provider.test.AESSICTest:
    byte[][] keys -> a
    byte[][] plain -> b
    byte[][][] cipher -> c
    18:54:void <init>() -> <init>
    60:60:java.lang.String getName() -> getName
    66:142:void performTest() -> performTest
    147:150:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.AESTest -> org.sandrob.bouncycastle.jce.provider.test.AESTest:
    java.lang.String[] cipherTests -> a
    23:39:void <clinit>() -> <clinit>
    44:45:void <init>() -> <init>
    61:142:void test(int,byte[],byte[],byte[]) -> a
    147:186:void eaxTest() -> a
    191:230:void ccmTest() -> b
    236:287:void gcmTest() -> c
    292:350:void performTest() -> performTest
    355:358:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.AlgorithmParametersTest -> org.sandrob.bouncycastle.jce.provider.test.AlgorithmParametersTest:
    byte[] dsaParams -> a
    14:18:void <init>() -> <init>
    25:90:void basicTest(java.lang.String,java.lang.Class,byte[]) -> a
    95:96:void performTest() -> performTest
    100:100:java.lang.String getName() -> getName
    106:109:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.AllTests -> org.sandrob.bouncycastle.jce.provider.test.AllTests:
    12:12:void <init>() -> <init>
    17:32:void testJCE() -> testJCE
    36:37:void main(java.lang.String[]) -> main
    41:51:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.jce.provider.test.AttrCertSelectorTest -> org.sandrob.bouncycastle.jce.provider.test.AttrCertSelectorTest:
    java.security.spec.RSAPrivateCrtKeySpec RSA_PRIVATE_KEY_SPEC -> a
    byte[] holderCert -> b
    33:57:void <clinit>() -> <clinit>
    33:33:void <init>() -> <init>
    96:96:java.lang.String getName() -> getName
    101:155:org.sandrob.bouncycastle.x509.X509AttributeCertificate createAttrCert() -> a
    160:226:void testSelector() -> testSelector
    230:232:void performTest() -> performTest
    236:239:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.AttrCertTest -> org.sandrob.bouncycastle.jce.provider.test.AttrCertTest:
    java.security.spec.RSAPrivateCrtKeySpec RSA_PRIVATE_KEY_SPEC -> d
    byte[] attrCert -> attrCert
    byte[] signCert -> a
    byte[] certWithBaseCertificateID -> b
    byte[] holderCertWithBaseCertificateID -> c
    42:135:void <clinit>() -> <clinit>
    42:145:void <init>() -> <init>
    157:157:java.lang.String getName() -> getName
    163:200:void testCertWithBaseCertificateID() -> a
    205:251:void equalityAndHashCodeTest(org.sandrob.bouncycastle.x509.X509AttributeCertificate,byte[]) -> a
    256:360:void testGenerateWithCert() -> b
    365:441:void testGenerateWithPrincipal() -> c
    446:625:void performTest() -> performTest
    630:633:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.BaseBlockCipherTest -> org.sandrob.bouncycastle.jce.provider.test.BaseBlockCipherTest:
    java.lang.String algorithm -> b
    19:23:void <init>(java.lang.String) -> <init>
    27:27:java.lang.String getName() -> getName
    33:67:void oidTest(java.lang.String[],java.lang.String[],int) -> oidTest
    72:97:void wrapOidTest(java.lang.String[],java.lang.String) -> wrapOidTest
    107:142:void wrapTest(int,java.lang.String,byte[],byte[],byte[]) -> wrapTest
org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest -> org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest:
    java.lang.String[] cipherTests1 -> a
    java.lang.String[] cipherTests2 -> b
    byte[] input1 -> c
    byte[] input2 -> d
    javax.crypto.spec.RC2ParameterSpec rc2Spec -> e
    javax.crypto.spec.RC5ParameterSpec rc5Spec -> f
    javax.crypto.spec.RC5ParameterSpec rc564Spec -> g
    40:288:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    322:322:java.lang.String getName() -> getName
    330:517:void test(java.lang.String,byte[],byte[]) -> test
    523:529:boolean noIDEA() -> a
    535:887:void testExceptions() -> b
    891:923:void performTest() -> performTest
    928:931:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest$1 -> org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest$1:
    org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest this$0 -> a
    1:821:void <init>(org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest) -> <init>
    826:826:java.lang.String getAlgorithm() -> getAlgorithm
    831:831:java.lang.String getFormat() -> getFormat
    836:836:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest$2 -> org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest$2:
    org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest this$0 -> a
    1:854:void <init>(org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest) -> <init>
    859:859:java.lang.String getAlgorithm() -> getAlgorithm
    864:864:java.lang.String getFormat() -> getFormat
    869:869:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest$FixedSecureRandom -> org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest$a:
    byte[] seed -> a
    org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest this$0 -> b
    295:302:void <init>(org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest) -> <init>
    308:317:void nextBytes(byte[]) -> nextBytes
    295:295:void <init>(org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest,org.sandrob.bouncycastle.jce.provider.test.BlockCipherTest$FixedSecureRandom) -> <init>
org.sandrob.bouncycastle.jce.provider.test.CMacTest -> org.sandrob.bouncycastle.jce.provider.test.CMacTest:
    byte[] keyBytes128 -> a
    byte[] keyBytes192 -> b
    byte[] keyBytes256 -> c
    byte[] input0 -> d
    byte[] input16 -> e
    byte[] input40 -> f
    byte[] input64 -> g
    byte[] output_k128_m0 -> h
    byte[] output_k128_m16 -> i
    byte[] output_k128_m40 -> j
    byte[] output_k128_m64 -> k
    byte[] output_k192_m0 -> l
    byte[] output_k192_m16 -> m
    byte[] output_k192_m40 -> n
    byte[] output_k192_m64 -> o
    byte[] output_k256_m0 -> p
    byte[] output_k256_m16 -> q
    byte[] output_k256_m40 -> r
    byte[] output_k256_m64 -> s
    byte[] output_des_ede -> t
    15:50:void <clinit>() -> <clinit>
    52:56:void <init>() -> <init>
    61:275:void performTest() -> performTest
    279:279:java.lang.String getName() -> getName
    284:287:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CRL5Test -> org.sandrob.bouncycastle.jce.provider.test.CRL5Test:
    byte[] inDirectCrl -> a
    byte[] directCRL -> b
    15:178:void <init>() -> <init>
    217:217:java.lang.String getName() -> getName
    223:235:void indirectCRLTest() -> indirectCRLTest
    240:252:void directCRLTest() -> directCRLTest
    257:259:void performTest() -> performTest
    264:267:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CamelliaTest -> org.sandrob.bouncycastle.jce.provider.test.CamelliaTest:
    java.lang.String[] cipherTests -> a
    21:37:void <clinit>() -> <clinit>
    42:43:void <init>() -> <init>
    59:140:void test(int,byte[],byte[],byte[]) -> test
    145:180:void performTest() -> performTest
    185:188:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CertPathBuilderTest -> org.sandrob.bouncycastle.jce.provider.test.CertPathBuilderTest:
    29:29:void <init>() -> <init>
    36:72:void baseTest() -> a
    78:120:void v0Test() -> b
    125:127:void performTest() -> performTest
    131:131:java.lang.String getName() -> getName
    137:140:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CertPathTest -> org.sandrob.bouncycastle.jce.provider.test.CertPathTest:
    byte[] rootCertBin -> rootCertBin
    byte[] interCertBin -> a
    byte[] finalCertBin -> b
    byte[] rootCrlBin -> rootCrlBin
    byte[] interCrlBin -> c
    byte[] certA -> d
    byte[] certB -> e
    byte[] certC -> f
    byte[] certD -> g
    38:111:void <clinit>() -> <clinit>
    38:38:void <init>() -> <init>
    130:184:void testExceptions() -> a
    189:252:void performTest() -> performTest
    256:256:java.lang.String getName() -> getName
    262:265:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CertPathTest$MyCertPath -> org.sandrob.bouncycastle.jce.provider.test.CertPathTest$a:
    java.util.Vector certificates -> a
    java.util.Vector encodingNames -> b
    byte[] encoding -> c
    334:340:void <init>(byte[]) -> <init>
    344:344:java.util.List getCertificates() -> getCertificates
    349:349:byte[] getEncoded() -> getEncoded
    355:360:byte[] getEncoded(java.lang.String) -> getEncoded
    365:365:java.util.Iterator getEncodings() -> getEncodings
org.sandrob.bouncycastle.jce.provider.test.CertPathTest$MyCertificate -> org.sandrob.bouncycastle.jce.provider.test.CertPathTest$b:
    byte[] encoding -> a
    273:276:void <init>(java.lang.String,byte[]) -> <init>
    281:281:byte[] getEncoded() -> getEncoded
    288:288:void verify(java.security.PublicKey) -> verify
    295:295:void verify(java.security.PublicKey,java.lang.String) -> verify
    299:299:java.lang.String toString() -> toString
    304:304:java.security.PublicKey getPublicKey() -> getPublicKey
org.sandrob.bouncycastle.jce.provider.test.CertPathTest$MyCertificate$1 -> org.sandrob.bouncycastle.jce.provider.test.CertPathTest$b$1:
    org.sandrob.bouncycastle.jce.provider.test.CertPathTest$MyCertificate this$1 -> a
    1:304:void <init>(org.sandrob.bouncycastle.jce.provider.test.CertPathTest$MyCertificate) -> <init>
    308:308:java.lang.String getAlgorithm() -> getAlgorithm
    313:313:byte[] getEncoded() -> getEncoded
    318:318:java.lang.String getFormat() -> getFormat
org.sandrob.bouncycastle.jce.provider.test.CertPathValidatorTest -> org.sandrob.bouncycastle.jce.provider.test.CertPathValidatorTest:
    byte[] AC_PR -> a
    byte[] AC_RAIZ_ICPBRASIL -> b
    byte[] schefer -> c
    byte[] circCA -> d
    byte[] circCRLCA -> e
    byte[] circCRL -> f
    34:189:void <clinit>() -> <clinit>
    34:116:void <init>() -> <init>
    204:243:void checkCircProcessing() -> a
    248:346:void performTest() -> performTest
    350:350:java.lang.String getName() -> getName
    356:359:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CertPathValidatorTest$MyChecker -> org.sandrob.bouncycastle.jce.provider.test.CertPathValidatorTest$a:
    int count -> a
    362:362:void <init>() -> <init>
    371:371:void init(boolean) -> init
    375:375:boolean isForwardCheckingSupported() -> isForwardCheckingSupported
    380:380:java.util.Set getSupportedExtensions() -> getSupportedExtensions
    386:387:void check(java.security.cert.Certificate,java.util.Collection) -> check
    391:391:int getCount() -> a
    362:362:void <init>(org.sandrob.bouncycastle.jce.provider.test.CertPathValidatorTest$MyChecker) -> <init>
org.sandrob.bouncycastle.jce.provider.test.CertStoreTest -> org.sandrob.bouncycastle.jce.provider.test.CertStoreTest:
    20:20:void <init>() -> <init>
    27:29:void performTest() -> performTest
    34:117:void basicTest() -> a
    122:220:void orderTest() -> b
    224:224:java.lang.String getName() -> getName
    229:232:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CertTest -> org.sandrob.bouncycastle.jce.provider.test.CertTest:
    byte[] cert1 -> a
    byte[] cert2 -> b
    byte[] cert3 -> c
    byte[] cert4 -> d
    byte[] cert5 -> e
    byte[] cert6 -> f
    byte[] cert7 -> g
    byte[] crl1 -> h
    byte[] oldEcdsa -> i
    byte[] uncompressedPtEC -> j
    byte[] keyUsage -> k
    byte[] nameCert -> l
    byte[] probSelfSignedCert -> m
    byte[] gost34102001base -> n
    byte[] gost341094base -> o
    byte[] gost341094A -> p
    byte[] gost341094B -> q
    byte[] gost34102001A -> r
    byte[] gostCA1 -> s
    byte[] gostCA2 -> t
    byte[] inDirectCrl -> u
    byte[] directCRL -> v
    byte[] pkcs7CrlProblem -> w
    byte[] emptyDNCert -> x
    byte[] gostRFC4491_94 -> y
    byte[] gostRFC4491_2001 -> z
    java.security.PublicKey dudPublicKey -> A
    80:1030:void <init>() -> <init>
    1051:1051:java.lang.String getName() -> getName
    1059:1077:void checkCertificate(int,byte[]) -> checkCertificate
    1084:1106:void checkNameCertificate(int,byte[]) -> checkNameCertificate
    1113:1137:void checkKeyUsage(int,byte[]) -> checkKeyUsage
    1145:1165:void checkSelfSignedCertificate(int,byte[]) -> checkSelfSignedCertificate
    1176:1338:void checkCreation1() -> checkCreation1
    1353:1469:void checkCreation2() -> checkCreation2
    1476:1619:void checkCreation3() -> checkCreation3
    1627:1739:void createECCert(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    1746:1763:void checkCRL(int,byte[]) -> a
    1768:1831:void checkCRLCreation1() -> checkCRLCreation1
    1836:1916:void checkCRLCreation2() -> checkCRLCreation2
    1921:2071:void checkCRLCreation3() -> checkCRLCreation3
    2085:2153:void checkCreation4() -> checkCreation4
    2161:2284:void checkCreation5() -> checkCreation5
    2289:2313:void testForgedSignature() -> a
    2319:2346:void pemTest() -> b
    2351:2351:java.security.cert.Certificate readPEMCert(java.security.cert.CertificateFactory,java.lang.String) -> a
    2357:2442:void pkcs7Test() -> c
    2447:2492:void createPSSCert(java.lang.String) -> a
    2497:2513:java.security.KeyPair generateLongFixedKeys() -> d
    2519:2528:void rfc4491Test() -> e
    2533:2577:void testNullDerNullCert() -> f
    2582:2597:void checkComparison(byte[]) -> a
    2602:2657:void performTest() -> performTest
    2662:2665:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CertTest$1 -> org.sandrob.bouncycastle.jce.provider.test.CertTest$1:
    org.sandrob.bouncycastle.jce.provider.test.CertTest this$0 -> a
    1:1030:void <init>(org.sandrob.bouncycastle.jce.provider.test.CertTest) -> <init>
    1034:1034:java.lang.String getAlgorithm() -> getAlgorithm
    1039:1039:java.lang.String getFormat() -> getFormat
    1044:1044:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.provider.test.CertUniqueIDTest -> org.sandrob.bouncycastle.jce.provider.test.CertUniqueIDTest:
    21:21:void <init>() -> <init>
    26:26:java.lang.String getName() -> getName
    31:32:void performTest() -> performTest
    43:158:void checkCreation1() -> checkCreation1
    162:169:java.lang.String arrayToString(boolean[]) -> a
    174:177:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest -> org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest:
    byte[] RK -> a
    byte[] RIN -> b
    byte[] ROUT -> c
    byte[] SIN -> d
    byte[] SK -> e
    byte[] SIV -> f
    byte[] SOUT -> g
    byte[] HCIN -> h
    byte[] HCIV -> i
    byte[] HCK256A -> j
    byte[] HC256A -> k
    byte[] HCK128A -> l
    byte[] HC128A -> m
    byte[] GRAIN_V1 -> n
    byte[] GRAIN_V1_IV -> o
    byte[] GRAIN_V1_IN -> p
    byte[] GRAIN_V1_OUT -> q
    byte[] GRAIN_128 -> r
    byte[] GRAIN_128_IV -> s
    byte[] GRAIN_128_IN -> t
    byte[] GRAIN_128_OUT -> u
    26:72:void <clinit>() -> <clinit>
    74:76:void <init>() -> <init>
    82:131:void runTest(java.lang.String) -> a
    136:163:void testAlgorithm(java.lang.String,byte[],byte[],byte[],byte[]) -> a
    170:288:void testException(java.lang.String) -> b
    293:315:void performTest() -> performTest
    319:319:java.lang.String getName() -> getName
    326:329:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest$1 -> org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest$1:
    org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest this$0 -> a
    1:222:void <init>(org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest) -> <init>
    227:227:java.lang.String getAlgorithm() -> getAlgorithm
    232:232:java.lang.String getFormat() -> getFormat
    237:237:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest$2 -> org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest$2:
    org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest this$0 -> a
    1:255:void <init>(org.sandrob.bouncycastle.jce.provider.test.CipherStreamTest) -> <init>
    260:260:java.lang.String getAlgorithm() -> getAlgorithm
    265:265:java.lang.String getFormat() -> getFormat
    270:270:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.provider.test.DESedeTest -> org.sandrob.bouncycastle.jce.provider.test.DESedeTest:
    java.lang.String[] cipherTests1 -> a
    byte[] input1 -> b
    30:45:void <clinit>() -> <clinit>
    30:30:void <init>() -> <init>
    79:79:java.lang.String getName() -> getName
    86:99:boolean equalArray(byte[],byte[]) -> a
    107:125:boolean equalArray(byte[],byte[],int) -> a
    137:173:void wrapTest(int,byte[],byte[],byte[],byte[]) -> a
    180:294:void test(int,byte[],byte[]) -> test
    298:309:void performTest() -> performTest
    314:317:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.DESedeTest$FixedSecureRandom -> org.sandrob.bouncycastle.jce.provider.test.DESedeTest$a:
    byte[] seed -> a
    org.sandrob.bouncycastle.jce.provider.test.DESedeTest this$0 -> b
    52:59:void <init>(org.sandrob.bouncycastle.jce.provider.test.DESedeTest) -> <init>
    65:74:void nextBytes(byte[]) -> nextBytes
    52:52:void <init>(org.sandrob.bouncycastle.jce.provider.test.DESedeTest,org.sandrob.bouncycastle.jce.provider.test.DESedeTest$FixedSecureRandom) -> <init>
org.sandrob.bouncycastle.jce.provider.test.DHTest -> org.sandrob.bouncycastle.jce.provider.test.DHTest:
    java.math.BigInteger g512 -> a
    java.math.BigInteger p512 -> b
    java.math.BigInteger g768 -> c
    java.math.BigInteger p768 -> d
    java.math.BigInteger g1024 -> e
    java.math.BigInteger p1024 -> f
    byte[] oldPubEnc -> g
    byte[] oldFullParams -> h
    byte[] samplePubEnc -> i
    byte[] samplePrivEnc -> j
    40:86:void <init>() -> <init>
    97:97:java.lang.String getName() -> getName
    108:253:void testGP(java.lang.String,int,int,java.math.BigInteger,java.math.BigInteger) -> a
    261:293:void testTwoParty(java.lang.String,int,int,java.security.KeyPairGenerator) -> a
    302:340:void testExplicitWrapping(int,int,java.math.BigInteger,java.math.BigInteger) -> a
    344:353:void checkKeySize(int,java.security.KeyPair) -> a
    359:379:void testRandom(int) -> a
    384:467:void testECDH(java.lang.String) -> a
    473:485:void testExceptions() -> a
    490:533:void testDESAndDESede(java.math.BigInteger,java.math.BigInteger) -> a
    538:545:void testInitialise() -> b
    550:579:void testEnc() -> c
    584:598:void performTest() -> performTest
    603:606:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.DSATest -> org.sandrob.bouncycastle.jce.provider.test.DSATest:
    byte[] k1 -> a
    byte[] k2 -> b
    java.security.SecureRandom random -> c
    49:55:void <init>() -> <init>
    60:147:void testCompat() -> a
    152:196:void testNONEwithDSA() -> b
    200:219:void checkPublic(java.security.interfaces.DSAPublicKey,java.security.PublicKey) -> a
    223:242:void checkPrivateKey(java.security.interfaces.DSAPrivateKey,java.security.PrivateKey) -> a
    247:255:java.lang.Object serializeDeserialize(java.lang.Object) -> a
    266:329:void testECDSA239bitPrime() -> c
    334:372:void testNONEwithECDSA239bitPrime() -> d
    377:400:void checkMessage(java.security.Signature,java.security.PrivateKey,java.security.PublicKey,byte[],byte[]) -> a
    410:473:void testECDSA239bitBinary() -> e
    481:527:void testECDSA239bitBinary(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    532:713:void testGeneration() -> f
    717:721:void checkEquals(java.lang.Object,java.lang.Object) -> a
    726:771:void testParameters() -> g
    776:793:void performTest() -> performTest
    799:808:java.math.BigInteger[] derDecode(byte[]) -> derDecode
    813:813:java.lang.String getName() -> getName
    819:822:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.DigestTest -> org.sandrob.bouncycastle.jce.provider.test.DigestTest:
    java.lang.String[][] abcVectors -> a
    10:31:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    36:36:java.lang.String getName() -> getName
    42:107:void test(java.lang.String) -> a
    121:131:void abcTest(java.lang.String,java.lang.String) -> a
    136:142:void performTest() -> performTest
    146:149:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.DoFinalTest -> org.sandrob.bouncycastle.jce.provider.test.DoFinalTest:
    20:22:void <init>() -> <init>
    30:48:boolean equalArray(byte[],int,byte[],int) -> a
    54:127:org.sandrob.bouncycastle.util.test.TestResult checkCipher(java.lang.String) -> checkCipher
    132:146:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    151:151:java.lang.String getName() -> getName
    157:163:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.ECDSA5Test -> org.sandrob.bouncycastle.jce.provider.test.ECDSA5Test:
    byte[] k1 -> a
    byte[] k2 -> b
    java.security.SecureRandom random -> c
    47:53:void <init>() -> <init>
    57:73:void decodeTest() -> a
    83:147:void testECDSA239bitPrime() -> b
    157:220:void testECDSA239bitBinary() -> c
    228:269:void testGeneration() -> d
    274:295:void testSerialise(java.security.interfaces.ECPublicKey,java.security.interfaces.ECPrivateKey) -> a
    300:327:void testKeyFactory(java.security.interfaces.ECPublicKey,java.security.interfaces.ECPrivateKey) -> b
    332:366:void testKeyConversion() -> e
    371:404:void testKeyPairGenerationWithOIDs() -> f
    410:419:java.math.BigInteger[] derDecode(byte[]) -> derDecode
    424:424:java.lang.String getName() -> getName
    430:436:void performTest() -> performTest
    441:444:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.ECEncodingTest -> org.sandrob.bouncycastle.jce.provider.test.ECEncodingTest:
    int m -> a
    int k1 -> b
    int k2 -> c
    int k3 -> d
    byte[] hexa -> e
    byte[] hexb -> f
    java.math.BigInteger a -> g
    java.math.BigInteger b -> h
    byte[] enc -> i
    30:64:void <init>() -> <init>
    35:35:java.lang.String getName() -> getName
    69:76:void testPointCompression() -> a
    81:97:void performTest() -> performTest
    102:172:void testParams(byte[],boolean) -> a
    188:204:java.security.cert.X509Certificate generateSelfSignedSoftECCert(java.security.KeyPair,boolean) -> a
    210:213:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.ECNRTest -> org.sandrob.bouncycastle.jce.provider.test.ECNRTest:
    byte[] k1 -> a
    byte[] k2 -> b
    java.security.SecureRandom random -> c
    26:32:void <init>() -> <init>
    42:74:void testECNR239bitPrime() -> a
    86:118:void testECNR192bitPrime() -> b
    130:160:void testECNR521bitPrime() -> c
    173:209:void checkSignature(int,org.sandrob.bouncycastle.jce.spec.ECPrivateKeySpec,org.sandrob.bouncycastle.jce.spec.ECPublicKeySpec,java.security.Signature,java.security.SecureRandom,byte[],java.math.BigInteger,java.math.BigInteger) -> a
    215:224:java.math.BigInteger[] derDecode(byte[]) -> derDecode
    229:229:java.lang.String getName() -> getName
    235:238:void performTest() -> performTest
    243:246:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.ElGamalTest -> org.sandrob.bouncycastle.jce.provider.test.ElGamalTest:
    java.math.BigInteger g512 -> a
    java.math.BigInteger p512 -> b
    java.math.BigInteger g768 -> c
    java.math.BigInteger p768 -> d
    java.math.BigInteger g1024 -> e
    java.math.BigInteger p1024 -> f
    26:36:void <init>() -> <init>
    40:40:java.lang.String getName() -> getName
    50:221:void testGP(int,int,java.math.BigInteger,java.math.BigInteger) -> a
    225:234:void checkKeySize(int,java.security.KeyPair) -> a
    240:260:void testRandom(int) -> a
    265:274:void performTest() -> performTest
    279:282:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.EncryptedPrivateKeyInfoTest -> org.sandrob.bouncycastle.jce.provider.test.EncryptedPrivateKeyInfoTest:
    java.lang.String alg -> a
    24:27:void <init>() -> <init>
    33:126:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    132:132:java.lang.String getName() -> getName
    138:144:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.FIPSDESTest -> org.sandrob.bouncycastle.jce.provider.test.FIPSDESTest:
    java.lang.String[] fips1Tests -> a
    java.lang.String[] fips2Tests -> b
    byte[] input1 -> c
    byte[] input2 -> d
    28:50:void <clinit>() -> <clinit>
    28:28:void <init>() -> <init>
    54:54:java.lang.String getName() -> getName
    61:74:boolean equalArray(byte[],byte[]) -> a
    88:188:org.sandrob.bouncycastle.util.test.TestResult test(java.lang.String,byte[],byte[]) -> test
    193:215:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    222:228:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.GOST28147Test -> org.sandrob.bouncycastle.jce.provider.test.GOST28147Test:
    java.lang.String[] cipherTests -> a
    25:38:void <clinit>() -> <clinit>
    25:25:void <init>() -> <init>
    43:43:java.lang.String getName() -> getName
    60:111:void testECB(int,byte[],byte[],byte[]) -> testECB
    127:180:void testCFB(int,byte[],byte[],byte[]) -> testCFB
    184:221:void oidTest() -> a
    226:240:void performTest() -> performTest
    245:248:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.GOST3410Test -> org.sandrob.bouncycastle.jce.provider.test.GOST3410Test:
    46:46:void <init>() -> <init>
    53:123:void ecGOST3410Test() -> a
    128:249:void generationTest() -> b
    257:287:void keyStoreTest(java.security.PrivateKey,java.security.PublicKey) -> a
    309:339:void parametersTest() -> c
    344:356:java.math.BigInteger[] decode(byte[]) -> a
    361:361:java.lang.String getName() -> getName
    367:370:void performTest() -> performTest
    375:378:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.HMacTest -> org.sandrob.bouncycastle.jce.provider.test.HMacTest:
    byte[] keyBytes -> a
    byte[] message -> b
    byte[] output1 -> c
    byte[] outputMD5 -> d
    byte[] outputMD2 -> e
    byte[] outputMD4 -> f
    byte[] output224 -> g
    byte[] output256 -> h
    byte[] output384 -> i
    byte[] output512 -> j
    byte[] outputRipeMD128 -> k
    byte[] outputRipeMD160 -> l
    byte[] outputTiger -> m
    byte[] outputOld384 -> n
    byte[] outputOld512 -> o
    22:39:void <clinit>() -> <clinit>
    41:43:void <init>() -> <init>
    50:82:void testHMac(java.lang.String,byte[]) -> testHMac
    87:125:void testExceptions() -> a
    130:169:void performTest() -> performTest
    173:173:java.lang.String getName() -> getName
    179:182:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.IESTest -> org.sandrob.bouncycastle.jce.provider.test.IESTest:
    java.math.BigInteger g512 -> a
    java.math.BigInteger p512 -> b
    29:34:void <init>() -> <init>
    38:38:java.lang.String getName() -> getName
    44:95:void performTest() -> performTest
    106:143:void doTest(java.security.KeyPairGenerator,javax.crypto.Cipher,javax.crypto.Cipher) -> doTest
    154:235:void doDefTest(java.security.KeyPairGenerator,javax.crypto.Cipher,javax.crypto.Cipher) -> doDefTest
    240:243:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.ImplicitlyCaTest -> org.sandrob.bouncycastle.jce.provider.test.ImplicitlyCaTest:
    byte[] k1 -> a
    byte[] k2 -> b
    java.security.SecureRandom random -> c
    33:39:void <init>() -> <init>
    44:51:void performTest() -> performTest
    56:85:void testBCAPI() -> a
    90:142:void testKeyFactory() -> b
    147:178:void testJDKAPI() -> c
    183:214:void testBasicThreadLocal() -> d
    221:240:void testECDSA(org.sandrob.bouncycastle.jce.interfaces.ECPrivateKey,org.sandrob.bouncycastle.jce.interfaces.ECPublicKey) -> a
    247:290:void testEncoding(org.sandrob.bouncycastle.jce.interfaces.ECPrivateKey,org.sandrob.bouncycastle.jce.interfaces.ECPublicKey) -> b
    296:310:void testBCParamsAndQ(org.sandrob.bouncycastle.jce.interfaces.ECPrivateKey,org.sandrob.bouncycastle.jce.interfaces.ECPublicKey) -> c
    316:328:void testEC5Params(org.sandrob.bouncycastle.jce.interfaces.ECPrivateKey,org.sandrob.bouncycastle.jce.interfaces.ECPublicKey) -> d
    332:332:java.lang.String getName() -> getName
    338:341:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.KeyStoreTest -> org.sandrob.bouncycastle.jce.provider.test.KeyStoreTest:
    char[] passwd -> a
    38:41:void <clinit>() -> <clinit>
    38:38:void <init>() -> <init>
    47:174:void ecStoreTest(java.lang.String) -> ecStoreTest
    180:290:void keyStoreTest(java.lang.String) -> keyStoreTest
    294:294:java.lang.String getName() -> getName
    300:303:void performTest() -> performTest
    308:311:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.MQVTest -> org.sandrob.bouncycastle.jce.provider.test.MQVTest:
    21:21:void <init>() -> <init>
    26:26:java.lang.String getName() -> getName
    32:33:void performTest() -> performTest
    38:84:void testECMQV() -> a
    89:92:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.MacTest -> org.sandrob.bouncycastle.jce.provider.test.MacTest:
    byte[] keyBytes -> a
    byte[] ivBytes -> b
    byte[] input -> c
    byte[] output1 -> d
    byte[] output2 -> e
    byte[] output3 -> f
    byte[] keyBytesISO9797 -> g
    byte[] inputISO9797 -> h
    byte[] outputISO9797 -> i
    byte[] inputDesEDE64 -> j
    byte[] outputDesEDE64 -> k
    18:38:void <clinit>() -> <clinit>
    40:42:void <init>() -> <init>
    47:72:void aliasTest(javax.crypto.SecretKey,java.lang.String,java.lang.String[]) -> a
    77:168:void performTest() -> performTest
    172:172:java.lang.String getName() -> getName
    178:181:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.MultiCertStoreTest -> org.sandrob.bouncycastle.jce.provider.test.MultiCertStoreTest:
    19:19:void <init>() -> <init>
    26:27:void performTest() -> performTest
    32:82:void basicTest() -> a
    86:86:java.lang.String getName() -> getName
    91:94:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.NISTCertPathTest -> org.sandrob.bouncycastle.jce.provider.test.NISTCertPathTest:
    java.util.Set ANY -> a
    java.util.Set TP1 -> b
    java.util.Set TP2 -> c
    java.util.Set TP3 -> d
    java.util.Set TP4 -> e
    java.util.Set TP1_TP2 -> f
    java.security.cert.CertificateFactory fact -> g
    java.security.cert.X509Certificate trustedCert -> h
    java.security.cert.X509CRL trustedCRL -> i
    java.util.Set trustedSet -> j
    int testCount -> k
    java.util.Vector testFail -> l
    java.lang.StringBuffer resultBuf -> m
    java.lang.String Trust_Anchor_CP_01_01_crt -> Trust_Anchor_CP_01_01_crt
    java.lang.String Trust_Anchor_CRL_CP_01_01_crl -> Trust_Anchor_CRL_CP_01_01_crl
    java.lang.String End_Certificate_CP_01_01_crt -> End_Certificate_CP_01_01_crt
    java.lang.String[] TEST_1_DATA -> TEST_1_DATA
    java.lang.String Intermediate_Certificate_CP_01_02_crt -> Intermediate_Certificate_CP_01_02_crt
    java.lang.String Intermediate_CRL_CP_01_02_crl -> Intermediate_CRL_CP_01_02_crl
    java.lang.String End_Certificate_CP_01_02_crt -> End_Certificate_CP_01_02_crt
    java.lang.String[] TEST_2_DATA -> TEST_2_DATA
    java.lang.String Intermediate_Certificate_CP_01_03_crt -> Intermediate_Certificate_CP_01_03_crt
    java.lang.String Intermediate_CRL_CP_01_03_crl -> Intermediate_CRL_CP_01_03_crl
    java.lang.String End_Certificate_CP_01_03_crt -> End_Certificate_CP_01_03_crt
    java.lang.String[] TEST_3_DATA -> TEST_3_DATA
    java.lang.String Intermediate_Certificate_1_CP_02_01_crt -> Intermediate_Certificate_1_CP_02_01_crt
    java.lang.String Intermediate_Certificate_2_CP_02_01_crt -> Intermediate_Certificate_2_CP_02_01_crt
    java.lang.String Intermediate_CRL_1_CP_02_01_crl -> Intermediate_CRL_1_CP_02_01_crl
    java.lang.String Intermediate_CRL_2_CP_02_01_crl -> Intermediate_CRL_2_CP_02_01_crl
    java.lang.String End_Certificate_CP_02_01_crt -> End_Certificate_CP_02_01_crt
    java.lang.String[] TEST_4_DATA -> TEST_4_DATA
    java.lang.String Intermediate_Certificate_CP_02_02_crt -> Intermediate_Certificate_CP_02_02_crt
    java.lang.String Intermediate_CRL_CP_02_02_crl -> Intermediate_CRL_CP_02_02_crl
    java.lang.String End_Certificate_CP_02_02_crt -> End_Certificate_CP_02_02_crt
    java.lang.String[] TEST_5_DATA -> TEST_5_DATA
    java.lang.String Intermediate_Certificate_CP_02_03_crt -> Intermediate_Certificate_CP_02_03_crt
    java.lang.String Intermediate_CRL_CP_02_03_crl -> Intermediate_CRL_CP_02_03_crl
    java.lang.String End_Certificate_CP_02_03_crt -> End_Certificate_CP_02_03_crt
    java.lang.String[] TEST_6_DATA -> TEST_6_DATA
    java.lang.String Intermediate_Certificate_CP_02_04_crt -> Intermediate_Certificate_CP_02_04_crt
    java.lang.String Intermediate_CRL_CP_02_04_crl -> Intermediate_CRL_CP_02_04_crl
    java.lang.String End_Certificate_CP_02_04_crt -> End_Certificate_CP_02_04_crt
    java.lang.String[] TEST_7_DATA -> TEST_7_DATA
    java.lang.String Intermediate_Certificate_CP_02_05_crt -> Intermediate_Certificate_CP_02_05_crt
    java.lang.String Intermediate_CRL_CP_02_05_crl -> Intermediate_CRL_CP_02_05_crl
    java.lang.String End_Certificate_CP_02_05_crt -> End_Certificate_CP_02_05_crt
    java.lang.String[] TEST_8_DATA -> TEST_8_DATA
    java.lang.String Intermediate_Certificate_CP_03_01_crt -> Intermediate_Certificate_CP_03_01_crt
    java.lang.String Intermediate_CRL_CP_03_01_crl -> Intermediate_CRL_CP_03_01_crl
    java.lang.String End_Certificate_CP_03_01_crt -> End_Certificate_CP_03_01_crt
    java.lang.String[] TEST_9_DATA -> TEST_9_DATA
    java.lang.String Intermediate_Certificate_CP_03_02_crt -> Intermediate_Certificate_CP_03_02_crt
    java.lang.String Intermediate_CRL_CP_03_02_crl -> Intermediate_CRL_CP_03_02_crl
    java.lang.String End_Certificate_CP_03_02_crt -> End_Certificate_CP_03_02_crt
    java.lang.String[] TEST_10_DATA -> TEST_10_DATA
    java.lang.String Intermediate_Certificate_CP_03_03_crt -> Intermediate_Certificate_CP_03_03_crt
    java.lang.String Intermediate_CRL_CP_03_03_crl -> Intermediate_CRL_CP_03_03_crl
    java.lang.String End_Certificate_CP_03_03_crt -> End_Certificate_CP_03_03_crt
    java.lang.String[] TEST_11_DATA -> TEST_11_DATA
    java.lang.String Intermediate_Certificate_CP_03_04_crt -> Intermediate_Certificate_CP_03_04_crt
    java.lang.String Intermediate_CRL_CP_03_04_crl -> Intermediate_CRL_CP_03_04_crl
    java.lang.String End_Certificate_CP_03_04_crt -> End_Certificate_CP_03_04_crt
    java.lang.String[] TEST_12_DATA -> TEST_12_DATA
    java.lang.String Intermediate_Certificate_CP_04_01_crt -> Intermediate_Certificate_CP_04_01_crt
    java.lang.String Intermediate_CRL_CP_04_01_crl -> Intermediate_CRL_CP_04_01_crl
    java.lang.String End_Certificate_CP_04_01_crt -> End_Certificate_CP_04_01_crt
    java.lang.String[] TEST_13_DATA -> TEST_13_DATA
    java.lang.String Intermediate_Certificate_CP_04_02_crt -> Intermediate_Certificate_CP_04_02_crt
    java.lang.String Intermediate_CRL_CP_04_02_crl -> Intermediate_CRL_CP_04_02_crl
    java.lang.String End_Certificate_CP_04_02_crt -> End_Certificate_CP_04_02_crt
    java.lang.String[] TEST_14_DATA -> TEST_14_DATA
    java.lang.String Intermediate_Certificate_CP_04_03_crt -> Intermediate_Certificate_CP_04_03_crt
    java.lang.String Intermediate_CRL_CP_04_03_crl -> Intermediate_CRL_CP_04_03_crl
    java.lang.String End_Certificate_CP_04_03_crt -> End_Certificate_CP_04_03_crt
    java.lang.String[] TEST_15_DATA -> TEST_15_DATA
    java.lang.String Intermediate_Certificate_CP_04_04_crt -> Intermediate_Certificate_CP_04_04_crt
    java.lang.String Intermediate_CRL_CP_04_04_crl -> Intermediate_CRL_CP_04_04_crl
    java.lang.String End_Certificate_CP_04_04_crt -> End_Certificate_CP_04_04_crt
    java.lang.String[] TEST_16_DATA -> TEST_16_DATA
    java.lang.String Intermediate_Certificate_CP_04_05_crt -> Intermediate_Certificate_CP_04_05_crt
    java.lang.String Intermediate_CRL_CP_04_05_crl -> Intermediate_CRL_CP_04_05_crl
    java.lang.String End_Certificate_CP_04_05_crt -> End_Certificate_CP_04_05_crt
    java.lang.String[] TEST_17_DATA -> TEST_17_DATA
    java.lang.String Intermediate_Certificate_CP_04_06_crt -> Intermediate_Certificate_CP_04_06_crt
    java.lang.String Intermediate_CRL_CP_04_06_crl -> Intermediate_CRL_CP_04_06_crl
    java.lang.String End_Certificate_CP_04_06_crt -> End_Certificate_CP_04_06_crt
    java.lang.String[] TEST_18_DATA -> TEST_18_DATA
    java.lang.String Intermediate_Certificate_CP_05_01_crt -> Intermediate_Certificate_CP_05_01_crt
    java.lang.String End_Certificate_CP_05_01_crt -> End_Certificate_CP_05_01_crt
    java.lang.String[] TEST_19_DATA -> TEST_19_DATA
    java.lang.String Intermediate_Certificate_CP_06_01_crt -> Intermediate_Certificate_CP_06_01_crt
    java.lang.String Intermediate_CRL_CP_06_01_crl -> Intermediate_CRL_CP_06_01_crl
    java.lang.String End_Certificate_CP_06_01_crt -> End_Certificate_CP_06_01_crt
    java.lang.String[] TEST_20_DATA -> TEST_20_DATA
    java.lang.String Intermediate_Certificate_CP_06_02_crt -> Intermediate_Certificate_CP_06_02_crt
    java.lang.String Intermediate_CRL_CP_06_02_crl -> Intermediate_CRL_CP_06_02_crl
    java.lang.String End_Certificate_CP_06_02_crt -> End_Certificate_CP_06_02_crt
    java.lang.String[] TEST_21_DATA -> TEST_21_DATA
    java.lang.String Intermediate_Certificate_IC_01_01_crt -> Intermediate_Certificate_IC_01_01_crt
    java.lang.String Intermediate_CRL_IC_01_01_crl -> Intermediate_CRL_IC_01_01_crl
    java.lang.String End_Certificate_IC_01_01_crt -> End_Certificate_IC_01_01_crt
    java.lang.String[] TEST_22_DATA -> TEST_22_DATA
    java.lang.String Intermediate_Certificate_IC_02_01_crt -> Intermediate_Certificate_IC_02_01_crt
    java.lang.String Intermediate_CRL_IC_02_01_crl -> Intermediate_CRL_IC_02_01_crl
    java.lang.String End_Certificate_IC_02_01_crt -> End_Certificate_IC_02_01_crt
    java.lang.String[] TEST_23_DATA -> TEST_23_DATA
    java.lang.String Intermediate_Certificate_IC_02_02_crt -> Intermediate_Certificate_IC_02_02_crt
    java.lang.String Intermediate_CRL_IC_02_02_crl -> Intermediate_CRL_IC_02_02_crl
    java.lang.String End_Certificate_IC_02_02_crt -> End_Certificate_IC_02_02_crt
    java.lang.String[] TEST_24_DATA -> TEST_24_DATA
    java.lang.String Intermediate_Certificate_IC_02_03_crt -> Intermediate_Certificate_IC_02_03_crt
    java.lang.String Intermediate_CRL_IC_02_03_crl -> Intermediate_CRL_IC_02_03_crl
    java.lang.String End_Certificate_IC_02_03_crt -> End_Certificate_IC_02_03_crt
    java.lang.String[] TEST_25_DATA -> TEST_25_DATA
    java.lang.String Intermediate_Certificate_IC_02_04_crt -> Intermediate_Certificate_IC_02_04_crt
    java.lang.String Intermediate_CRL_IC_02_04_crl -> Intermediate_CRL_IC_02_04_crl
    java.lang.String End_Certificate_IC_02_04_crt -> End_Certificate_IC_02_04_crt
    java.lang.String[] TEST_26_DATA -> TEST_26_DATA
    java.lang.String Intermediate_Certificate_IC_04_01_crt -> Intermediate_Certificate_IC_04_01_crt
    java.lang.String Intermediate_CRL_IC_04_01_crl -> Intermediate_CRL_IC_04_01_crl
    java.lang.String End_Certificate_IC_04_01_crt -> End_Certificate_IC_04_01_crt
    java.lang.String[] TEST_27_DATA -> TEST_27_DATA
    java.lang.String Intermediate_Certificate_IC_05_01_crt -> Intermediate_Certificate_IC_05_01_crt
    java.lang.String Intermediate_CRL_IC_05_01_crl -> Intermediate_CRL_IC_05_01_crl
    java.lang.String End_Certificate_IC_05_01_crt -> End_Certificate_IC_05_01_crt
    java.lang.String[] TEST_28_DATA -> TEST_28_DATA
    java.lang.String Intermediate_Certificate_IC_05_02_crt -> Intermediate_Certificate_IC_05_02_crt
    java.lang.String Intermediate_CRL_IC_05_02_crl -> Intermediate_CRL_IC_05_02_crl
    java.lang.String End_Certificate_IC_05_02_crt -> End_Certificate_IC_05_02_crt
    java.lang.String[] TEST_29_DATA -> TEST_29_DATA
    java.lang.String Intermediate_Certificate_IC_05_03_crt -> Intermediate_Certificate_IC_05_03_crt
    java.lang.String Intermediate_CRL_IC_05_03_crl -> Intermediate_CRL_IC_05_03_crl
    java.lang.String End_Certificate_IC_05_03_crt -> End_Certificate_IC_05_03_crt
    java.lang.String[] TEST_30_DATA -> TEST_30_DATA
    java.lang.String Intermediate_Certificate_IC_06_01_crt -> Intermediate_Certificate_IC_06_01_crt
    java.lang.String Intermediate_CRL_IC_06_01_crl -> Intermediate_CRL_IC_06_01_crl
    java.lang.String End_Certificate_IC_06_01_crt -> End_Certificate_IC_06_01_crt
    java.lang.String[] TEST_31_DATA -> TEST_31_DATA
    java.lang.String Intermediate_Certificate_IC_06_02_crt -> Intermediate_Certificate_IC_06_02_crt
    java.lang.String Intermediate_CRL_IC_06_02_crl -> Intermediate_CRL_IC_06_02_crl
    java.lang.String End_Certificate_IC_06_02_crt -> End_Certificate_IC_06_02_crt
    java.lang.String[] TEST_32_DATA -> TEST_32_DATA
    java.lang.String Intermediate_Certificate_IC_06_03_crt -> Intermediate_Certificate_IC_06_03_crt
    java.lang.String Intermediate_CRL_IC_06_03_crl -> Intermediate_CRL_IC_06_03_crl
    java.lang.String End_Certificate_IC_06_03_crt -> End_Certificate_IC_06_03_crt
    java.lang.String[] TEST_33_DATA -> TEST_33_DATA
    java.lang.String Intermediate_Certificate_PP_01_01_crt -> Intermediate_Certificate_PP_01_01_crt
    java.lang.String Intermediate_CRL_PP_01_01_crl -> Intermediate_CRL_PP_01_01_crl
    java.lang.String End_Certificate_PP_01_01_crt -> End_Certificate_PP_01_01_crt
    java.lang.String[] TEST_34_DATA -> TEST_34_DATA
    java.lang.String Intermediate_Certificate_PP_01_02_crt -> Intermediate_Certificate_PP_01_02_crt
    java.lang.String Intermediate_CRL_PP_01_02_crl -> Intermediate_CRL_PP_01_02_crl
    java.lang.String End_Certificate_PP_01_02_crt -> End_Certificate_PP_01_02_crt
    java.lang.String[] TEST_35_DATA -> TEST_35_DATA
    java.lang.String Intermediate_Certificate_1_PP_01_03_crt -> Intermediate_Certificate_1_PP_01_03_crt
    java.lang.String Intermediate_Certificate_2_PP_01_03_crt -> Intermediate_Certificate_2_PP_01_03_crt
    java.lang.String Intermediate_CRL_1_PP_01_03_crl -> Intermediate_CRL_1_PP_01_03_crl
    java.lang.String Intermediate_CRL_2_PP_01_03_crl -> Intermediate_CRL_2_PP_01_03_crl
    java.lang.String End_Certificate_PP_01_03_crt -> End_Certificate_PP_01_03_crt
    java.lang.String[] TEST_36_DATA -> TEST_36_DATA
    java.lang.String Intermediate_Certificate_1_PP_01_04_crt -> Intermediate_Certificate_1_PP_01_04_crt
    java.lang.String Intermediate_Certificate_2_PP_01_04_crt -> Intermediate_Certificate_2_PP_01_04_crt
    java.lang.String Intermediate_CRL_1_PP_01_04_crl -> Intermediate_CRL_1_PP_01_04_crl
    java.lang.String Intermediate_CRL_2_PP_01_04_crl -> Intermediate_CRL_2_PP_01_04_crl
    java.lang.String End_Certificate_PP_01_04_crt -> End_Certificate_PP_01_04_crt
    java.lang.String[] TEST_37_DATA -> TEST_37_DATA
    java.lang.String Intermediate_Certificate_1_PP_01_05_crt -> Intermediate_Certificate_1_PP_01_05_crt
    java.lang.String Intermediate_Certificate_2_PP_01_05_crt -> Intermediate_Certificate_2_PP_01_05_crt
    java.lang.String Intermediate_CRL_1_PP_01_05_crl -> Intermediate_CRL_1_PP_01_05_crl
    java.lang.String Intermediate_CRL_2_PP_01_05_crl -> Intermediate_CRL_2_PP_01_05_crl
    java.lang.String End_Certificate_PP_01_05_crt -> End_Certificate_PP_01_05_crt
    java.lang.String[] TEST_38_DATA -> TEST_38_DATA
    java.lang.String Intermediate_Certificate_1_PP_01_06_crt -> Intermediate_Certificate_1_PP_01_06_crt
    java.lang.String Intermediate_Certificate_2_PP_01_06_crt -> Intermediate_Certificate_2_PP_01_06_crt
    java.lang.String Intermediate_Certificate_3_PP_01_06_crt -> Intermediate_Certificate_3_PP_01_06_crt
    java.lang.String Intermediate_CRL_1_PP_01_06_crl -> Intermediate_CRL_1_PP_01_06_crl
    java.lang.String Intermediate_CRL_2_PP_01_06_crl -> Intermediate_CRL_2_PP_01_06_crl
    java.lang.String Intermediate_CRL_3_PP_01_06_crl -> Intermediate_CRL_3_PP_01_06_crl
    java.lang.String End_Certificate_PP_01_06_crt -> End_Certificate_PP_01_06_crt
    java.lang.String[] TEST_39_DATA -> TEST_39_DATA
    java.lang.String Intermediate_Certificate_1_PP_01_07_crt -> Intermediate_Certificate_1_PP_01_07_crt
    java.lang.String Intermediate_Certificate_2_PP_01_07_crt -> Intermediate_Certificate_2_PP_01_07_crt
    java.lang.String Intermediate_Certificate_3_PP_01_07_crt -> Intermediate_Certificate_3_PP_01_07_crt
    java.lang.String Intermediate_CRL_1_PP_01_07_crl -> Intermediate_CRL_1_PP_01_07_crl
    java.lang.String Intermediate_CRL_2_PP_01_07_crl -> Intermediate_CRL_2_PP_01_07_crl
    java.lang.String Intermediate_CRL_3_PP_01_07_crl -> Intermediate_CRL_3_PP_01_07_crl
    java.lang.String End_Certificate_PP_01_07_crt -> End_Certificate_PP_01_07_crt
    java.lang.String[] TEST_40_DATA -> TEST_40_DATA
    java.lang.String Intermediate_Certificate_1_PP_01_08_crt -> Intermediate_Certificate_1_PP_01_08_crt
    java.lang.String Intermediate_Certificate_2_PP_01_08_crt -> Intermediate_Certificate_2_PP_01_08_crt
    java.lang.String Intermediate_Certificate_3_PP_01_08_crt -> Intermediate_Certificate_3_PP_01_08_crt
    java.lang.String Intermediate_CRL_1_PP_01_08_crl -> Intermediate_CRL_1_PP_01_08_crl
    java.lang.String Intermediate_CRL_2_PP_01_08_crl -> Intermediate_CRL_2_PP_01_08_crl
    java.lang.String Intermediate_CRL_3_PP_01_08_crl -> Intermediate_CRL_3_PP_01_08_crl
    java.lang.String End_Certificate_PP_01_08_crt -> End_Certificate_PP_01_08_crt
    java.lang.String[] TEST_41_DATA -> TEST_41_DATA
    java.lang.String Intermediate_Certificate_1_PP_01_09_crt -> Intermediate_Certificate_1_PP_01_09_crt
    java.lang.String Intermediate_Certificate_2_PP_01_09_crt -> Intermediate_Certificate_2_PP_01_09_crt
    java.lang.String Intermediate_Certificate_3_PP_01_09_crt -> Intermediate_Certificate_3_PP_01_09_crt
    java.lang.String Intermediate_Certificate_4_PP_01_09_crt -> Intermediate_Certificate_4_PP_01_09_crt
    java.lang.String Intermediate_CRL_1_PP_01_09_crl -> Intermediate_CRL_1_PP_01_09_crl
    java.lang.String Intermediate_CRL_2_PP_01_09_crl -> Intermediate_CRL_2_PP_01_09_crl
    java.lang.String Intermediate_CRL_3_PP_01_09_crl -> Intermediate_CRL_3_PP_01_09_crl
    java.lang.String Intermediate_CRL_4_PP_01_09_crl -> Intermediate_CRL_4_PP_01_09_crl
    java.lang.String End_Certificate_PP_01_09_crt -> End_Certificate_PP_01_09_crt
    java.lang.String[] TEST_42_DATA -> TEST_42_DATA
    java.lang.String Intermediate_Certificate_1_PP_06_01_crt -> Intermediate_Certificate_1_PP_06_01_crt
    java.lang.String Intermediate_Certificate_2_PP_06_01_crt -> Intermediate_Certificate_2_PP_06_01_crt
    java.lang.String Intermediate_Certificate_3_PP_06_01_crt -> Intermediate_Certificate_3_PP_06_01_crt
    java.lang.String Intermediate_Certificate_4_PP_06_01_crt -> Intermediate_Certificate_4_PP_06_01_crt
    java.lang.String Intermediate_CRL_1_PP_06_01_crl -> Intermediate_CRL_1_PP_06_01_crl
    java.lang.String Intermediate_CRL_2_PP_06_01_crl -> Intermediate_CRL_2_PP_06_01_crl
    java.lang.String Intermediate_CRL_3_PP_06_01_crl -> Intermediate_CRL_3_PP_06_01_crl
    java.lang.String Intermediate_CRL_4_PP_06_01_crl -> Intermediate_CRL_4_PP_06_01_crl
    java.lang.String End_Certificate_PP_06_01_crt -> End_Certificate_PP_06_01_crt
    java.lang.String[] TEST_43_DATA -> TEST_43_DATA
    java.lang.String Intermediate_Certificate_1_PP_06_02_crt -> Intermediate_Certificate_1_PP_06_02_crt
    java.lang.String Intermediate_Certificate_2_PP_06_02_crt -> Intermediate_Certificate_2_PP_06_02_crt
    java.lang.String Intermediate_Certificate_3_PP_06_02_crt -> Intermediate_Certificate_3_PP_06_02_crt
    java.lang.String Intermediate_Certificate_4_PP_06_02_crt -> Intermediate_Certificate_4_PP_06_02_crt
    java.lang.String Intermediate_CRL_1_PP_06_02_crl -> Intermediate_CRL_1_PP_06_02_crl
    java.lang.String Intermediate_CRL_2_PP_06_02_crl -> Intermediate_CRL_2_PP_06_02_crl
    java.lang.String Intermediate_CRL_3_PP_06_02_crl -> Intermediate_CRL_3_PP_06_02_crl
    java.lang.String Intermediate_CRL_4_PP_06_02_crl -> Intermediate_CRL_4_PP_06_02_crl
    java.lang.String End_Certificate_PP_06_02_crt -> End_Certificate_PP_06_02_crt
    java.lang.String[] TEST_44_DATA -> TEST_44_DATA
    java.lang.String Intermediate_Certificate_1_PP_06_03_crt -> Intermediate_Certificate_1_PP_06_03_crt
    java.lang.String Intermediate_Certificate_2_PP_06_03_crt -> Intermediate_Certificate_2_PP_06_03_crt
    java.lang.String Intermediate_Certificate_3_PP_06_03_crt -> Intermediate_Certificate_3_PP_06_03_crt
    java.lang.String Intermediate_Certificate_4_PP_06_03_crt -> Intermediate_Certificate_4_PP_06_03_crt
    java.lang.String Intermediate_CRL_1_PP_06_03_crl -> Intermediate_CRL_1_PP_06_03_crl
    java.lang.String Intermediate_CRL_2_PP_06_03_crl -> Intermediate_CRL_2_PP_06_03_crl
    java.lang.String Intermediate_CRL_3_PP_06_03_crl -> Intermediate_CRL_3_PP_06_03_crl
    java.lang.String Intermediate_CRL_4_PP_06_03_crl -> Intermediate_CRL_4_PP_06_03_crl
    java.lang.String End_Certificate_PP_06_03_crt -> End_Certificate_PP_06_03_crt
    java.lang.String[] TEST_45_DATA -> TEST_45_DATA
    java.lang.String Intermediate_Certificate_1_PP_06_04_crt -> Intermediate_Certificate_1_PP_06_04_crt
    java.lang.String Intermediate_Certificate_2_PP_06_04_crt -> Intermediate_Certificate_2_PP_06_04_crt
    java.lang.String Intermediate_Certificate_3_PP_06_04_crt -> Intermediate_Certificate_3_PP_06_04_crt
    java.lang.String Intermediate_Certificate_4_PP_06_04_crt -> Intermediate_Certificate_4_PP_06_04_crt
    java.lang.String Intermediate_CRL_1_PP_06_04_crl -> Intermediate_CRL_1_PP_06_04_crl
    java.lang.String Intermediate_CRL_2_PP_06_04_crl -> Intermediate_CRL_2_PP_06_04_crl
    java.lang.String Intermediate_CRL_3_PP_06_04_crl -> Intermediate_CRL_3_PP_06_04_crl
    java.lang.String Intermediate_CRL_4_PP_06_04_crl -> Intermediate_CRL_4_PP_06_04_crl
    java.lang.String End_Certificate_PP_06_04_crt -> End_Certificate_PP_06_04_crt
    java.lang.String[] TEST_46_DATA -> TEST_46_DATA
    java.lang.String Intermediate_Certificate_1_PP_06_05_crt -> Intermediate_Certificate_1_PP_06_05_crt
    java.lang.String Intermediate_Certificate_2_PP_06_05_crt -> Intermediate_Certificate_2_PP_06_05_crt
    java.lang.String Intermediate_Certificate_3_PP_06_05_crt -> Intermediate_Certificate_3_PP_06_05_crt
    java.lang.String Intermediate_Certificate_4_PP_06_05_crt -> Intermediate_Certificate_4_PP_06_05_crt
    java.lang.String Intermediate_CRL_1_PP_06_05_crl -> Intermediate_CRL_1_PP_06_05_crl
    java.lang.String Intermediate_CRL_2_PP_06_05_crl -> Intermediate_CRL_2_PP_06_05_crl
    java.lang.String Intermediate_CRL_3_PP_06_05_crl -> Intermediate_CRL_3_PP_06_05_crl
    java.lang.String Intermediate_CRL_4_PP_06_05_crl -> Intermediate_CRL_4_PP_06_05_crl
    java.lang.String End_Certificate_PP_06_05_crt -> End_Certificate_PP_06_05_crt
    java.lang.String[] TEST_47_DATA -> TEST_47_DATA
    java.lang.String Intermediate_Certificate_PP_08_01_crt -> Intermediate_Certificate_PP_08_01_crt
    java.lang.String Intermediate_CRL_PP_08_01_crl -> Intermediate_CRL_PP_08_01_crl
    java.lang.String End_Certificate_PP_08_01_crt -> End_Certificate_PP_08_01_crt
    java.lang.String[] TEST_48_DATA -> TEST_48_DATA
    java.lang.String Intermediate_Certificate_PP_08_02_crt -> Intermediate_Certificate_PP_08_02_crt
    java.lang.String Intermediate_CRL_PP_08_02_crl -> Intermediate_CRL_PP_08_02_crl
    java.lang.String End_Certificate_PP_08_02_crt -> End_Certificate_PP_08_02_crt
    java.lang.String[] TEST_49_DATA -> TEST_49_DATA
    java.lang.String Intermediate_Certificate_PP_08_03_crt -> Intermediate_Certificate_PP_08_03_crt
    java.lang.String Intermediate_CRL_PP_08_03_crl -> Intermediate_CRL_PP_08_03_crl
    java.lang.String End_Certificate_PP_08_03_crt -> End_Certificate_PP_08_03_crt
    java.lang.String[] TEST_50_DATA -> TEST_50_DATA
    java.lang.String Intermediate_Certificate_PP_08_04_crt -> Intermediate_Certificate_PP_08_04_crt
    java.lang.String Intermediate_CRL_PP_08_04_crl -> Intermediate_CRL_PP_08_04_crl
    java.lang.String End_Certificate_PP_08_04_crt -> End_Certificate_PP_08_04_crt
    java.lang.String[] TEST_51_DATA -> TEST_51_DATA
    java.lang.String Intermediate_Certificate_PP_08_05_crt -> Intermediate_Certificate_PP_08_05_crt
    java.lang.String Intermediate_CRL_PP_08_05_crl -> Intermediate_CRL_PP_08_05_crl
    java.lang.String End_Certificate_PP_08_05_crt -> End_Certificate_PP_08_05_crt
    java.lang.String[] TEST_52_DATA -> TEST_52_DATA
    java.lang.String Intermediate_Certificate_PP_08_06_crt -> Intermediate_Certificate_PP_08_06_crt
    java.lang.String Intermediate_CRL_PP_08_06_crl -> Intermediate_CRL_PP_08_06_crl
    java.lang.String End_Certificate_PP_08_06_crt -> End_Certificate_PP_08_06_crt
    java.lang.String[] TEST_53_DATA -> TEST_53_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_01_crt -> Intermediate_Certificate_1_PL_01_01_crt
    java.lang.String Intermediate_Certificate_2_PL_01_01_crt -> Intermediate_Certificate_2_PL_01_01_crt
    java.lang.String Intermediate_CRL_1_PL_01_01_crl -> Intermediate_CRL_1_PL_01_01_crl
    java.lang.String Intermediate_CRL_2_PL_01_01_crl -> Intermediate_CRL_2_PL_01_01_crl
    java.lang.String End_Certificate_PL_01_01_crt -> End_Certificate_PL_01_01_crt
    java.lang.String[] TEST_54_DATA -> TEST_54_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_02_crt -> Intermediate_Certificate_1_PL_01_02_crt
    java.lang.String Intermediate_Certificate_2_PL_01_02_crt -> Intermediate_Certificate_2_PL_01_02_crt
    java.lang.String Intermediate_CRL_1_PL_01_02_crl -> Intermediate_CRL_1_PL_01_02_crl
    java.lang.String Intermediate_CRL_2_PL_01_02_crl -> Intermediate_CRL_2_PL_01_02_crl
    java.lang.String End_Certificate_PL_01_02_crt -> End_Certificate_PL_01_02_crt
    java.lang.String[] TEST_55_DATA -> TEST_55_DATA
    java.lang.String Intermediate_Certificate_PL_01_03_crt -> Intermediate_Certificate_PL_01_03_crt
    java.lang.String Intermediate_CRL_PL_01_03_crl -> Intermediate_CRL_PL_01_03_crl
    java.lang.String End_Certificate_PL_01_03_crt -> End_Certificate_PL_01_03_crt
    java.lang.String[] TEST_56_DATA -> TEST_56_DATA
    java.lang.String Intermediate_Certificate_PL_01_04_crt -> Intermediate_Certificate_PL_01_04_crt
    java.lang.String Intermediate_CRL_PL_01_04_crl -> Intermediate_CRL_PL_01_04_crl
    java.lang.String End_Certificate_PL_01_04_crt -> End_Certificate_PL_01_04_crt
    java.lang.String[] TEST_57_DATA -> TEST_57_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_05_crt -> Intermediate_Certificate_1_PL_01_05_crt
    java.lang.String Intermediate_Certificate_2_PL_01_05_crt -> Intermediate_Certificate_2_PL_01_05_crt
    java.lang.String Intermediate_Certificate_3_PL_01_05_crt -> Intermediate_Certificate_3_PL_01_05_crt
    java.lang.String Intermediate_CRL_1_PL_01_05_crl -> Intermediate_CRL_1_PL_01_05_crl
    java.lang.String Intermediate_CRL_2_PL_01_05_crl -> Intermediate_CRL_2_PL_01_05_crl
    java.lang.String Intermediate_CRL_3_PL_01_05_crl -> Intermediate_CRL_3_PL_01_05_crl
    java.lang.String End_Certificate_PL_01_05_crt -> End_Certificate_PL_01_05_crt
    java.lang.String[] TEST_58_DATA -> TEST_58_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_06_crt -> Intermediate_Certificate_1_PL_01_06_crt
    java.lang.String Intermediate_Certificate_2_PL_01_06_crt -> Intermediate_Certificate_2_PL_01_06_crt
    java.lang.String Intermediate_Certificate_3_PL_01_06_crt -> Intermediate_Certificate_3_PL_01_06_crt
    java.lang.String Intermediate_CRL_1_PL_01_06_crl -> Intermediate_CRL_1_PL_01_06_crl
    java.lang.String Intermediate_CRL_2_PL_01_06_crl -> Intermediate_CRL_2_PL_01_06_crl
    java.lang.String Intermediate_CRL_3_PL_01_06_crl -> Intermediate_CRL_3_PL_01_06_crl
    java.lang.String End_Certificate_PL_01_06_crt -> End_Certificate_PL_01_06_crt
    java.lang.String[] TEST_59_DATA -> TEST_59_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_07_crt -> Intermediate_Certificate_1_PL_01_07_crt
    java.lang.String Intermediate_Certificate_2_PL_01_07_crt -> Intermediate_Certificate_2_PL_01_07_crt
    java.lang.String Intermediate_Certificate_3_PL_01_07_crt -> Intermediate_Certificate_3_PL_01_07_crt
    java.lang.String Intermediate_Certificate_4_PL_01_07_crt -> Intermediate_Certificate_4_PL_01_07_crt
    java.lang.String Intermediate_CRL_1_PL_01_07_crl -> Intermediate_CRL_1_PL_01_07_crl
    java.lang.String Intermediate_CRL_2_PL_01_07_crl -> Intermediate_CRL_2_PL_01_07_crl
    java.lang.String Intermediate_CRL_3_PL_01_07_crl -> Intermediate_CRL_3_PL_01_07_crl
    java.lang.String Intermediate_CRL_4_PL_01_07_crl -> Intermediate_CRL_4_PL_01_07_crl
    java.lang.String End_Certificate_PL_01_07_crt -> End_Certificate_PL_01_07_crt
    java.lang.String[] TEST_60_DATA -> TEST_60_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_08_crt -> Intermediate_Certificate_1_PL_01_08_crt
    java.lang.String Intermediate_Certificate_2_PL_01_08_crt -> Intermediate_Certificate_2_PL_01_08_crt
    java.lang.String Intermediate_Certificate_3_PL_01_08_crt -> Intermediate_Certificate_3_PL_01_08_crt
    java.lang.String Intermediate_Certificate_4_PL_01_08_crt -> Intermediate_Certificate_4_PL_01_08_crt
    java.lang.String Intermediate_CRL_1_PL_01_08_crl -> Intermediate_CRL_1_PL_01_08_crl
    java.lang.String Intermediate_CRL_2_PL_01_08_crl -> Intermediate_CRL_2_PL_01_08_crl
    java.lang.String Intermediate_CRL_3_PL_01_08_crl -> Intermediate_CRL_3_PL_01_08_crl
    java.lang.String Intermediate_CRL_4_PL_01_08_crl -> Intermediate_CRL_4_PL_01_08_crl
    java.lang.String End_Certificate_PL_01_08_crt -> End_Certificate_PL_01_08_crt
    java.lang.String[] TEST_61_DATA -> TEST_61_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_09_crt -> Intermediate_Certificate_1_PL_01_09_crt
    java.lang.String Intermediate_Certificate_2_PL_01_09_crt -> Intermediate_Certificate_2_PL_01_09_crt
    java.lang.String Intermediate_Certificate_3_PL_01_09_crt -> Intermediate_Certificate_3_PL_01_09_crt
    java.lang.String Intermediate_Certificate_4_PL_01_09_crt -> Intermediate_Certificate_4_PL_01_09_crt
    java.lang.String Intermediate_CRL_1_PL_01_09_crl -> Intermediate_CRL_1_PL_01_09_crl
    java.lang.String Intermediate_CRL_2_PL_01_09_crl -> Intermediate_CRL_2_PL_01_09_crl
    java.lang.String Intermediate_CRL_3_PL_01_09_crl -> Intermediate_CRL_3_PL_01_09_crl
    java.lang.String Intermediate_CRL_4_PL_01_09_crl -> Intermediate_CRL_4_PL_01_09_crl
    java.lang.String End_Certificate_PL_01_09_crt -> End_Certificate_PL_01_09_crt
    java.lang.String[] TEST_62_DATA -> TEST_62_DATA
    java.lang.String Intermediate_Certificate_1_PL_01_10_crt -> Intermediate_Certificate_1_PL_01_10_crt
    java.lang.String Intermediate_Certificate_2_PL_01_10_crt -> Intermediate_Certificate_2_PL_01_10_crt
    java.lang.String Intermediate_Certificate_3_PL_01_10_crt -> Intermediate_Certificate_3_PL_01_10_crt
    java.lang.String Intermediate_Certificate_4_PL_01_10_crt -> Intermediate_Certificate_4_PL_01_10_crt
    java.lang.String Intermediate_CRL_1_PL_01_10_crl -> Intermediate_CRL_1_PL_01_10_crl
    java.lang.String Intermediate_CRL_2_PL_01_10_crl -> Intermediate_CRL_2_PL_01_10_crl
    java.lang.String Intermediate_CRL_3_PL_01_10_crl -> Intermediate_CRL_3_PL_01_10_crl
    java.lang.String Intermediate_CRL_4_PL_01_10_crl -> Intermediate_CRL_4_PL_01_10_crl
    java.lang.String End_Certificate_PL_01_10_crt -> End_Certificate_PL_01_10_crt
    java.lang.String[] TEST_63_DATA -> TEST_63_DATA
    java.lang.String Intermediate_Certificate_RL_02_01_crt -> Intermediate_Certificate_RL_02_01_crt
    java.lang.String Intermediate_CRL_RL_02_01_crl -> Intermediate_CRL_RL_02_01_crl
    java.lang.String End_Certificate_RL_02_01_crt -> End_Certificate_RL_02_01_crt
    java.lang.String[] TEST_64_DATA -> TEST_64_DATA
    java.lang.String Intermediate_Certificate_1_RL_03_01_crt -> Intermediate_Certificate_1_RL_03_01_crt
    java.lang.String Intermediate_Certificate_2_RL_03_01_crt -> Intermediate_Certificate_2_RL_03_01_crt
    java.lang.String Intermediate_CRL_RL_03_01_crl -> Intermediate_CRL_RL_03_01_crl
    java.lang.String End_Certificate_RL_03_01_crt -> End_Certificate_RL_03_01_crt
    java.lang.String[] TEST_65_DATA -> TEST_65_DATA
    java.lang.String Intermediate_Certificate_RL_03_02_crt -> Intermediate_Certificate_RL_03_02_crt
    java.lang.String Intermediate_CRL_RL_03_02_crl -> Intermediate_CRL_RL_03_02_crl
    java.lang.String End_Certificate_RL_03_02_crt -> End_Certificate_RL_03_02_crt
    java.lang.String[] TEST_66_DATA -> TEST_66_DATA
    java.lang.String Intermediate_Certificate_RL_03_03_crt -> Intermediate_Certificate_RL_03_03_crt
    java.lang.String Intermediate_CRL_1_RL_03_03_crl -> Intermediate_CRL_1_RL_03_03_crl
    java.lang.String Intermediate_CRL_2_RL_03_03_crl -> Intermediate_CRL_2_RL_03_03_crl
    java.lang.String End_Certificate_RL_03_03_crt -> End_Certificate_RL_03_03_crt
    java.lang.String[] TEST_67_DATA -> TEST_67_DATA
    java.lang.String Intermediate_Certificate_1_RL_05_01_crt -> Intermediate_Certificate_1_RL_05_01_crt
    java.lang.String Intermediate_Certificate_2_RL_05_01_crt -> Intermediate_Certificate_2_RL_05_01_crt
    java.lang.String Intermediate_CRL_1_RL_05_01_crl -> Intermediate_CRL_1_RL_05_01_crl
    java.lang.String Intermediate_CRL_2_RL_05_01_crl -> Intermediate_CRL_2_RL_05_01_crl
    java.lang.String End_Certificate_RL_05_01_crt -> End_Certificate_RL_05_01_crt
    java.lang.String[] TEST_68_DATA -> TEST_68_DATA
    java.lang.String Intermediate_Certificate_RL_05_02_crt -> Intermediate_Certificate_RL_05_02_crt
    java.lang.String Intermediate_CRL_RL_05_02_crl -> Intermediate_CRL_RL_05_02_crl
    java.lang.String End_Certificate_RL_05_02_crt -> End_Certificate_RL_05_02_crt
    java.lang.String[] TEST_69_DATA -> TEST_69_DATA
    java.lang.String Intermediate_Certificate_1_RL_06_01_crt -> Intermediate_Certificate_1_RL_06_01_crt
    java.lang.String Intermediate_Certificate_2_RL_06_01_crt -> Intermediate_Certificate_2_RL_06_01_crt
    java.lang.String Intermediate_CRL_1_RL_06_01_crl -> Intermediate_CRL_1_RL_06_01_crl
    java.lang.String Intermediate_CRL_2_RL_06_01_crl -> Intermediate_CRL_2_RL_06_01_crl
    java.lang.String End_Certificate_RL_06_01_crt -> End_Certificate_RL_06_01_crt
    java.lang.String[] TEST_70_DATA -> TEST_70_DATA
    java.lang.String Intermediate_Certificate_RL_06_02_crt -> Intermediate_Certificate_RL_06_02_crt
    java.lang.String Intermediate_CRL_RL_06_02_crl -> Intermediate_CRL_RL_06_02_crl
    java.lang.String End_Certificate_RL_06_02_crt -> End_Certificate_RL_06_02_crt
    java.lang.String[] TEST_71_DATA -> TEST_71_DATA
    java.lang.String Intermediate_Certificate_RL_07_01_crt -> Intermediate_Certificate_RL_07_01_crt
    java.lang.String Intermediate_CRL_RL_07_01_crl -> Intermediate_CRL_RL_07_01_crl
    java.lang.String End_Certificate_RL_07_01_crt -> End_Certificate_RL_07_01_crt
    java.lang.String[] TEST_72_DATA -> TEST_72_DATA
    java.lang.String Intermediate_Certificate_RL_07_02_crt -> Intermediate_Certificate_RL_07_02_crt
    java.lang.String Intermediate_CRL_RL_07_02_crl -> Intermediate_CRL_RL_07_02_crl
    java.lang.String End_Certificate_RL_07_02_crt -> End_Certificate_RL_07_02_crt
    java.lang.String[] TEST_73_DATA -> TEST_73_DATA
    java.lang.String Intermediate_Certificate_RL_07_03_crt -> Intermediate_Certificate_RL_07_03_crt
    java.lang.String Intermediate_CRL_RL_07_03_crl -> Intermediate_CRL_RL_07_03_crl
    java.lang.String End_Certificate_RL_07_03_crt -> End_Certificate_RL_07_03_crt
    java.lang.String[] TEST_74_DATA -> TEST_74_DATA
    java.lang.String Intermediate_Certificate_RL_08_01_crt -> Intermediate_Certificate_RL_08_01_crt
    java.lang.String Intermediate_CRL_RL_08_01_crl -> Intermediate_CRL_RL_08_01_crl
    java.lang.String End_Certificate_RL_08_01_crt -> End_Certificate_RL_08_01_crt
    java.lang.String[] TEST_75_DATA -> TEST_75_DATA
    java.lang.String Intermediate_Certificate_RL_09_01_crt -> Intermediate_Certificate_RL_09_01_crt
    java.lang.String Intermediate_CRL_RL_09_01_crl -> Intermediate_CRL_RL_09_01_crl
    java.lang.String End_Certificate_RL_09_01_crt -> End_Certificate_RL_09_01_crt
    java.lang.String[] TEST_76_DATA -> TEST_76_DATA
    36:5170:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    89:89:java.lang.String getName() -> getName
    95:262:void performTest() -> performTest
    268:297:void init() -> a
    303:305:java.security.cert.X509Certificate decodeCertificate(java.lang.String) -> a
    320:350:java.security.cert.CertStore makeCertStore(java.lang.String[]) -> a
    357:358:void test(java.lang.String,java.lang.String[],boolean,boolean) -> a
    364:365:void test(java.lang.String,java.lang.String[],boolean,boolean,boolean) -> a
    371:412:void test(java.lang.String,java.lang.String[],java.util.Set,boolean,boolean,boolean) -> a
    418:421:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.NamedCurveTest -> org.sandrob.bouncycastle.jce.provider.test.NamedCurveTest:
    java.util.Hashtable CURVE_NAMES -> a
    java.util.Hashtable CURVE_ALIASES -> b
    32:48:void <clinit>() -> <clinit>
    32:32:void <init>() -> <init>
    55:133:void testCurve(java.lang.String) -> testCurve
    139:208:void testECDSA(java.lang.String) -> testECDSA
    214:283:void testECGOST(java.lang.String) -> testECGOST
    287:287:java.lang.String getName() -> getName
    293:332:void performTest() -> performTest
    337:340:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.NetscapeCertRequestTest -> org.sandrob.bouncycastle.jce.provider.test.NetscapeCertRequestTest:
    23:23:void <init>() -> <init>
    38:38:java.lang.String getName() -> getName
    45:116:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    123:129:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.NoekeonTest -> org.sandrob.bouncycastle.jce.provider.test.NoekeonTest:
    java.lang.String[] cipherTests -> a
    20:28:void <clinit>() -> <clinit>
    33:34:void <init>() -> <init>
    50:131:void test(int,byte[],byte[],byte[]) -> test
    136:143:void performTest() -> performTest
    148:151:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.PBETest -> org.sandrob.bouncycastle.jce.provider.test.PBETest:
    org.sandrob.bouncycastle.jce.provider.test.PBETest$PKCS12Test[] pkcs12Tests -> b
    org.sandrob.bouncycastle.jce.provider.test.PBETest$OpenSSLTest[] openSSLTests -> c
    byte[] message -> a
    byte[] hMac1 -> d
    byte[] hMac2 -> e
    33:288:void <clinit>() -> <clinit>
    33:291:void <init>() -> <init>
    301:309:javax.crypto.Cipher makePBECipherUsingParam(java.lang.String,int,char[],byte[],int) -> a
    320:327:javax.crypto.Cipher makePBECipherWithoutParam(java.lang.String,int,char[],byte[],int) -> b
    334:347:boolean arrayEquals(byte[],byte[]) -> a
    360:392:void testPBEHMac(java.lang.String,byte[]) -> testPBEHMac
    397:540:void performTest() -> performTest
    544:544:java.lang.String getName() -> getName
    551:554:void main(java.lang.String[]) -> main
    330:330:boolean access$0(org.sandrob.bouncycastle.jce.provider.test.PBETest,byte[],byte[]) -> a
org.sandrob.bouncycastle.jce.provider.test.PBETest$OpenSSLTest -> org.sandrob.bouncycastle.jce.provider.test.PBETest$a:
    char[] password -> a
    java.lang.String baseAlgorithm -> b
    java.lang.String algorithm -> c
    int keySize -> d
    int ivSize -> e
    org.sandrob.bouncycastle.jce.provider.test.PBETest this$0 -> f
    45:56:void <init>(org.sandrob.bouncycastle.jce.provider.test.PBETest,java.lang.String,java.lang.String,int,int) -> <init>
    60:60:java.lang.String getName() -> getName
    66:115:void performTest() -> performTest
org.sandrob.bouncycastle.jce.provider.test.PBETest$PKCS12Test -> org.sandrob.bouncycastle.jce.provider.test.PBETest$b:
    char[] password -> a
    java.lang.String baseAlgorithm -> b
    java.lang.String algorithm -> c
    org.sandrob.bouncycastle.crypto.Digest digest -> d
    int keySize -> e
    int ivSize -> f
    org.sandrob.bouncycastle.jce.provider.test.PBETest this$0 -> g
    128:141:void <init>(org.sandrob.bouncycastle.jce.provider.test.PBETest,java.lang.String,java.lang.String,org.sandrob.bouncycastle.crypto.Digest,int,int) -> <init>
    145:145:java.lang.String getName() -> getName
    151:238:void performTest() -> performTest
    243:255:java.security.AlgorithmParameters checkParameters(javax.crypto.Cipher,byte[],int) -> a
org.sandrob.bouncycastle.jce.provider.test.PEMData -> org.sandrob.bouncycastle.jce.provider.test.PEMData:
    java.lang.String CERTIFICATE_1 -> CERTIFICATE_1
    java.lang.String CERTIFICATE_2 -> CERTIFICATE_2
    java.lang.String CRL_1 -> CRL_1
    java.lang.String CRL_2 -> CRL_2
    java.lang.String ATTRIBUTE_CERTIFICATE_1 -> a
    java.lang.String ATTRIBUTE_CERTIFICATE_2 -> b
    3:102:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
org.sandrob.bouncycastle.jce.provider.test.PKCS10CertRequestTest -> org.sandrob.bouncycastle.jce.provider.test.PKCS10CertRequestTest:
    byte[] gost3410EC_A -> a
    byte[] gost3410EC_B -> b
    byte[] gost3410EC_C -> c
    byte[] gost3410EC_ExA -> d
    byte[] gost3410EC_ExB -> e
    48:84:void <init>() -> <init>
    93:93:java.lang.String getName() -> getName
    99:143:void generationTest(int,java.lang.String,java.lang.String,java.lang.String) -> a
    151:218:void createECRequest(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    223:303:void createECRequest(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    308:353:void createECGOSTRequest() -> a
    358:410:void createPSSTest(java.lang.String) -> a
    416:446:void nullPointerTest() -> b
    451:534:void performTest() -> performTest
    539:542:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.PKCS12StoreTest -> org.sandrob.bouncycastle.jce.provider.test.PKCS12StoreTest:
    char[] passwd -> a
    byte[] pkcs12 -> b
    byte[] certUTF -> c
    byte[] pkcs12noFriendly -> d
    char[] noFriendlyPassword -> e
    byte[] pkcs12StorageIssue -> f
    char[] storagePassword -> g
    byte[] pkcs12nopass -> h
    52:350:void <clinit>() -> <clinit>
    52:353:void <init>() -> <init>
    440:480:java.security.cert.Certificate createCert(java.security.PublicKey,java.security.PrivateKey,java.lang.String,java.lang.String) -> createCert
    486:845:void testPKCS12Store() -> testPKCS12Store
    850:859:void testSupportedTypes(java.security.PrivateKey,java.security.cert.Certificate[]) -> a
    864:984:void basicStoreTest(java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String) -> a
    989:1031:void testNoExtraLocalKeyID(byte[]) -> a
    1035:1035:java.lang.String getName() -> getName
    1041:1073:void performTest() -> performTest
    1078:1081:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.PKIXNameConstraintsTest -> org.sandrob.bouncycastle.jce.provider.test.PKIXNameConstraintsTest:
    java.lang.String[] testEmailIsConstraint -> a
    java.lang.String[] testEmailIsNotConstraint -> b
    java.lang.String[] email1 -> c
    java.lang.String[] email2 -> d
    java.lang.String[] emailintersect -> e
    java.lang.String[][] emailunion -> f
    java.lang.String[] dn1 -> g
    java.lang.String[] dn2 -> h
    java.lang.String[][] dnUnion -> i
    java.lang.String[] dnIntersection -> j
    java.lang.String[] testDNIsConstraint -> k
    java.lang.String[] testDNIsNotConstraint -> l
    java.lang.String[] testDNSIsConstraint -> m
    java.lang.String[] testDNSIsNotConstraint -> n
    java.lang.String[] dns1 -> o
    java.lang.String[] dns2 -> p
    java.lang.String[] dnsintersect -> q
    java.lang.String[][] dnsunion -> r
    java.lang.String[] testURIIsConstraint -> s
    java.lang.String[] testURIIsNotConstraint -> t
    java.lang.String[] uri1 -> u
    java.lang.String[] uri2 -> v
    java.lang.String[] uriintersect -> w
    java.lang.String[][] uriunion -> x
    byte[] testIP -> y
    byte[][] testIPIsConstraint -> z
    byte[][] testIPIsNotConstraint -> A
    byte[][] ip1 -> B
    byte[][] ip2 -> C
    byte[][] ipintersect -> D
    byte[][][] ipunion -> E
    24:197:void <clinit>() -> <clinit>
    24:24:void <init>() -> <init>
    201:201:java.lang.String getName() -> getName
    206:218:void performTest() -> performTest
    247:328:void testConstraints(int,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[][],java.lang.String[]) -> a
    357:447:void testConstraints(int,byte[],byte[][],byte[][],byte[][],byte[][],byte[][][],byte[][]) -> a
    451:452:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.PKIXPolicyMappingTest -> org.sandrob.bouncycastle.jce.provider.test.PKIXPolicyMappingTest:
    org.sandrob.bouncycastle.x509.X509V3CertificateGenerator v3CertGen -> a
    40:43:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    47:47:java.lang.String getName() -> getName
    58:68:java.security.cert.X509Certificate createTrustCert(java.security.PublicKey,java.security.PrivateKey) -> a
    82:96:java.security.cert.X509Certificate createIntmedCert(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey,org.sandrob.bouncycastle.asn1.ASN1EncodableVector,java.util.Hashtable) -> a
    109:121:java.security.cert.X509Certificate createEndEntityCert(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey,org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> a
    133:194:java.lang.String testPolicies(int,java.security.cert.X509Certificate,java.security.cert.X509Certificate,java.security.cert.X509Certificate,java.util.Set,boolean) -> a
    204:434:void performTest() -> performTest
    442:446:void checkMessage(int,java.lang.String,java.lang.String) -> a
    451:454:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.PKIXTest -> org.sandrob.bouncycastle.jce.provider.test.PKIXTest:
    byte[] rootCertBin -> a
    byte[] userCert1Bin -> b
    byte[] userCert2Bin -> c
    byte[] crlBin -> d
    16:194:void <clinit>() -> <clinit>
    16:16:void <init>() -> <init>
    201:228:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    233:233:java.lang.String getName() -> getName
    239:245:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.PSSTest -> org.sandrob.bouncycastle.jce.provider.test.PSSTest:
    java.security.spec.RSAPublicKeySpec pubKeySpec -> a
    java.security.spec.RSAPrivateCrtKeySpec privKeySpec -> b
    byte[] msg1a -> c
    byte[] slt1a -> d
    byte[] sig1a -> e
    byte[] sig1b -> f
    byte[] sig1c -> g
    26:92:void <init>() -> <init>
    51:64:boolean arrayEquals(byte[],byte[]) -> a
    96:202:void performTest() -> performTest
    207:247:void rawModeTest(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.security.PrivateKey,java.security.PublicKey,java.security.SecureRandom) -> a
    251:251:java.lang.String getName() -> getName
    257:260:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.PSSTest$FixedRandom -> org.sandrob.bouncycastle.jce.provider.test.PSSTest$a:
    byte[] vals -> a
    org.sandrob.bouncycastle.jce.provider.test.PSSTest this$0 -> b
    34:38:void <init>(org.sandrob.bouncycastle.jce.provider.test.PSSTest,byte[]) -> <init>
    43:44:void nextBytes(byte[]) -> nextBytes
org.sandrob.bouncycastle.jce.provider.test.RSATest -> org.sandrob.bouncycastle.jce.provider.test.RSATest:
    java.security.spec.RSAPublicKeySpec pubKeySpec -> c
    java.security.spec.RSAPrivateCrtKeySpec privKeySpec -> d
    java.security.spec.RSAPublicKeySpec isoPubKeySpec -> e
    java.security.spec.RSAPrivateKeySpec isoPrivKeySpec -> f
    java.security.spec.RSAPublicKeySpec pub2048KeySpec -> a
    java.security.spec.RSAPrivateCrtKeySpec priv2048KeySpec -> b
    46:113:void <clinit>() -> <clinit>
    46:99:void <init>() -> <init>
    119:615:void performTest() -> performTest
    620:672:void oaepCompatibilityTest(java.lang.String,java.security.PrivateKey,java.security.PublicKey) -> a
    677:706:void rawModeTest(java.lang.String,org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.security.PrivateKey,java.security.PublicKey,java.security.SecureRandom) -> a
    710:713:byte[] derEncode(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,byte[]) -> a
    718:718:java.lang.String getName() -> getName
    724:727:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.RSATest$FixedSecureRandom -> org.sandrob.bouncycastle.jce.provider.test.RSATest$a:
    byte[] seed -> a
    org.sandrob.bouncycastle.jce.provider.test.RSATest this$0 -> b
    54:61:void <init>(org.sandrob.bouncycastle.jce.provider.test.RSATest) -> <init>
    67:76:void nextBytes(byte[]) -> nextBytes
    54:54:void <init>(org.sandrob.bouncycastle.jce.provider.test.RSATest,org.sandrob.bouncycastle.jce.provider.test.RSATest$FixedSecureRandom) -> <init>
org.sandrob.bouncycastle.jce.provider.test.RegressionTest -> org.sandrob.bouncycastle.jce.provider.test.RegressionTest:
    org.sandrob.bouncycastle.util.test.Test[] tests -> tests
    9:68:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    74:89:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.SEEDTest -> org.sandrob.bouncycastle.jce.provider.test.SEEDTest:
    java.lang.String[] cipherTests -> a
    21:29:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    51:132:void test(int,byte[],byte[],byte[]) -> test
    137:166:void performTest() -> performTest
    171:174:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.SealedTest -> org.sandrob.bouncycastle.jce.provider.test.SealedTest:
    16:16:void <init>() -> <init>
    23:23:java.lang.String getName() -> getName
    30:65:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    71:77:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.SerialisationTest -> org.sandrob.bouncycastle.jce.provider.test.SerialisationTest:
    java.math.BigInteger mod -> a
    java.math.BigInteger pubExp -> b
    java.math.BigInteger privExp -> c
    java.math.BigInteger crtExp -> d
    java.math.BigInteger p -> e
    java.math.BigInteger q -> f
    java.math.BigInteger expP -> g
    java.math.BigInteger expQ -> h
    byte[] rsaPub -> i
    byte[] rsaPriv -> j
    java.math.BigInteger elGamalY -> k
    java.math.BigInteger elGamalX -> l
    java.math.BigInteger elGamalG -> m
    java.math.BigInteger elGamalP -> n
    byte[] elGamalPub -> o
    byte[] elGamalPriv -> p
    java.math.BigInteger dhY -> q
    java.math.BigInteger dhX -> r
    java.math.BigInteger dhG -> s
    java.math.BigInteger dhP -> t
    byte[] dhPub -> u
    byte[] dhPriv -> v
    java.math.BigInteger dsaY -> w
    java.math.BigInteger dsaX -> x
    java.math.BigInteger dsaG -> y
    java.math.BigInteger dsaP -> z
    byte[] dsaPub -> A
    byte[] dsaPriv -> B
    19:128:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    145:145:java.lang.String getName() -> getName
    150:154:void performTest() -> performTest
    159:200:void rsaTest() -> a
    205:234:void elGamalTest() -> b
    239:276:void dhTest() -> c
    281:310:void dsaTest() -> d
    315:317:java.lang.Object readObject(byte[]) -> a
    323:324:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.SigNameTest -> org.sandrob.bouncycastle.jce.provider.test.SigNameTest:
    11:11:void <init>() -> <init>
    17:21:void checkName(java.lang.String) -> a
    26:69:void performTest() -> performTest
    73:73:java.lang.String getName() -> getName
    79:82:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.SigTest -> org.sandrob.bouncycastle.jce.provider.test.SigTest:
    23:23:void <init>() -> <init>
    31:62:void testBadSig(java.security.PrivateKey,java.security.PublicKey) -> a
    67:359:void performTest() -> performTest
    363:363:java.lang.String getName() -> getName
    369:372:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.SlotTwoTest -> org.sandrob.bouncycastle.jce.provider.test.SlotTwoTest:
    byte[] plainData -> a
    14:17:void <init>() -> <init>
    21:21:java.lang.String getName() -> getName
    27:45:void performTest() -> performTest
    53:83:void testDesEde(java.security.Key,java.lang.String,java.lang.String) -> a
    88:89:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.TestUtils -> org.sandrob.bouncycastle.jce.provider.test.a:
    47:51:java.security.KeyPair generateRSAKeyPair() -> a
    57:67:java.security.cert.X509Certificate generateRootCert(java.security.KeyPair) -> a
    73:88:java.security.cert.X509Certificate generateIntermediateCert(java.security.PublicKey,java.security.PrivateKey,java.security.cert.X509Certificate) -> a
    94:109:java.security.cert.X509Certificate generateEndEntityCert(java.security.PublicKey,java.security.PrivateKey,java.security.cert.X509Certificate) -> b
    118:133:java.security.cert.X509CRL createCRL(java.security.cert.X509Certificate,java.security.PrivateKey,java.math.BigInteger) -> a
    138:138:java.security.cert.X509Certificate createExceptionCertificate(boolean) -> a
org.sandrob.bouncycastle.jce.provider.test.TestUtils$ExceptionCertificate -> org.sandrob.bouncycastle.jce.provider.test.a$a:
    boolean _exceptionOnEncode -> a
    146:149:void <init>(boolean) -> <init>
    153:153:void checkValidity() -> checkValidity
    158:158:void checkValidity(java.util.Date) -> checkValidity
    163:163:int getVersion() -> getVersion
    168:168:java.math.BigInteger getSerialNumber() -> getSerialNumber
    173:173:java.security.Principal getIssuerDN() -> getIssuerDN
    178:178:java.security.Principal getSubjectDN() -> getSubjectDN
    183:183:java.util.Date getNotBefore() -> getNotBefore
    188:188:java.util.Date getNotAfter() -> getNotAfter
    193:193:byte[] getTBSCertificate() -> getTBSCertificate
    198:198:byte[] getSignature() -> getSignature
    203:203:java.lang.String getSigAlgName() -> getSigAlgName
    208:208:java.lang.String getSigAlgOID() -> getSigAlgOID
    213:213:byte[] getSigAlgParams() -> getSigAlgParams
    218:218:boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    223:223:boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    228:228:boolean[] getKeyUsage() -> getKeyUsage
    233:233:int getBasicConstraints() -> getBasicConstraints
    238:243:byte[] getEncoded() -> getEncoded
    248:248:void verify(java.security.PublicKey) -> verify
    253:253:void verify(java.security.PublicKey,java.lang.String) -> verify
    258:258:java.lang.String toString() -> toString
    263:263:java.security.PublicKey getPublicKey() -> getPublicKey
    268:268:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    273:273:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    278:278:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    283:283:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
org.sandrob.bouncycastle.jce.provider.test.WrapTest -> org.sandrob.bouncycastle.jce.provider.test.WrapTest:
    20:20:void <init>() -> <init>
    27:53:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    59:59:java.lang.String getName() -> getName
    65:71:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.X509CertificatePairTest -> org.sandrob.bouncycastle.jce.provider.test.X509CertificatePairTest:
    13:13:void <init>() -> <init>
    19:133:void performTest() -> performTest
    137:137:java.lang.String getName() -> getName
    142:145:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.X509LDAPCertStoreTest -> org.sandrob.bouncycastle.jce.provider.test.X509LDAPCertStoreTest:
    byte[] cert1 -> a
    byte[] directCRL -> b
    org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters params1 -> c
    org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters params2 -> d
    byte[] cert2 -> e
    org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters params3 -> f
    byte[] cert3 -> g
    byte[] caCert3 -> h
    byte[] crossCert3 -> i
    27:197:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    213:215:void performTest() -> performTest
    219:328:void certStoretest() -> a
    332:443:void x509StoreTest() -> b
    448:448:org.sandrob.bouncycastle.jce.X509Principal getSubject(java.security.cert.X509Certificate) -> a
    454:454:org.sandrob.bouncycastle.jce.X509Principal getCRLIssuer(java.security.cert.X509CRL) -> a
    459:459:java.lang.String getName() -> getName
    464:466:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.X509StoreTest -> org.sandrob.bouncycastle.jce.provider.test.X509StoreTest:
    29:29:void <init>() -> <init>
    35:79:void certPairTest() -> a
    84:331:void performTest() -> performTest
    335:335:java.lang.String getName() -> getName
    340:343:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.X509StreamParserTest -> org.sandrob.bouncycastle.jce.provider.test.X509StreamParserTest:
    byte[] attrCert -> a
    24:28:void <init>() -> <init>
    71:346:void performTest() -> performTest
    350:350:java.lang.String getName() -> getName
    355:358:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.jce.provider.test.nist.NistCertPathReviewerTest -> org.sandrob.bouncycastle.jce.provider.test.nist.NistCertPathReviewerTest:
    char[] PKCS12_PASSWORD -> a
    java.lang.String NIST_TEST_POLICY_1 -> b
    java.lang.String NIST_TEST_POLICY_2 -> c
    java.lang.String NIST_TEST_POLICY_3 -> d
    java.util.Map certs -> e
    java.util.Map crls -> f
    java.util.Set noPolicies -> g
    java.util.Set nistTestPolicy1 -> h
    java.util.Set nistTestPolicy2 -> i
    java.util.Set nistTestPolicy3 -> j
    java.util.Set nistTestPolicy1And2 -> k
    37:63:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    68:71:void testValidSignaturesTest1() -> testValidSignaturesTest1
    76:82:void testInvalidCASignatureTest2() -> testInvalidCASignatureTest2
    87:93:void testInvalidEESignatureTest3() -> testInvalidEESignatureTest3
    98:101:void testValidDSASignaturesTest4() -> testValidDSASignaturesTest4
    114:120:void testInvalidDSASignaturesTest6() -> testInvalidDSASignaturesTest6
    125:131:void testCANotBeforeDateTest1() -> testCANotBeforeDateTest1
    136:142:void testInvalidEENotBeforeDateTest2() -> testInvalidEENotBeforeDateTest2
    147:150:void testValidPre2000UTCNotBeforeDateTest3() -> testValidPre2000UTCNotBeforeDateTest3
    155:158:void testValidGeneralizedTimeNotBeforeDateTest4() -> testValidGeneralizedTimeNotBeforeDateTest4
    163:169:void testInvalidCANotAfterDateTest5() -> testInvalidCANotAfterDateTest5
    174:180:void testInvalidEENotAfterDateTest6() -> testInvalidEENotAfterDateTest6
    185:191:void testInvalidValidPre2000UTCNotAfterDateTest7() -> testInvalidValidPre2000UTCNotAfterDateTest7
    196:202:void testInvalidNegativeSerialNumberTest15() -> testInvalidNegativeSerialNumberTest15
    210:235:void testAllCertificatesSamePolicyTest1() -> testAllCertificatesSamePolicyTest1
    240:251:void testAllCertificatesNoPoliciesTest2() -> testAllCertificatesNoPoliciesTest2
    256:275:void testDifferentPoliciesTest3() -> testDifferentPoliciesTest3
    280:286:void testDifferentPoliciesTest4() -> testDifferentPoliciesTest4
    291:297:void testDifferentPoliciesTest5() -> testDifferentPoliciesTest5
    302:313:void testOverlappingPoliciesTest6() -> testOverlappingPoliciesTest6
    318:325:void testDifferentPoliciesTest7() -> testDifferentPoliciesTest7
    330:337:void testDifferentPoliciesTest8() -> testDifferentPoliciesTest8
    342:349:void testDifferentPoliciesTest9() -> testDifferentPoliciesTest9
    354:360:void testAllCertificatesSamePoliciesTest10() -> testAllCertificatesSamePoliciesTest10
    365:371:void testAllCertificatesAnyPolicyTest11() -> testAllCertificatesAnyPolicyTest11
    376:383:void testDifferentPoliciesTest12() -> testDifferentPoliciesTest12
    388:394:void testAllCertificatesSamePoliciesTest13() -> testAllCertificatesSamePoliciesTest13
    399:407:void testAnyPolicyTest14() -> testAnyPolicyTest14
    412:421:void testUserNoticeQualifierTest15() -> testUserNoticeQualifierTest15
    426:437:void testUserNoticeQualifierTest16() -> testUserNoticeQualifierTest16
    442:451:void testUserNoticeQualifierTest17() -> testUserNoticeQualifierTest17
    456:461:void testUserNoticeQualifierTest18() -> testUserNoticeQualifierTest18
    466:474:void testUserNoticeQualifierTest19() -> testUserNoticeQualifierTest19
    482:487:void doAcceptingTest(java.lang.String,java.lang.String[],java.lang.String[]) -> a
    496:501:void doAcceptingTest(java.lang.String,java.lang.String[],java.lang.String[],java.util.Set) -> a
    512:523:void doErrorTest(java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String,java.lang.String) -> a
    535:546:void doErrorTest(java.lang.String,java.lang.String[],java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String) -> a
    554:554:org.sandrob.bouncycastle.x509.PKIXCertPathReviewer doTest(java.lang.String,java.lang.String[],java.lang.String[]) -> b
    564:599:org.sandrob.bouncycastle.x509.PKIXCertPathReviewer doTest(java.lang.String,java.lang.String[],java.lang.String[],java.util.Set) -> b
    605:626:java.security.cert.X509Certificate loadCert(java.lang.String) -> a
    634:655:java.security.cert.X509CRL loadCrl(java.lang.String) -> b
    662:672:java.security.cert.TrustAnchor getTrustAnchor(java.lang.String) -> c
    677:684:java.lang.String getPkitsHome() -> a
    690:691:void main(java.lang.String[]) -> main
    695:699:void setUp() -> setUp
    704:708:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.jce.provider.test.nist.NistCertPathTest -> org.sandrob.bouncycastle.jce.provider.test.nist.NistCertPathTest:
    char[] PKCS12_PASSWORD -> a
    java.util.Map certs -> b
    java.util.Map crls -> c
    java.util.Set noPolicies -> d
    java.util.Set anyPolicy -> e
    java.util.Set nistTestPolicy1 -> f
    java.util.Set nistTestPolicy2 -> g
    java.util.Set nistTestPolicy3 -> h
    java.util.Set nistTestPolicy1And2 -> i
    41:69:void <clinit>() -> <clinit>
    41:41:void <init>() -> <init>
    73:77:void setUp() -> setUp
    82:85:void testValidSignaturesTest1() -> testValidSignaturesTest1
    90:95:void testInvalidCASignatureTest2() -> testInvalidCASignatureTest2
    100:105:void testInvalidEESignatureTest3() -> testInvalidEESignatureTest3
    110:113:void testValidDSASignaturesTest4() -> testValidDSASignaturesTest4
    119:122:void testValidDSAParameterInheritanceTest5() -> testValidDSAParameterInheritanceTest5
    127:132:void testInvalidDSASignaturesTest6() -> testInvalidDSASignaturesTest6
    137:142:void testCANotBeforeDateTest1() -> testCANotBeforeDateTest1
    147:152:void testInvalidEENotBeforeDateTest2() -> testInvalidEENotBeforeDateTest2
    157:160:void testValidPre2000UTCNotBeforeDateTest3() -> testValidPre2000UTCNotBeforeDateTest3
    165:168:void testValidGeneralizedTimeNotBeforeDateTest4() -> testValidGeneralizedTimeNotBeforeDateTest4
    173:178:void testInvalidCANotAfterDateTest5() -> testInvalidCANotAfterDateTest5
    183:188:void testInvalidEENotAfterDateTest6() -> testInvalidEENotAfterDateTest6
    193:198:void testInvalidValidPre2000UTCNotAfterDateTest7() -> testInvalidValidPre2000UTCNotAfterDateTest7
    203:208:void testInvalidNegativeSerialNumberTest15() -> testInvalidNegativeSerialNumberTest15
    216:240:void testAllCertificatesSamePolicyTest1() -> testAllCertificatesSamePolicyTest1
    245:255:void testAllCertificatesNoPoliciesTest2() -> testAllCertificatesNoPoliciesTest2
    260:277:void testDifferentPoliciesTest3() -> testDifferentPoliciesTest3
    282:287:void testDifferentPoliciesTest4() -> testDifferentPoliciesTest4
    292:297:void testDifferentPoliciesTest5() -> testDifferentPoliciesTest5
    302:312:void testOverlappingPoliciesTest6() -> testOverlappingPoliciesTest6
    317:323:void testDifferentPoliciesTest7() -> testDifferentPoliciesTest7
    328:334:void testDifferentPoliciesTest8() -> testDifferentPoliciesTest8
    339:345:void testDifferentPoliciesTest9() -> testDifferentPoliciesTest9
    350:356:void testAllCertificatesSamePoliciesTest10() -> testAllCertificatesSamePoliciesTest10
    361:367:void testAllCertificatesAnyPolicyTest11() -> testAllCertificatesAnyPolicyTest11
    372:378:void testDifferentPoliciesTest12() -> testDifferentPoliciesTest12
    383:389:void testAllCertificatesSamePoliciesTest13() -> testAllCertificatesSamePoliciesTest13
    394:401:void testAnyPolicyTest14() -> testAnyPolicyTest14
    406:414:void testUserNoticeQualifierTest15() -> testUserNoticeQualifierTest15
    419:429:void testUserNoticeQualifierTest16() -> testUserNoticeQualifierTest16
    434:442:void testUserNoticeQualifierTest17() -> testUserNoticeQualifierTest17
    447:452:void testUserNoticeQualifierTest18() -> testUserNoticeQualifierTest18
    457:464:void testUserNoticeQualifierTest19() -> testUserNoticeQualifierTest19
    469:475:void testInvalidInhibitPolicyMappingTest1() -> testInvalidInhibitPolicyMappingTest1
    480:484:void testValidinhibitPolicyMappingTest2() -> testValidinhibitPolicyMappingTest2
    490:494:void testValidSelfIssuedinhibitAnyPolicyTest7() -> testValidSelfIssuedinhibitAnyPolicyTest7
    500:504:void testValidSeparateCertificateandCRLKeysTest19() -> testValidSeparateCertificateandCRLKeysTest19
    509:513:void testValidpathLenConstraintTest13() -> testValidpathLenConstraintTest13
    519:526:void testInvalidUnknownCRLExtensionTest10() -> testInvalidUnknownCRLExtensionTest10
    532:538:void testInvaliddistributionPointTest3() -> testInvaliddistributionPointTest3
    544:548:void testValiddistributionPointTest5() -> testValiddistributionPointTest5
    555:561:void testInvaliddistributionPointTest8() -> testInvaliddistributionPointTest8
    567:573:void testInvaliddistributionPointTest9() -> testInvaliddistributionPointTest9
    579:585:void testInvalidonlySomeReasonsTest17() -> testInvalidonlySomeReasonsTest17
    600:609:void doExceptionTest(java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String) -> a
    622:631:void doExceptionTest(java.lang.String,java.lang.String[],java.lang.String[],java.util.Set,int,java.lang.String) -> a
    644:654:void doExceptionTest(java.lang.String,java.lang.String[],java.lang.String[],int,java.lang.String,java.lang.String) -> a
    662:662:java.security.cert.PKIXCertPathValidatorResult doTest(java.lang.String,java.lang.String[],java.lang.String[]) -> a
    672:704:java.security.cert.PKIXCertPathValidatorResult doTest(java.lang.String,java.lang.String[],java.lang.String[],java.util.Set) -> a
    716:764:java.security.cert.PKIXCertPathBuilderResult doBuilderTest(java.lang.String,java.lang.String[],java.lang.String[],java.util.Set,boolean,boolean) -> a
    771:792:java.security.cert.X509Certificate loadCert(java.lang.String) -> a
    800:821:java.security.cert.X509CRL loadCrl(java.lang.String) -> b
    828:838:java.security.cert.TrustAnchor getTrustAnchor(java.lang.String) -> c
    843:850:java.lang.String getPkitsHome() -> a
    856:857:void main(java.lang.String[]) -> main
    862:866:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.jce.provider.test.rsa3.RSA3CertTest -> org.sandrob.bouncycastle.jce.provider.test.rsa3.RSA3CertTest:
    17:17:void <init>() -> <init>
    22:26:void setUp() -> setUp
    31:32:void testA() -> testA
    37:38:void testB() -> testB
    43:44:void testC() -> testC
    49:50:void testD() -> testD
    55:56:void testE() -> testE
    61:62:void testF() -> testF
    67:68:void testG() -> testG
    73:74:void testH() -> testH
    79:80:void testI() -> testI
    85:86:void testJ() -> testJ
    91:92:void testL() -> testL
    98:107:void doTest(java.lang.String) -> a
    113:116:java.security.cert.X509Certificate loadCert(java.lang.String) -> b
    122:123:void main(java.lang.String[]) -> main
    128:132:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.jce.spec.ECKeySpec -> org.sandrob.bouncycastle.jce.spec.ECKeySpec:
    org.sandrob.bouncycastle.jce.spec.ECParameterSpec spec -> a
    13:17:void <init>(org.sandrob.bouncycastle.jce.spec.ECParameterSpec) -> <init>
    24:24:org.sandrob.bouncycastle.jce.spec.ECParameterSpec getParams() -> getParams
org.sandrob.bouncycastle.jce.spec.ECNamedCurveParameterSpec -> org.sandrob.bouncycastle.jce.spec.ECNamedCurveParameterSpec:
    java.lang.String name -> a
    25:28:void <init>(java.lang.String,org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> <init>
    37:40:void <init>(java.lang.String,org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger) -> <init>
    50:53:void <init>(java.lang.String,org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[]) -> <init>
    60:60:java.lang.String getName() -> getName
org.sandrob.bouncycastle.jce.spec.ECNamedCurveSpec -> org.sandrob.bouncycastle.jce.spec.ECNamedCurveSpec:
    java.lang.String name -> a
    24:43:java.security.spec.EllipticCurve convertCurve(org.sandrob.bouncycastle.math.ec.ECCurve,byte[]) -> a
    52:52:java.security.spec.ECPoint convertPoint(org.sandrob.bouncycastle.math.ec.ECPoint) -> a
    61:64:void <init>(java.lang.String,org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> <init>
    72:75:void <init>(java.lang.String,java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger) -> <init>
    84:87:void <init>(java.lang.String,org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger) -> <init>
    96:99:void <init>(java.lang.String,java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,java.math.BigInteger) -> <init>
    109:112:void <init>(java.lang.String,org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[]) -> <init>
    119:119:java.lang.String getName() -> getName
org.sandrob.bouncycastle.jce.spec.ECParameterSpec -> org.sandrob.bouncycastle.jce.spec.ECParameterSpec:
    org.sandrob.bouncycastle.math.ec.ECCurve curve -> a
    byte[] seed -> b
    org.sandrob.bouncycastle.math.ec.ECPoint G -> c
    java.math.BigInteger n -> d
    java.math.BigInteger h -> e
    21:31:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> <init>
    33:44:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger) -> <init>
    46:58:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[]) -> <init>
    66:66:org.sandrob.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    75:75:org.sandrob.bouncycastle.math.ec.ECPoint getG() -> getG
    84:84:java.math.BigInteger getN() -> getN
    93:93:java.math.BigInteger getH() -> getH
    102:102:byte[] getSeed() -> getSeed
    107:114:boolean equals(java.lang.Object) -> equals
    119:119:int hashCode() -> hashCode
org.sandrob.bouncycastle.jce.spec.ECPrivateKeySpec -> org.sandrob.bouncycastle.jce.spec.ECPrivateKeySpec:
    java.math.BigInteger d -> a
    23:26:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.jce.spec.ECParameterSpec) -> <init>
    33:33:java.math.BigInteger getD() -> getD
org.sandrob.bouncycastle.jce.spec.ECPublicKeySpec -> org.sandrob.bouncycastle.jce.spec.ECPublicKeySpec:
    org.sandrob.bouncycastle.math.ec.ECPoint q -> a
    23:26:void <init>(org.sandrob.bouncycastle.math.ec.ECPoint,org.sandrob.bouncycastle.jce.spec.ECParameterSpec) -> <init>
    33:33:org.sandrob.bouncycastle.math.ec.ECPoint getQ() -> getQ
org.sandrob.bouncycastle.jce.spec.ElGamalGenParameterSpec -> org.sandrob.bouncycastle.jce.spec.ElGamalGenParameterSpec:
    int primeSize -> a
    13:17:void <init>(int) -> <init>
    26:26:int getPrimeSize() -> getPrimeSize
org.sandrob.bouncycastle.jce.spec.ElGamalKeySpec -> org.sandrob.bouncycastle.jce.spec.ElGamalKeySpec:
    org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec spec -> a
    10:14:void <init>(org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec) -> <init>
    18:18:org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec getParams() -> getParams
org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec -> org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec:
    java.math.BigInteger p -> a
    java.math.BigInteger g -> b
    19:25:void <init>(java.math.BigInteger,java.math.BigInteger) -> <init>
    34:34:java.math.BigInteger getP() -> getP
    44:44:java.math.BigInteger getG() -> getG
org.sandrob.bouncycastle.jce.spec.ElGamalPrivateKeySpec -> org.sandrob.bouncycastle.jce.spec.ElGamalPrivateKeySpec:
    java.math.BigInteger x -> a
    19:22:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec) -> <init>
    31:31:java.math.BigInteger getX() -> getX
org.sandrob.bouncycastle.jce.spec.ElGamalPublicKeySpec -> org.sandrob.bouncycastle.jce.spec.ElGamalPublicKeySpec:
    java.math.BigInteger y -> a
    19:22:void <init>(java.math.BigInteger,org.sandrob.bouncycastle.jce.spec.ElGamalParameterSpec) -> <init>
    31:31:java.math.BigInteger getY() -> getY
org.sandrob.bouncycastle.jce.spec.GOST28147ParameterSpec -> org.sandrob.bouncycastle.jce.spec.GOST28147ParameterSpec:
    byte[] iv -> a
    byte[] sBox -> b
    13:22:void <init>(byte[]) -> <init>
    28:32:void <init>(byte[],byte[]) -> <init>
    13:38:void <init>(java.lang.String) -> <init>
    44:48:void <init>(java.lang.String,byte[]) -> <init>
    52:52:byte[] getSbox() -> getSbox
    62:71:byte[] getIV() -> getIV
org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec -> org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec:
    org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec keyParameters -> a
    java.lang.String keyParamSetOID -> b
    java.lang.String digestParamSetOID -> c
    java.lang.String encryptionParamSetOID -> d
    23:57:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    63:64:void <init>(java.lang.String,java.lang.String) -> <init>
    69:70:void <init>(java.lang.String) -> <init>
    72:78:void <init>(org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec) -> <init>
    82:82:java.lang.String getPublicKeyParamSetOID() -> getPublicKeyParamSetOID
    87:87:org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec getPublicKeyParameters() -> getPublicKeyParameters
    92:92:java.lang.String getDigestParamSetOID() -> getDigestParamSetOID
    97:97:java.lang.String getEncryptionParamSetOID() -> getEncryptionParamSetOID
    102:112:boolean equals(java.lang.Object) -> equals
    117:118:int hashCode() -> hashCode
    124:130:org.sandrob.bouncycastle.jce.spec.GOST3410ParameterSpec fromPublicKeyAlg(org.sandrob.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters) -> fromPublicKeyAlg
org.sandrob.bouncycastle.jce.spec.GOST3410PrivateKeySpec -> org.sandrob.bouncycastle.jce.spec.GOST3410PrivateKeySpec:
    java.math.BigInteger x -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    java.math.BigInteger a -> d
    26:33:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    41:41:java.math.BigInteger getX() -> getX
    50:50:java.math.BigInteger getP() -> getP
    59:59:java.math.BigInteger getQ() -> getQ
    68:68:java.math.BigInteger getA() -> getA
org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec -> org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec:
    java.math.BigInteger p -> a
    java.math.BigInteger q -> b
    java.math.BigInteger a -> c
    21:29:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    38:38:java.math.BigInteger getP() -> getP
    48:48:java.math.BigInteger getQ() -> getQ
    58:58:java.math.BigInteger getA() -> getA
    64:71:boolean equals(java.lang.Object) -> equals
    76:76:int hashCode() -> hashCode
org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeySpec -> org.sandrob.bouncycastle.jce.spec.GOST3410PublicKeySpec:
    java.math.BigInteger y -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    java.math.BigInteger a -> d
    27:37:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    46:46:java.math.BigInteger getY() -> getY
    56:56:java.math.BigInteger getP() -> getP
    66:66:java.math.BigInteger getQ() -> getQ
    76:76:java.math.BigInteger getA() -> getA
org.sandrob.bouncycastle.jce.spec.IEKeySpec -> org.sandrob.bouncycastle.jce.spec.IEKeySpec:
    java.security.PublicKey pubKey -> a
    java.security.PrivateKey privKey -> b
    23:29:void <init>(java.security.PrivateKey,java.security.PublicKey) -> <init>
    36:36:java.security.PublicKey getPublic() -> getPublic
    44:44:java.security.PrivateKey getPrivate() -> getPrivate
    52:52:java.lang.String getAlgorithm() -> getAlgorithm
    60:60:java.lang.String getFormat() -> getFormat
    68:68:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.spec.IESParameterSpec -> org.sandrob.bouncycastle.jce.spec.IESParameterSpec:
    byte[] derivation -> a
    byte[] encoding -> b
    int macKeySize -> c
    15:27:void <init>(byte[],byte[],int) -> <init>
    34:34:byte[] getDerivationV() -> getDerivationV
    42:42:byte[] getEncodingV() -> getEncodingV
    50:50:int getMacKeySize() -> getMacKeySize
org.sandrob.bouncycastle.jce.spec.MQVPrivateKeySpec -> org.sandrob.bouncycastle.jce.spec.MQVPrivateKeySpec:
    java.security.PrivateKey staticPrivateKey -> a
    java.security.PrivateKey ephemeralPrivateKey -> b
    java.security.PublicKey ephemeralPublicKey -> c
    28:29:void <init>(java.security.PrivateKey,java.security.PrivateKey) -> <init>
    36:44:void <init>(java.security.PrivateKey,java.security.PrivateKey,java.security.PublicKey) -> <init>
    51:51:java.security.PrivateKey getStaticPrivateKey() -> getStaticPrivateKey
    59:59:java.security.PrivateKey getEphemeralPrivateKey() -> getEphemeralPrivateKey
    67:67:java.security.PublicKey getEphemeralPublicKey() -> getEphemeralPublicKey
    75:75:java.lang.String getAlgorithm() -> getAlgorithm
    83:83:java.lang.String getFormat() -> getFormat
    91:91:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.jce.spec.MQVPublicKeySpec -> org.sandrob.bouncycastle.jce.spec.MQVPublicKeySpec:
    java.security.PublicKey staticKey -> a
    java.security.PublicKey ephemeralKey -> b
    21:27:void <init>(java.security.PublicKey,java.security.PublicKey) -> <init>
    34:34:java.security.PublicKey getStaticKey() -> getStaticKey
    42:42:java.security.PublicKey getEphemeralKey() -> getEphemeralKey
    50:50:java.lang.String getAlgorithm() -> getAlgorithm
    58:58:java.lang.String getFormat() -> getFormat
    66:66:byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.math.ec.ECAlgorithms -> org.sandrob.bouncycastle.math.ec.ECAlgorithms:
    5:5:void <init>() -> <init>
    10:26:org.sandrob.bouncycastle.math.ec.ECPoint sumOfTwoMultiplies(org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> sumOfTwoMultiplies
    51:56:org.sandrob.bouncycastle.math.ec.ECPoint shamirsTrick(org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> shamirsTrick
    62:90:org.sandrob.bouncycastle.math.ec.ECPoint implShamirsTrick(org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> a
org.sandrob.bouncycastle.math.ec.ECConstants -> org.sandrob.bouncycastle.math.ec.ECConstants:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    java.math.BigInteger THREE -> THREE
    java.math.BigInteger FOUR -> FOUR
    5:11:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.math.ec.ECCurve -> org.sandrob.bouncycastle.math.ec.ECCurve:
    org.sandrob.bouncycastle.math.ec.ECFieldElement a -> a
    org.sandrob.bouncycastle.math.ec.ECFieldElement b -> b
    9:9:void <init>() -> <init>
    int getFieldSize() -> getFieldSize
    org.sandrob.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.sandrob.bouncycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean) -> createPoint
    org.sandrob.bouncycastle.math.ec.ECPoint decodePoint(byte[]) -> decodePoint
    org.sandrob.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
    25:25:org.sandrob.bouncycastle.math.ec.ECFieldElement getA() -> getA
    30:30:org.sandrob.bouncycastle.math.ec.ECFieldElement getB() -> getB
org.sandrob.bouncycastle.math.ec.ECCurve$F2m -> org.sandrob.bouncycastle.math.ec.ECCurve$F2m:
    int m -> c
    int k1 -> d
    int k2 -> e
    int k3 -> f
    java.math.BigInteger n -> g
    java.math.BigInteger h -> h
    org.sandrob.bouncycastle.math.ec.ECPoint$F2m infinity -> i
    byte mu -> j
    java.math.BigInteger[] si -> k
    259:260:void <init>(int,int,java.math.BigInteger,java.math.BigInteger) -> <init>
    287:288:void <init>(int,int,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    318:319:void <init>(int,int,int,int,java.math.BigInteger,java.math.BigInteger) -> <init>
    230:389:void <init>(int,int,int,int,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    393:393:int getFieldSize() -> getFieldSize
    398:398:org.sandrob.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    403:403:org.sandrob.bouncycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean) -> createPoint
    411:459:org.sandrob.bouncycastle.math.ec.ECPoint decodePoint(byte[]) -> decodePoint
    464:464:org.sandrob.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
    473:476:boolean isKoblitz() -> isKoblitz
    487:491:byte getMu() -> a
    501:505:java.math.BigInteger[] getSi() -> b
    521:554:org.sandrob.bouncycastle.math.ec.ECPoint decompressPoint(byte[],int) -> a
    568:600:org.sandrob.bouncycastle.math.ec.ECFieldElement solveQuadradicEquation(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> a
    606:620:boolean equals(java.lang.Object) -> equals
    625:625:int hashCode() -> hashCode
    630:630:int getM() -> getM
    640:640:boolean isTrinomial() -> isTrinomial
    645:645:int getK1() -> getK1
    650:650:int getK2() -> getK2
    655:655:int getK3() -> getK3
    660:660:java.math.BigInteger getN() -> getN
    665:665:java.math.BigInteger getH() -> getH
org.sandrob.bouncycastle.math.ec.ECCurve$Fp -> org.sandrob.bouncycastle.math.ec.ECCurve$Fp:
    java.math.BigInteger q -> c
    org.sandrob.bouncycastle.math.ec.ECPoint$Fp infinity -> d
    41:47:void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> <init>
    51:51:java.math.BigInteger getQ() -> getQ
    56:56:int getFieldSize() -> getFieldSize
    61:61:org.sandrob.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    66:66:org.sandrob.bouncycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean) -> createPoint
    77:141:org.sandrob.bouncycastle.math.ec.ECPoint decodePoint(byte[]) -> decodePoint
    146:146:org.sandrob.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
    152:165:boolean equals(java.lang.Object) -> equals
    170:170:int hashCode() -> hashCode
org.sandrob.bouncycastle.math.ec.ECFieldElement -> org.sandrob.bouncycastle.math.ec.ECFieldElement:
    6:6:void <init>() -> <init>
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.sandrob.bouncycastle.math.ec.ECFieldElement add(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> add
    org.sandrob.bouncycastle.math.ec.ECFieldElement subtract(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.sandrob.bouncycastle.math.ec.ECFieldElement multiply(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.sandrob.bouncycastle.math.ec.ECFieldElement divide(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> divide
    org.sandrob.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.sandrob.bouncycastle.math.ec.ECFieldElement square() -> square
    org.sandrob.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.sandrob.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    24:24:java.lang.String toString() -> toString
org.sandrob.bouncycastle.math.ec.ECFieldElement$F2m -> org.sandrob.bouncycastle.math.ec.ECFieldElement$F2m:
    int GNB -> GNB
    int TPB -> TPB
    int PPB -> PPB
    int representation -> a
    int m -> b
    int k1 -> c
    int k2 -> d
    int k3 -> e
    org.sandrob.bouncycastle.math.ec.IntArray x -> f
    int t -> g
    855:894:void <init>(int,int,int,int,java.math.BigInteger) -> <init>
    908:909:void <init>(int,int,java.math.BigInteger) -> <init>
    911:929:void <init>(int,int,int,int,org.sandrob.bouncycastle.math.ec.IntArray) -> <init>
    933:933:java.math.BigInteger toBigInteger() -> toBigInteger
    938:938:java.lang.String getFieldName() -> getFieldName
    943:943:int getFieldSize() -> getFieldSize
    961:984:void checkFieldElements(org.sandrob.bouncycastle.math.ec.ECFieldElement,org.sandrob.bouncycastle.math.ec.ECFieldElement) -> checkFieldElements
    991:994:org.sandrob.bouncycastle.math.ec.ECFieldElement add(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> add
    1000:1000:org.sandrob.bouncycastle.math.ec.ECFieldElement subtract(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> subtract
    1012:1015:org.sandrob.bouncycastle.math.ec.ECFieldElement multiply(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> multiply
    1021:1022:org.sandrob.bouncycastle.math.ec.ECFieldElement divide(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> divide
    1028:1028:org.sandrob.bouncycastle.math.ec.ECFieldElement negate() -> negate
    1033:1035:org.sandrob.bouncycastle.math.ec.ECFieldElement square() -> square
    1046:1106:org.sandrob.bouncycastle.math.ec.ECFieldElement invert() -> invert
    1111:1111:org.sandrob.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    1124:1124:int getRepresentation() -> getRepresentation
    1133:1133:int getM() -> getM
    1146:1146:int getK1() -> getK1
    1157:1157:int getK2() -> getK2
    1168:1168:int getK3() -> getK3
    1173:1188:boolean equals(java.lang.Object) -> equals
    1193:1193:int hashCode() -> hashCode
org.sandrob.bouncycastle.math.ec.ECFieldElement$Fp -> org.sandrob.bouncycastle.math.ec.ECFieldElement$Fp:
    java.math.BigInteger x -> a
    java.math.BigInteger q -> b
    33:43:void <init>(java.math.BigInteger,java.math.BigInteger) -> <init>
    47:47:java.math.BigInteger toBigInteger() -> toBigInteger
    57:57:java.lang.String getFieldName() -> getFieldName
    62:62:int getFieldSize() -> getFieldSize
    67:67:java.math.BigInteger getQ() -> getQ
    72:72:org.sandrob.bouncycastle.math.ec.ECFieldElement add(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> add
    77:77:org.sandrob.bouncycastle.math.ec.ECFieldElement subtract(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> subtract
    82:82:org.sandrob.bouncycastle.math.ec.ECFieldElement multiply(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> multiply
    87:87:org.sandrob.bouncycastle.math.ec.ECFieldElement divide(org.sandrob.bouncycastle.math.ec.ECFieldElement) -> divide
    92:92:org.sandrob.bouncycastle.math.ec.ECFieldElement negate() -> negate
    97:97:org.sandrob.bouncycastle.math.ec.ECFieldElement square() -> square
    102:102:org.sandrob.bouncycastle.math.ec.ECFieldElement invert() -> invert
    112:176:org.sandrob.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    239:281:java.math.BigInteger[] lucasSequence(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> a
    286:297:boolean equals(java.lang.Object) -> equals
    302:302:int hashCode() -> hashCode
org.sandrob.bouncycastle.math.ec.ECMultiplier -> org.sandrob.bouncycastle.math.ec.a:
    org.sandrob.bouncycastle.math.ec.ECPoint multiply(org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.PreCompInfo) -> a
org.sandrob.bouncycastle.math.ec.ECPoint -> org.sandrob.bouncycastle.math.ec.ECPoint:
    org.sandrob.bouncycastle.math.ec.ECCurve curve -> a
    org.sandrob.bouncycastle.math.ec.ECFieldElement x -> b
    org.sandrob.bouncycastle.math.ec.ECFieldElement y -> c
    boolean withCompression -> withCompression
    org.sandrob.bouncycastle.math.ec.ECMultiplier multiplier -> multiplier
    org.sandrob.bouncycastle.math.ec.PreCompInfo preCompInfo -> preCompInfo
    org.sandrob.bouncycastle.asn1.x9.X9IntegerConverter converter -> d
    10:22:void <clinit>() -> <clinit>
    18:29:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECFieldElement,org.sandrob.bouncycastle.math.ec.ECFieldElement) -> <init>
    33:33:org.sandrob.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    38:38:org.sandrob.bouncycastle.math.ec.ECFieldElement getX() -> getX
    43:43:org.sandrob.bouncycastle.math.ec.ECFieldElement getY() -> getY
    48:48:boolean isInfinity() -> isInfinity
    53:53:boolean isCompressed() -> isCompressed
    59:76:boolean equals(java.lang.Object) -> equals
    81:86:int hashCode() -> hashCode
    108:109:void setPreCompInfo(org.sandrob.bouncycastle.math.ec.PreCompInfo) -> a
    byte[] getEncoded() -> getEncoded
    org.sandrob.bouncycastle.math.ec.ECPoint add(org.sandrob.bouncycastle.math.ec.ECPoint) -> add
    org.sandrob.bouncycastle.math.ec.ECPoint subtract(org.sandrob.bouncycastle.math.ec.ECPoint) -> subtract
    org.sandrob.bouncycastle.math.ec.ECPoint negate() -> negate
    org.sandrob.bouncycastle.math.ec.ECPoint twice() -> twice
    123:127:void assertECMultiplier() -> a
    136:152:org.sandrob.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger) -> multiply
    22:22:org.sandrob.bouncycastle.asn1.x9.X9IntegerConverter access$0() -> b
org.sandrob.bouncycastle.math.ec.ECPoint$F2m -> org.sandrob.bouncycastle.math.ec.ECPoint$F2m:
    341:342:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECFieldElement,org.sandrob.bouncycastle.math.ec.ECFieldElement) -> <init>
    352:372:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECFieldElement,org.sandrob.bouncycastle.math.ec.ECFieldElement,boolean) -> <init>
    379:422:byte[] getEncoded() -> getEncoded
    435:442:void checkPoints(org.sandrob.bouncycastle.math.ec.ECPoint,org.sandrob.bouncycastle.math.ec.ECPoint) -> a
    449:450:org.sandrob.bouncycastle.math.ec.ECPoint add(org.sandrob.bouncycastle.math.ec.ECPoint) -> add
    464:500:org.sandrob.bouncycastle.math.ec.ECPoint$F2m addSimple(org.sandrob.bouncycastle.math.ec.ECPoint$F2m) -> addSimple
    508:509:org.sandrob.bouncycastle.math.ec.ECPoint subtract(org.sandrob.bouncycastle.math.ec.ECPoint) -> subtract
    523:529:org.sandrob.bouncycastle.math.ec.ECPoint$F2m subtractSimple(org.sandrob.bouncycastle.math.ec.ECPoint$F2m) -> subtractSimple
    537:562:org.sandrob.bouncycastle.math.ec.ECPoint twice() -> twice
    567:567:org.sandrob.bouncycastle.math.ec.ECPoint negate() -> negate
    575:586:void assertECMultiplier() -> a
org.sandrob.bouncycastle.math.ec.ECPoint$Fp -> org.sandrob.bouncycastle.math.ec.ECPoint$Fp:
    170:171:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECFieldElement,org.sandrob.bouncycastle.math.ec.ECFieldElement) -> <init>
    183:191:void <init>(org.sandrob.bouncycastle.math.ec.ECCurve,org.sandrob.bouncycastle.math.ec.ECFieldElement,org.sandrob.bouncycastle.math.ec.ECFieldElement,boolean) -> <init>
    198:236:byte[] getEncoded() -> getEncoded
    243:271:org.sandrob.bouncycastle.math.ec.ECPoint add(org.sandrob.bouncycastle.math.ec.ECPoint) -> add
    277:297:org.sandrob.bouncycastle.math.ec.ECPoint twice() -> twice
    303:309:org.sandrob.bouncycastle.math.ec.ECPoint subtract(org.sandrob.bouncycastle.math.ec.ECPoint) -> subtract
    314:314:org.sandrob.bouncycastle.math.ec.ECPoint negate() -> negate
    322:326:void assertECMultiplier() -> a
org.sandrob.bouncycastle.math.ec.FpNafMultiplier -> org.sandrob.bouncycastle.math.ec.b:
    8:8:void <init>() -> <init>
    18:37:org.sandrob.bouncycastle.math.ec.ECPoint multiply(org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.PreCompInfo) -> a
org.sandrob.bouncycastle.math.ec.IntArray -> org.sandrob.bouncycastle.math.ec.c:
    int[] m_ints -> a
    13:16:void <init>(int) -> <init>
    18:21:void <init>(int[]) -> <init>
    28:94:void <init>(java.math.BigInteger,int) -> <init>
    98:99:boolean isZero() -> a
    104:129:int getUsedLength() -> b
    135:171:int bitLength() -> c
    176:180:int[] resizedInts(int) -> f
    185:220:java.math.BigInteger toBigInteger() -> d
    225:256:void shiftLeft() -> e
    260:287:org.sandrob.bouncycastle.math.ec.IntArray shiftLeft(int) -> a
    292:304:void addShifted(org.sandrob.bouncycastle.math.ec.IntArray,int) -> a
    308:308:int getLength() -> f
    314:318:boolean testBit(int) -> b
    324:329:void flipBit(int) -> c
    334:339:void setBit(int) -> d
    344:367:org.sandrob.bouncycastle.math.ec.IntArray multiply(org.sandrob.bouncycastle.math.ec.IntArray,int) -> b
    399:414:void reduce(int,int[]) -> a
    419:454:org.sandrob.bouncycastle.math.ec.IntArray square(int) -> e
    459:476:boolean equals(java.lang.Object) -> equals
    481:487:int hashCode() -> hashCode
    492:492:java.lang.Object clone() -> clone
    497:516:java.lang.String toString() -> toString
org.sandrob.bouncycastle.math.ec.PreCompInfo -> org.sandrob.bouncycastle.math.ec.d:
org.sandrob.bouncycastle.math.ec.SimpleBigDecimal -> org.sandrob.bouncycastle.math.ec.e:
    java.math.BigInteger bigInt -> a
    int scale -> b
    46:55:void <init>(java.math.BigInteger,int) -> <init>
    57:61:void <init>(org.sandrob.bouncycastle.math.ec.SimpleBigDecimal) -> <init>
    65:70:void checkScale(org.sandrob.bouncycastle.math.ec.SimpleBigDecimal) -> c
    74:85:org.sandrob.bouncycastle.math.ec.SimpleBigDecimal adjustScale(int) -> a
    90:91:org.sandrob.bouncycastle.math.ec.SimpleBigDecimal add(org.sandrob.bouncycastle.math.ec.SimpleBigDecimal) -> a
    101:101:org.sandrob.bouncycastle.math.ec.SimpleBigDecimal negate() -> a
    106:106:org.sandrob.bouncycastle.math.ec.SimpleBigDecimal subtract(org.sandrob.bouncycastle.math.ec.SimpleBigDecimal) -> b
    111:112:org.sandrob.bouncycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger) -> a
    151:151:int compareTo(java.math.BigInteger) -> b
    156:156:java.math.BigInteger floor() -> b
    161:162:java.math.BigInteger round() -> c
    187:187:int getScale() -> d
    192:229:java.lang.String toString() -> toString
    234:245:boolean equals(java.lang.Object) -> equals
    250:250:int hashCode() -> hashCode
org.sandrob.bouncycastle.math.ec.Tnaf -> org.sandrob.bouncycastle.math.ec.f:
    java.math.BigInteger MINUS_ONE -> e
    java.math.BigInteger MINUS_TWO -> f
    java.math.BigInteger MINUS_THREE -> g
    org.sandrob.bouncycastle.math.ec.ZTauElement[] alpha0 -> a
    byte[][] alpha0Tnaf -> b
    org.sandrob.bouncycastle.math.ec.ZTauElement[] alpha1 -> c
    byte[][] alpha1Tnaf -> d
    12:71:void <clinit>() -> <clinit>
    87:108:java.math.BigInteger norm(byte,org.sandrob.bouncycastle.math.ec.ZTauElement) -> a
    169:264:org.sandrob.bouncycastle.math.ec.ZTauElement round(org.sandrob.bouncycastle.math.ec.SimpleBigDecimal,org.sandrob.bouncycastle.math.ec.SimpleBigDecimal,byte) -> a
    286:303:org.sandrob.bouncycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte,int,int) -> a
    395:403:org.sandrob.bouncycastle.math.ec.ECPoint$F2m tau(org.sandrob.bouncycastle.math.ec.ECPoint$F2m) -> a
    418:434:byte getMu(org.sandrob.bouncycastle.math.ec.ECCurve$F2m) -> a
    453:495:java.math.BigInteger[] getLucas(byte,int,boolean) -> a
    508:530:java.math.BigInteger getTw(byte,int) -> a
    544:590:java.math.BigInteger[] getSi(org.sandrob.bouncycastle.math.ec.ECCurve$F2m) -> b
    611:638:org.sandrob.bouncycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger,int,byte,java.math.BigInteger[],byte,byte) -> a
    692:706:org.sandrob.bouncycastle.math.ec.ECPoint$F2m multiplyFromTnaf(org.sandrob.bouncycastle.math.ec.ECPoint$F2m,byte[]) -> a
    726:811:byte[] tauAdicWNaf(byte,org.sandrob.bouncycastle.math.ec.ZTauElement,byte,java.math.BigInteger,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.ZTauElement[]) -> a
    823:842:org.sandrob.bouncycastle.math.ec.ECPoint$F2m[] getPreComp(org.sandrob.bouncycastle.math.ec.ECPoint$F2m,byte) -> a
org.sandrob.bouncycastle.math.ec.WNafMultiplier -> org.sandrob.bouncycastle.math.ec.g:
    9:9:void <init>() -> <init>
    31:80:byte[] windowNaf(byte,java.math.BigInteger) -> a
    94:237:org.sandrob.bouncycastle.math.ec.ECPoint multiply(org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.PreCompInfo) -> a
org.sandrob.bouncycastle.math.ec.WNafPreCompInfo -> org.sandrob.bouncycastle.math.ec.h:
    org.sandrob.bouncycastle.math.ec.ECPoint[] preComp -> a
    org.sandrob.bouncycastle.math.ec.ECPoint twiceP -> b
    7:23:void <init>() -> <init>
    27:27:org.sandrob.bouncycastle.math.ec.ECPoint[] getPreComp() -> a
    32:33:void setPreComp(org.sandrob.bouncycastle.math.ec.ECPoint[]) -> a
    37:37:org.sandrob.bouncycastle.math.ec.ECPoint getTwiceP() -> b
    42:43:void setTwiceP(org.sandrob.bouncycastle.math.ec.ECPoint) -> a
org.sandrob.bouncycastle.math.ec.WTauNafMultiplier -> org.sandrob.bouncycastle.math.ec.i:
    9:9:void <init>() -> <init>
    21:37:org.sandrob.bouncycastle.math.ec.ECPoint multiply(org.sandrob.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.sandrob.bouncycastle.math.ec.PreCompInfo) -> a
    54:69:org.sandrob.bouncycastle.math.ec.ECPoint$F2m multiplyWTnaf(org.sandrob.bouncycastle.math.ec.ECPoint$F2m,org.sandrob.bouncycastle.math.ec.ZTauElement,org.sandrob.bouncycastle.math.ec.PreCompInfo,byte,byte) -> a
    84:117:org.sandrob.bouncycastle.math.ec.ECPoint$F2m multiplyFromWTnaf(org.sandrob.bouncycastle.math.ec.ECPoint$F2m,byte[],org.sandrob.bouncycastle.math.ec.PreCompInfo) -> a
org.sandrob.bouncycastle.math.ec.WTauNafPreCompInfo -> org.sandrob.bouncycastle.math.ec.j:
    org.sandrob.bouncycastle.math.ec.ECPoint$F2m[] preComp -> a
    15:27:void <init>(org.sandrob.bouncycastle.math.ec.ECPoint$F2m[]) -> <init>
    37:37:org.sandrob.bouncycastle.math.ec.ECPoint$F2m[] getPreComp() -> a
org.sandrob.bouncycastle.math.ec.ZTauElement -> org.sandrob.bouncycastle.math.ec.k:
    java.math.BigInteger u -> a
    java.math.BigInteger v -> b
    32:36:void <init>(java.math.BigInteger,java.math.BigInteger) -> <init>
org.sandrob.bouncycastle.mozilla.SignedPublicKeyAndChallenge -> org.sandrob.bouncycastle.mozilla.SignedPublicKeyAndChallenge:
    org.sandrob.bouncycastle.asn1.ASN1Sequence spkacSeq -> a
    org.sandrob.bouncycastle.asn1.mozilla.PublicKeyAndChallenge pkac -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> c
    org.sandrob.bouncycastle.asn1.DERBitString signature -> d
    47:54:org.sandrob.bouncycastle.asn1.ASN1Sequence toDERSequence(byte[]) -> a
    63:70:void <init>(byte[]) -> <init>
    74:74:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
    79:79:org.sandrob.bouncycastle.asn1.mozilla.PublicKeyAndChallenge getPublicKeyAndChallenge() -> getPublicKeyAndChallenge
    86:86:boolean verify() -> verify
    93:107:boolean verify(java.lang.String) -> verify
    114:131:java.security.PublicKey getPublicKey(java.lang.String) -> getPublicKey
org.sandrob.bouncycastle.ocsp.BasicOCSPResp -> org.sandrob.bouncycastle.ocsp.BasicOCSPResp:
    org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse resp -> a
    org.sandrob.bouncycastle.asn1.ocsp.ResponseData data -> b
    java.security.cert.X509Certificate[] chain -> c
    49:56:void <init>(org.sandrob.bouncycastle.asn1.ocsp.BasicOCSPResponse) -> <init>
    68:72:byte[] getTBSResponseData() -> getTBSResponseData
    78:78:int getVersion() -> getVersion
    83:83:org.sandrob.bouncycastle.ocsp.RespID getResponderId() -> getResponderId
    90:94:java.util.Date getProducedAt() -> getProducedAt
    100:108:org.sandrob.bouncycastle.ocsp.SingleResp[] getResponses() -> getResponses
    113:113:org.sandrob.bouncycastle.asn1.x509.X509Extensions getResponseExtensions() -> getResponseExtensions
    124:130:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    135:154:java.util.Set getExtensionOIDs(boolean) -> a
    159:159:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    164:164:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    169:188:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    193:193:java.lang.String getSignatureAlgName() -> getSignatureAlgName
    198:198:java.lang.String getSignatureAlgOID() -> getSignatureAlgOID
    208:208:org.sandrob.bouncycastle.ocsp.RespData getResponseData() -> getResponseData
    213:213:byte[] getSignature() -> getSignature
    220:267:java.util.List getCertList(java.lang.String) -> a
    274:276:java.security.cert.X509Certificate[] getCerts(java.lang.String) -> getCerts
    295:300:java.security.cert.CertStore getCertificates(java.lang.String,java.lang.String) -> getCertificates
    314:329:boolean verify(java.security.PublicKey,java.lang.String) -> verify
    339:339:byte[] getEncoded() -> getEncoded
    344:356:boolean equals(java.lang.Object) -> equals
    361:361:int hashCode() -> hashCode
org.sandrob.bouncycastle.ocsp.BasicOCSPRespGenerator -> org.sandrob.bouncycastle.ocsp.BasicOCSPRespGenerator:
    java.util.List list -> a
    org.sandrob.bouncycastle.asn1.x509.X509Extensions responseExtensions -> b
    org.sandrob.bouncycastle.ocsp.RespID responderID -> c
    41:114:void <init>(org.sandrob.bouncycastle.ocsp.RespID) -> <init>
    41:124:void <init>(java.security.PublicKey) -> <init>
    136:137:void addResponse(org.sandrob.bouncycastle.ocsp.CertificateID,org.sandrob.bouncycastle.ocsp.CertificateStatus) -> addResponse
    151:152:void addResponse(org.sandrob.bouncycastle.ocsp.CertificateID,org.sandrob.bouncycastle.ocsp.CertificateStatus,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> addResponse
    168:169:void addResponse(org.sandrob.bouncycastle.ocsp.CertificateID,org.sandrob.bouncycastle.ocsp.CertificateStatus,java.util.Date,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> addResponse
    187:188:void addResponse(org.sandrob.bouncycastle.ocsp.CertificateID,org.sandrob.bouncycastle.ocsp.CertificateStatus,java.util.Date,java.util.Date,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> addResponse
    198:199:void setResponseExtensions(org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> setResponseExtensions
    210:301:org.sandrob.bouncycastle.ocsp.BasicOCSPResp generateResponse(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate[],java.util.Date,java.lang.String,java.security.SecureRandom) -> a
    312:312:org.sandrob.bouncycastle.ocsp.BasicOCSPResp generate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate[],java.util.Date,java.lang.String) -> generate
    324:329:org.sandrob.bouncycastle.ocsp.BasicOCSPResp generate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate[],java.util.Date,java.lang.String,java.security.SecureRandom) -> generate
    339:339:java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.sandrob.bouncycastle.ocsp.BasicOCSPRespGenerator$ResponseObject -> org.sandrob.bouncycastle.ocsp.BasicOCSPRespGenerator$a:
    org.sandrob.bouncycastle.ocsp.CertificateID certId -> a
    org.sandrob.bouncycastle.asn1.ocsp.CertStatus certStatus -> b
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime thisUpdate -> c
    org.sandrob.bouncycastle.asn1.DERGeneralizedTime nextUpdate -> d
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> e
    org.sandrob.bouncycastle.ocsp.BasicOCSPRespGenerator this$0 -> f
    53:98:void <init>(org.sandrob.bouncycastle.ocsp.BasicOCSPRespGenerator,org.sandrob.bouncycastle.ocsp.CertificateID,org.sandrob.bouncycastle.ocsp.CertificateStatus,java.util.Date,java.util.Date,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    103:103:org.sandrob.bouncycastle.asn1.ocsp.SingleResponse toResponse() -> a
org.sandrob.bouncycastle.ocsp.CertificateID -> org.sandrob.bouncycastle.ocsp.CertificateID:
    java.lang.String HASH_SHA1 -> HASH_SHA1
    org.sandrob.bouncycastle.asn1.ocsp.CertID id -> a
    26:34:void <init>(org.sandrob.bouncycastle.asn1.ocsp.CertID) -> <init>
    47:58:void <init>(java.lang.String,java.security.cert.X509Certificate,java.math.BigInteger,java.lang.String) -> <init>
    69:70:void <init>(java.lang.String,java.security.cert.X509Certificate,java.math.BigInteger) -> <init>
    74:74:java.lang.String getHashAlgOID() -> getHashAlgOID
    79:79:byte[] getIssuerNameHash() -> getIssuerNameHash
    84:84:byte[] getIssuerKeyHash() -> getIssuerKeyHash
    93:93:java.math.BigInteger getSerialNumber() -> getSerialNumber
    99:100:boolean matchesIssuer(java.security.cert.X509Certificate,java.lang.String) -> matchesIssuer
    105:105:org.sandrob.bouncycastle.asn1.ocsp.CertID toASN1Object() -> toASN1Object
    111:118:boolean equals(java.lang.Object) -> equals
    123:123:int hashCode() -> hashCode
    137:137:org.sandrob.bouncycastle.ocsp.CertificateID deriveCertificateID(org.sandrob.bouncycastle.ocsp.CertificateID,java.math.BigInteger) -> deriveCertificateID
    146:167:org.sandrob.bouncycastle.asn1.ocsp.CertID createCertID(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,java.security.cert.X509Certificate,org.sandrob.bouncycastle.asn1.DERInteger,java.lang.String) -> a
org.sandrob.bouncycastle.ocsp.CertificateStatus -> org.sandrob.bouncycastle.ocsp.CertificateStatus:
    org.sandrob.bouncycastle.ocsp.CertificateStatus GOOD -> GOOD
    3:5:void <clinit>() -> <clinit>
org.sandrob.bouncycastle.ocsp.OCSPException -> org.sandrob.bouncycastle.ocsp.OCSPException:
    java.lang.Exception e -> a
    11:12:void <init>(java.lang.String) -> <init>
    18:21:void <init>(java.lang.String,java.lang.Exception) -> <init>
    25:25:java.lang.Exception getUnderlyingException() -> getUnderlyingException
    30:30:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.ocsp.OCSPReq -> org.sandrob.bouncycastle.ocsp.OCSPReq:
    org.sandrob.bouncycastle.asn1.ocsp.OCSPRequest req -> a
    70:74:void <init>(org.sandrob.bouncycastle.asn1.ocsp.OCSPRequest) -> <init>
    80:81:void <init>(byte[]) -> <init>
    87:88:void <init>(java.io.InputStream) -> <init>
    90:106:void <init>(org.sandrob.bouncycastle.asn1.ASN1InputStream) -> <init>
    118:122:byte[] getTBSRequest() -> getTBSRequest
    128:128:int getVersion() -> getVersion
    133:133:org.sandrob.bouncycastle.asn1.x509.GeneralName getRequestorName() -> getRequestorName
    138:146:org.sandrob.bouncycastle.ocsp.Req[] getRequestList() -> getRequestList
    151:151:org.sandrob.bouncycastle.asn1.x509.X509Extensions getRequestExtensions() -> getRequestExtensions
    159:164:java.lang.String getSignatureAlgOID() -> getSignatureAlgOID
    169:174:byte[] getSignature() -> getSignature
    181:228:java.util.List getCertList(java.lang.String) -> a
    235:242:java.security.cert.X509Certificate[] getCerts(java.lang.String) -> getCerts
    261:273:java.security.cert.CertStore getCertificates(java.lang.String,java.lang.String) -> getCertificates
    284:284:boolean isSigned() -> isSigned
    295:322:boolean verify(java.security.PublicKey,java.lang.String) -> verify
    332:337:byte[] getEncoded() -> getEncoded
    348:354:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    359:378:java.util.Set getExtensionOIDs(boolean) -> a
    383:383:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    388:388:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    393:412:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
org.sandrob.bouncycastle.ocsp.OCSPReqGenerator -> org.sandrob.bouncycastle.ocsp.OCSPReqGenerator:
    java.util.List list -> a
    org.sandrob.bouncycastle.asn1.x509.GeneralName requestorName -> b
    org.sandrob.bouncycastle.asn1.x509.X509Extensions requestExtensions -> c
    35:39:void <init>() -> <init>
    69:70:void addRequest(org.sandrob.bouncycastle.ocsp.CertificateID) -> addRequest
    82:83:void addRequest(org.sandrob.bouncycastle.ocsp.CertificateID,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> addRequest
    95:101:void setRequestorName(javax.security.auth.x500.X500Principal) -> setRequestorName
    106:107:void setRequestorName(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> setRequestorName
    112:113:void setRequestExtensions(org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> setRequestExtensions
    123:221:org.sandrob.bouncycastle.ocsp.OCSPReq generateRequest(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.security.PrivateKey,java.security.cert.X509Certificate[],java.lang.String,java.security.SecureRandom) -> a
    235:242:org.sandrob.bouncycastle.ocsp.OCSPReq generate() -> generate
    253:253:org.sandrob.bouncycastle.ocsp.OCSPReq generate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate[],java.lang.String) -> generate
    264:277:org.sandrob.bouncycastle.ocsp.OCSPReq generate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate[],java.lang.String,java.security.SecureRandom) -> generate
    288:288:java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.sandrob.bouncycastle.ocsp.OCSPReqGenerator$RequestObject -> org.sandrob.bouncycastle.ocsp.OCSPReqGenerator$a:
    org.sandrob.bouncycastle.ocsp.CertificateID certId -> a
    org.sandrob.bouncycastle.asn1.x509.X509Extensions extensions -> b
    org.sandrob.bouncycastle.ocsp.OCSPReqGenerator this$0 -> c
    46:52:void <init>(org.sandrob.bouncycastle.ocsp.OCSPReqGenerator,org.sandrob.bouncycastle.ocsp.CertificateID,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> <init>
    57:57:org.sandrob.bouncycastle.asn1.ocsp.Request toRequest() -> a
org.sandrob.bouncycastle.ocsp.OCSPResp -> org.sandrob.bouncycastle.ocsp.OCSPResp:
    org.sandrob.bouncycastle.asn1.ocsp.OCSPResponse resp -> a
    17:21:void <init>(org.sandrob.bouncycastle.asn1.ocsp.OCSPResponse) -> <init>
    27:28:void <init>(byte[]) -> <init>
    34:35:void <init>(java.io.InputStream) -> <init>
    37:53:void <init>(org.sandrob.bouncycastle.asn1.ASN1InputStream) -> <init>
    57:57:int getStatus() -> getStatus
    63:83:java.lang.Object getResponseObject() -> getResponseObject
    92:92:byte[] getEncoded() -> getEncoded
    97:109:boolean equals(java.lang.Object) -> equals
    114:114:int hashCode() -> hashCode
org.sandrob.bouncycastle.ocsp.OCSPRespGenerator -> org.sandrob.bouncycastle.ocsp.OCSPRespGenerator:
    int SUCCESSFUL -> SUCCESSFUL
    int MALFORMED_REQUEST -> MALFORMED_REQUEST
    int INTERNAL_ERROR -> INTERNAL_ERROR
    int TRY_LATER -> TRY_LATER
    int SIG_REQUIRED -> SIG_REQUIRED
    int UNAUTHORIZED -> UNAUTHORIZED
    12:12:void <init>() -> <init>
    27:52:org.sandrob.bouncycastle.ocsp.OCSPResp generate(int,java.lang.Object) -> generate
org.sandrob.bouncycastle.ocsp.OCSPRespStatus -> org.sandrob.bouncycastle.ocsp.OCSPRespStatus:
    int SUCCESSFUL -> SUCCESSFUL
    int MALFORMED_REQUEST -> MALFORMED_REQUEST
    int INTERNAL_ERROR -> INTERNAL_ERROR
    int TRY_LATER -> TRY_LATER
    int SIGREQUIRED -> SIGREQUIRED
    int UNAUTHORIZED -> UNAUTHORIZED
org.sandrob.bouncycastle.ocsp.OCSPUtil -> org.sandrob.bouncycastle.ocsp.a:
    java.util.Hashtable algorithms -> a
    java.util.Hashtable oids -> b
    java.util.Set noParams -> c
    30:102:void <clinit>() -> <clinit>
    108:115:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getAlgorithmOID(java.lang.String) -> a
    121:126:java.lang.String getAlgorithmName(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    132:138:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSigAlgID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> b
    144:152:java.util.Iterator getAlgNames() -> a
    158:163:java.security.cert.CertStore createCertStoreInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String) -> a
    169:174:java.security.MessageDigest createDigestInstance(java.lang.String,java.lang.String) -> a
    180:185:java.security.Signature createSignatureInstance(java.lang.String,java.lang.String) -> b
    191:196:java.security.cert.CertificateFactory createX509CertificateFactory(java.lang.String) -> b
org.sandrob.bouncycastle.ocsp.Req -> org.sandrob.bouncycastle.ocsp.Req:
    org.sandrob.bouncycastle.asn1.ocsp.Request req -> a
    18:22:void <init>(org.sandrob.bouncycastle.asn1.ocsp.Request) -> <init>
    26:26:org.sandrob.bouncycastle.ocsp.CertificateID getCertID() -> getCertID
    31:31:org.sandrob.bouncycastle.asn1.x509.X509Extensions getSingleRequestExtensions() -> getSingleRequestExtensions
    42:48:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    53:72:java.util.Set getExtensionOIDs(boolean) -> a
    77:77:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    82:82:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    87:106:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
org.sandrob.bouncycastle.ocsp.RespData -> org.sandrob.bouncycastle.ocsp.RespData:
    org.sandrob.bouncycastle.asn1.ocsp.ResponseData data -> a
    22:26:void <init>(org.sandrob.bouncycastle.asn1.ocsp.ResponseData) -> <init>
    30:30:int getVersion() -> getVersion
    35:35:org.sandrob.bouncycastle.ocsp.RespID getResponderId() -> getResponderId
    42:46:java.util.Date getProducedAt() -> getProducedAt
    52:60:org.sandrob.bouncycastle.ocsp.SingleResp[] getResponses() -> getResponses
    65:65:org.sandrob.bouncycastle.asn1.x509.X509Extensions getResponseExtensions() -> getResponseExtensions
    76:82:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    87:106:java.util.Set getExtensionOIDs(boolean) -> a
    111:111:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    116:116:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    121:140:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
org.sandrob.bouncycastle.ocsp.RespID -> org.sandrob.bouncycastle.ocsp.RespID:
    org.sandrob.bouncycastle.asn1.ocsp.ResponderID id -> a
    22:26:void <init>(org.sandrob.bouncycastle.asn1.ocsp.ResponderID) -> <init>
    28:32:void <init>(javax.security.auth.x500.X500Principal) -> <init>
    34:56:void <init>(java.security.PublicKey) -> <init>
    60:60:org.sandrob.bouncycastle.asn1.ocsp.ResponderID toASN1Object() -> toASN1Object
    66:73:boolean equals(java.lang.Object) -> equals
    78:78:int hashCode() -> hashCode
org.sandrob.bouncycastle.ocsp.RevokedStatus -> org.sandrob.bouncycastle.ocsp.RevokedStatus:
    org.sandrob.bouncycastle.asn1.ocsp.RevokedInfo info -> a
    18:22:void <init>(org.sandrob.bouncycastle.asn1.ocsp.RevokedInfo) -> <init>
    24:29:void <init>(java.util.Date,int) -> <init>
    35:39:java.util.Date getRevocationTime() -> getRevocationTime
    45:45:boolean hasRevocationReason() -> hasRevocationReason
    56:61:int getRevocationReason() -> getRevocationReason
org.sandrob.bouncycastle.ocsp.SingleResp -> org.sandrob.bouncycastle.ocsp.SingleResp:
    org.sandrob.bouncycastle.asn1.ocsp.SingleResponse resp -> a
    22:26:void <init>(org.sandrob.bouncycastle.asn1.ocsp.SingleResponse) -> <init>
    30:30:org.sandrob.bouncycastle.ocsp.CertificateID getCertID() -> getCertID
    40:51:java.lang.Object getCertStatus() -> getCertStatus
    58:62:java.util.Date getThisUpdate() -> getThisUpdate
    74:85:java.util.Date getNextUpdate() -> getNextUpdate
    91:91:org.sandrob.bouncycastle.asn1.x509.X509Extensions getSingleExtensions() -> getSingleExtensions
    102:104:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    109:128:java.util.Set getExtensionOIDs(boolean) -> a
    133:133:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    138:138:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    143:162:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
org.sandrob.bouncycastle.ocsp.UnknownStatus -> org.sandrob.bouncycastle.ocsp.UnknownStatus:
    9:11:void <init>() -> <init>
org.sandrob.bouncycastle.ocsp.test.AllTests -> org.sandrob.bouncycastle.ocsp.test.AllTests:
    12:12:void <init>() -> <init>
    17:30:void testOCSP() -> testOCSP
    34:35:void main(java.lang.String[]) -> main
    39:43:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.ocsp.test.OCSPTest -> org.sandrob.bouncycastle.ocsp.test.OCSPTest:
    byte[] testResp1 -> a
    byte[] testResp2 -> b
    byte[] irregReq -> c
    37:133:void <clinit>() -> <clinit>
    37:76:void <init>() -> <init>
    224:224:java.lang.String getName() -> getName
    230:413:void testECDSA() -> a
    418:606:void testRSA() -> b
    611:617:void testIrregularVersionReq() -> c
    622:858:void performTest() -> performTest
    863:866:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.ocsp.test.OCSPTestUtil -> org.sandrob.bouncycastle.ocsp.test.OCSPTestUtil:
    java.security.SecureRandom rand -> rand
    java.security.KeyPairGenerator kpg -> kpg
    java.security.KeyPairGenerator eckpg -> eckpg
    javax.crypto.KeyGenerator desede128kg -> desede128kg
    javax.crypto.KeyGenerator desede192kg -> desede192kg
    javax.crypto.KeyGenerator rc240kg -> rc240kg
    javax.crypto.KeyGenerator rc264kg -> rc264kg
    javax.crypto.KeyGenerator rc2128kg -> rc2128kg
    java.math.BigInteger serialNumber -> serialNumber
    boolean DEBUG -> DEBUG
    27:57:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    63:63:java.security.KeyPair makeKeyPair() -> makeKeyPair
    68:68:java.security.KeyPair makeECKeyPair() -> makeECKeyPair
    76:76:java.security.cert.X509Certificate makeCertificate(java.security.KeyPair,java.lang.String,java.security.KeyPair,java.lang.String) -> makeCertificate
    84:84:java.security.cert.X509Certificate makeECDSACertificate(java.security.KeyPair,java.lang.String,java.security.KeyPair,java.lang.String) -> makeECDSACertificate
    92:92:java.security.cert.X509Certificate makeCACertificate(java.security.KeyPair,java.lang.String,java.security.KeyPair,java.lang.String) -> makeCACertificate
    99:99:java.security.cert.X509Certificate makeCertificate(java.security.KeyPair,java.lang.String,java.security.KeyPair,java.lang.String,boolean) -> makeCertificate
    106:106:java.security.cert.X509Certificate makeECDSACertificate(java.security.KeyPair,java.lang.String,java.security.KeyPair,java.lang.String,boolean) -> makeECDSACertificate
    114:144:java.security.cert.X509Certificate makeCertificate(java.security.KeyPair,java.lang.String,java.security.KeyPair,java.lang.String,java.lang.String,boolean) -> makeCertificate
    157:162:org.sandrob.bouncycastle.asn1.x509.AuthorityKeyIdentifier createAuthorityKeyId(java.security.PublicKey) -> a
    169:173:org.sandrob.bouncycastle.asn1.x509.SubjectKeyIdentifier createSubjectKeyId(java.security.PublicKey) -> b
    178:180:java.math.BigInteger allocateSerialNumber() -> a
org.sandrob.bouncycastle.openssl.EncryptionException -> org.sandrob.bouncycastle.openssl.EncryptionException:
    java.lang.Throwable cause -> a
    12:13:void <init>(java.lang.String) -> <init>
    17:19:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    23:23:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.openssl.MiscPEMGenerator -> org.sandrob.bouncycastle.openssl.MiscPEMGenerator:
    java.lang.Object obj -> a
    java.lang.String algorithm -> b
    char[] password -> c
    java.security.SecureRandom random -> d
    java.security.Provider provider -> e
    55:58:void <init>(java.lang.Object) -> <init>
    60:72:void <init>(java.lang.Object,java.lang.String,char[],java.security.SecureRandom,java.security.Provider) -> <init>
    74:95:void <init>(java.lang.Object,java.lang.String,char[],java.security.SecureRandom,java.lang.String) -> <init>
    103:207:org.sandrob.bouncycastle.util.io.pem.PemObject createPemObject(java.lang.Object) -> a
    213:222:java.lang.String getHexEncoded(byte[]) -> a
    232:315:org.sandrob.bouncycastle.util.io.pem.PemObject createPemObject(java.lang.Object,java.lang.String,char[],java.security.SecureRandom) -> a
    323:332:org.sandrob.bouncycastle.util.io.pem.PemObject generate() -> generate
org.sandrob.bouncycastle.openssl.PEMException -> org.sandrob.bouncycastle.openssl.PEMException:
    java.lang.Exception underlying -> a
    13:14:void <init>(java.lang.String) -> <init>
    20:22:void <init>(java.lang.String,java.lang.Exception) -> <init>
    26:26:java.lang.Exception getUnderlyingException() -> getUnderlyingException
    32:32:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.openssl.PEMReader -> org.sandrob.bouncycastle.openssl.PEMReader:
    java.util.Map parsers -> a
    org.sandrob.bouncycastle.openssl.PasswordFinder pFinder -> b
    86:87:void <init>(java.io.Reader) -> <init>
    99:100:void <init>(java.io.Reader,org.sandrob.bouncycastle.openssl.PasswordFinder) -> <init>
    114:115:void <init>(java.io.Reader,org.sandrob.bouncycastle.openssl.PasswordFinder,java.lang.String) -> <init>
    73:151:void <init>(java.io.Reader,org.sandrob.bouncycastle.openssl.PasswordFinder,java.lang.String,java.lang.String) -> <init>
    156:171:java.lang.Object readObject() -> readObject
    75:75:org.sandrob.bouncycastle.openssl.PasswordFinder access$0(org.sandrob.bouncycastle.openssl.PEMReader) -> a
org.sandrob.bouncycastle.openssl.PEMReader$DSAKeyPairParser -> org.sandrob.bouncycastle.openssl.PEMReader$a:
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    268:270:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    277:311:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$ECDSAKeyPairParser -> org.sandrob.bouncycastle.openssl.PEMReader$b:
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    320:322:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    329:354:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$ECNamedCurveSpecParser -> org.sandrob.bouncycastle.openssl.PEMReader$c:
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    631:631:void <init>(org.sandrob.bouncycastle.openssl.PEMReader) -> <init>
    639:656:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
    631:631:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,org.sandrob.bouncycastle.openssl.PEMReader$ECNamedCurveSpecParser) -> <init>
org.sandrob.bouncycastle.openssl.PEMReader$EncryptedPrivateKeyParser -> org.sandrob.bouncycastle.openssl.PEMReader$d:
    java.lang.String symProvider -> b
    java.lang.String asymProvider -> c
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    667:671:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String,java.lang.String) -> <init>
    684:771:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$KeyPairParser -> org.sandrob.bouncycastle.openssl.PEMReader$e:
    java.lang.String provider -> b
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> c
    179:182:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    191:258:org.sandrob.bouncycastle.asn1.ASN1Sequence readKeyPair(org.sandrob.bouncycastle.util.io.pem.PemObject) -> a
org.sandrob.bouncycastle.openssl.PEMReader$PKCS10CertificationRequestParser -> org.sandrob.bouncycastle.openssl.PEMReader$f:
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    572:572:void <init>(org.sandrob.bouncycastle.openssl.PEMReader) -> <init>
    586:590:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
    572:572:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,org.sandrob.bouncycastle.openssl.PEMReader$PKCS10CertificationRequestParser) -> <init>
org.sandrob.bouncycastle.openssl.PEMReader$PKCS7Parser -> org.sandrob.bouncycastle.openssl.PEMReader$g:
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    595:595:void <init>(org.sandrob.bouncycastle.openssl.PEMReader) -> <init>
    610:616:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
    595:595:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,org.sandrob.bouncycastle.openssl.PEMReader$PKCS7Parser) -> <init>
org.sandrob.bouncycastle.openssl.PEMReader$PrivateKeyParser -> org.sandrob.bouncycastle.openssl.PEMReader$h:
    java.lang.String provider -> b
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    781:784:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    791:800:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$PublicKeyParser -> org.sandrob.bouncycastle.openssl.PEMReader$i:
    java.lang.String provider -> b
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    422:425:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    430:455:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$RSAKeyPairParser -> org.sandrob.bouncycastle.openssl.PEMReader$j:
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    363:365:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    372:412:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$RSAPublicKeyParser -> org.sandrob.bouncycastle.openssl.PEMReader$k:
    java.lang.String provider -> b
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    464:467:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    474:497:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$X509AttributeCertificateParser -> org.sandrob.bouncycastle.openssl.PEMReader$l:
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    621:621:void <init>(org.sandrob.bouncycastle.openssl.PEMReader) -> <init>
    627:627:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
    621:621:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,org.sandrob.bouncycastle.openssl.PEMReader$X509AttributeCertificateParser) -> <init>
org.sandrob.bouncycastle.openssl.PEMReader$X509CRLParser -> org.sandrob.bouncycastle.openssl.PEMReader$m:
    java.lang.String provider -> b
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    542:545:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    556:567:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMReader$X509CertificateParser -> org.sandrob.bouncycastle.openssl.PEMReader$n:
    java.lang.String provider -> b
    org.sandrob.bouncycastle.openssl.PEMReader this$0 -> a
    507:510:void <init>(org.sandrob.bouncycastle.openssl.PEMReader,java.lang.String) -> <init>
    521:532:java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.openssl.PEMUtilities -> org.sandrob.bouncycastle.openssl.a:
    java.util.Map KEYSIZES -> a
    java.util.Set PKCS5_SCHEME_1 -> b
    java.util.Set PKCS5_SCHEME_2 -> c
    27:51:void <clinit>() -> <clinit>
    56:61:int getKeySize(java.lang.String) -> a
    66:66:boolean isPKCS5Scheme1(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> a
    71:71:boolean isPKCS5Scheme2(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> b
    76:76:boolean isPKCS12(org.sandrob.bouncycastle.asn1.DERObjectIdentifier) -> c
    81:88:javax.crypto.SecretKey generateSecretKeyForPKCS5Scheme2(java.lang.String,char[],byte[],int) -> a
    100:110:byte[] crypt(boolean,java.lang.String,byte[],char[],java.lang.String,byte[]) -> a
    122:244:byte[] crypt(boolean,java.security.Provider,byte[],char[],java.lang.String,byte[]) -> a
    254:254:javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[]) -> a
    264:276:javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[],boolean) -> a
org.sandrob.bouncycastle.openssl.PEMWriter -> org.sandrob.bouncycastle.openssl.PEMWriter:
    java.lang.String provider -> a
    27:28:void <init>(java.io.Writer) -> <init>
    34:37:void <init>(java.io.Writer,java.lang.String) -> <init>
    45:56:void writeObject(java.lang.Object) -> writeObject
    62:63:void writeObject(org.sandrob.bouncycastle.util.io.pem.PemObjectGenerator) -> writeObject
    74:80:void writeObject(java.lang.Object,java.lang.String,char[],java.security.SecureRandom) -> writeObject
org.sandrob.bouncycastle.openssl.PKCS8Generator -> org.sandrob.bouncycastle.openssl.PKCS8Generator:
    java.lang.String AES_128_CBC -> AES_128_CBC
    java.lang.String AES_192_CBC -> AES_192_CBC
    java.lang.String AES_256_CBC -> AES_256_CBC
    java.lang.String DES3_CBC -> DES3_CBC
    java.lang.String PBE_SHA1_RC4_128 -> PBE_SHA1_RC4_128
    java.lang.String PBE_SHA1_RC4_40 -> PBE_SHA1_RC4_40
    java.lang.String PBE_SHA1_3DES -> PBE_SHA1_3DES
    java.lang.String PBE_SHA1_2DES -> PBE_SHA1_2DES
    java.lang.String PBE_SHA1_RC2_128 -> PBE_SHA1_RC2_128
    java.lang.String PBE_SHA1_RC2_40 -> PBE_SHA1_RC2_40
    char[] password -> a
    java.lang.String algorithm -> b
    int iterationCount -> c
    java.security.PrivateKey key -> d
    javax.crypto.Cipher cipher -> e
    java.security.SecureRandom random -> f
    java.security.AlgorithmParameterGenerator paramGen -> g
    javax.crypto.SecretKeyFactory secKeyFact -> h
    40:54:void <clinit>() -> <clinit>
    70:73:void <init>(java.security.PrivateKey) -> <init>
    84:95:void <init>(java.security.PrivateKey,java.lang.String,java.lang.String) -> <init>
    105:109:void <init>(java.security.PrivateKey,java.lang.String,java.security.Provider) -> <init>
    114:136:void init(java.security.PrivateKey,java.lang.String,java.security.Provider) -> a
    140:142:org.sandrob.bouncycastle.openssl.PKCS8Generator setSecureRandom(java.security.SecureRandom) -> setSecureRandom
    147:149:org.sandrob.bouncycastle.openssl.PKCS8Generator setPassword(char[]) -> setPassword
    154:156:org.sandrob.bouncycastle.openssl.PKCS8Generator setIterationCount(int) -> setIterationCount
    162:249:org.sandrob.bouncycastle.util.io.pem.PemObject generate() -> generate
org.sandrob.bouncycastle.openssl.PasswordException -> org.sandrob.bouncycastle.openssl.PasswordException:
    10:11:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.openssl.PasswordFinder -> org.sandrob.bouncycastle.openssl.PasswordFinder:
    char[] getPassword() -> getPassword
org.sandrob.bouncycastle.openssl.test.AllTests -> org.sandrob.bouncycastle.openssl.test.AllTests:
    25:25:void <init>() -> <init>
    30:47:void testOpenSSL() -> testOpenSSL
    52:61:void testPKCS8Encrypted() -> testPKCS8Encrypted
    66:87:void encryptedTest(java.security.PrivateKey,java.lang.String) -> a
    92:116:void testPKCS8Plain() -> testPKCS8Plain
    120:123:void main(java.lang.String[]) -> main
    127:131:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.openssl.test.AllTests$1 -> org.sandrob.bouncycastle.openssl.test.AllTests$1:
    org.sandrob.bouncycastle.openssl.test.AllTests this$0 -> a
    1:76:void <init>(org.sandrob.bouncycastle.openssl.test.AllTests) -> <init>
    80:80:char[] getPassword() -> getPassword
org.sandrob.bouncycastle.openssl.test.AllTests$2 -> org.sandrob.bouncycastle.openssl.test.AllTests$2:
    org.sandrob.bouncycastle.openssl.test.AllTests this$0 -> a
    1:105:void <init>(org.sandrob.bouncycastle.openssl.test.AllTests) -> <init>
    109:109:char[] getPassword() -> getPassword
org.sandrob.bouncycastle.openssl.test.ReaderTest -> org.sandrob.bouncycastle.openssl.test.ReaderTest:
    35:35:void <init>() -> <init>
    57:57:java.lang.String getName() -> getName
    64:66:org.sandrob.bouncycastle.openssl.PEMReader openPEMResource(java.lang.String,org.sandrob.bouncycastle.openssl.PasswordFinder) -> a
    72:232:void performTest() -> performTest
    240:274:void keyPairTest(java.lang.String,java.security.KeyPair) -> a
    280:282:void doOpenSslTests(java.lang.String) -> a
    288:292:void doOpenSslDsaModesTest(java.lang.String) -> b
    298:302:void doOpenSslRsaModesTest(java.lang.String) -> c
    308:311:void doOpenSslDsaTest(java.lang.String) -> d
    317:320:void doOpenSslRsaTest(java.lang.String) -> e
    327:342:void doOpenSslTestFile(java.lang.String,java.lang.Class) -> a
    350:374:void doDudPasswordTest(java.lang.String,int,java.lang.String) -> a
    379:382:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.openssl.test.ReaderTest$Password -> org.sandrob.bouncycastle.openssl.test.ReaderTest$a:
    char[] password -> a
    43:47:void <init>(char[]) -> <init>
    51:51:char[] getPassword() -> getPassword
org.sandrob.bouncycastle.openssl.test.WriterTest -> org.sandrob.bouncycastle.openssl.test.WriterTest:
    java.security.SecureRandom random -> a
    java.security.spec.RSAPrivateCrtKeySpec testRsaKeySpec -> b
    java.security.spec.DSAParameterSpec testDsaParams -> c
    java.security.spec.PKCS8EncodedKeySpec testEcDsaKeySpec -> d
    char[] testPassword -> e
    java.lang.String[] algorithms -> f
    27:67:void <clinit>() -> <clinit>
    27:27:void <init>() -> <init>
    89:89:java.lang.String getName() -> getName
    95:134:void performTest() -> performTest
    142:146:void doWriteReadTests(java.security.PrivateKey,java.lang.String,java.lang.String[]) -> a
    153:177:void doWriteReadTest(java.security.PrivateKey,java.lang.String) -> a
    185:209:void doWriteReadTest(java.security.PrivateKey,java.lang.String,java.lang.String) -> a
    214:217:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.openssl.test.WriterTest$Password -> org.sandrob.bouncycastle.openssl.test.WriterTest$a:
    char[] password -> b
    org.sandrob.bouncycastle.openssl.test.WriterTest this$0 -> a
    75:79:void <init>(org.sandrob.bouncycastle.openssl.test.WriterTest,char[]) -> <init>
    83:83:char[] getPassword() -> getPassword
org.sandrob.bouncycastle.util.AllTests -> org.sandrob.bouncycastle.util.AllTests:
    6:6:void <init>() -> <init>
    10:11:void main(java.lang.String[]) -> main
    15:17:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.util.Arrays -> org.sandrob.bouncycastle.util.Arrays:
    8:11:void <init>() -> <init>
    17:40:boolean areEqual(boolean[],boolean[]) -> areEqual
    47:70:boolean areEqual(char[],char[]) -> areEqual
    77:100:boolean areEqual(byte[],byte[]) -> areEqual
    115:137:boolean constantTimeAreEqual(byte[],byte[]) -> constantTimeAreEqual
    144:167:boolean areEqual(int[],int[]) -> areEqual
    174:178:void fill(byte[],byte) -> fill
    184:188:void fill(long[],long) -> fill
    194:198:void fill(short[],short) -> fill
    202:216:int hashCode(byte[]) -> hashCode
    221:229:byte[] clone(byte[]) -> clone
    234:242:int[] clone(int[]) -> clone
org.sandrob.bouncycastle.util.BigIntegers -> org.sandrob.bouncycastle.util.BigIntegers:
    java.math.BigInteger ZERO -> a
    9:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    23:34:byte[] asUnsignedByteArray(java.math.BigInteger) -> asUnsignedByteArray
    50:76:java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> createRandomInRange
org.sandrob.bouncycastle.util.CollectionStore -> org.sandrob.bouncycastle.util.CollectionStore:
    java.util.Collection _local -> a
    21:25:void <init>(java.util.Collection) -> <init>
    35:54:java.util.Collection getMatches(org.sandrob.bouncycastle.util.Selector) -> getMatches
org.sandrob.bouncycastle.util.IPAddress -> org.sandrob.bouncycastle.util.IPAddress:
    3:3:void <init>() -> <init>
    15:15:boolean isValid(java.lang.String) -> isValid
    28:28:boolean isValidWithNetMask(java.lang.String) -> isValidWithNetMask
    41:76:boolean isValidIPv4(java.lang.String) -> isValidIPv4
    82:86:boolean isValidIPv4WithNetmask(java.lang.String) -> isValidIPv4WithNetmask
    92:96:boolean isValidIPv6WithNetmask(java.lang.String) -> isValidIPv6WithNetmask
    103:109:boolean isMaskValue(java.lang.String,int) -> a
    123:184:boolean isValidIPv6(java.lang.String) -> isValidIPv6
org.sandrob.bouncycastle.util.IPTest -> org.sandrob.bouncycastle.util.IPTest:
    java.lang.String[] validIP4v -> a
    java.lang.String[] invalidIP4v -> b
    java.lang.String[] validIP6v -> c
    java.lang.String[] invalidIP6v -> d
    5:20:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    24:38:void testIP(java.lang.String[],java.lang.String[]) -> a
    42:42:java.lang.String getName() -> getName
    47:48:void testIPv4() -> testIPv4
    52:53:void testIPv6() -> testIPv6
org.sandrob.bouncycastle.util.Selector -> org.sandrob.bouncycastle.util.Selector:
    boolean match(java.lang.Object) -> match
    java.lang.Object clone() -> clone
org.sandrob.bouncycastle.util.Store -> org.sandrob.bouncycastle.util.Store:
    java.util.Collection getMatches(org.sandrob.bouncycastle.util.Selector) -> getMatches
org.sandrob.bouncycastle.util.StoreException -> org.sandrob.bouncycastle.util.StoreException:
    java.lang.Throwable _e -> a
    10:12:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    16:16:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.util.StreamParser -> org.sandrob.bouncycastle.util.StreamParser:
    java.lang.Object read() -> read
    java.util.Collection readAll() -> readAll
org.sandrob.bouncycastle.util.StreamParsingException -> org.sandrob.bouncycastle.util.StreamParsingException:
    java.lang.Throwable _e -> a
    10:12:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    16:16:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.util.Strings -> org.sandrob.bouncycastle.util.Strings:
    6:6:void <init>() -> <init>
    10:80:java.lang.String fromUTF8ByteArray(byte[]) -> fromUTF8ByteArray
    85:85:byte[] toUTF8ByteArray(java.lang.String) -> toUTF8ByteArray
    90:141:byte[] toUTF8ByteArray(char[]) -> toUTF8ByteArray
    152:170:java.lang.String toUpperCase(java.lang.String) -> toUpperCase
    181:199:java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    204:211:byte[] toByteArray(char[]) -> toByteArray
    216:225:byte[] toByteArray(java.lang.String) -> toByteArray
    230:256:java.lang.String[] split(java.lang.String,char) -> split
org.sandrob.bouncycastle.util.encoders.Base64 -> org.sandrob.bouncycastle.util.encoders.Base64:
    org.sandrob.bouncycastle.util.encoders.Encoder encoder -> a
    7:9:void <clinit>() -> <clinit>
    7:7:void <init>() -> <init>
    19:31:byte[] encode(byte[]) -> encode
    44:44:int encode(byte[],java.io.OutputStream) -> encode
    59:59:int encode(byte[],int,int,java.io.OutputStream) -> encode
    70:82:byte[] decode(byte[]) -> decode
    93:105:byte[] decode(java.lang.String) -> decode
    119:119:int decode(java.lang.String,java.io.OutputStream) -> decode
org.sandrob.bouncycastle.util.encoders.Base64Encoder -> org.sandrob.bouncycastle.util.encoders.Base64Encoder:
    byte[] encodingTable -> encodingTable
    byte padding -> padding
    byte[] decodingTable -> decodingTable
    34:38:void initialiseDecodingTable() -> initialiseDecodingTable
    9:43:void <init>() -> <init>
    57:108:int encode(byte[],int,int,java.io.OutputStream) -> encode
    114:114:boolean ignore(char) -> a
    131:177:int decode(byte[],int,int,java.io.OutputStream) -> decode
    182:186:int nextI(byte[],int,int) -> a
    201:247:int decode(java.lang.String,java.io.OutputStream) -> decode
    255:286:int decodeLastBlock(java.io.OutputStream,char,char,char,char) -> a
    292:296:int nextI(java.lang.String,int,int) -> a
org.sandrob.bouncycastle.util.encoders.BufferedDecoder -> org.sandrob.bouncycastle.util.encoders.BufferedDecoder:
    byte[] buf -> buf
    int bufOff -> bufOff
    org.sandrob.bouncycastle.util.encoders.Translator translator -> translator
    19:32:void <init>(org.sandrob.bouncycastle.util.encoders.Translator,int) -> <init>
    39:49:int processByte(byte,byte[],int) -> processByte
    59:94:int processBytes(byte[],int,int,byte[],int) -> processBytes
org.sandrob.bouncycastle.util.encoders.BufferedEncoder -> org.sandrob.bouncycastle.util.encoders.BufferedEncoder:
    byte[] buf -> buf
    int bufOff -> bufOff
    org.sandrob.bouncycastle.util.encoders.Translator translator -> translator
    19:32:void <init>(org.sandrob.bouncycastle.util.encoders.Translator,int) -> <init>
    39:49:int processByte(byte,byte[],int) -> processByte
    59:94:int processBytes(byte[],int,int,byte[],int) -> processBytes
org.sandrob.bouncycastle.util.encoders.Encoder -> org.sandrob.bouncycastle.util.encoders.Encoder:
    int encode(byte[],int,int,java.io.OutputStream) -> encode
    int decode(byte[],int,int,java.io.OutputStream) -> decode
    int decode(java.lang.String,java.io.OutputStream) -> decode
org.sandrob.bouncycastle.util.encoders.Hex -> org.sandrob.bouncycastle.util.encoders.Hex:
    org.sandrob.bouncycastle.util.encoders.Encoder encoder -> a
    7:9:void <clinit>() -> <clinit>
    7:7:void <init>() -> <init>
    19:19:byte[] encode(byte[]) -> encode
    32:43:byte[] encode(byte[],int,int) -> encode
    56:56:int encode(byte[],java.io.OutputStream) -> encode
    71:71:int encode(byte[],int,int,java.io.OutputStream) -> encode
    82:93:byte[] decode(byte[]) -> decode
    104:115:byte[] decode(java.lang.String) -> decode
    129:129:int decode(java.lang.String,java.io.OutputStream) -> decode
org.sandrob.bouncycastle.util.encoders.HexEncoder -> org.sandrob.bouncycastle.util.encoders.HexEncoder:
    byte[] encodingTable -> encodingTable
    byte[] decodingTable -> decodingTable
    22:33:void initialiseDecodingTable() -> initialiseDecodingTable
    9:38:void <init>() -> <init>
    52:60:int encode(byte[],int,int,java.io.OutputStream) -> encode
    66:66:boolean ignore(char) -> a
    83:119:int decode(byte[],int,int,java.io.OutputStream) -> decode
    134:170:int decode(java.lang.String,java.io.OutputStream) -> decode
org.sandrob.bouncycastle.util.encoders.HexTranslator -> org.sandrob.bouncycastle.util.encoders.HexTranslator:
    byte[] hexTable -> a
    6:12:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    21:21:int getEncodedBlockSize() -> getEncodedBlockSize
    31:39:int encode(byte[],int,int,byte[],int) -> encode
    48:48:int getDecodedBlockSize() -> getDecodedBlockSize
    58:85:int decode(byte[],int,int,byte[],int) -> decode
org.sandrob.bouncycastle.util.encoders.Translator -> org.sandrob.bouncycastle.util.encoders.Translator:
    int getEncodedBlockSize() -> getEncodedBlockSize
    int encode(byte[],int,int,byte[],int) -> encode
    int getDecodedBlockSize() -> getDecodedBlockSize
    int decode(byte[],int,int,byte[],int) -> decode
org.sandrob.bouncycastle.util.encoders.UrlBase64 -> org.sandrob.bouncycastle.util.encoders.UrlBase64:
    org.sandrob.bouncycastle.util.encoders.Encoder encoder -> a
    19:21:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    31:42:byte[] encode(byte[]) -> encode
    55:55:int encode(byte[],java.io.OutputStream) -> encode
    66:77:byte[] decode(byte[]) -> decode
    91:91:int decode(byte[],java.io.OutputStream) -> decode
    102:113:byte[] decode(java.lang.String) -> decode
    127:127:int decode(java.lang.String,java.io.OutputStream) -> decode
org.sandrob.bouncycastle.util.encoders.UrlBase64Encoder -> org.sandrob.bouncycastle.util.encoders.UrlBase64Encoder:
    17:24:void <init>() -> <init>
org.sandrob.bouncycastle.util.io.StreamOverflowException -> org.sandrob.bouncycastle.util.io.StreamOverflowException:
    10:11:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.util.io.Streams -> org.sandrob.bouncycastle.util.io.Streams:
    int BUFFER_SIZE -> a
    8:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    15:19:void drain(java.io.InputStream) -> drain
    24:26:byte[] readAll(java.io.InputStream) -> readAll
    32:34:byte[] readAllLimited(java.io.InputStream,int) -> readAllLimited
    40:40:int readFully(java.io.InputStream,byte[]) -> readFully
    46:56:int readFully(java.io.InputStream,byte[],int,int) -> readFully
    62:68:void pipeAll(java.io.InputStream,java.io.OutputStream) -> pipeAll
    73:85:long pipeAllLimited(java.io.InputStream,long,java.io.OutputStream) -> pipeAllLimited
org.sandrob.bouncycastle.util.io.TeeInputStream -> org.sandrob.bouncycastle.util.io.TeeInputStream:
    java.io.InputStream input -> a
    java.io.OutputStream output -> b
    13:17:void <init>(java.io.InputStream,java.io.OutputStream) -> <init>
    22:22:int read(byte[]) -> read
    28:35:int read(byte[],int,int) -> read
    41:48:int read() -> read
    54:56:void close() -> close
org.sandrob.bouncycastle.util.io.TeeOutputStream -> org.sandrob.bouncycastle.util.io.TeeOutputStream:
    java.io.OutputStream output1 -> a
    java.io.OutputStream output2 -> b
    12:16:void <init>(java.io.OutputStream,java.io.OutputStream) -> <init>
    21:23:void write(byte[]) -> write
    28:30:void write(byte[],int,int) -> write
    35:37:void write(int) -> write
    42:44:void flush() -> flush
    49:51:void close() -> close
org.sandrob.bouncycastle.util.io.pem.AllTests -> org.sandrob.bouncycastle.util.io.pem.AllTests:
    14:14:void <init>() -> <init>
    20:41:void testPemLength() -> testPemLength
    46:55:void lengthTest(java.lang.String,java.util.List,byte[]) -> a
    59:60:void main(java.lang.String[]) -> main
    64:66:junit.framework.Test suite() -> suite
org.sandrob.bouncycastle.util.io.pem.PemGenerationException -> org.sandrob.bouncycastle.util.io.pem.PemGenerationException:
    java.lang.Throwable cause -> a
    12:14:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    18:19:void <init>(java.lang.String) -> <init>
    23:23:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.util.io.pem.PemHeader -> org.sandrob.bouncycastle.util.io.pem.PemHeader:
    java.lang.String name -> a
    java.lang.String value -> b
    8:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getName() -> getName
    21:21:java.lang.String getValue() -> getValue
    26:26:int hashCode() -> hashCode
    31:38:boolean equals(java.lang.Object) -> equals
    43:48:int getHashCode(java.lang.String) -> a
    53:63:boolean isEqual(java.lang.String,java.lang.String) -> a
org.sandrob.bouncycastle.util.io.pem.PemObject -> org.sandrob.bouncycastle.util.io.pem.PemObject:
    java.util.List EMPTY_LIST -> a
    java.lang.String type -> b
    java.util.List headers -> c
    byte[] content -> d
    7:10:void <clinit>() -> <clinit>
    24:25:void <init>(java.lang.String,byte[]) -> <init>
    34:39:void <init>(java.lang.String,java.util.List,byte[]) -> <init>
    43:43:java.lang.String getType() -> getType
    48:48:java.util.List getHeaders() -> getHeaders
    53:53:byte[] getContent() -> getContent
    59:59:org.sandrob.bouncycastle.util.io.pem.PemObject generate() -> generate
org.sandrob.bouncycastle.util.io.pem.PemObjectGenerator -> org.sandrob.bouncycastle.util.io.pem.PemObjectGenerator:
    org.sandrob.bouncycastle.util.io.pem.PemObject generate() -> generate
org.sandrob.bouncycastle.util.io.pem.PemObjectParser -> org.sandrob.bouncycastle.util.io.pem.PemObjectParser:
    java.lang.Object parseObject(org.sandrob.bouncycastle.util.io.pem.PemObject) -> parseObject
org.sandrob.bouncycastle.util.io.pem.PemReader -> org.sandrob.bouncycastle.util.io.pem.PemReader:
    19:20:void <init>(java.io.Reader) -> <init>
    25:39:org.sandrob.bouncycastle.util.io.pem.PemObject readPemObject() -> readPemObject
    46:76:org.sandrob.bouncycastle.util.io.pem.PemObject loadObject(java.lang.String) -> a
org.sandrob.bouncycastle.util.io.pem.PemWriter -> org.sandrob.bouncycastle.util.io.pem.PemWriter:
    int nlLength -> a
    char[] buf -> b
    19:39:void <init>(java.io.Writer) -> <init>
    51:70:int getOutputSize(org.sandrob.bouncycastle.util.io.pem.PemObject) -> getOutputSize
    76:97:void writeObject(org.sandrob.bouncycastle.util.io.pem.PemObjectGenerator) -> writeObject
    102:120:void writeEncoded(byte[]) -> a
    126:128:void writePreEncapsulationBoundary(java.lang.String) -> a
    134:136:void writePostEncapsulationBoundary(java.lang.String) -> b
org.sandrob.bouncycastle.util.test.FixedSecureRandom -> org.sandrob.bouncycastle.util.test.FixedSecureRandom:
    byte[] _data -> a
    int _index -> b
    int _intPad -> c
    17:18:void <init>(byte[]) -> <init>
    23:24:void <init>(byte[][]) -> <init>
    34:35:void <init>(boolean,byte[]) -> <init>
    41:65:void <init>(boolean,byte[][]) -> <init>
    69:72:void nextBytes(byte[]) -> nextBytes
    80:103:int nextInt() -> nextInt
    112:123:long nextLong() -> nextLong
    128:128:boolean isExhausted() -> isExhausted
    133:133:int nextValue() -> a
org.sandrob.bouncycastle.util.test.NumberParsing -> org.sandrob.bouncycastle.util.test.NumberParsing:
    8:11:void <init>() -> <init>
    15:21:long decodeLongFromHex(java.lang.String) -> decodeLongFromHex
    26:32:int decodeIntFromHex(java.lang.String) -> decodeIntFromHex
org.sandrob.bouncycastle.util.test.SimpleTest -> org.sandrob.bouncycastle.util.test.SimpleTest:
    7:7:void <init>() -> <init>
    java.lang.String getName() -> getName
    14:14:org.sandrob.bouncycastle.util.test.TestResult success() -> a
    20:20:void fail(java.lang.String) -> fail
    27:27:void fail(java.lang.String,java.lang.Throwable) -> fail
    35:35:void fail(java.lang.String,java.lang.Object,java.lang.Object) -> fail
    42:42:boolean areEqual(byte[],byte[]) -> areEqual
    49:59:org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
    66:67:void runTest(org.sandrob.bouncycastle.util.test.Test) -> runTest
    73:80:void runTest(org.sandrob.bouncycastle.util.test.Test,java.io.PrintStream) -> runTest
    void performTest() -> performTest
org.sandrob.bouncycastle.util.test.SimpleTestResult -> org.sandrob.bouncycastle.util.test.SimpleTestResult:
    java.lang.String SEPARATOR -> a
    boolean success -> b
    java.lang.String message -> c
    java.lang.Throwable exception -> d
    3:5:void <clinit>() -> <clinit>
    11:15:void <init>(boolean,java.lang.String) -> <init>
    17:22:void <init>(boolean,java.lang.String,java.lang.Throwable) -> <init>
    28:28:org.sandrob.bouncycastle.util.test.TestResult successful(org.sandrob.bouncycastle.util.test.Test,java.lang.String) -> successful
    35:35:org.sandrob.bouncycastle.util.test.TestResult failed(org.sandrob.bouncycastle.util.test.Test,java.lang.String) -> failed
    43:43:org.sandrob.bouncycastle.util.test.TestResult failed(org.sandrob.bouncycastle.util.test.Test,java.lang.String,java.lang.Throwable) -> failed
    52:52:org.sandrob.bouncycastle.util.test.TestResult failed(org.sandrob.bouncycastle.util.test.Test,java.lang.String,java.lang.Object,java.lang.Object) -> failed
    58:63:java.lang.String failedMessage(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> failedMessage
    68:68:boolean isSuccessful() -> isSuccessful
    73:73:java.lang.String toString() -> toString
    78:78:java.lang.Throwable getException() -> getException
org.sandrob.bouncycastle.util.test.Test -> org.sandrob.bouncycastle.util.test.Test:
    java.lang.String getName() -> getName
    org.sandrob.bouncycastle.util.test.TestResult perform() -> perform
org.sandrob.bouncycastle.util.test.TestFailedException -> org.sandrob.bouncycastle.util.test.TestFailedException:
    org.sandrob.bouncycastle.util.test.TestResult _result -> a
    8:12:void <init>(org.sandrob.bouncycastle.util.test.TestResult) -> <init>
    16:16:org.sandrob.bouncycastle.util.test.TestResult getResult() -> getResult
org.sandrob.bouncycastle.util.test.TestResult -> org.sandrob.bouncycastle.util.test.TestResult:
    boolean isSuccessful() -> isSuccessful
    java.lang.Throwable getException() -> getException
    java.lang.String toString() -> toString
org.sandrob.bouncycastle.util.test.UncloseableOutputStream -> org.sandrob.bouncycastle.util.test.UncloseableOutputStream:
    11:12:void <init>(java.io.OutputStream) -> <init>
    16:16:void close() -> close
    21:22:void write(byte[],int,int) -> write
org.sandrob.bouncycastle.voms.VOMSAttribute -> org.sandrob.bouncycastle.voms.VOMSAttribute:
    java.lang.String VOMS_ATTR_OID -> VOMS_ATTR_OID
    org.sandrob.bouncycastle.x509.X509AttributeCertificate myAC -> a
    java.lang.String myHostPort -> b
    java.lang.String myVo -> c
    java.util.Vector myStringList -> d
    java.util.Vector myFQANs -> e
    30:102:void <init>(org.sandrob.bouncycastle.x509.X509AttributeCertificate) -> <init>
    109:109:org.sandrob.bouncycastle.x509.X509AttributeCertificate getAC() -> getAC
    119:119:java.util.List getFullyQualifiedAttributes() -> getFullyQualifiedAttributes
    129:129:java.util.List getListOfFQAN() -> getListOfFQAN
    138:138:java.lang.String getHostPort() -> getHostPort
    147:147:java.lang.String getVO() -> getVO
    152:152:java.lang.String toString() -> toString
org.sandrob.bouncycastle.voms.VOMSAttribute$FQAN -> org.sandrob.bouncycastle.voms.VOMSAttribute$FQAN:
    java.lang.String fqan -> a
    java.lang.String group -> b
    java.lang.String role -> c
    java.lang.String capability -> d
    org.sandrob.bouncycastle.voms.VOMSAttribute this$0 -> e
    166:169:void <init>(org.sandrob.bouncycastle.voms.VOMSAttribute,java.lang.String) -> <init>
    171:176:void <init>(org.sandrob.bouncycastle.voms.VOMSAttribute,java.lang.String,java.lang.String,java.lang.String) -> <init>
    180:188:java.lang.String getFQAN() -> getFQAN
    193:208:void split() -> split
    212:217:java.lang.String getGroup() -> getGroup
    222:227:java.lang.String getRole() -> getRole
    232:237:java.lang.String getCapability() -> getCapability
    242:242:java.lang.String toString() -> toString
org.sandrob.bouncycastle.x509.AttributeCertificateHolder -> org.sandrob.bouncycastle.x509.AttributeCertificateHolder:
    org.sandrob.bouncycastle.asn1.x509.Holder holder -> a
    54:57:void <init>(org.sandrob.bouncycastle.asn1.ASN1Sequence) -> <init>
    59:65:void <init>(org.sandrob.bouncycastle.jce.X509Principal,java.math.BigInteger) -> <init>
    70:71:void <init>(javax.security.auth.x500.X500Principal,java.math.BigInteger) -> <init>
    73:89:void <init>(java.security.cert.X509Certificate) -> <init>
    91:94:void <init>(org.sandrob.bouncycastle.jce.X509Principal) -> <init>
    98:99:void <init>(javax.security.auth.x500.X500Principal) -> <init>
    124:130:void <init>(int,java.lang.String,java.lang.String,byte[]) -> <init>
    148:153:int getDigestedObjectType() -> getDigestedObjectType
    164:169:java.lang.String getDigestAlgorithm() -> getDigestAlgorithm
    179:183:byte[] getObjectDigest() -> getObjectDigest
    194:198:java.lang.String getOtherObjectTypeID() -> getOtherObjectTypeID
    203:203:org.sandrob.bouncycastle.asn1.x509.GeneralNames generateGeneralNames(org.sandrob.bouncycastle.jce.X509Principal) -> a
    208:230:boolean matchesDN(org.sandrob.bouncycastle.jce.X509Principal,org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> a
    235:253:java.lang.Object[] getNames(org.sandrob.bouncycastle.asn1.x509.GeneralName[]) -> a
    258:269:java.security.Principal[] getPrincipals(org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> a
    281:286:java.security.Principal[] getEntityNames() -> getEntityNames
    296:301:java.security.Principal[] getIssuer() -> getIssuer
    313:318:java.math.BigInteger getSerialNumber() -> getSerialNumber
    323:324:java.lang.Object clone() -> clone
    329:385:boolean match(java.security.cert.Certificate) -> match
    390:402:boolean equals(java.lang.Object) -> equals
    407:407:int hashCode() -> hashCode
    412:417:boolean match(java.lang.Object) -> match
org.sandrob.bouncycastle.x509.AttributeCertificateIssuer -> org.sandrob.bouncycastle.x509.AttributeCertificateIssuer:
    org.sandrob.bouncycastle.asn1.ASN1Encodable form -> a
    36:39:void <init>(org.sandrob.bouncycastle.asn1.x509.AttCertIssuer) -> <init>
    44:45:void <init>(javax.security.auth.x500.X500Principal) -> <init>
    47:50:void <init>(org.sandrob.bouncycastle.jce.X509Principal) -> <init>
    56:85:java.lang.Object[] getNames() -> a
    96:107:java.security.Principal[] getPrincipals() -> getPrincipals
    112:133:boolean matchesDN(javax.security.auth.x500.X500Principal,org.sandrob.bouncycastle.asn1.x509.GeneralNames) -> a
    138:138:java.lang.Object clone() -> clone
    143:174:boolean match(java.security.cert.Certificate) -> match
    179:191:boolean equals(java.lang.Object) -> equals
    196:196:int hashCode() -> hashCode
    201:206:boolean match(java.lang.Object) -> match
org.sandrob.bouncycastle.x509.CertPathReviewerException -> org.sandrob.bouncycastle.x509.CertPathReviewerException:
    int index -> a
    java.security.cert.CertPath certPath -> b
    11:18:void <init>(org.sandrob.bouncycastle.i18n.ErrorBundle,java.lang.Throwable) -> <init>
    11:23:void <init>(org.sandrob.bouncycastle.i18n.ErrorBundle) -> <init>
    11:42:void <init>(org.sandrob.bouncycastle.i18n.ErrorBundle,java.lang.Throwable,java.security.cert.CertPath,int) -> <init>
    11:60:void <init>(org.sandrob.bouncycastle.i18n.ErrorBundle,java.security.cert.CertPath,int) -> <init>
    64:64:java.security.cert.CertPath getCertPath() -> getCertPath
    69:69:int getIndex() -> getIndex
org.sandrob.bouncycastle.x509.ExtCertificateEncodingException -> org.sandrob.bouncycastle.x509.a:
    java.lang.Throwable cause -> a
    12:14:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    18:18:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.x509.ExtendedPKIXBuilderParameters -> org.sandrob.bouncycastle.x509.ExtendedPKIXBuilderParameters:
    int maxPathLength -> a
    java.util.Set excludedCerts -> b
    37:37:java.util.Set getExcludedCerts() -> getExcludedCerts
    51:59:void setExcludedCerts(java.util.Set) -> setExcludedCerts
    24:88:void <init>(java.util.Set,org.sandrob.bouncycastle.util.Selector) -> <init>
    113:119:void setMaxPathLength(int) -> setMaxPathLength
    132:132:int getMaxPathLength() -> getMaxPathLength
    144:156:void setParams(java.security.cert.PKIXParameters) -> setParams
    166:178:java.lang.Object clone() -> clone
    197:208:org.sandrob.bouncycastle.x509.ExtendedPKIXParameters getInstance(java.security.cert.PKIXParameters) -> getInstance
org.sandrob.bouncycastle.x509.ExtendedPKIXParameters -> org.sandrob.bouncycastle.x509.ExtendedPKIXParameters:
    java.util.List stores -> a
    org.sandrob.bouncycastle.util.Selector selector -> b
    boolean additionalLocationsEnabled -> c
    java.util.List additionalStores -> d
    java.util.Set trustedACIssuers -> e
    java.util.Set necessaryACAttributes -> f
    java.util.Set prohibitedACAttributes -> g
    java.util.Set attrCertCheckers -> h
    int PKIX_VALIDITY_MODEL -> PKIX_VALIDITY_MODEL
    int CHAIN_VALIDITY_MODEL -> CHAIN_VALIDITY_MODEL
    int validityModel -> i
    boolean useDeltas -> j
    59:164:void <init>(java.util.Set) -> <init>
    80:88:org.sandrob.bouncycastle.x509.ExtendedPKIXParameters getInstance(java.security.cert.PKIXParameters) -> getInstance
    100:135:void setParams(java.security.cert.PKIXParameters) -> setParams
    173:173:boolean isUseDeltasEnabled() -> isUseDeltasEnabled
    183:184:void setUseDeltasEnabled(boolean) -> setUseDeltasEnabled
    193:193:int getValidityModel() -> getValidityModel
    204:212:void setCertStores(java.util.List) -> setCertStores
    227:244:void setStores(java.util.List) -> setStores
    262:266:void addStore(org.sandrob.bouncycastle.util.Store) -> addStore
    284:288:void addAdditionalStore(org.sandrob.bouncycastle.util.Store) -> addAdditionalStore
    295:296:void addAddionalStore(org.sandrob.bouncycastle.util.Store) -> addAddionalStore
    310:310:java.util.List getAdditionalStores() -> getAdditionalStores
    325:325:java.util.List getStores() -> getStores
    335:336:void setValidityModel(int) -> setValidityModel
    343:351:java.lang.Object clone() -> clone
    362:362:boolean isAdditionalLocationsEnabled() -> isAdditionalLocationsEnabled
    373:374:void setAdditionalLocationsEnabled(boolean) -> setAdditionalLocationsEnabled
    397:403:org.sandrob.bouncycastle.util.Selector getTargetConstraints() -> getTargetConstraints
    428:436:void setTargetConstraints(org.sandrob.bouncycastle.util.Selector) -> setTargetConstraints
    457:467:void setTargetCertConstraints(java.security.cert.CertSelector) -> setTargetCertConstraints
    481:481:java.util.Set getTrustedACIssuers() -> getTrustedACIssuers
    500:515:void setTrustedACIssuers(java.util.Set) -> setTrustedACIssuers
    528:528:java.util.Set getNecessaryACAttributes() -> getNecessaryACAttributes
    546:561:void setNecessaryACAttributes(java.util.Set) -> setNecessaryACAttributes
    573:573:java.util.Set getProhibitedACAttributes() -> getProhibitedACAttributes
    591:606:void setProhibitedACAttributes(java.util.Set) -> setProhibitedACAttributes
    617:617:java.util.Set getAttrCertCheckers() -> getAttrCertCheckers
    634:649:void setAttrCertCheckers(java.util.Set) -> setAttrCertCheckers
org.sandrob.bouncycastle.x509.NoSuchParserException -> org.sandrob.bouncycastle.x509.NoSuchParserException:
    8:9:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.x509.NoSuchStoreException -> org.sandrob.bouncycastle.x509.NoSuchStoreException:
    8:9:void <init>(java.lang.String) -> <init>
org.sandrob.bouncycastle.x509.PKIXAttrCertChecker -> org.sandrob.bouncycastle.x509.PKIXAttrCertChecker:
    8:8:void <init>() -> <init>
    java.util.Set getSupportedExtensions() -> getSupportedExtensions
    void check(org.sandrob.bouncycastle.x509.X509AttributeCertificate,java.security.cert.CertPath,java.security.cert.CertPath,java.util.Collection) -> check
    java.lang.Object clone() -> clone
org.sandrob.bouncycastle.x509.PKIXCertPathReviewer -> org.sandrob.bouncycastle.x509.PKIXCertPathReviewer:
    java.lang.String QC_STATEMENT -> a
    java.lang.String CRL_DIST_POINTS -> b
    java.lang.String AUTH_INFO_ACCESS -> c
    java.security.cert.CertPath certPath -> certPath
    java.security.cert.PKIXParameters pkixParams -> pkixParams
    java.util.Date validDate -> validDate
    java.util.List certs -> certs
    int n -> n
    java.util.List[] notifications -> notifications
    java.util.List[] errors -> errors
    java.security.cert.TrustAnchor trustAnchor -> trustAnchor
    java.security.PublicKey subjectPublicKey -> subjectPublicKey
    java.security.cert.PolicyNode policyTree -> policyTree
    boolean initialized -> d
    85:90:void <clinit>() -> <clinit>
    128:172:void init(java.security.cert.CertPath,java.security.cert.PKIXParameters) -> init
    180:184:void <init>(java.security.cert.CertPath,java.security.cert.PKIXParameters) -> <init>
    189:192:void <init>() -> <init>
    200:200:java.security.cert.CertPath getCertPath() -> getCertPath
    209:209:int getCertPathSize() -> getCertPathSize
    222:223:java.util.List[] getErrors() -> getErrors
    235:236:java.util.List getErrors(int) -> getErrors
    249:250:java.util.List[] getNotifications() -> getNotifications
    262:263:java.util.List getNotifications(int) -> getNotifications
    273:274:java.security.cert.PolicyNode getPolicyTree() -> getPolicyTree
    284:285:java.security.PublicKey getSubjectPublicKey() -> getSubjectPublicKey
    295:296:java.security.cert.TrustAnchor getTrustAnchor() -> getTrustAnchor
    306:316:boolean isValidCertPath() -> isValidCertPath
    321:322:void addNotification(org.sandrob.bouncycastle.i18n.ErrorBundle) -> addNotification
    326:331:void addNotification(org.sandrob.bouncycastle.i18n.ErrorBundle,int) -> addNotification
    335:336:void addError(org.sandrob.bouncycastle.i18n.ErrorBundle) -> addError
    340:345:void addError(org.sandrob.bouncycastle.i18n.ErrorBundle,int) -> addError
    349:381:void doChecks() -> doChecks
    385:620:void checkNameConstraints() -> a
    628:689:void checkPathLength() -> b
    701:1106:void checkSignatures() -> c
    1116:1827:void checkPolicy() -> d
    1834:1922:void checkCriticalExtensions() -> e
    1930:1992:boolean processQcStatements(java.security.cert.X509Certificate,int) -> a
    2028:2029:void checkRevocation(java.security.cert.PKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.Vector,java.util.Vector,int) -> checkRevocation
    2042:2405:void checkCRLs(java.security.cert.PKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.Vector,int) -> checkCRLs
    2409:2431:java.util.Vector getCRLDistUrls(org.sandrob.bouncycastle.asn1.x509.CRLDistPoint) -> getCRLDistUrls
    2436:2455:java.util.Vector getOCSPUrls(org.sandrob.bouncycastle.asn1.x509.AuthorityInformationAccess) -> getOCSPUrls
    2460:2491:java.security.cert.X509CRL getCRL(java.lang.String) -> a
    2496:2545:java.util.Collection getTrustAnchors(java.security.cert.X509Certificate,java.util.Set) -> getTrustAnchors
org.sandrob.bouncycastle.x509.X509Attribute -> org.sandrob.bouncycastle.x509.X509Attribute:
    org.sandrob.bouncycastle.asn1.x509.Attribute attr -> a
    22:26:void <init>(org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    35:40:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> <init>
    49:54:void <init>(java.lang.String,org.sandrob.bouncycastle.asn1.ASN1EncodableVector) -> <init>
    58:58:java.lang.String getOID() -> getOID
    63:71:org.sandrob.bouncycastle.asn1.ASN1Encodable[] getValues() -> getValues
    76:76:org.sandrob.bouncycastle.asn1.DERObject toASN1Object() -> toASN1Object
org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector -> org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector:
    org.sandrob.bouncycastle.x509.AttributeCertificateHolder holder -> a
    org.sandrob.bouncycastle.x509.AttributeCertificateIssuer issuer -> b
    java.math.BigInteger serialNumber -> c
    java.util.Date attributeCertificateValid -> d
    org.sandrob.bouncycastle.x509.X509AttributeCertificate attributeCert -> e
    java.util.Collection targetNames -> f
    java.util.Collection targetGroups -> g
    48:55:void <init>() -> <init>
    66:190:boolean match(java.lang.Object) -> match
    200:208:java.lang.Object clone() -> clone
    218:218:org.sandrob.bouncycastle.x509.X509AttributeCertificate getAttributeCert() -> getAttributeCert
    229:230:void setAttributeCert(org.sandrob.bouncycastle.x509.X509AttributeCertificate) -> setAttributeCert
    239:244:java.util.Date getAttributeCertificateValid() -> getAttributeCertificateValid
    256:265:void setAttributeCertificateValid(java.util.Date) -> setAttributeCertificateValid
    274:274:org.sandrob.bouncycastle.x509.AttributeCertificateHolder getHolder() -> getHolder
    284:285:void setHolder(org.sandrob.bouncycastle.x509.AttributeCertificateHolder) -> setHolder
    294:294:org.sandrob.bouncycastle.x509.AttributeCertificateIssuer getIssuer() -> getIssuer
    305:306:void setIssuer(org.sandrob.bouncycastle.x509.AttributeCertificateIssuer) -> setIssuer
    315:315:java.math.BigInteger getSerialNumber() -> getSerialNumber
    326:327:void setSerialNumber(java.math.BigInteger) -> setSerialNumber
    343:344:void addTargetName(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> addTargetName
    361:362:void addTargetName(byte[]) -> addTargetName
    378:379:void setTargetNames(java.util.Collection) -> setTargetNames
    392:392:java.util.Collection getTargetNames() -> getTargetNames
    409:410:void addTargetGroup(org.sandrob.bouncycastle.asn1.x509.GeneralName) -> addTargetGroup
    427:428:void addTargetGroup(byte[]) -> addTargetGroup
    444:445:void setTargetGroups(java.util.Collection) -> setTargetGroups
    459:459:java.util.Collection getTargetGroups() -> getTargetGroups
    465:482:java.util.Set extractGeneralNames(java.util.Collection) -> a
org.sandrob.bouncycastle.x509.X509AttributeCertificate -> org.sandrob.bouncycastle.x509.X509AttributeCertificate:
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    org.sandrob.bouncycastle.x509.AttributeCertificateHolder getHolder() -> getHolder
    org.sandrob.bouncycastle.x509.AttributeCertificateIssuer getIssuer() -> getIssuer
    org.sandrob.bouncycastle.x509.X509Attribute[] getAttributes() -> getAttributes
    org.sandrob.bouncycastle.x509.X509Attribute[] getAttributes(java.lang.String) -> getAttributes
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    byte[] getSignature() -> getSignature
    void verify(java.security.PublicKey,java.lang.String) -> verify
    byte[] getEncoded() -> getEncoded
org.sandrob.bouncycastle.x509.X509CRLStoreSelector -> org.sandrob.bouncycastle.x509.X509CRLStoreSelector:
    boolean deltaCRLIndicator -> a
    boolean completeCRLEnabled -> b
    java.math.BigInteger maxBaseCRLNumber -> c
    byte[] issuingDistributionPoint -> d
    boolean issuingDistributionPointEnabled -> e
    org.sandrob.bouncycastle.x509.X509AttributeCertificate attrCertChecking -> f
    23:35:void <init>() -> <init>
    50:50:boolean isIssuingDistributionPointEnabled() -> isIssuingDistributionPointEnabled
    62:63:void setIssuingDistributionPointEnabled(boolean) -> setIssuingDistributionPointEnabled
    78:79:void setAttrCertificateChecking(org.sandrob.bouncycastle.x509.X509AttributeCertificate) -> setAttrCertificateChecking
    89:89:org.sandrob.bouncycastle.x509.X509AttributeCertificate getAttrCertificateChecking() -> getAttrCertificateChecking
    94:160:boolean match(java.lang.Object) -> match
    165:165:boolean match(java.security.cert.CRL) -> match
    177:177:boolean isDeltaCRLIndicatorEnabled() -> isDeltaCRLIndicatorEnabled
    192:193:void setDeltaCRLIndicatorEnabled(boolean) -> setDeltaCRLIndicatorEnabled
    205:225:org.sandrob.bouncycastle.x509.X509CRLStoreSelector getInstance(java.security.cert.X509CRLSelector) -> getInstance
    230:237:java.lang.Object clone() -> clone
    248:248:boolean isCompleteCRLEnabled() -> isCompleteCRLEnabled
    262:263:void setCompleteCRLEnabled(boolean) -> setCompleteCRLEnabled
    273:273:java.math.BigInteger getMaxBaseCRLNumber() -> getMaxBaseCRLNumber
    288:289:void setMaxBaseCRLNumber(java.math.BigInteger) -> setMaxBaseCRLNumber
    305:305:byte[] getIssuingDistributionPoint() -> getIssuingDistributionPoint
    328:329:void setIssuingDistributionPoint(byte[]) -> setIssuingDistributionPoint
org.sandrob.bouncycastle.x509.X509CertPairStoreSelector -> org.sandrob.bouncycastle.x509.X509CertPairStoreSelector:
    org.sandrob.bouncycastle.x509.X509CertStoreSelector forwardSelector -> a
    org.sandrob.bouncycastle.x509.X509CertStoreSelector reverseSelector -> b
    org.sandrob.bouncycastle.x509.X509CertificatePair certPair -> c
    24:26:void <init>() -> <init>
    35:35:org.sandrob.bouncycastle.x509.X509CertificatePair getCertPair() -> getCertPair
    45:46:void setCertPair(org.sandrob.bouncycastle.x509.X509CertificatePair) -> setCertPair
    54:55:void setForwardSelector(org.sandrob.bouncycastle.x509.X509CertStoreSelector) -> setForwardSelector
    63:64:void setReverseSelector(org.sandrob.bouncycastle.x509.X509CertStoreSelector) -> setReverseSelector
    74:90:java.lang.Object clone() -> clone
    105:132:boolean match(java.lang.Object) -> match
    143:143:org.sandrob.bouncycastle.x509.X509CertStoreSelector getForwardSelector() -> getForwardSelector
    153:153:org.sandrob.bouncycastle.x509.X509CertStoreSelector getReverseSelector() -> getReverseSelector
org.sandrob.bouncycastle.x509.X509CertStoreSelector -> org.sandrob.bouncycastle.x509.X509CertStoreSelector:
    17:17:void <init>() -> <init>
    23:30:boolean match(java.lang.Object) -> match
    35:35:boolean match(java.security.cert.Certificate) -> match
    40:42:java.lang.Object clone() -> clone
    54:84:org.sandrob.bouncycastle.x509.X509CertStoreSelector getInstance(java.security.cert.X509CertSelector) -> getInstance
org.sandrob.bouncycastle.x509.X509CertificatePair -> org.sandrob.bouncycastle.x509.X509CertificatePair:
    java.security.cert.X509Certificate forward -> a
    java.security.cert.X509Certificate reverse -> b
    30:36:void <init>(java.security.cert.X509Certificate,java.security.cert.X509Certificate) -> <init>
    43:55:void <init>(org.sandrob.bouncycastle.asn1.x509.CertificatePair) -> <init>
    60:90:byte[] getEncoded() -> getEncoded
    101:101:java.security.cert.X509Certificate getForward() -> getForward
    111:111:java.security.cert.X509Certificate getReverse() -> getReverse
    116:149:boolean equals(java.lang.Object) -> equals
    154:164:int hashCode() -> hashCode
org.sandrob.bouncycastle.x509.X509CollectionStoreParameters -> org.sandrob.bouncycastle.x509.X509CollectionStoreParameters:
    java.util.Collection collection -> a
    27:34:void <init>(java.util.Collection) -> <init>
    44:44:java.lang.Object clone() -> clone
    54:54:java.util.Collection getCollection() -> getCollection
    64:68:java.lang.String toString() -> toString
org.sandrob.bouncycastle.x509.X509Store -> org.sandrob.bouncycastle.x509.X509Store:
    java.security.Provider _provider -> a
    org.sandrob.bouncycastle.x509.X509StoreSpi _spi -> b
    19:25:org.sandrob.bouncycastle.x509.X509Store getInstance(java.lang.String,org.sandrob.bouncycastle.x509.X509StoreParameters) -> getInstance
    32:32:org.sandrob.bouncycastle.x509.X509Store getInstance(java.lang.String,org.sandrob.bouncycastle.x509.X509StoreParameters,java.lang.String) -> getInstance
    40:46:org.sandrob.bouncycastle.x509.X509Store getInstance(java.lang.String,org.sandrob.bouncycastle.x509.X509StoreParameters,java.security.Provider) -> getInstance
    52:56:org.sandrob.bouncycastle.x509.X509Store createStore(org.sandrob.bouncycastle.x509.X509Util$Implementation,org.sandrob.bouncycastle.x509.X509StoreParameters) -> a
    62:68:void <init>(java.security.Provider,org.sandrob.bouncycastle.x509.X509StoreSpi) -> <init>
    72:72:java.security.Provider getProvider() -> getProvider
    77:77:java.util.Collection getMatches(org.sandrob.bouncycastle.util.Selector) -> getMatches
org.sandrob.bouncycastle.x509.X509StoreParameters -> org.sandrob.bouncycastle.x509.X509StoreParameters:
org.sandrob.bouncycastle.x509.X509StoreSpi -> org.sandrob.bouncycastle.x509.X509StoreSpi:
    7:7:void <init>() -> <init>
    void engineInit(org.sandrob.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.sandrob.bouncycastle.util.Selector) -> engineGetMatches
org.sandrob.bouncycastle.x509.X509StreamParser -> org.sandrob.bouncycastle.x509.X509StreamParser:
    java.security.Provider _provider -> a
    org.sandrob.bouncycastle.x509.X509StreamParserSpi _spi -> b
    51:57:org.sandrob.bouncycastle.x509.X509StreamParser getInstance(java.lang.String) -> getInstance
    83:83:org.sandrob.bouncycastle.x509.X509StreamParser getInstance(java.lang.String,java.lang.String) -> getInstance
    107:113:org.sandrob.bouncycastle.x509.X509StreamParser getInstance(java.lang.String,java.security.Provider) -> getInstance
    119:121:org.sandrob.bouncycastle.x509.X509StreamParser createParser(org.sandrob.bouncycastle.x509.X509Util$Implementation) -> a
    127:133:void <init>(java.security.Provider,org.sandrob.bouncycastle.x509.X509StreamParserSpi) -> <init>
    137:137:java.security.Provider getProvider() -> getProvider
    142:143:void init(java.io.InputStream) -> init
    147:148:void init(byte[]) -> init
    153:153:java.lang.Object read() -> read
    159:159:java.util.Collection readAll() -> readAll
org.sandrob.bouncycastle.x509.X509StreamParserSpi -> org.sandrob.bouncycastle.x509.X509StreamParserSpi:
    15:15:void <init>() -> <init>
    void engineInit(java.io.InputStream) -> engineInit
    java.lang.Object engineRead() -> engineRead
    java.util.Collection engineReadAll() -> engineReadAll
org.sandrob.bouncycastle.x509.X509Util -> org.sandrob.bouncycastle.x509.b:
    java.util.Hashtable algorithms -> a
    java.util.Hashtable params -> b
    java.util.Set noParams -> c
    39:127:void <clinit>() -> <clinit>
    132:136:org.sandrob.bouncycastle.asn1.pkcs.RSASSAPSSparams creatPSSParams(org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier,int) -> a
    142:149:org.sandrob.bouncycastle.asn1.DERObjectIdentifier getAlgorithmOID(java.lang.String) -> a
    156:169:org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier getSigAlgID(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.lang.String) -> a
    175:183:java.util.Iterator getAlgNames() -> a
    190:190:java.security.Signature getSignatureInstance(java.lang.String) -> b
    198:204:java.security.Signature getSignatureInstance(java.lang.String,java.lang.String) -> a
    218:236:byte[] calculateSignature(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
    250:268:byte[] calculateSignature(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,java.lang.String,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> a
    276:280:org.sandrob.bouncycastle.jce.X509Principal convertPrincipal(javax.security.auth.x500.X500Principal) -> a
    318:359:org.sandrob.bouncycastle.x509.X509Util$Implementation getImplementation(java.lang.String,java.lang.String,java.security.Provider) -> a
    371:397:org.sandrob.bouncycastle.x509.X509Util$Implementation getImplementation(java.lang.String,java.lang.String) -> b
    403:410:java.security.Provider getProvider(java.lang.String) -> c
org.sandrob.bouncycastle.x509.X509Util$Implementation -> org.sandrob.bouncycastle.x509.b$a:
    java.lang.Object engine -> a
    java.security.Provider provider -> b
    289:295:void <init>(java.lang.Object,java.security.Provider) -> <init>
    299:299:java.lang.Object getEngine() -> a
    304:304:java.security.Provider getProvider() -> b
org.sandrob.bouncycastle.x509.X509V1CertificateGenerator -> org.sandrob.bouncycastle.x509.X509V1CertificateGenerator:
    org.sandrob.bouncycastle.asn1.x509.V1TBSCertificateGenerator tbsGen -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sigOID -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> c
    java.lang.String signatureAlgorithm -> d
    50:53:void <init>() -> <init>
    60:61:void reset() -> reset
    69:75:void setSerialNumber(java.math.BigInteger) -> setSerialNumber
    86:92:void setIssuerDN(javax.security.auth.x500.X500Principal) -> setIssuerDN
    101:102:void setIssuerDN(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setIssuerDN
    107:108:void setNotBefore(java.util.Date) -> setNotBefore
    113:114:void setNotAfter(java.util.Date) -> setNotAfter
    124:130:void setSubjectDN(javax.security.auth.x500.X500Principal) -> setSubjectDN
    138:139:void setSubjectDN(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setSubjectDN
    146:153:void setPublicKey(java.security.PublicKey) -> setPublicKey
    164:178:void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    191:195:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey) -> generateX509Certificate
    211:215:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.security.SecureRandom) -> generateX509Certificate
    230:230:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String) -> generateX509Certificate
    247:263:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generateX509Certificate
    279:279:java.security.cert.X509Certificate generate(java.security.PrivateKey) -> generate
    295:307:java.security.cert.X509Certificate generate(java.security.PrivateKey,java.security.SecureRandom) -> generate
    320:320:java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String) -> generate
    334:346:java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generate
    352:364:java.security.cert.X509Certificate generateJcaObject(org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure,byte[]) -> a
    375:375:java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.sandrob.bouncycastle.x509.X509V2AttributeCertificate -> org.sandrob.bouncycastle.x509.X509V2AttributeCertificate:
    org.sandrob.bouncycastle.asn1.x509.AttributeCertificate cert -> a
    java.util.Date notBefore -> b
    java.util.Date notAfter -> c
    50:58:org.sandrob.bouncycastle.asn1.x509.AttributeCertificate getObject(java.io.InputStream) -> a
    66:67:void <init>(java.io.InputStream) -> <init>
    73:74:void <init>(byte[]) -> <init>
    76:91:void <init>(org.sandrob.bouncycastle.asn1.x509.AttributeCertificate) -> <init>
    95:95:int getVersion() -> getVersion
    100:100:java.math.BigInteger getSerialNumber() -> getSerialNumber
    105:105:org.sandrob.bouncycastle.x509.AttributeCertificateHolder getHolder() -> getHolder
    110:110:org.sandrob.bouncycastle.x509.AttributeCertificateIssuer getIssuer() -> getIssuer
    115:115:java.util.Date getNotBefore() -> getNotBefore
    120:120:java.util.Date getNotAfter() -> getNotAfter
    125:140:boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    146:147:void checkValidity() -> checkValidity
    153:162:void checkValidity(java.util.Date) -> checkValidity
    166:166:byte[] getSignature() -> getSignature
    175:199:void verify(java.security.PublicKey,java.lang.String) -> verify
    204:204:byte[] getEncoded() -> getEncoded
    209:228:byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    234:255:java.util.Set getExtensionOIDs(boolean) -> a
    260:260:java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    265:265:java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    270:272:boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    277:285:org.sandrob.bouncycastle.x509.X509Attribute[] getAttributes() -> getAttributes
    290:307:org.sandrob.bouncycastle.x509.X509Attribute[] getAttributes(java.lang.String) -> getAttributes
    313:334:boolean equals(java.lang.Object) -> equals
    342:346:int hashCode() -> hashCode
org.sandrob.bouncycastle.x509.X509V2AttributeCertificateGenerator -> org.sandrob.bouncycastle.x509.X509V2AttributeCertificateGenerator:
    org.sandrob.bouncycastle.asn1.x509.V2AttributeCertificateInfoGenerator acInfoGen -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sigOID -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> c
    java.lang.String signatureAlgorithm -> d
    org.sandrob.bouncycastle.asn1.x509.X509ExtensionsGenerator extGenerator -> e
    43:47:void <init>() -> <init>
    54:56:void reset() -> reset
    64:65:void setHolder(org.sandrob.bouncycastle.x509.AttributeCertificateHolder) -> setHolder
    73:74:void setIssuer(org.sandrob.bouncycastle.x509.AttributeCertificateIssuer) -> setIssuer
    82:83:void setSerialNumber(java.math.BigInteger) -> setSerialNumber
    88:89:void setNotBefore(java.util.Date) -> setNotBefore
    94:95:void setNotAfter(java.util.Date) -> setNotAfter
    106:120:void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    128:129:void addAttribute(org.sandrob.bouncycastle.x509.X509Attribute) -> addAttribute
    136:136:void setIssuerUniqueId(boolean[]) -> setIssuerUniqueId
    149:150:void addExtension(java.lang.String,boolean,org.sandrob.bouncycastle.asn1.ASN1Encodable) -> addExtension
    162:163:void addExtension(java.lang.String,boolean,byte[]) -> addExtension
    175:175:org.sandrob.bouncycastle.x509.X509AttributeCertificate generateCertificate(java.security.PrivateKey,java.lang.String) -> generateCertificate
    192:208:org.sandrob.bouncycastle.x509.X509AttributeCertificate generateCertificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generateCertificate
    221:221:org.sandrob.bouncycastle.x509.X509AttributeCertificate generate(java.security.PrivateKey,java.lang.String) -> generate
    235:255:org.sandrob.bouncycastle.x509.X509AttributeCertificate generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generate
    266:266:java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.sandrob.bouncycastle.x509.X509V2CRLGenerator -> org.sandrob.bouncycastle.x509.X509V2CRLGenerator:
    org.sandrob.bouncycastle.asn1.x509.V2TBSCertListGenerator tbsGen -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sigOID -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> c
    java.lang.String signatureAlgorithm -> d
    org.sandrob.bouncycastle.asn1.x509.X509ExtensionsGenerator extGenerator -> e
    53:57:void <init>() -> <init>
    64:66:void reset() -> reset
    77:83:void setIssuerDN(javax.security.auth.x500.X500Principal) -> setIssuerDN
    92:93:void setIssuerDN(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setIssuerDN
    98:99:void setThisUpdate(java.util.Date) -> setThisUpdate
    104:105:void setNextUpdate(java.util.Date) -> setNextUpdate
    113:114:void addCRLEntry(java.math.BigInteger,java.util.Date,int) -> addCRLEntry
    123:124:void addCRLEntry(java.math.BigInteger,java.util.Date,int,java.util.Date) -> addCRLEntry
    131:132:void addCRLEntry(java.math.BigInteger,java.util.Date,org.sandrob.bouncycastle.asn1.x509.X509Extensions) -> addCRLEntry
    142:163:void addCRL(java.security.cert.X509CRL) -> addCRL
    174:188:void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    198:199:void addExtension(java.lang.String,boolean,org.sandrob.bouncycastle.asn1.DEREncodable) -> addExtension
    209:210:void addExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,org.sandrob.bouncycastle.asn1.DEREncodable) -> addExtension
    220:221:void addExtension(java.lang.String,boolean,byte[]) -> addExtension
    231:232:void addExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,byte[]) -> addExtension
    245:249:java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey) -> generateX509CRL
    266:270:java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey,java.security.SecureRandom) -> generateX509CRL
    284:284:java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey,java.lang.String) -> generateX509CRL
    300:316:java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generateX509CRL
    332:332:java.security.cert.X509CRL generate(java.security.PrivateKey) -> generate
    349:361:java.security.cert.X509CRL generate(java.security.PrivateKey,java.security.SecureRandom) -> generate
    373:373:java.security.cert.X509CRL generate(java.security.PrivateKey,java.lang.String) -> generate
    386:398:java.security.cert.X509CRL generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generate
    403:408:org.sandrob.bouncycastle.asn1.x509.TBSCertList generateCertList() -> a
    414:420:java.security.cert.X509CRL generateJcaObject(org.sandrob.bouncycastle.asn1.x509.TBSCertList,byte[]) -> a
    430:430:java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.sandrob.bouncycastle.x509.X509V2CRLGenerator$ExtCRLException -> org.sandrob.bouncycastle.x509.X509V2CRLGenerator$a:
    java.lang.Throwable cause -> a
    440:442:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    446:446:java.lang.Throwable getCause() -> getCause
org.sandrob.bouncycastle.x509.X509V3CertificateGenerator -> org.sandrob.bouncycastle.x509.X509V3CertificateGenerator:
    org.sandrob.bouncycastle.asn1.x509.V3TBSCertificateGenerator tbsGen -> a
    org.sandrob.bouncycastle.asn1.DERObjectIdentifier sigOID -> b
    org.sandrob.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> c
    java.lang.String signatureAlgorithm -> d
    org.sandrob.bouncycastle.asn1.x509.X509ExtensionsGenerator extGenerator -> e
    53:57:void <init>() -> <init>
    64:66:void reset() -> reset
    74:80:void setSerialNumber(java.math.BigInteger) -> setSerialNumber
    91:97:void setIssuerDN(javax.security.auth.x500.X500Principal) -> setIssuerDN
    106:107:void setIssuerDN(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setIssuerDN
    112:113:void setNotBefore(java.util.Date) -> setNotBefore
    118:119:void setNotAfter(java.util.Date) -> setNotAfter
    129:135:void setSubjectDN(javax.security.auth.x500.X500Principal) -> setSubjectDN
    143:144:void setSubjectDN(org.sandrob.bouncycastle.asn1.x509.X509Name) -> setSubjectDN
    152:159:void setPublicKey(java.security.PublicKey) -> setPublicKey
    170:184:void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    191:192:void setSubjectUniqueID(boolean[]) -> setSubjectUniqueID
    199:200:void setIssuerUniqueID(boolean[]) -> setIssuerUniqueID
    204:219:org.sandrob.bouncycastle.asn1.DERBitString booleanToBitString(boolean[]) -> a
    231:232:void addExtension(java.lang.String,boolean,org.sandrob.bouncycastle.asn1.DEREncodable) -> addExtension
    242:243:void addExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,org.sandrob.bouncycastle.asn1.DEREncodable) -> addExtension
    255:256:void addExtension(java.lang.String,boolean,byte[]) -> addExtension
    266:267:void addExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,byte[]) -> addExtension
    280:297:void copyAndAddExtension(java.lang.String,boolean,java.security.cert.X509Certificate) -> copyAndAddExtension
    310:311:void copyAndAddExtension(org.sandrob.bouncycastle.asn1.DERObjectIdentifier,boolean,java.security.cert.X509Certificate) -> copyAndAddExtension
    324:328:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey) -> generateX509Certificate
    345:349:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.security.SecureRandom) -> generateX509Certificate
    363:363:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String) -> generateX509Certificate
    380:396:java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generateX509Certificate
    412:412:java.security.cert.X509Certificate generate(java.security.PrivateKey) -> generate
    429:447:java.security.cert.X509Certificate generate(java.security.PrivateKey,java.security.SecureRandom) -> generate
    460:460:java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String) -> generate
    474:492:java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generate
    498:503:org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure generateTbsCert() -> a
    509:515:java.security.cert.X509Certificate generateJcaObject(org.sandrob.bouncycastle.asn1.x509.TBSCertificateStructure,byte[]) -> a
    525:525:java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.sandrob.bouncycastle.x509.examples.AttrCertExample -> org.sandrob.bouncycastle.x509.examples.AttrCertExample:
    org.sandrob.bouncycastle.x509.X509V1CertificateGenerator v1CertGen -> a
    org.sandrob.bouncycastle.x509.X509V3CertificateGenerator v3CertGen -> b
    33:36:void <clinit>() -> <clinit>
    33:33:void <init>() -> <init>
    49:74:java.security.cert.X509Certificate createAcIssuerCert(java.security.PublicKey,java.security.PrivateKey) -> createAcIssuerCert
    89:137:java.security.cert.X509Certificate createClientCert(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey) -> createClientCert
    143:313:void main(java.lang.String[]) -> main
org.sandrob.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure -> org.sandrob.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure:
    36:37:void <init>(byte[]) -> <init>
    47:48:void <init>(org.sandrob.bouncycastle.asn1.x509.X509Extension) -> <init>
    56:90:org.sandrob.bouncycastle.asn1.ASN1Sequence fromCertificate(java.security.cert.X509Certificate) -> a
    100:107:org.sandrob.bouncycastle.asn1.ASN1Sequence fromKey(java.security.PublicKey) -> a
    122:123:void <init>(java.security.cert.X509Certificate) -> <init>
    136:137:void <init>(java.security.PublicKey) -> <init>
org.sandrob.bouncycastle.x509.extension.SubjectKeyIdentifierStructure -> org.sandrob.bouncycastle.x509.extension.SubjectKeyIdentifierStructure:
    27:28:void <init>(byte[]) -> <init>
    36:42:org.sandrob.bouncycastle.asn1.ASN1OctetString fromPublicKey(java.security.PublicKey) -> a
    50:51:void <init>(java.security.PublicKey) -> <init>
org.sandrob.bouncycastle.x509.extension.X509ExtensionUtil -> org.sandrob.bouncycastle.x509.extension.X509ExtensionUtil:
    23:23:void <init>() -> <init>
    29:31:org.sandrob.bouncycastle.asn1.ASN1Object fromExtensionValue(byte[]) -> fromExtensionValue
    37:39:java.util.Collection getIssuerAlternativeNames(java.security.cert.X509Certificate) -> getIssuerAlternativeNames
    45:47:java.util.Collection getSubjectAlternativeNames(java.security.cert.X509Certificate) -> getSubjectAlternativeNames
    53:97:java.util.Collection getAlternativeNames(byte[]) -> a
org.sandrob.bouncycastle.x509.util.LDAPStoreHelper -> org.sandrob.bouncycastle.x509.util.LDAPStoreHelper:
    org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters params -> a
    java.lang.String LDAP_PROVIDER -> b
    java.lang.String REFERRALS_IGNORE -> c
    java.util.Map cacheMap -> d
    int cacheSize -> e
    long lifeTime -> f
    64:1033:void <clinit>() -> <clinit>
    71:1029:void <init>(org.sandrob.bouncycastle.jce.X509LDAPCertStoreParameters) -> <init>
    98:109:javax.naming.directory.DirContext connectLDAP() -> a
    114:150:java.lang.String parseDN(java.lang.String,java.lang.String) -> a
    156:180:java.util.Set createCerts(java.util.List,org.sandrob.bouncycastle.x509.X509CertStoreSelector) -> a
    203:243:java.util.List certSubjectSerialSearch(org.sandrob.bouncycastle.x509.X509CertStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> a
    269:302:java.util.List crossCertificatePairSubjectSearch(org.sandrob.bouncycastle.x509.X509CertPairStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> a
    325:407:java.util.List attrCertSubjectSerialSearch(org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> a
    427:469:java.util.List cRLIssuerSearch(org.sandrob.bouncycastle.x509.X509CRLStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> a
    488:568:java.util.List search(java.lang.String[],java.lang.String,java.lang.String[]) -> a
    574:596:java.util.Set createCRLs(java.util.List,org.sandrob.bouncycastle.x509.X509CRLStoreSelector) -> a
    602:649:java.util.Set createCrossCertificatePairs(java.util.List,org.sandrob.bouncycastle.x509.X509CertPairStoreSelector) -> a
    655:678:java.util.Set createAttributeCertificates(java.util.List,org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector) -> a
    694:711:java.util.Collection getAuthorityRevocationLists(org.sandrob.bouncycastle.x509.X509CRLStoreSelector) -> getAuthorityRevocationLists
    727:745:java.util.Collection getAttributeCertificateRevocationLists(org.sandrob.bouncycastle.x509.X509CRLStoreSelector) -> getAttributeCertificateRevocationLists
    762:779:java.util.Collection getAttributeAuthorityRevocationLists(org.sandrob.bouncycastle.x509.X509CRLStoreSelector) -> getAttributeAuthorityRevocationLists
    792:810:java.util.Collection getCrossCertificatePairs(org.sandrob.bouncycastle.x509.X509CertPairStoreSelector) -> getCrossCertificatePairs
    827:843:java.util.Collection getUserCertificates(org.sandrob.bouncycastle.x509.X509CertStoreSelector) -> getUserCertificates
    858:873:java.util.Collection getAACertificates(org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector) -> getAACertificates
    890:907:java.util.Collection getAttributeDescriptorCertificates(org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector) -> getAttributeDescriptorCertificates
    924:938:java.util.Collection getCACertificates(org.sandrob.bouncycastle.x509.X509CertStoreSelector) -> getCACertificates
    951:966:java.util.Collection getDeltaCertificateRevocationLists(org.sandrob.bouncycastle.x509.X509CRLStoreSelector) -> getDeltaCertificateRevocationLists
    981:997:java.util.Collection getAttributeCertificateAttributes(org.sandrob.bouncycastle.x509.X509AttributeCertStoreSelector) -> getAttributeCertificateAttributes
    1010:1026:java.util.Collection getCertificateRevocationLists(org.sandrob.bouncycastle.x509.X509CRLStoreSelector) -> getCertificateRevocationLists
    1037:1068:void addToCache(java.lang.String,java.util.List) -> a
    1072:1083:java.util.List getFromCache(java.lang.String) -> a
    1091:1091:java.lang.String[] splitString(java.lang.String) -> b
    1098:1108:java.lang.String getSubjectAsString(org.sandrob.bouncycastle.x509.X509CertStoreSelector) -> a
    1113:1113:javax.security.auth.x500.X500Principal getCertificateIssuer(java.security.cert.X509Certificate) -> a
org.sandrob.bouncycastle.x509.util.StreamParser -> org.sandrob.bouncycastle.x509.util.StreamParser:
    java.lang.Object read() -> read
    java.util.Collection readAll() -> readAll
org.sandrob.bouncycastle.x509.util.StreamParsingException -> org.sandrob.bouncycastle.x509.util.StreamParsingException:
    java.lang.Throwable _e -> a
    10:12:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    16:16:java.lang.Throwable getCause() -> getCause
org.sandrop.BuildConfig -> org.sandrop.BuildConfig:
    boolean DEBUG -> DEBUG
    4:4:void <init>() -> <init>
org.sandrop.R -> org.sandrop.R:
    10:26:void <init>() -> <init>
org.sandrop.R$attr -> org.sandrop.R$attr:
    11:11:void <init>() -> <init>
org.sandrop.R$drawable -> org.sandrop.R$drawable:
    int ic_action_search -> ic_action_search
    int ic_launcher -> ic_launcher
    int ic_menu_clear_playlist -> ic_menu_clear_playlist
    int ic_menu_compass -> ic_menu_compass
    int ic_menu_set_as -> ic_menu_set_as
    13:13:void <init>() -> <init>
    14:18:void <clinit>() -> <clinit>
org.sandrop.R$raw -> org.sandrop.R$raw:
    int server_p12 -> server_p12
    20:20:void <init>() -> <init>
    21:21:void <clinit>() -> <clinit>
org.sandrop.R$string -> org.sandrop.R$string:
    int app_name -> app_name
    23:23:void <init>() -> <init>
    24:24:void <clinit>() -> <clinit>
org.sandrop.R$style -> org.sandrop.R$style:
    int AppTheme -> AppTheme
    26:26:void <init>() -> <init>
    27:27:void <clinit>() -> <clinit>
org.sandrop.webscarab.httpclient.AliasKeyManager -> org.sandrop.webscarab.httpclient.AliasKeyManager:
    java.security.KeyStore _ks -> a
    java.lang.String _alias -> b
    java.lang.String _keyPassword -> c
    62:66:void <init>(java.security.KeyStore,java.lang.String,java.lang.String) -> <init>
    69:69:java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket) -> chooseClientAlias
    73:73:java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket) -> chooseServerAlias
    78:87:java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    92:92:java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[]) -> getClientAliases
    97:106:java.security.PrivateKey getPrivateKey(java.lang.String) -> getPrivateKey
    111:111:java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[]) -> getServerAliases
org.sandrop.webscarab.httpclient.AuthDigestManager -> org.sandrop.webscarab.httpclient.AuthDigestManager:
    java.lang.String REALM_TOKEN -> REALM_TOKEN
    java.lang.String NONCE_TOKEN -> NONCE_TOKEN
    java.lang.String STALE_TOKEN -> STALE_TOKEN
    java.lang.String OPAQUE_TOKEN -> OPAQUE_TOKEN
    java.lang.String QOP_TOKEN -> QOP_TOKEN
    java.lang.String ALGORITHM_TOKEN -> ALGORITHM_TOKEN
    40:40:void <init>() -> <init>
    56:63:java.lang.String trimDoubleQuotesIfAny(java.lang.String) -> trimDoubleQuotesIfAny
    70:74:java.lang.String doubleQuote(java.lang.String) -> a
    81:85:java.lang.String computeCnonce() -> a
    93:100:java.lang.String computeDigest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    107:107:java.lang.String KD(java.lang.String,java.lang.String) -> a
    114:135:java.lang.String H(java.lang.String) -> b
    142:159:java.lang.String bufferToHex(byte[]) -> a
    174:196:java.lang.String computeDigestAuthResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> computeDigestAuthResponse
org.sandrop.webscarab.httpclient.Authenticator -> org.sandrop.webscarab.httpclient.Authenticator:
    java.lang.String getCredentials(org.sandrop.webscarab.model.HttpUrl,java.lang.String[]) -> getCredentials
    java.lang.String getProxyCredentials(java.lang.String,java.lang.String[]) -> getProxyCredentials
org.sandrop.webscarab.httpclient.ChunkedInputStream -> org.sandrop.webscarab.httpclient.ChunkedInputStream:
    byte[] chunk -> a
    int start -> b
    int size -> c
    java.lang.String[][] _trailer -> d
    java.util.logging.Logger _logger -> e
    45:54:void <init>(java.io.InputStream) -> <init>
    57:57:java.lang.String[][] getTrailer() -> getTrailer
    61:89:void readChunk() -> a
    92:101:int read() -> read
    105:105:int read(byte[]) -> read
    109:124:int read(byte[],int,int) -> read
    128:128:int available() -> available
    132:132:boolean markSupported() -> markSupported
    136:152:java.lang.String readLine() -> b
    156:173:void readTrailer() -> c
org.sandrop.webscarab.httpclient.ChunkedOutputStream -> org.sandrop.webscarab.httpclient.ChunkedOutputStream:
    java.lang.String[][] _trailer -> a
    boolean _writeTrailer -> b
    44:49:void <init>(java.io.OutputStream) -> <init>
    52:53:void setTrailer(java.lang.String[][]) -> setTrailer
    56:67:void writeTrailer() -> writeTrailer
    70:73:void write(int) -> write
    76:77:void write(byte[]) -> write
    80:83:void write(byte[],int,int) -> write
org.sandrop.webscarab.httpclient.ConversationHandler -> org.sandrop.webscarab.httpclient.ConversationHandler:
    void responseReceived(org.sandrop.webscarab.model.Response) -> responseReceived
    void requestError(org.sandrop.webscarab.model.Request,java.io.IOException) -> requestError
org.sandrop.webscarab.httpclient.FetcherQueue -> org.sandrop.webscarab.httpclient.FetcherQueue:
    org.sandrop.webscarab.httpclient.ConversationHandler _handler -> a
    org.sandrop.webscarab.httpclient.FetcherQueue$Fetcher[] _fetchers -> b
    int _requestDelay -> c
    long _lastRequest -> d
    java.util.List _requestQueue -> e
    boolean _running -> f
    int _pending -> g
    53:67:void <init>(java.lang.String,org.sandrop.webscarab.httpclient.ConversationHandler,int,int) -> <init>
    70:71:void stop() -> stop
    74:79:void start() -> start
    82:82:boolean isBusy() -> isBusy
    86:90:void submit(org.sandrop.webscarab.model.Request) -> submit
    93:95:int getRequestsQueued() -> getRequestsQueued
    99:102:void clearRequestQueue() -> clearRequestQueue
    105:107:void responseReceived(org.sandrop.webscarab.model.Response) -> a
    110:112:void requestError(org.sandrop.webscarab.model.Request,java.io.IOException) -> a
    115:137:org.sandrop.webscarab.model.Request getNextRequest() -> a
    47:47:boolean access$000(org.sandrop.webscarab.httpclient.FetcherQueue) -> a
    47:47:org.sandrop.webscarab.model.Request access$100(org.sandrop.webscarab.httpclient.FetcherQueue) -> b
    47:47:void access$200(org.sandrop.webscarab.httpclient.FetcherQueue,org.sandrop.webscarab.model.Response) -> a
    47:47:void access$300(org.sandrop.webscarab.httpclient.FetcherQueue,org.sandrop.webscarab.model.Request,java.io.IOException) -> a
org.sandrop.webscarab.httpclient.FetcherQueue$Fetcher -> org.sandrop.webscarab.httpclient.FetcherQueue$a:
    org.sandrop.webscarab.httpclient.FetcherQueue this$0 -> a
    141:145:void <init>(org.sandrop.webscarab.httpclient.FetcherQueue,java.lang.String) -> <init>
    148:159:void run() -> run
org.sandrop.webscarab.httpclient.FixedLengthInputStream -> org.sandrop.webscarab.httpclient.FixedLengthInputStream:
    int max -> a
    int read -> b
    boolean closed -> c
    42:48:void <init>(java.io.InputStream,int) -> <init>
    51:59:int available() -> available
    63:64:void close() -> close
    67:68:void mark(int) -> mark
    71:71:boolean markSupported() -> markSupported
    75:89:int read() -> read
    94:94:int read(byte[]) -> read
    98:109:int read(byte[],int,int) -> read
    114:125:long skip(long) -> skip
    129:129:java.lang.String toString() -> toString
org.sandrop.webscarab.httpclient.HTTPClient -> org.sandrop.webscarab.httpclient.HTTPClient:
    org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
org.sandrop.webscarab.httpclient.HTTPClientFactory -> org.sandrop.webscarab.httpclient.HTTPClientFactory:
    org.sandrop.webscarab.httpclient.HTTPClientFactory _instance -> a
    java.util.logging.Logger _logger -> b
    java.lang.String _httpProxy -> c
    int _httpProxyPort -> d
    java.lang.String _httpsProxy -> e
    int _httpsProxyPort -> f
    java.lang.String[] _noProxy -> g
    java.lang.String _localDomainName -> h
    int _connectTimeout -> i
    int _readTimeout -> j
    org.sandrop.webscarab.httpclient.SSLContextManager _sslContextManager -> k
    org.sandrop.webscarab.httpclient.Authenticator _authenticator -> l
    java.util.List _clientList -> m
    java.util.List _availableClients -> n
    69:131:void <init>(android.content.Context) -> <init>
    134:137:org.sandrop.webscarab.httpclient.HTTPClientFactory getInstance(android.content.Context) -> getInstance
    141:144:org.sandrop.webscarab.httpclient.HTTPClientFactory getValidInstance() -> getValidInstance
    148:150:void invalidateInstance() -> invalidateInstance
    154:154:org.sandrop.webscarab.httpclient.SSLContextManager getSSLContextManager() -> getSSLContextManager
    158:162:void setHttpProxy(java.lang.String,int) -> setHttpProxy
    165:165:java.lang.String getHttpProxy() -> getHttpProxy
    169:169:int getHttpProxyPort() -> getHttpProxyPort
    173:177:void setHttpsProxy(java.lang.String,int) -> setHttpsProxy
    180:180:java.lang.String getHttpsProxy() -> getHttpsProxy
    184:184:int getHttpsProxyPort() -> getHttpsProxyPort
    188:190:void setNoProxy(java.lang.String[]) -> setNoProxy
    193:193:java.lang.String[] getNoProxy() -> getNoProxy
    197:198:void setLocalDomainName(java.lang.String) -> setLocalDomainName
    201:203:void setTimeouts(int,int) -> setTimeouts
    206:207:void setAuthenticator(org.sandrop.webscarab.httpclient.Authenticator) -> setAuthenticator
    210:210:org.sandrop.webscarab.httpclient.Authenticator getAuthenticator() -> getAuthenticator
    214:222:org.sandrop.webscarab.httpclient.HTTPClient getHTTPClient() -> getHTTPClient
    226:234:java.net.Socket getConnectedSocket(org.sandrop.webscarab.model.HttpUrl,boolean) -> getConnectedSocket
    238:248:org.sandrop.webscarab.httpclient.HTTPClient getHTTPClient(int,int) -> getHTTPClient
    252:273:org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
org.sandrop.webscarab.httpclient.SSLContextManager -> org.sandrop.webscarab.httpclient.SSLContextManager:
    java.util.logging.Logger _logger -> a
    java.util.Map _contextMaps -> b
    javax.net.ssl.SSLContext _noClientCertContext -> c
    java.lang.String _defaultKey -> d
    java.util.Map _aliasPasswords -> e
    java.util.List _keyStores -> f
    java.util.Map _keyStoreDescriptions -> g
    javax.net.ssl.TrustManager[] _trustManagers -> h
    javax.net.ssl.TrustManager[] _trustAllCerts -> i
    74:133:void <init>(javax.net.ssl.TrustManager[]) -> <init>
    136:142:int addKeyStore(java.security.KeyStore,java.lang.String) -> a
    146:146:int getKeyStoreCount() -> getKeyStoreCount
    150:150:java.lang.String getKeyStoreDescription(int) -> getKeyStoreDescription
    154:154:int getAliasCount(int) -> getAliasCount
    158:158:java.lang.String getAliasAt(int,int) -> getAliasAt
    162:173:java.lang.String[] getAliases(java.security.KeyStore) -> a
    178:182:java.security.cert.Certificate getCertificate(int,int) -> getCertificate
    187:201:java.lang.String getFingerPrint(java.security.cert.Certificate) -> getFingerPrint
    205:210:boolean isKeyUnlocked(int,int) -> isKeyUnlocked
    214:215:void setDefaultKey(java.lang.String) -> setDefaultKey
    218:218:java.lang.String getDefaultKey() -> getDefaultKey
    223:228:int loadPKCS12Certificate(java.io.InputStream,java.lang.String,java.lang.String) -> loadPKCS12Certificate
    235:243:int loadPKCS12Certificate(java.lang.String,java.lang.String) -> loadPKCS12Certificate
    247:272:void unlockKey(int,int,java.lang.String) -> unlockKey
    275:280:void invalidateSessions() -> invalidateSessions
    283:297:void invalidateSession(javax.net.ssl.SSLContext) -> a
    300:306:javax.net.ssl.SSLContext getSSLContext(java.lang.String) -> getSSLContext
    69:69:java.util.logging.Logger access$000() -> a
    72:90:void <clinit>() -> <clinit>
org.sandrop.webscarab.httpclient.SSLContextManager$1 -> org.sandrop.webscarab.httpclient.SSLContextManager$1:
    91:91:void <init>() -> <init>
    93:93:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    96:102:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    104:110:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
org.sandrop.webscarab.httpclient.URLFetcher -> org.sandrop.webscarab.httpclient.URLFetcher:
    java.lang.String _keyFingerprint -> a
    org.sandrop.webscarab.httpclient.SSLContextManager _sslContextManager -> b
    java.util.logging.Logger _logger -> c
    java.lang.String _httpProxy -> d
    int _httpProxyPort -> e
    java.lang.String _httpsProxy -> f
    int _httpsProxyPort -> g
    java.lang.String[] _noProxy -> h
    java.lang.String _localDomainName -> i
    java.net.Socket _socket -> j
    boolean _direct -> k
    org.sandrop.webscarab.model.Response _response -> l
    java.io.InputStream _in -> m
    java.io.OutputStream _out -> n
    java.lang.String _host -> o
    int _port -> p
    long _lastRequestTime -> q
    int _timeout -> r
    int _connectTimeout -> s
    org.sandrop.webscarab.httpclient.Authenticator _authenticator -> t
    java.lang.String _authCreds -> u
    java.lang.String _proxyAuthCreds -> v
    java.util.Map _proxyAuthCredsBasic -> w
    java.util.Map _cachedLocalAddresses -> x
    boolean LOGD -> y
    73:119:void <init>() -> <init>
    122:124:void cleanCachedBasicCredentials() -> cleanCachedBasicCredentials
    127:128:void setLocalDomainName(java.lang.String) -> setLocalDomainName
    135:138:void setHttpProxy(java.lang.String,int) -> setHttpProxy
    145:148:void setHttpsProxy(java.lang.String,int) -> setHttpsProxy
    157:165:void setNoProxy(java.lang.String[]) -> setNoProxy
    168:169:void setSSLContextManager(org.sandrop.webscarab.httpclient.SSLContextManager) -> setSSLContextManager
    172:174:void setTimeouts(int,int) -> setTimeouts
    177:178:void setAuthenticator(org.sandrop.webscarab.httpclient.Authenticator) -> setAuthenticator
    181:181:org.sandrop.webscarab.httpclient.Authenticator getAuthenticator() -> getAuthenticator
    191:405:org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
    409:411:java.net.Socket getConnectedSocket(org.sandrop.webscarab.model.HttpUrl,boolean) -> getConnectedSocket
    415:444:java.net.InetSocketAddress getSocketAddress(java.lang.String,int) -> a
    448:586:void connect(org.sandrop.webscarab.model.HttpUrl,boolean) -> a
    589:613:boolean useProxy(org.sandrop.webscarab.model.HttpUrl) -> a
    617:641:boolean invalidSocket(org.sandrop.webscarab.model.HttpUrl) -> b
    653:727:java.lang.String constructAuthenticationHeader(java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> a
    731:774:java.lang.String attemptNegotiation(java.lang.String,java.lang.String) -> a
    107:107:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.AbstractConversationModel -> org.sandrop.webscarab.model.AbstractConversationModel:
    org.sandrop.webscarab.model.FrameworkModel _model -> a
    org.sandrop.webscarab.util.EventListenerList _listenerList -> b
    java.util.logging.Logger _logger -> c
    50:57:void <init>(org.sandrop.webscarab.model.FrameworkModel) -> <init>
    int getConversationCount() -> getConversationCount
    org.sandrop.webscarab.model.ConversationID getConversationAt(int) -> getConversationAt
    int getIndexOfConversation(org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
    68:68:java.lang.String getConversationOrigin(org.sandrop.webscarab.model.ConversationID) -> getConversationOrigin
    72:72:java.util.Date getConversationDate(org.sandrop.webscarab.model.ConversationID) -> getConversationDate
    76:76:java.lang.String getRequestMethod(org.sandrop.webscarab.model.ConversationID) -> getRequestMethod
    80:80:java.lang.String getConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperty
    84:85:void setConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> setConversationProperty
    88:88:java.lang.String getResponseStatus(org.sandrop.webscarab.model.ConversationID) -> getResponseStatus
    92:92:org.sandrop.webscarab.model.HttpUrl getRequestUrl(org.sandrop.webscarab.model.ConversationID) -> getRequestUrl
    96:96:org.sandrop.webscarab.model.Request getRequest(org.sandrop.webscarab.model.ConversationID) -> getRequest
    100:100:org.sandrop.webscarab.model.Response getResponse(org.sandrop.webscarab.model.ConversationID) -> getResponse
    108:111:void removeConversationListener(org.sandrop.webscarab.model.ConversationListener) -> removeConversationListener
    118:121:void addConversationListener(org.sandrop.webscarab.model.ConversationListener) -> addConversationListener
    130:143:void fireConversationAdded(org.sandrop.webscarab.model.ConversationID,int) -> fireConversationAdded
    152:165:void fireConversationRemoved(org.sandrop.webscarab.model.ConversationID,int) -> fireConversationRemoved
    174:187:void fireConversationChanged(org.sandrop.webscarab.model.ConversationID,int) -> fireConversationChanged
    196:208:void fireConversationsChanged() -> fireConversationsChanged
org.sandrop.webscarab.model.AbstractUrlModel -> org.sandrop.webscarab.model.AbstractUrlModel:
    org.sandrop.webscarab.util.EventListenerList _listenerList -> a
    java.util.logging.Logger _logger -> b
    47:53:void <init>() -> <init>
    int getChildCount(org.sandrop.webscarab.model.HttpUrl) -> getChildCount
    int getIndexOf(org.sandrop.webscarab.model.HttpUrl) -> getIndexOf
    org.sandrop.webscarab.model.HttpUrl getChildAt(org.sandrop.webscarab.model.HttpUrl,int) -> getChildAt
    64:67:void addUrlListener(org.sandrop.webscarab.model.UrlListener) -> addUrlListener
    70:73:void removeUrlListener(org.sandrop.webscarab.model.UrlListener) -> removeUrlListener
    81:95:void fireUrlAdded(org.sandrop.webscarab.model.HttpUrl,int) -> fireUrlAdded
    103:116:void fireUrlRemoved(org.sandrop.webscarab.model.HttpUrl,int) -> fireUrlRemoved
    124:138:void fireUrlChanged(org.sandrop.webscarab.model.HttpUrl,int) -> fireUrlChanged
    145:158:void fireUrlsChanged() -> fireUrlsChanged
org.sandrop.webscarab.model.ConnectionDescriptor -> org.sandrop.webscarab.model.ConnectionDescriptor:
    java.lang.String[] namespaces -> a
    java.lang.String[] names -> b
    java.lang.String[] versions -> c
    java.lang.String laddress -> d
    int lport -> e
    java.lang.String lportprotocol -> f
    java.lang.String raddress -> g
    java.lang.String rhostname -> h
    int rport -> i
    java.lang.String rportprotocol -> j
    int id -> k
    int state -> l
    java.lang.String type -> m
    18:32:void <init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,int) -> <init>
    35:35:java.lang.String[] getNamespaces() -> getNamespaces
    39:43:java.lang.String getNamespace() -> getNamespace
    47:47:java.lang.String[] getNames() -> getNames
    51:55:java.lang.String getName() -> getName
    59:59:java.lang.String[] getVersions() -> getVersions
    63:63:int getStateCode() -> getStateCode
    67:67:java.lang.String getStateShortCode() -> getStateShortCode
    72:72:java.lang.String getStateDescription() -> getStateDescription
    76:76:java.lang.String getType() -> getType
    80:80:int getLocalPort() -> getLocalPort
    84:84:java.lang.String getLocalPortProtocol() -> getLocalPortProtocol
    88:88:int getRemotePort() -> getRemotePort
    92:92:java.lang.String getRemotePortProtocol() -> getRemotePortProtocol
    96:96:java.lang.String getRemoteHostName() -> getRemoteHostName
    100:100:int getId() -> getId
    104:104:java.lang.String getLocalAddress() -> getLocalAddress
    108:108:java.lang.String getRemoteAddress() -> getRemoteAddress
    112:133:java.lang.String getPortProtocol(int) -> getPortProtocol
    138:174:java.lang.String getStateShortDesc(int) -> getStateShortDesc
org.sandrop.webscarab.model.ConversationEvent -> org.sandrop.webscarab.model.ConversationEvent:
    org.sandrop.webscarab.model.ConversationID _id -> a
    int _position -> b
    50:53:void <init>(java.lang.Object,org.sandrop.webscarab.model.ConversationID,int) -> <init>
    56:56:org.sandrop.webscarab.model.ConversationID getConversationID() -> getConversationID
    60:60:int getPosition() -> getPosition
org.sandrop.webscarab.model.ConversationID -> org.sandrop.webscarab.model.ConversationID:
    java.lang.Object _lock -> a
    int _next -> b
    int _id -> c
    45:49:void <init>() -> <init>
    51:60:void <init>(int) -> <init>
    68:69:void <init>(java.lang.String) -> <init>
    75:78:void reset() -> reset
    81:81:int getID() -> getID
    89:89:java.lang.String toString() -> toString
    98:99:boolean equals(java.lang.Object) -> equals
    107:107:int hashCode() -> hashCode
    116:120:int compareTo(java.lang.Object) -> compareTo
    36:37:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.ConversationListener -> org.sandrop.webscarab.model.ConversationListener:
    void conversationAdded(org.sandrop.webscarab.model.ConversationEvent) -> conversationAdded
    void conversationChanged(org.sandrop.webscarab.model.ConversationEvent) -> conversationChanged
    void conversationRemoved(org.sandrop.webscarab.model.ConversationEvent) -> conversationRemoved
    void conversationsChanged() -> conversationsChanged
org.sandrop.webscarab.model.ConversationModel -> org.sandrop.webscarab.model.ConversationModel:
    int getConversationCount() -> getConversationCount
    org.sandrop.webscarab.model.ConversationID getConversationAt(int) -> getConversationAt
    int getIndexOfConversation(org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
    java.lang.String getConversationOrigin(org.sandrop.webscarab.model.ConversationID) -> getConversationOrigin
    java.lang.String getConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperty
    void setConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> setConversationProperty
    java.util.Date getConversationDate(org.sandrop.webscarab.model.ConversationID) -> getConversationDate
    java.lang.String getRequestMethod(org.sandrop.webscarab.model.ConversationID) -> getRequestMethod
    org.sandrop.webscarab.model.HttpUrl getRequestUrl(org.sandrop.webscarab.model.ConversationID) -> getRequestUrl
    java.lang.String getResponseStatus(org.sandrop.webscarab.model.ConversationID) -> getResponseStatus
    org.sandrop.webscarab.model.Request getRequest(org.sandrop.webscarab.model.ConversationID) -> getRequest
    org.sandrop.webscarab.model.Response getResponse(org.sandrop.webscarab.model.ConversationID) -> getResponse
    void addConversationListener(org.sandrop.webscarab.model.ConversationListener) -> addConversationListener
    void removeConversationListener(org.sandrop.webscarab.model.ConversationListener) -> removeConversationListener
org.sandrop.webscarab.model.Cookie -> org.sandrop.webscarab.model.Cookie:
    java.util.Date _date -> a
    java.lang.String _name -> b
    java.lang.String _value -> c
    java.lang.String _key -> d
    java.lang.String _comment -> e
    java.lang.String _domain -> f
    java.lang.String _path -> g
    java.lang.String _maxage -> h
    boolean _secure -> i
    java.lang.String _version -> j
    boolean _httponly -> k
    java.util.logging.Logger _logger -> l
    65:97:void <init>(java.util.Date,org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> <init>
    65:111:void <init>(java.util.Date,java.lang.String) -> <init>
    114:149:void parseHeader(java.lang.String) -> a
    156:156:java.lang.String getKey() -> getKey
    164:164:java.util.Date getDate() -> getDate
    172:172:java.lang.String getName() -> getName
    180:180:java.lang.String getValue() -> getValue
    188:188:java.lang.String getDomain() -> getDomain
    196:196:java.lang.String getMaxAge() -> getMaxAge
    204:204:java.lang.String getPath() -> getPath
    212:212:boolean getSecure() -> getSecure
    220:220:boolean getHTTPOnly() -> getHTTPOnly
    228:228:java.lang.String getVersion() -> getVersion
    236:236:java.lang.String getComment() -> getComment
    244:267:java.lang.String setCookie() -> setCookie
    274:277:java.lang.String toString() -> toString
org.sandrop.webscarab.model.FileSystemStore -> org.sandrop.webscarab.model.FileSystemStore:
    org.sandrop.webscarab.model.HttpUrl[] NO_CHILDREN -> a
    java.io.File _dir -> b
    java.io.File _conversationDir -> c
    java.util.logging.Logger _logger -> d
    java.util.List _conversations -> e
    java.util.SortedMap _conversationProperties -> f
    java.util.SortedMap _urlProperties -> g
    java.util.SortedMap _urlConversations -> h
    java.util.SortedMap _urls -> i
    java.util.Map _requestCache -> j
    java.util.Map _responseCache -> k
    java.util.Map _urlCache -> l
    java.util.SortedMap _cookies -> m
    91:92:boolean isExistingSession(java.io.File) -> isExistingSession
    75:111:void <init>(java.io.File) -> <init>
    114:121:void load() -> a
    124:164:void loadConversationProperties() -> b
    168:199:void loadUrlProperties() -> c
    203:216:void create() -> d
    230:241:int addConversation(org.sandrop.webscarab.model.ConversationID,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> addConversation
    245:253:void addConversationForUrl(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID) -> a
    262:265:void setConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> setConversationProperty
    274:276:boolean addConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> addConversationProperty
    280:300:boolean addProperty(java.util.Map,java.lang.String,java.lang.String) -> a
    312:314:java.lang.String[] getConversationProperties(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperties
    318:329:java.lang.String[] getProperties(java.util.Map,java.lang.String) -> a
    339:351:void addUrl(org.sandrop.webscarab.model.HttpUrl) -> addUrl
    359:359:boolean isKnownUrl(org.sandrop.webscarab.model.HttpUrl) -> isKnownUrl
    369:372:void setUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> setUrlProperty
    381:383:boolean addUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> addUrlProperty
    394:396:java.lang.String[] getUrlProperties(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlProperties
    405:407:int getChildCount(org.sandrop.webscarab.model.HttpUrl) -> getChildCount
    417:427:org.sandrop.webscarab.model.HttpUrl getChildAt(org.sandrop.webscarab.model.HttpUrl,int) -> getChildAt
    431:440:int getIndexOf(org.sandrop.webscarab.model.HttpUrl) -> getIndexOf
    449:452:int getConversationCount(org.sandrop.webscarab.model.HttpUrl) -> getConversationCount
    465:472:org.sandrop.webscarab.model.ConversationID getConversationAt(org.sandrop.webscarab.model.HttpUrl,int) -> getConversationAt
    486:493:int getIndexOfConversation(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
    503:515:void setRequest(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request) -> setRequest
    521:539:org.sandrop.webscarab.model.Request getRequest(org.sandrop.webscarab.model.ConversationID) -> getRequest
    550:562:void setResponse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Response) -> setResponse
    568:586:org.sandrop.webscarab.model.Response getResponse(org.sandrop.webscarab.model.ConversationID) -> getResponse
    591:594:void flush() -> flush
    598:623:void flushConversationProperties() -> e
    627:652:void flushUrlProperties() -> f
    655:655:int getCookieCount() -> getCookieCount
    659:661:int getCookieCount(java.lang.String) -> getCookieCount
    665:665:java.lang.String getCookieAt(int) -> getCookieAt
    669:671:org.sandrop.webscarab.model.Cookie getCookieAt(java.lang.String,int) -> getCookieAt
    675:677:org.sandrop.webscarab.model.Cookie getCurrentCookie(java.lang.String) -> getCurrentCookie
    681:681:int getIndexOfCookie(org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    685:687:int getIndexOfCookie(java.lang.String,org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    696:704:boolean addCookie(org.sandrop.webscarab.model.Cookie) -> addCookie
    713:718:boolean removeCookie(org.sandrop.webscarab.model.Cookie) -> removeCookie
    722:756:void loadCookies() -> g
    760:780:void flushCookies() -> h
    797:797:long createNewConversation(java.util.Date,int,org.sandrop.webscarab.model.ConnectionDescriptor) -> createNewConversation
    805:805:long updateGotRequestConversation(long,java.util.Date,org.sandrop.webscarab.model.Request) -> updateGotRequestConversation
    812:812:long updateGotResponseConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> updateGotResponseConversation
    819:819:long updateFailedConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,java.lang.String) -> updateFailedConversation
    70:70:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.FileSystemStore$1 -> org.sandrop.webscarab.model.FileSystemStore$1:
org.sandrop.webscarab.model.FileSystemStore$NullComparator -> org.sandrop.webscarab.model.FileSystemStore$a:
    org.sandrop.webscarab.model.FileSystemStore this$0 -> a
    782:782:void <init>(org.sandrop.webscarab.model.FileSystemStore) -> <init>
    785:789:int compare(java.lang.Object,java.lang.Object) -> compare
    782:782:void <init>(org.sandrop.webscarab.model.FileSystemStore,org.sandrop.webscarab.model.FileSystemStore$1) -> <init>
org.sandrop.webscarab.model.FilteredConversationModel -> org.sandrop.webscarab.model.FilteredConversationModel:
    org.sandrop.webscarab.model.ConversationModel _model -> a
    org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock _rwl -> b
    java.util.List _conversations -> c
    51:62:void <init>(org.sandrop.webscarab.model.FrameworkModel,org.sandrop.webscarab.model.ConversationModel) -> <init>
    66:82:void updateConversations() -> updateConversations
    boolean shouldFilter(org.sandrop.webscarab.model.ConversationID) -> shouldFilter
    88:94:boolean isFiltered(org.sandrop.webscarab.model.ConversationID) -> isFiltered
    100:106:org.sandrop.webscarab.model.ConversationID getConversationAt(int) -> getConversationAt
    112:118:int getConversationCount() -> getConversationCount
    124:130:int getIndexOfConversation(org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
    135:135:EDU.oswego.cs.dl.util.concurrent.Sync readLock() -> readLock
    47:47:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$100(org.sandrop.webscarab.model.FilteredConversationModel) -> a
    47:47:java.util.List access$200(org.sandrop.webscarab.model.FilteredConversationModel) -> b
org.sandrop.webscarab.model.FilteredConversationModel$1 -> org.sandrop.webscarab.model.FilteredConversationModel$1:
org.sandrop.webscarab.model.FilteredConversationModel$Listener -> org.sandrop.webscarab.model.FilteredConversationModel$a:
    org.sandrop.webscarab.model.FilteredConversationModel this$0 -> a
    138:138:void <init>(org.sandrop.webscarab.model.FilteredConversationModel) -> <init>
    141:158:void conversationAdded(org.sandrop.webscarab.model.ConversationEvent) -> conversationAdded
    161:191:void conversationChanged(org.sandrop.webscarab.model.ConversationEvent) -> conversationChanged
    194:208:void conversationRemoved(org.sandrop.webscarab.model.ConversationEvent) -> conversationRemoved
    211:212:void conversationsChanged() -> conversationsChanged
    138:138:void <init>(org.sandrop.webscarab.model.FilteredConversationModel,org.sandrop.webscarab.model.FilteredConversationModel$1) -> <init>
org.sandrop.webscarab.model.FilteredUrlModel -> org.sandrop.webscarab.model.FilteredUrlModel:
    org.sandrop.webscarab.model.UrlModel _urlModel -> _urlModel
    java.util.Set _filteredUrls -> a
    java.util.Set _implicitUrls -> b
    org.sandrop.webscarab.util.MRUCache _cache -> c
    org.sandrop.webscarab.util.EventListenerList _listenerList -> _listenerList
    java.util.logging.Logger _logger -> _logger
    boolean _updating -> d
    int hit -> e
    int miss -> f
    54:80:void <init>(org.sandrop.webscarab.model.UrlModel) -> <init>
    84:86:void initFilters() -> initFilters
    boolean shouldFilter(org.sandrop.webscarab.model.HttpUrl) -> shouldFilter
    91:91:boolean isFiltered(org.sandrop.webscarab.model.HttpUrl) -> isFiltered
    95:100:void setFiltered(org.sandrop.webscarab.model.HttpUrl,boolean) -> setFiltered
    103:103:boolean isImplicit(org.sandrop.webscarab.model.HttpUrl) -> isImplicit
    107:113:void setImplicit(org.sandrop.webscarab.model.HttpUrl,boolean) -> setImplicit
    116:116:boolean isVisible(org.sandrop.webscarab.model.HttpUrl) -> a
    120:121:int getIndexOf(org.sandrop.webscarab.model.HttpUrl) -> getIndexOf
    125:125:org.sandrop.webscarab.model.HttpUrl getChildAt(org.sandrop.webscarab.model.HttpUrl,int) -> getChildAt
    129:131:void updateFilteredUrls() -> a
    134:159:java.util.ArrayList getFilteredChildren(org.sandrop.webscarab.model.HttpUrl) -> b
    163:163:int getChildCount(org.sandrop.webscarab.model.HttpUrl) -> getChildCount
    167:177:void recurseTree(org.sandrop.webscarab.model.HttpUrl) -> c
    183:199:void grow(org.sandrop.webscarab.model.HttpUrl) -> d
    205:221:void prune(org.sandrop.webscarab.model.HttpUrl) -> e
    224:229:void reset() -> reset
    51:51:void access$000(org.sandrop.webscarab.model.FilteredUrlModel,org.sandrop.webscarab.model.HttpUrl) -> a
    51:51:boolean access$100(org.sandrop.webscarab.model.FilteredUrlModel,org.sandrop.webscarab.model.HttpUrl) -> b
    51:51:boolean access$200(org.sandrop.webscarab.model.FilteredUrlModel) -> a
    51:51:void access$300(org.sandrop.webscarab.model.FilteredUrlModel,org.sandrop.webscarab.model.HttpUrl) -> c
org.sandrop.webscarab.model.FilteredUrlModel$Listener -> org.sandrop.webscarab.model.FilteredUrlModel$a:
    org.sandrop.webscarab.model.FilteredUrlModel this$0 -> a
    233:234:void <init>(org.sandrop.webscarab.model.FilteredUrlModel) -> <init>
    237:238:void urlsChanged() -> urlsChanged
    241:247:void urlAdded(org.sandrop.webscarab.model.UrlEvent) -> urlAdded
    250:271:void urlChanged(org.sandrop.webscarab.model.UrlEvent) -> urlChanged
    274:280:void urlRemoved(org.sandrop.webscarab.model.UrlEvent) -> urlRemoved
org.sandrop.webscarab.model.FrameworkEvent -> org.sandrop.webscarab.model.FrameworkEvent:
    org.sandrop.webscarab.model.ConversationID _id -> a
    org.sandrop.webscarab.model.HttpUrl _url -> b
    org.sandrop.webscarab.model.Cookie _cookie -> c
    java.lang.String _property -> d
    47:57:void <init>(java.lang.Object,org.sandrop.webscarab.model.ConversationID,java.lang.String) -> <init>
    47:63:void <init>(java.lang.Object,org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> <init>
    47:68:void <init>(java.lang.Object,org.sandrop.webscarab.model.Cookie) -> <init>
    71:71:org.sandrop.webscarab.model.ConversationID getConversationID() -> getConversationID
    75:75:org.sandrop.webscarab.model.HttpUrl getUrl() -> getUrl
    79:79:org.sandrop.webscarab.model.Cookie getCookie() -> getCookie
    83:83:java.lang.String getPropertyName() -> getPropertyName
org.sandrop.webscarab.model.FrameworkListener -> org.sandrop.webscarab.model.FrameworkListener:
    void cookieAdded(org.sandrop.webscarab.model.FrameworkEvent) -> cookieAdded
    void cookieRemoved(org.sandrop.webscarab.model.FrameworkEvent) -> cookieRemoved
    void cookiesChanged() -> cookiesChanged
    void conversationPropertyChanged(org.sandrop.webscarab.model.FrameworkEvent) -> conversationPropertyChanged
    void urlPropertyChanged(org.sandrop.webscarab.model.FrameworkEvent) -> urlPropertyChanged
org.sandrop.webscarab.model.FrameworkListenerCollection -> org.sandrop.webscarab.model.FrameworkListenerCollection:
    39:39:void <init>() -> <init>
org.sandrop.webscarab.model.FrameworkModel -> org.sandrop.webscarab.model.FrameworkModel:
    org.sandrop.webscarab.model.Cookie[] NO_COOKIES -> a
    int CONVERSATION_TYPE_PROXY -> CONVERSATION_TYPE_PROXY
    int CONVERSATION_TYPE_MANUAL -> CONVERSATION_TYPE_MANUAL
    int CONVERSATION_TYPE_INTERCEPT -> CONVERSATION_TYPE_INTERCEPT
    int CONVERSATION_STATUS_NEW -> CONVERSATION_STATUS_NEW
    int CONVERSATION_STATUS_REQ_SEND -> CONVERSATION_STATUS_REQ_SEND
    int CONVERSATION_STATUS_RESP_RECEIVED -> CONVERSATION_STATUS_RESP_RECEIVED
    int CONVERSATION_STATUS_ABORTED -> CONVERSATION_STATUS_ABORTED
    org.sandrop.webscarab.util.EventListenerList _listenerList -> b
    java.util.Map _urlCache -> c
    org.sandrop.webscarab.model.SiteModelStore _store -> d
    org.sandrop.webscarab.model.FrameworkModel$FrameworkUrlModel _urlModel -> e
    org.sandrop.webscarab.model.FrameworkModel$FrameworkConversationModel _conversationModel -> f
    boolean _modified -> g
    java.util.logging.Logger _logger -> h
    76:97:void <init>() -> <init>
    102:124:void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    127:127:boolean haveValidStore() -> haveValidStore
    135:135:org.sandrop.webscarab.model.UrlModel getUrlModel() -> getUrlModel
    139:139:org.sandrop.webscarab.model.ConversationModel getConversationModel() -> getConversationModel
    148:161:void flush() -> flush
    168:168:boolean isModified() -> isModified
    178:178:org.sandrop.webscarab.model.ConversationID reserveConversationID() -> reserveConversationID
    182:182:long createNewConversation(java.util.Date,int,org.sandrop.webscarab.model.ConnectionDescriptor) -> createNewConversation
    186:186:long updateGotRequestConversation(long,java.util.Date,org.sandrop.webscarab.model.Request) -> updateGotRequestConversation
    190:190:long updateGotResponseConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> updateGotResponseConversation
    194:194:long updateFailedConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,java.lang.String) -> updateFailedConversation
    207:230:void addConversation(org.sandrop.webscarab.model.ConversationID,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> addConversation
    233:233:java.lang.String getConversationOrigin(org.sandrop.webscarab.model.ConversationID) -> getConversationOrigin
    240:254:java.util.Date getConversationDate(org.sandrop.webscarab.model.ConversationID) -> getConversationDate
    269:286:org.sandrop.webscarab.model.HttpUrl getRequestUrl(org.sandrop.webscarab.model.ConversationID) -> getRequestUrl
    299:309:void setConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> setConversationProperty
    318:333:boolean addConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> addConversationProperty
    343:348:java.lang.String getConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperty
    352:352:java.lang.String getRequestMethod(org.sandrop.webscarab.model.ConversationID) -> getRequestMethod
    356:356:java.lang.String getResponseStatus(org.sandrop.webscarab.model.ConversationID) -> getResponseStatus
    369:375:java.lang.String[] getConversationProperties(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperties
    383:420:void addUrl(org.sandrop.webscarab.model.HttpUrl) -> a
    429:442:void setUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> setUrlProperty
    451:467:boolean addUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> addUrlProperty
    480:486:java.lang.String[] getUrlProperties(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlProperties
    497:503:java.lang.String getUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlProperty
    515:521:org.sandrop.webscarab.model.Request getRequest(org.sandrop.webscarab.model.ConversationID) -> getRequest
    534:540:org.sandrop.webscarab.model.Response getResponse(org.sandrop.webscarab.model.ConversationID) -> getResponse
    549:552:void addModelListener(org.sandrop.webscarab.model.FrameworkListener) -> addModelListener
    559:562:void removeModelListener(org.sandrop.webscarab.model.FrameworkListener) -> removeModelListener
    570:580:int getCookieCount() -> getCookieCount
    593:599:int getCookieCount(java.lang.String) -> getCookieCount
    612:618:java.lang.String getCookieAt(int) -> getCookieAt
    632:638:org.sandrop.webscarab.model.Cookie getCookieAt(java.lang.String,int) -> getCookieAt
    652:658:int getIndexOfCookie(org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    672:678:int getIndexOfCookie(java.lang.String,org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    686:693:org.sandrop.webscarab.model.Cookie getCurrentCookie(java.lang.String) -> getCurrentCookie
    704:717:void addCookie(org.sandrop.webscarab.model.Cookie) -> addCookie
    726:739:void removeCookie(org.sandrop.webscarab.model.Cookie) -> removeCookie
    750:772:org.sandrop.webscarab.model.Cookie[] getCookiesForUrl(org.sandrop.webscarab.model.HttpUrl) -> getCookiesForUrl
    782:795:void fireCookieAdded(org.sandrop.webscarab.model.Cookie) -> fireCookieAdded
    803:816:void fireCookieRemoved(org.sandrop.webscarab.model.Cookie) -> fireCookieRemoved
    823:835:void fireCookiesChanged() -> fireCookiesChanged
    843:856:void fireConversationPropertyChanged(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> fireConversationPropertyChanged
    864:877:void fireUrlPropertyChanged(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> fireUrlPropertyChanged
    56:56:org.sandrop.webscarab.model.SiteModelStore access$100(org.sandrop.webscarab.model.FrameworkModel) -> a
    56:56:java.util.logging.Logger access$200(org.sandrop.webscarab.model.FrameworkModel) -> b
    60:60:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.FrameworkModel$1 -> org.sandrop.webscarab.model.FrameworkModel$1:
org.sandrop.webscarab.model.FrameworkModel$FrameworkConversationModel -> org.sandrop.webscarab.model.FrameworkModel$a:
    org.sandrop.webscarab.model.FrameworkModel this$0 -> a
    932:934:void <init>(org.sandrop.webscarab.model.FrameworkModel,org.sandrop.webscarab.model.FrameworkModel) -> <init>
    944:950:org.sandrop.webscarab.model.ConversationID getConversationAt(int) -> getConversationAt
    955:965:int getConversationCount() -> getConversationCount
    973:979:int getIndexOfConversation(org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
org.sandrop.webscarab.model.FrameworkModel$FrameworkUrlModel -> org.sandrop.webscarab.model.FrameworkModel$b:
    org.sandrop.webscarab.model.FrameworkModel this$0 -> a
    879:879:void <init>(org.sandrop.webscarab.model.FrameworkModel) -> <init>
    886:896:int getChildCount(org.sandrop.webscarab.model.HttpUrl) -> getChildCount
    904:910:int getIndexOf(org.sandrop.webscarab.model.HttpUrl) -> getIndexOf
    918:924:org.sandrop.webscarab.model.HttpUrl getChildAt(org.sandrop.webscarab.model.HttpUrl,int) -> getChildAt
    879:879:void <init>(org.sandrop.webscarab.model.FrameworkModel,org.sandrop.webscarab.model.FrameworkModel$1) -> <init>
org.sandrop.webscarab.model.HttpUrl -> org.sandrop.webscarab.model.HttpUrl:
    org.sandrop.webscarab.model.HttpUrl[] nullPath -> a
    java.lang.String _scheme -> b
    java.lang.String _host -> c
    int _port -> d
    java.lang.String _path -> e
    java.lang.String _fragment -> f
    java.lang.String _query -> g
    int _hashcode -> h
    46:61:void <init>(java.lang.String) -> <init>
    46:91:void <init>(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> <init>
    94:131:void parseUrl(java.lang.String) -> a
    134:148:java.lang.String relativePath(java.lang.String,java.lang.String) -> a
    153:166:void splitFragQuery() -> a
    173:173:java.lang.String getScheme() -> getScheme
    181:181:java.lang.String getHost() -> getHost
    189:189:int getPort() -> getPort
    197:197:java.lang.String getPath() -> getPath
    205:205:java.lang.String getFragment() -> getFragment
    213:213:java.lang.String getQuery() -> getQuery
    222:226:java.lang.String getSHPP() -> getSHPP
    234:238:java.lang.String getParameters() -> getParameters
    242:243:java.lang.String parentPath(java.lang.String) -> b
    251:264:org.sandrop.webscarab.model.HttpUrl getParentUrl() -> getParentUrl
    273:280:org.sandrop.webscarab.model.HttpUrl[] getUrlHierarchy() -> getUrlHierarchy
    288:292:java.lang.String toString() -> toString
    301:304:java.lang.StringBuffer direct(java.lang.StringBuffer) -> direct
    312:312:java.lang.String direct() -> direct
    362:364:boolean equals(java.lang.Object) -> equals
    402:437:int compareTo(java.lang.Object) -> compareTo
    474:474:int hashCode() -> hashCode
    40:40:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.Message -> org.sandrop.webscarab.model.Message:
    java.util.ArrayList _headers -> a
    org.sandrop.webscarab.model.NamedValue[] NO_HEADERS -> b
    byte[] NO_CONTENT -> c
    byte[] CONTENT_TOO_BIG -> d
    boolean LOGD -> e
    java.lang.String TAG -> f
    java.io.InputStream _contentStream -> g
    org.sandrop.webscarab.model.MessageOutputStream _content -> h
    boolean _chunked -> i
    boolean _gzipped -> j
    boolean _deflate -> k
    int _length -> l
    java.util.logging.Logger _logger -> _logger
    71:94:void <init>() -> <init>
    100:105:void setLargeContentSize(java.lang.String) -> setLargeContentSize
    108:108:long getLargeContentSize(java.lang.String) -> getLargeContentSize
    119:150:void read(java.io.InputStream) -> read
    153:157:java.io.InputStream getContentStream() -> getContentStream
    161:161:boolean isCompressed() -> isCompressed
    165:165:boolean isDeflated() -> isDeflated
    169:169:boolean isChunked() -> isChunked
    173:176:int getContentSize() -> getContentSize
    182:188:void clean() -> clean
    218:221:void setContentFileName(java.lang.String) -> setContentFileName
    224:228:java.lang.String getContentFileName() -> getContentFileName
    232:236:java.io.InputStream getContentInputStream() -> a
    246:249:boolean moveContentToFile(java.io.File) -> moveContentToFile
    258:259:void write(java.io.OutputStream) -> write
    267:268:void writeHeaders(java.io.OutputStream) -> writeHeaders
    271:280:void writeHeaders(java.io.OutputStream,java.lang.String) -> writeHeaders
    289:321:void write(java.io.OutputStream,java.lang.String) -> write
    331:363:void parse(java.lang.StringBuffer) -> parse
    369:369:java.lang.String toString() -> toString
    378:401:java.lang.String toString(java.lang.String) -> toString
    405:429:void updateFlagsForHeader(org.sandrop.webscarab.model.NamedValue) -> a
    437:438:void setHeader(java.lang.String,java.lang.String) -> setHeader
    441:454:void setHeader(org.sandrop.webscarab.model.NamedValue) -> setHeader
    463:464:void addHeader(java.lang.String,java.lang.String) -> addHeader
    467:472:void addHeader(org.sandrop.webscarab.model.NamedValue) -> addHeader
    480:491:java.lang.String deleteHeader(java.lang.String) -> deleteHeader
    499:507:java.lang.String[] getHeaderNames() -> getHeaderNames
    516:525:java.lang.String getHeader(java.lang.String) -> getHeader
    534:545:java.lang.String[] getHeaders(java.lang.String) -> getHeaders
    554:557:org.sandrop.webscarab.model.NamedValue[] getHeaders() -> getHeaders
    566:574:void setHeaders(org.sandrop.webscarab.model.NamedValue[]) -> setHeaders
    586:606:java.lang.String readLine(java.io.InputStream) -> readLine
    616:632:java.lang.String getLine(java.lang.StringBuffer) -> getLine
    646:707:byte[] getContent() -> getContent
    717:721:void flushContentStream() -> flushContentStream
    732:762:void flushContentStream(java.io.OutputStream) -> a
    769:771:void setNoBody() -> setNoBody
    782:817:void setContent(byte[]) -> setContent
    820:831:boolean equals(java.lang.Object) -> equals
    74:78:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.MessageOutputStream -> org.sandrop.webscarab.model.MessageOutputStream:
    java.io.ByteArrayOutputStream memoryStream -> a
    java.io.FileOutputStream fileStream -> b
    boolean useFileStream -> c
    boolean deleteOnClean -> d
    java.io.File file -> e
    boolean LOGD -> f
    java.lang.String TAG -> g
    int LARGE_CONTENT_SIZE -> LARGE_CONTENT_SIZE
    long SUM_MEMORY_CONTENT_ALL -> h
    30:31:void resetActiveMemorySize() -> resetActiveMemorySize
    34:43:void addRemoveActiveContentSum(int,boolean) -> addRemoveActiveContentSum
    19:48:void <init>() -> <init>
    19:54:void <init>(java.lang.String) -> <init>
    58:83:boolean moveContentToFile(java.io.File) -> moveContentToFile
    89:111:java.lang.String getFileName() -> getFileName
    116:117:void write(int) -> write
    121:139:void write(byte[],int,int) -> write
    142:153:java.io.InputStream getInputStream() -> getInputStream
    157:175:int size() -> size
    180:196:void close() -> close
    23:27:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.MultiPartContent -> org.sandrop.webscarab.model.MultiPartContent:
    byte[] _boundary -> a
    java.util.List _parts -> b
    byte[] CRLF -> c
    57:86:void <init>(java.lang.String,byte[]) -> <init>
    89:89:boolean verifyBoundary() -> verifyBoundary
    94:97:java.lang.String getBoundary() -> getBoundary
    102:102:int size() -> size
    106:106:org.sandrop.webscarab.model.Message set(int,org.sandrop.webscarab.model.Message) -> set
    110:110:org.sandrop.webscarab.model.Message get(int) -> get
    114:114:org.sandrop.webscarab.model.Message remove(int) -> remove
    118:119:void add(int,org.sandrop.webscarab.model.Message) -> add
    122:122:boolean add(org.sandrop.webscarab.model.Message) -> add
    126:136:int findBytes(byte[],byte[],int) -> a
    140:149:java.lang.String getPartName(int) -> getPartName
    154:169:byte[] getBytes() -> getBytes
    173:184:void main(java.lang.String[]) -> main
    54:54:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.NamedValue -> org.sandrop.webscarab.model.NamedValue:
    java.lang.String _name -> a
    java.lang.String _value -> b
    java.util.logging.Logger _logger -> c
    50:57:void <init>(java.lang.String,java.lang.String) -> <init>
    60:60:java.lang.String getName() -> getName
    64:64:java.lang.String getValue() -> getValue
    68:68:java.lang.String toString() -> toString
    73:91:org.sandrop.webscarab.model.NamedValue[] splitNamedValues(java.lang.String,java.lang.String,java.lang.String) -> splitNamedValues
    47:47:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.Preferences -> org.sandrop.webscarab.model.Preferences:
    android.content.Context mContext -> a
    45:46:void <init>() -> <init>
    49:50:void init(android.content.Context) -> init
    53:57:void setPreference(java.lang.String,java.lang.String) -> setPreference
    60:60:java.lang.String getPreference(java.lang.String) -> getPreference
    64:66:java.lang.String getPreference(java.lang.String,java.lang.String) -> getPreference
    70:72:boolean getPreferenceBoolean(java.lang.String,boolean) -> getPreferenceBoolean
    78:83:void remove(java.lang.String) -> remove
org.sandrop.webscarab.model.Request -> org.sandrop.webscarab.model.Request:
    java.lang.String _method -> a
    org.sandrop.webscarab.model.HttpUrl _url -> b
    java.lang.String _version -> c
    boolean _isTransparent -> d
    boolean _isSecure -> e
    org.sandrop.webscarab.model.ConnectionDescriptor _connectionDescriptor -> f
    49:59:void <init>() -> <init>
    49:66:void <init>(boolean,boolean,org.sandrop.webscarab.model.ConnectionDescriptor) -> <init>
    49:78:void <init>(org.sandrop.webscarab.model.Request) -> <init>
    86:87:void read(java.io.InputStream) -> read
    99:146:void read(java.io.InputStream,org.sandrop.webscarab.model.HttpUrl) -> read
    154:155:void parse(java.lang.String) -> parse
    163:191:void parse(java.lang.StringBuffer) -> parse
    200:201:void write(java.io.OutputStream) -> write
    211:221:void write(java.io.OutputStream,java.lang.String) -> write
    229:230:void writeDirect(java.io.OutputStream) -> writeDirect
    239:249:void writeDirect(java.io.OutputStream,java.lang.String) -> writeDirect
    256:257:void setMethod(java.lang.String) -> setMethod
    264:264:java.lang.String getMethod() -> getMethod
    272:273:void setURL(org.sandrop.webscarab.model.HttpUrl) -> setURL
    280:280:org.sandrop.webscarab.model.HttpUrl getURL() -> getURL
    290:292:boolean parameterSearch(java.lang.String) -> parameterSearch
    299:300:void setVersion(java.lang.String) -> setVersion
    307:307:java.lang.String getVersion() -> getVersion
    315:315:org.sandrop.webscarab.model.ConnectionDescriptor getConnectionDescriptor() -> getConnectionDescriptor
    323:323:java.lang.String toString() -> toString
    333:341:java.lang.String toString(java.lang.String) -> toString
    345:350:boolean equals(java.lang.Object) -> equals
org.sandrop.webscarab.model.Response -> org.sandrop.webscarab.model.Response:
    java.lang.String version -> a
    java.lang.String status -> b
    java.lang.String message -> c
    org.sandrop.webscarab.model.Request _request -> d
    java.net.Socket _socket -> e
    boolean _protocolswitch -> f
    java.lang.String NO_DATA_FROM_SERVER -> NO_DATA_FROM_SERVER
    48:59:void <init>() -> <init>
    48:70:void <init>(org.sandrop.webscarab.model.Response) -> <init>
    73:74:void setSocket(java.net.Socket) -> setSocket
    77:77:java.net.Socket getSocket() -> getSocket
    87:108:void read(java.io.InputStream) -> read
    116:117:void parse(java.lang.String) -> parse
    125:141:void parse(java.lang.StringBuffer) -> parse
    144:144:boolean haveProtocolSwitch() -> haveProtocolSwitch
    154:156:void writeSwitchProtocol(java.io.OutputStream) -> writeSwitchProtocol
    165:169:void writeHeaders(java.io.OutputStream,java.lang.String) -> writeHeaders
    178:179:void write(java.io.OutputStream) -> write
    188:192:void write(java.io.OutputStream,java.lang.String) -> write
    199:200:void setVersion(java.lang.String) -> setVersion
    207:207:java.lang.String getVersion() -> getVersion
    215:216:void setStatus(java.lang.String) -> setStatus
    223:223:java.lang.String getStatus() -> getStatus
    231:232:void setMessage(java.lang.String) -> setMessage
    239:239:java.lang.String getMessage() -> getMessage
    247:247:java.lang.String getStatusLine() -> getStatusLine
    256:256:java.lang.String toString() -> toString
    265:268:java.lang.String toString(java.lang.String) -> toString
    276:277:void setRequest(org.sandrop.webscarab.model.Request) -> setRequest
    284:284:org.sandrop.webscarab.model.Request getRequest() -> getRequest
    288:292:boolean equals(java.lang.Object) -> equals
    54:54:void <clinit>() -> <clinit>
org.sandrop.webscarab.model.SiteModelStore -> org.sandrop.webscarab.model.SiteModelStore:
    long createNewConversation(java.util.Date,int,org.sandrop.webscarab.model.ConnectionDescriptor) -> createNewConversation
    long updateGotRequestConversation(long,java.util.Date,org.sandrop.webscarab.model.Request) -> updateGotRequestConversation
    long updateGotResponseConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> updateGotResponseConversation
    long updateFailedConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,java.lang.String) -> updateFailedConversation
    int addConversation(org.sandrop.webscarab.model.ConversationID,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> addConversation
    void setConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> setConversationProperty
    boolean addConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> addConversationProperty
    java.lang.String[] getConversationProperties(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperties
    int getIndexOfConversation(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
    int getConversationCount(org.sandrop.webscarab.model.HttpUrl) -> getConversationCount
    org.sandrop.webscarab.model.ConversationID getConversationAt(org.sandrop.webscarab.model.HttpUrl,int) -> getConversationAt
    void addUrl(org.sandrop.webscarab.model.HttpUrl) -> addUrl
    boolean isKnownUrl(org.sandrop.webscarab.model.HttpUrl) -> isKnownUrl
    void setUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> setUrlProperty
    boolean addUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> addUrlProperty
    java.lang.String[] getUrlProperties(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlProperties
    int getChildCount(org.sandrop.webscarab.model.HttpUrl) -> getChildCount
    org.sandrop.webscarab.model.HttpUrl getChildAt(org.sandrop.webscarab.model.HttpUrl,int) -> getChildAt
    int getIndexOf(org.sandrop.webscarab.model.HttpUrl) -> getIndexOf
    void setRequest(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request) -> setRequest
    org.sandrop.webscarab.model.Request getRequest(org.sandrop.webscarab.model.ConversationID) -> getRequest
    void setResponse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Response) -> setResponse
    org.sandrop.webscarab.model.Response getResponse(org.sandrop.webscarab.model.ConversationID) -> getResponse
    int getCookieCount() -> getCookieCount
    int getCookieCount(java.lang.String) -> getCookieCount
    java.lang.String getCookieAt(int) -> getCookieAt
    org.sandrop.webscarab.model.Cookie getCookieAt(java.lang.String,int) -> getCookieAt
    org.sandrop.webscarab.model.Cookie getCurrentCookie(java.lang.String) -> getCurrentCookie
    int getIndexOfCookie(org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    int getIndexOfCookie(java.lang.String,org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    boolean addCookie(org.sandrop.webscarab.model.Cookie) -> addCookie
    boolean removeCookie(org.sandrop.webscarab.model.Cookie) -> removeCookie
    void flush() -> flush
org.sandrop.webscarab.model.StoreException -> org.sandrop.webscarab.model.StoreException:
    49:50:void <init>() -> <init>
    58:59:void <init>(java.lang.String) -> <init>
    62:63:void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.sandrop.webscarab.model.UrlEvent -> org.sandrop.webscarab.model.UrlEvent:
    org.sandrop.webscarab.model.HttpUrl _url -> a
    int _position -> b
    52:55:void <init>(java.lang.Object,org.sandrop.webscarab.model.HttpUrl,int) -> <init>
    58:58:org.sandrop.webscarab.model.HttpUrl getUrl() -> getUrl
    62:62:int getPosition() -> getPosition
org.sandrop.webscarab.model.UrlListener -> org.sandrop.webscarab.model.UrlListener:
    void urlAdded(org.sandrop.webscarab.model.UrlEvent) -> urlAdded
    void urlChanged(org.sandrop.webscarab.model.UrlEvent) -> urlChanged
    void urlRemoved(org.sandrop.webscarab.model.UrlEvent) -> urlRemoved
    void urlsChanged() -> urlsChanged
org.sandrop.webscarab.model.UrlModel -> org.sandrop.webscarab.model.UrlModel:
    int getChildCount(org.sandrop.webscarab.model.HttpUrl) -> getChildCount
    org.sandrop.webscarab.model.HttpUrl getChildAt(org.sandrop.webscarab.model.HttpUrl,int) -> getChildAt
    int getIndexOf(org.sandrop.webscarab.model.HttpUrl) -> getIndexOf
    void addUrlListener(org.sandrop.webscarab.model.UrlListener) -> addUrlListener
    void removeUrlListener(org.sandrop.webscarab.model.UrlListener) -> removeUrlListener
org.sandrop.webscarab.parser.ContentParser -> org.sandrop.webscarab.parser.ContentParser:
    java.lang.Object parseMessage(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.Message) -> parseMessage
org.sandrop.webscarab.parser.HTMLParser -> org.sandrop.webscarab.parser.HTMLParser:
    java.util.logging.Logger _logger -> a
    52:56:void <init>() -> <init>
    66:84:java.lang.Object parseMessage(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.Message) -> parseMessage
org.sandrop.webscarab.parser.HTMLParser$1 -> org.sandrop.webscarab.parser.HTMLParser$1:
    org.sandrop.webscarab.parser.HTMLParser this$0 -> a
    76:76:void <init>(org.sandrop.webscarab.parser.HTMLParser) -> <init>
org.sandrop.webscarab.parser.Parser -> org.sandrop.webscarab.parser.Parser:
    java.util.List _parsers -> a
    org.sandrop.webscarab.util.MRUCache _cache -> b
    63:64:void <init>() -> <init>
    71:83:java.lang.Object parse(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.Message) -> parse
    53:60:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.AbstractPluginModel -> org.sandrop.webscarab.plugin.AbstractPluginModel:
    java.lang.String PROPERTY_STATUS -> PROPERTY_STATUS
    java.lang.String PROPERTY_RUNNING -> PROPERTY_RUNNING
    java.lang.String PROPERTY_STOPPING -> PROPERTY_STOPPING
    java.lang.String PROPERTY_MODIFIED -> PROPERTY_MODIFIED
    java.lang.String PROPERTY_BUSY -> PROPERTY_BUSY
    java.beans.PropertyChangeSupport _changeSupport -> _changeSupport
    org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock _rwl -> _rwl
    java.lang.String _status -> a
    boolean _running -> b
    boolean _stopping -> c
    boolean _modified -> d
    boolean _busy -> e
    52:63:void <init>() -> <init>
    66:71:void setStatus(java.lang.String) -> setStatus
    74:74:java.lang.String getStatus() -> getStatus
    78:82:void setRunning(boolean) -> setRunning
    85:85:boolean isRunning() -> isRunning
    89:93:void setStopping(boolean) -> setStopping
    96:96:boolean isStopping() -> isStopping
    100:104:void setModified(boolean) -> setModified
    107:107:boolean isModified() -> isModified
    111:115:void setBusy(boolean) -> setBusy
    118:118:boolean isBusy() -> isBusy
    122:123:void addPropertyChangeListener(java.beans.PropertyChangeListener) -> addPropertyChangeListener
    126:127:void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) -> addPropertyChangeListener
    130:131:void removePropertyChangeListener(java.beans.PropertyChangeListener) -> removePropertyChangeListener
    134:135:void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) -> removePropertyChangeListener
org.sandrop.webscarab.plugin.BasicCredential -> org.sandrop.webscarab.plugin.BasicCredential:
    java.lang.String _host -> a
    java.lang.String _realm -> b
    java.lang.String _username -> c
    java.lang.String _password -> d
    45:50:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    53:53:java.lang.String getHost() -> getHost
    57:57:java.lang.String getRealm() -> getRealm
    61:61:java.lang.String getUsername() -> getUsername
    65:65:java.lang.String getPassword() -> getPassword
org.sandrop.webscarab.plugin.CredentialManager -> org.sandrop.webscarab.plugin.CredentialManager:
    java.util.Map _basicCredentials -> a
    java.util.Map _digestCredentials -> b
    java.util.Map _domainCredentials -> c
    org.sandrop.webscarab.plugin.CredentialManagerUI _ui -> d
    50:58:void <init>() -> <init>
    61:62:void setUI(org.sandrop.webscarab.plugin.CredentialManagerUI) -> setUI
    65:85:java.lang.String getCredentials(org.sandrop.webscarab.model.HttpUrl,java.lang.String[]) -> getCredentials
    89:109:java.lang.String getProxyCredentials(java.lang.String,java.lang.String[]) -> getProxyCredentials
    113:120:void addBasicCredentials(org.sandrop.webscarab.plugin.BasicCredential) -> addBasicCredentials
    123:130:void addDigestCredentials(org.sandrop.webscarab.plugin.DigestCredential) -> addDigestCredentials
    133:135:void addDomainCredentials(org.sandrop.webscarab.plugin.DomainCredential) -> addDomainCredentials
    138:138:int getBasicCredentialCount() -> getBasicCredentialCount
    142:142:org.sandrop.webscarab.plugin.BasicCredential getBasicCredentialAt(int) -> getBasicCredentialAt
    146:158:void deleteBasicCredentialAt(int) -> deleteBasicCredentialAt
    161:161:int getDomainCredentialCount() -> getDomainCredentialCount
    165:169:org.sandrop.webscarab.plugin.DomainCredential getDomainCredentialAt(int) -> getDomainCredentialAt
    173:181:void deleteDomainCredentialAt(int) -> deleteDomainCredentialAt
    184:192:org.sandrop.webscarab.plugin.BasicCredential[] getAllBasicCredentials() -> a
    197:235:java.lang.String getPreferredCredentials(java.lang.String,java.lang.String[]) -> a
    239:261:java.lang.String getDigestCredentials(java.lang.String,java.lang.String) -> a
    265:279:java.lang.String getBasicCredentials(java.lang.String,java.lang.String) -> b
    283:286:java.lang.String getDomainCredentials(java.lang.String) -> a
org.sandrop.webscarab.plugin.CredentialManagerUI -> org.sandrop.webscarab.plugin.CredentialManagerUI:
    void requestCredentials(java.lang.String,java.lang.String[]) -> requestCredentials
org.sandrop.webscarab.plugin.DigestCredential -> org.sandrop.webscarab.plugin.DigestCredential:
    java.lang.String _host -> a
    java.lang.String _realm -> b
    java.lang.String _username -> c
    java.lang.String _password -> d
    45:50:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    53:53:java.lang.String getHost() -> getHost
    57:57:java.lang.String getRealm() -> getRealm
    61:61:java.lang.String getUsername() -> getUsername
    65:65:java.lang.String getPassword() -> getPassword
org.sandrop.webscarab.plugin.DomainCredential -> org.sandrop.webscarab.plugin.DomainCredential:
    java.lang.String _host -> a
    java.lang.String _domain -> b
    java.lang.String _username -> c
    java.lang.String _password -> d
    43:48:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    51:51:java.lang.String getHost() -> getHost
    55:55:java.lang.String getDomain() -> getDomain
    59:59:java.lang.String getUsername() -> getUsername
    63:63:java.lang.String getPassword() -> getPassword
org.sandrop.webscarab.plugin.Framework -> org.sandrop.webscarab.plugin.Framework:
    java.util.ArrayList _plugins -> a
    EDU.oswego.cs.dl.util.concurrent.QueuedExecutor analysisQueuedExecutor -> b
    EDU.oswego.cs.dl.util.concurrent.QueuedExecutor analysisLongRunningQueuedExecutor -> c
    org.sandrop.webscarab.model.FrameworkModel _model -> d
    org.sandrop.webscarab.plugin.FrameworkModelWrapper _wrapper -> e
    java.util.logging.Logger _logger -> f
    java.lang.String _version -> g
    org.sandrop.webscarab.plugin.CredentialManager _credentialManager -> h
    org.sandrop.webscarab.plugin.Framework$AddConversationHook _allowAddConversation -> i
    org.sandrop.webscarab.plugin.Framework$AnalyseConversationHook _analyseConversation -> j
    java.util.regex.Pattern dropPattern -> k
    java.util.regex.Pattern whitelistPattern -> l
    android.content.Context mContext -> m
    boolean _captureData -> n
    62:142:void <init>(android.content.Context) -> <init>
    162:162:android.content.Context getAndroidContext() -> getAndroidContext
    166:172:int getProxyPortFromSettings() -> getProxyPortFromSettings
    178:194:java.util.List getListeners() -> getListeners
    200:200:org.sandrop.webscarab.plugin.ScriptManager getScriptManager() -> getScriptManager
    204:204:org.sandrop.webscarab.plugin.CredentialManager getCredentialManager() -> getCredentialManager
    208:208:java.lang.String getDropPattern() -> getDropPattern
    211:217:void setWhitelistPattern(java.lang.String) -> setWhitelistPattern
    219:225:void setDropPattern(java.lang.String) -> setDropPattern
    232:242:void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    249:249:org.sandrop.webscarab.model.FrameworkModel getModel() -> getModel
    253:257:void extractVersionFromManifest() -> a
    264:269:void addPlugin(org.sandrop.webscarab.plugin.Plugin) -> addPlugin
    277:283:org.sandrop.webscarab.plugin.Plugin getPlugin(java.lang.String) -> getPlugin
    290:304:void startPlugins() -> startPlugins
    307:312:boolean isBusy() -> isBusy
    316:321:boolean isRunning() -> isRunning
    325:331:boolean isModified() -> isModified
    335:341:java.lang.String[] getStatus() -> getStatus
    345:347:void start() -> start
    351:357:void stop() -> stop
    365:378:boolean stopPlugins() -> stopPlugins
    386:408:void saveSessionData() -> saveSessionData
    416:416:java.lang.String getVersion() -> getVersion
    420:420:org.sandrop.webscarab.model.ConversationID reserveConversationID() -> reserveConversationID
    425:442:boolean canStore(org.sandrop.webscarab.model.Request) -> a
    446:447:long createConversation(org.sandrop.webscarab.model.Request,java.util.Date,int,org.sandrop.webscarab.model.ConnectionDescriptor) -> createConversation
    451:454:long gotRequest(long,java.util.Date,org.sandrop.webscarab.model.Request) -> gotRequest
    458:463:long gotResponse(long,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,boolean) -> gotResponse
    467:472:long failedResponse(long,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String,boolean) -> failedResponse
    485:491:void cleanConversation(org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> cleanConversation
    494:495:void addConversation(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> addConversation
    498:525:void addConversation(org.sandrop.webscarab.model.ConversationID,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> addConversation
    528:530:org.sandrop.webscarab.model.ConversationID addConversation(org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> addConversation
    534:598:void configureHTTPClient(android.content.Context) -> a
    60:60:java.util.logging.Logger access$200(org.sandrop.webscarab.plugin.Framework) -> a
    60:60:org.sandrop.webscarab.plugin.FrameworkModelWrapper access$300(org.sandrop.webscarab.plugin.Framework) -> b
org.sandrop.webscarab.plugin.Framework$AddConversationHook -> org.sandrop.webscarab.plugin.Framework$a:
    org.sandrop.webscarab.plugin.Framework this$0 -> a
    655:660:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    663:673:void runScripts(org.sandrop.webscarab.plugin.ScriptableConversation) -> a
org.sandrop.webscarab.plugin.Framework$AnalyseConversationHook -> org.sandrop.webscarab.plugin.Framework$b:
    org.sandrop.webscarab.plugin.Framework this$0 -> a
    679:683:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    686:698:void runScripts(org.sandrop.webscarab.plugin.ScriptableConversation) -> a
org.sandrop.webscarab.plugin.Framework$QueueProcessorThreadFactory -> org.sandrop.webscarab.plugin.Framework$c:
    java.lang.String threadName -> a
    148:150:void <init>(java.lang.String) -> <init>
org.sandrop.webscarab.plugin.FrameworkModelWrapper -> org.sandrop.webscarab.plugin.FrameworkModelWrapper:
    org.sandrop.webscarab.model.FrameworkModel _frameworkModel -> a
    48:50:void <init>(org.sandrop.webscarab.model.FrameworkModel) -> <init>
    53:53:java.lang.String getConversationOrigin(org.sandrop.webscarab.model.ConversationID) -> getConversationOrigin
    57:57:java.util.Date getConversationDate(org.sandrop.webscarab.model.ConversationID) -> getConversationDate
    67:67:org.sandrop.webscarab.model.HttpUrl getRequestUrl(org.sandrop.webscarab.model.ConversationID) -> getRequestUrl
    77:78:void setConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> setConversationProperty
    87:87:boolean addConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> addConversationProperty
    97:97:java.lang.String getConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperty
    101:101:java.lang.String getRequestMethod(org.sandrop.webscarab.model.ConversationID) -> getRequestMethod
    105:105:java.lang.String getResponseStatus(org.sandrop.webscarab.model.ConversationID) -> getResponseStatus
    115:115:java.lang.String[] getConversationProperties(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperties
    125:126:void setUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> setUrlProperty
    135:135:boolean addUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> addUrlProperty
    145:145:java.lang.String[] getUrlProperties(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlProperties
    155:155:java.lang.String getUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlProperty
    164:164:org.sandrop.webscarab.model.Request getRequest(org.sandrop.webscarab.model.ConversationID) -> getRequest
    173:173:org.sandrop.webscarab.model.Response getResponse(org.sandrop.webscarab.model.ConversationID) -> getResponse
    182:182:int getCookieCount() -> getCookieCount
    191:191:int getCookieCount(java.lang.String) -> getCookieCount
    200:200:java.lang.String getCookieAt(int) -> getCookieAt
    210:210:org.sandrop.webscarab.model.Cookie getCookieAt(java.lang.String,int) -> getCookieAt
    220:220:int getIndexOfCookie(org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    230:230:int getIndexOfCookie(java.lang.String,org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    234:234:org.sandrop.webscarab.model.Cookie getCurrentCookie(java.lang.String) -> getCurrentCookie
    242:243:void addCookie(org.sandrop.webscarab.model.Cookie) -> addCookie
    250:251:void removeCookie(org.sandrop.webscarab.model.Cookie) -> removeCookie
    259:259:org.sandrop.webscarab.model.Cookie[] getCookiesForUrl(org.sandrop.webscarab.model.HttpUrl) -> getCookiesForUrl
org.sandrop.webscarab.plugin.Hook -> org.sandrop.webscarab.plugin.Hook:
    java.lang.String _name -> a
    java.lang.String _description -> b
    java.util.List _scripts -> c
    org.apache.bsf.BSFManager _bsfManager -> _bsfManager
    java.util.logging.Logger _logger -> d
    46:55:void <init>(java.lang.String,java.lang.String) -> <init>
    58:59:void setBSFManager(org.apache.bsf.BSFManager) -> setBSFManager
    62:78:void runScripts() -> runScripts
    81:81:java.lang.String getName() -> getName
    85:85:java.lang.String getDescription() -> getDescription
    89:89:int getScriptCount() -> getScriptCount
    93:93:org.sandrop.webscarab.plugin.Script getScript(int) -> getScript
    97:98:void addScript(org.sandrop.webscarab.plugin.Script) -> addScript
    101:102:void addScript(org.sandrop.webscarab.plugin.Script,int) -> addScript
    105:105:org.sandrop.webscarab.plugin.Script removeScript(int) -> removeScript
org.sandrop.webscarab.plugin.Plugin -> org.sandrop.webscarab.plugin.Plugin:
    java.lang.String getPluginName() -> getPluginName
    void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    void run() -> run
    boolean isRunning() -> isRunning
    boolean isBusy() -> isBusy
    java.lang.String getStatus() -> getStatus
    boolean stop() -> stop
    boolean isModified() -> isModified
    void flush() -> flush
    void analyse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> analyse
    org.sandrop.webscarab.plugin.Hook[] getScriptingHooks() -> getScriptingHooks
    java.lang.Object getScriptableObject() -> getScriptableObject
org.sandrop.webscarab.plugin.PluginUI -> org.sandrop.webscarab.plugin.PluginUI:
    java.lang.String getPluginName() -> getPluginName
    void setEnabled(boolean) -> setEnabled
org.sandrop.webscarab.plugin.SSLKeyManager -> org.sandrop.webscarab.plugin.SSLKeyManager:
    java.lang.String KEY_PROPERTY -> KEY_PROPERTY
    java.lang.String SELECTED_KEY -> SELECTED_KEY
    java.lang.String _preferredStore -> a
    java.lang.String _preferredAlias -> b
    javax.net.ssl.X509KeyManager _preferredKeyManager -> c
    java.util.Map _stores -> d
    java.util.Map _managers -> e
    java.beans.PropertyChangeSupport _changeSupport -> f
    java.util.logging.Logger _logger -> g
    74:90:void <init>() -> <init>
    93:105:java.lang.String addPKCS12KeyStore(java.lang.String,java.lang.String,java.lang.String) -> addPKCS12KeyStore
    111:122:void addKeyStore(java.lang.String,java.security.KeyStore,char[]) -> addKeyStore
    125:125:java.lang.String[] getKeyStoreDescriptions() -> getKeyStoreDescriptions
    129:131:void removeKeyStore(java.lang.String) -> removeKeyStore
    134:135:void addPropertyChangeListener(java.beans.PropertyChangeListener) -> addPropertyChangeListener
    138:139:void removePropertyChangeListener(java.beans.PropertyChangeListener) -> removePropertyChangeListener
    142:155:java.lang.String[] getAliases(java.lang.String) -> getAliases
    159:182:boolean setPreferredAlias(java.lang.String,java.lang.String) -> setPreferredAlias
    186:186:java.lang.String getPreferredStore() -> getPreferredStore
    190:190:java.lang.String getPreferredAlias() -> getPreferredAlias
    194:197:java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket) -> chooseClientAlias
    201:211:java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket) -> chooseServerAlias
    215:219:java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    223:238:java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[]) -> getClientAliases
    242:246:java.security.PrivateKey getPrivateKey(java.lang.String) -> getPrivateKey
    250:265:java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[]) -> getServerAliases
org.sandrop.webscarab.plugin.Script -> org.sandrop.webscarab.plugin.Script:
    java.io.File _file -> a
    java.lang.String _script -> b
    long _lastModified -> c
    boolean _enabled -> d
    java.lang.String _language -> e
    java.util.logging.Logger _logger -> f
    47:56:void <init>(java.io.File) -> <init>
    59:78:void reload() -> reload
    81:81:boolean isEnabled() -> isEnabled
    85:94:void setEnabled(boolean) -> setEnabled
    97:97:java.io.File getFile() -> getFile
    101:101:java.lang.String getScript() -> getScript
    105:119:void setScript(java.lang.String) -> setScript
    122:122:long getLastModified() -> getLastModified
    126:126:java.lang.String getLanguage() -> getLanguage
    130:131:void setLanguage(java.lang.String) -> setLanguage
org.sandrop.webscarab.plugin.ScriptListener -> org.sandrop.webscarab.plugin.ScriptListener:
    void hooksChanged() -> hooksChanged
    void hookStarted(java.lang.String,org.sandrop.webscarab.plugin.Hook) -> hookStarted
    void hookEnded(java.lang.String,org.sandrop.webscarab.plugin.Hook) -> hookEnded
    void scriptAdded(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> scriptAdded
    void scriptRemoved(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> scriptRemoved
    void scriptStarted(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> scriptStarted
    void scriptEnded(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> scriptEnded
    void scriptChanged(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> scriptChanged
    void scriptError(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script,java.lang.Throwable) -> scriptError
org.sandrop.webscarab.plugin.ScriptManager -> org.sandrop.webscarab.plugin.ScriptManager:
    org.apache.bsf.BSFManager _bsfManager -> a
    java.util.TreeMap _hooks -> b
    org.sandrop.webscarab.util.EventListenerList _listeners -> c
    java.util.logging.Logger _logger -> d
    54:69:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    72:75:void addScriptListener(org.sandrop.webscarab.plugin.ScriptListener) -> addScriptListener
    78:81:void removeScriptListener(org.sandrop.webscarab.plugin.ScriptListener) -> removeScriptListener
    84:91:void registerHooks(java.lang.String,org.sandrop.webscarab.plugin.Hook[]) -> registerHooks
    94:94:int getPluginCount() -> getPluginCount
    98:99:java.lang.String getPlugin(int) -> getPlugin
    103:105:int getHookCount(java.lang.String) -> getHookCount
    109:111:org.sandrop.webscarab.plugin.Hook getHook(java.lang.String,int) -> getHook
    115:122:void addScript(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script,int) -> addScript
    125:126:void addScript(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> addScript
    129:131:void setEnabled(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script,boolean) -> setEnabled
    134:143:void removeScript(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> removeScript
    146:177:void loadScripts() -> loadScripts
    180:196:void saveScripts() -> saveScripts
    204:212:void fireHooksChanged() -> fireHooksChanged
    221:229:void fireScriptAdded(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> fireScriptAdded
    238:246:void fireScriptRemoved(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> fireScriptRemoved
    255:263:void fireScriptStarted(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> fireScriptStarted
    272:280:void fireScriptEnded(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> fireScriptEnded
    289:297:void fireScriptChanged(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script) -> fireScriptChanged
    306:314:void fireScriptError(java.lang.String,org.sandrop.webscarab.plugin.Hook,org.sandrop.webscarab.plugin.Script,java.lang.Throwable) -> fireScriptError
    322:330:void fireHookEnded(java.lang.String,org.sandrop.webscarab.plugin.Hook) -> fireHookEnded
org.sandrop.webscarab.plugin.ScriptableConversation -> org.sandrop.webscarab.plugin.ScriptableConversation:
    org.sandrop.webscarab.model.ConversationID _id -> a
    org.sandrop.webscarab.model.Request _request -> b
    org.sandrop.webscarab.model.Response _response -> c
    java.lang.String _origin -> d
    boolean _cancelled -> e
    boolean _analyse -> f
    46:55:void <init>(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> <init>
    58:58:org.sandrop.webscarab.model.ConversationID getId() -> getId
    62:62:org.sandrop.webscarab.model.Request getRequest() -> getRequest
    66:66:org.sandrop.webscarab.model.Response getResponse() -> getResponse
    70:70:java.lang.String getOrigin() -> getOrigin
    74:75:void setCancelled(boolean) -> setCancelled
    78:78:boolean isCancelled() -> isCancelled
    82:83:void setAnalyse(boolean) -> setAnalyse
    86:86:boolean shouldAnalyse() -> shouldAnalyse
org.sandrop.webscarab.plugin.fragments.FileSystemStore -> org.sandrop.webscarab.plugin.fragments.FileSystemStore:
    java.io.File _dir -> a
    java.lang.String[] NONE -> b
    java.util.SortedMap _types -> c
    java.util.logging.Logger _logger -> d
    67:75:void <init>(java.io.File,java.lang.String) -> <init>
    78:88:void create() -> a
    91:113:void load() -> b
    122:141:java.lang.String getFragment(java.lang.String) -> getFragment
    154:171:int putFragment(java.lang.String,java.lang.String,java.lang.String) -> putFragment
    175:198:void flush() -> flush
    201:203:int getFragmentCount(java.lang.String) -> getFragmentCount
    207:209:java.lang.String getFragmentKeyAt(java.lang.String,int) -> getFragmentKeyAt
    213:213:java.lang.String getFragmentType(int) -> getFragmentType
    217:217:int getFragmentTypeCount() -> getFragmentTypeCount
    221:223:int indexOfFragment(java.lang.String,java.lang.String) -> indexOfFragment
    65:65:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.fragments.FragmentListener -> org.sandrop.webscarab.plugin.fragments.FragmentListener:
    void fragmentAdded(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> fragmentAdded
    void fragmentAdded(java.lang.String,java.lang.String,int) -> fragmentAdded
    void fragmentsChanged() -> fragmentsChanged
org.sandrop.webscarab.plugin.fragments.Fragments -> org.sandrop.webscarab.plugin.fragments.Fragments:
    java.util.logging.Logger _logger -> c
    org.sandrop.webscarab.plugin.fragments.FragmentsModel _model -> d
    java.util.regex.Pattern[] jsDomXssPatterns -> a
    java.util.regex.Pattern[] jsDomXssFalsePositivesPattern -> b
    70:115:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    118:118:org.sandrop.webscarab.plugin.fragments.FragmentsModel getModel() -> getModel
    126:131:void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    138:138:java.lang.String getPluginName() -> getPluginName
    145:146:void run() -> run
    153:154:boolean stop() -> stop
    158:237:void analyse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> analyse
    239:240:void flush() -> flush
    243:243:boolean isBusy() -> isBusy
    247:247:java.lang.String getStatus() -> getStatus
    251:251:boolean isModified() -> isModified
    255:255:boolean isRunning() -> isRunning
    259:259:java.lang.Object getScriptableObject() -> getScriptableObject
    263:263:org.sandrop.webscarab.plugin.Hook[] getScriptingHooks() -> getScriptingHooks
org.sandrop.webscarab.plugin.fragments.FragmentsModel -> org.sandrop.webscarab.plugin.fragments.FragmentsModel:
    org.sandrop.webscarab.plugin.fragments.FragmentsStore _store -> a
    org.sandrop.webscarab.model.FrameworkModel _model -> b
    org.sandrop.webscarab.plugin.fragments.FragmentsModel$FragmentConversationModel _fcm -> c
    java.lang.String KEY_SCRIPTS -> KEY_SCRIPTS
    java.lang.String KEY_COMMENTS -> KEY_COMMENTS
    java.lang.String KEY_FILEUPLOAD -> KEY_FILEUPLOAD
    java.lang.String KEY_FORMS -> KEY_FORMS
    java.lang.String KEY_HIDDENFIELD -> KEY_HIDDENFIELD
    java.lang.String KEY_DOMXSS -> KEY_DOMXSS
    java.util.logging.Logger _logger -> d
    61:81:void <init>(org.sandrop.webscarab.model.FrameworkModel) -> <init>
    85:100:void addFragment(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> addFragment
    103:112:java.lang.String[] getUrlFragmentKeys(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlFragmentKeys
    117:126:java.lang.String[] getConversationFragmentKeys(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationFragmentKeys
    131:132:int getFragmentTypeCount() -> getFragmentTypeCount
    136:136:java.lang.String getFragmentType(int) -> getFragmentType
    140:140:int getFragmentCount(java.lang.String) -> getFragmentCount
    144:144:java.lang.String getFragmentKeyAt(java.lang.String,int) -> getFragmentKeyAt
    148:148:int indexOfFragment(java.lang.String,java.lang.String) -> indexOfFragment
    152:152:java.lang.String getFragment(java.lang.String) -> getFragment
    158:158:void addModelListener(org.sandrop.webscarab.plugin.fragments.FragmentListener) -> addModelListener
    163:163:void removeModelListener(org.sandrop.webscarab.plugin.fragments.FragmentListener) -> removeModelListener
    166:166:org.sandrop.webscarab.model.ConversationModel getConversationModel() -> getConversationModel
    171:179:void setSelectedFragment(java.lang.String,java.lang.String) -> setSelectedFragment
    182:185:void setStore(org.sandrop.webscarab.plugin.fragments.FragmentsStore) -> setStore
    188:192:void flush() -> flush
    212:212:void fireFragmentsChanged() -> a
    232:232:void fireFragmentAdded(java.lang.String,java.lang.String,int) -> a
    252:252:void fireFragmentAdded(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> a
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$000(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> a
    59:59:org.sandrop.webscarab.model.FrameworkModel access$100(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> b
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$200(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> c
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$300(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> d
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$400(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> e
    59:59:java.util.logging.Logger access$500(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> f
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$700(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> g
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$800(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> h
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$900(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> i
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$1000(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> j
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$1100(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> k
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$1200(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> l
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$1300(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> m
    59:59:org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock access$1400(org.sandrop.webscarab.plugin.fragments.FragmentsModel) -> n
    65:70:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.fragments.FragmentsModel$FragmentConversationModel -> org.sandrop.webscarab.plugin.fragments.FragmentsModel$a:
    java.lang.String _type -> b
    java.lang.String _key -> c
    java.util.ArrayList _conversationList -> d
    org.sandrop.webscarab.plugin.fragments.FragmentsModel this$0 -> a
    256:262:void <init>(org.sandrop.webscarab.plugin.fragments.FragmentsModel,org.sandrop.webscarab.model.FrameworkModel) -> <init>
    266:293:void setSelectedFragment(java.lang.String,java.lang.String) -> a
    296:296:org.sandrop.webscarab.model.ConversationID getConversationAt(int) -> getConversationAt
    300:300:int getConversationCount() -> getConversationCount
    306:306:int getIndexOfConversation(org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
    313:313:void fragmentAdded(java.lang.String,java.lang.String,int) -> fragmentAdded
    316:333:void fragmentAdded(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> fragmentAdded
    337:348:void fragmentsChanged() -> fragmentsChanged
org.sandrop.webscarab.plugin.fragments.FragmentsStore -> org.sandrop.webscarab.plugin.fragments.FragmentsStore:
    int getFragmentTypeCount() -> getFragmentTypeCount
    java.lang.String getFragmentType(int) -> getFragmentType
    int getFragmentCount(java.lang.String) -> getFragmentCount
    java.lang.String getFragmentKeyAt(java.lang.String,int) -> getFragmentKeyAt
    int indexOfFragment(java.lang.String,java.lang.String) -> indexOfFragment
    int putFragment(java.lang.String,java.lang.String,java.lang.String) -> putFragment
    java.lang.String getFragment(java.lang.String) -> getFragment
    void flush() -> flush
org.sandrop.webscarab.plugin.manualrequest.ManualRequest -> org.sandrop.webscarab.plugin.manualrequest.ManualRequest:
    org.sandrop.webscarab.plugin.manualrequest.ManualRequestUI _ui -> a
    org.sandrop.webscarab.model.Request _request -> b
    org.sandrop.webscarab.model.Response _response -> c
    java.util.Date _responseDate -> d
    org.sandrop.webscarab.plugin.Framework _framework -> e
    org.sandrop.webscarab.plugin.manualrequest.ManualRequestModel _model -> f
    54:66:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    73:73:java.lang.String getPluginName() -> getPluginName
    77:77:org.sandrop.webscarab.plugin.manualrequest.ManualRequestModel getModel() -> getModel
    81:83:void setUI(org.sandrop.webscarab.plugin.manualrequest.ManualRequestUI) -> setUI
    86:91:void setRequest(org.sandrop.webscarab.model.Request) -> setRequest
    94:113:void fetchResponse() -> fetchResponse
    116:128:void addRequestCookies() -> addRequestCookies
    131:140:void updateCookies() -> updateCookies
    143:147:void run() -> run
    150:156:boolean stop() -> stop
    161:161:void flush() -> flush
    164:164:boolean isRunning() -> isRunning
    168:168:boolean isBusy() -> isBusy
    172:172:java.lang.String getStatus() -> getStatus
    176:176:boolean isModified() -> isModified
    181:181:void analyse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> analyse
    185:185:void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    188:188:java.lang.Object getScriptableObject() -> getScriptableObject
    192:192:org.sandrop.webscarab.plugin.Hook[] getScriptingHooks() -> getScriptingHooks
org.sandrop.webscarab.plugin.manualrequest.ManualRequestModel -> org.sandrop.webscarab.plugin.manualrequest.ManualRequestModel:
    org.sandrop.webscarab.model.FrameworkModel _model -> a
    47:49:void <init>(org.sandrop.webscarab.model.FrameworkModel) -> <init>
    52:52:org.sandrop.webscarab.model.ConversationModel getConversationModel() -> getConversationModel
    56:56:org.sandrop.webscarab.model.Cookie[] getCookiesForUrl(org.sandrop.webscarab.model.HttpUrl) -> getCookiesForUrl
    60:61:void addCookie(org.sandrop.webscarab.model.Cookie) -> addCookie
org.sandrop.webscarab.plugin.manualrequest.ManualRequestUI -> org.sandrop.webscarab.plugin.manualrequest.ManualRequestUI:
    void requestChanged(org.sandrop.webscarab.model.Request) -> requestChanged
    void responseChanged(org.sandrop.webscarab.model.Response) -> responseChanged
org.sandrop.webscarab.plugin.proxy.BeanShell -> org.sandrop.webscarab.plugin.proxy.BeanShell:
    java.util.logging.Logger _logger -> a
    java.lang.String _scriptFile -> b
    java.lang.String _beanScript -> c
    java.lang.String _defaultScript -> d
    bsh.Interpreter _interpreter -> e
    org.sandrop.webscarab.plugin.Framework _framework -> f
    boolean _enabled -> g
    org.sandrop.webscarab.plugin.proxy.BeanShellUI _ui -> h
    57:91:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    94:99:void setUI(org.sandrop.webscarab.plugin.proxy.BeanShellUI) -> setUI
    102:118:void parseProperties() -> a
    121:121:java.lang.String getPluginName() -> getPluginName
    125:128:void setEnabled(boolean) -> setEnabled
    131:131:boolean getEnabled() -> getEnabled
    136:151:void loadScriptFile(java.lang.String) -> a
    154:162:void setScriptFile(java.lang.String) -> setScriptFile
    165:165:java.lang.String getScriptFile() -> getScriptFile
    169:172:void setScript(java.lang.String) -> setScript
    175:175:java.lang.String getScript() -> getScript
    179:179:org.sandrop.webscarab.httpclient.HTTPClient getProxyPlugin(org.sandrop.webscarab.httpclient.HTTPClient) -> getProxyPlugin
    55:55:boolean access$000(org.sandrop.webscarab.plugin.proxy.BeanShell) -> a
    55:55:bsh.Interpreter access$100(org.sandrop.webscarab.plugin.proxy.BeanShell) -> b
    55:55:org.sandrop.webscarab.plugin.proxy.BeanShellUI access$200(org.sandrop.webscarab.plugin.proxy.BeanShell) -> c
org.sandrop.webscarab.plugin.proxy.BeanShell$Plugin -> org.sandrop.webscarab.plugin.proxy.BeanShell$a:
    org.sandrop.webscarab.httpclient.HTTPClient _in -> b
    org.sandrop.webscarab.plugin.proxy.BeanShell this$0 -> a
    186:188:void <init>(org.sandrop.webscarab.plugin.proxy.BeanShell,org.sandrop.webscarab.httpclient.HTTPClient) -> <init>
    191:219:org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
org.sandrop.webscarab.plugin.proxy.BeanShellUI -> org.sandrop.webscarab.plugin.proxy.BeanShellUI:
    java.io.PrintStream getOut() -> getOut
    java.io.PrintStream getErr() -> getErr
org.sandrop.webscarab.plugin.proxy.BrowserCache -> org.sandrop.webscarab.plugin.proxy.BrowserCache:
    boolean _enabled -> a
    43:47:void <init>() -> <init>
    50:52:void parseProperties() -> parseProperties
    55:55:java.lang.String getPluginName() -> getPluginName
    59:62:void setEnabled(boolean) -> setEnabled
    65:65:boolean getEnabled() -> getEnabled
    69:69:org.sandrop.webscarab.httpclient.HTTPClient getProxyPlugin(org.sandrop.webscarab.httpclient.HTTPClient) -> getProxyPlugin
    41:41:boolean access$000(org.sandrop.webscarab.plugin.proxy.BrowserCache) -> a
org.sandrop.webscarab.plugin.proxy.BrowserCache$Plugin -> org.sandrop.webscarab.plugin.proxy.BrowserCache$a:
    org.sandrop.webscarab.httpclient.HTTPClient _in -> b
    org.sandrop.webscarab.plugin.proxy.BrowserCache this$0 -> a
    76:78:void <init>(org.sandrop.webscarab.plugin.proxy.BrowserCache,org.sandrop.webscarab.httpclient.HTTPClient) -> <init>
    81:88:org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
org.sandrop.webscarab.plugin.proxy.ConnectionHandler -> org.sandrop.webscarab.plugin.proxy.ConnectionHandler:
    org.sandrop.webscarab.plugin.proxy.ProxyPlugin[] _plugins -> a
    org.sandrop.webscarab.plugin.proxy.Proxy _proxy -> b
    java.net.Socket _sock -> c
    org.sandrop.webscarab.model.HttpUrl _base -> d
    boolean _transparent -> e
    boolean _transparentSecure -> f
    boolean _captureData -> g
    boolean _useFakeCerts -> h
    boolean _storeSslAsPcap -> i
    int _destPort -> j
    org.sandrop.webscarab.plugin.proxy.ITransparentProxyResolver _transparentResolver -> k
    org.sandrop.webscarab.model.ConnectionDescriptor _connectionDescriptor -> l
    java.lang.String clientId -> m
    org.sandrop.webscarab.httpclient.HTTPClient _httpClient -> n
    java.util.logging.Logger _logger -> o
    boolean LOGD -> p
    java.lang.String TAG -> q
    int _socket_timeout_large -> r
    int _socket_timeout_normal -> s
    java.io.InputStream _clientIn -> t
    java.io.OutputStream _clientOut -> u
    java.lang.String[] wiresharkSupportedCiphers -> v
    java.util.List listWiresharkSupportedCiphers -> w
    java.lang.String[] selectedCiphers -> x
    66:161:void <init>(org.sandrop.webscarab.plugin.proxy.Proxy,java.net.Socket,org.sandrop.webscarab.model.HttpUrl,boolean,boolean,boolean,boolean,boolean,org.sandrop.webscarab.plugin.proxy.ITransparentProxyResolver,org.sandrop.webscarab.model.ConnectionDescriptor) -> <init>
    164:605:void run() -> run
    762:786:java.lang.String[] selectCiphers(java.lang.String[]) -> a
    791:811:java.net.Socket negotiateSSL(java.net.Socket,org.sandrop.webscarab.plugin.proxy.SiteData,boolean) -> a
    816:847:org.sandrop.webscarab.model.Response errorResponse(org.sandrop.webscarab.model.Request,java.lang.Exception) -> a
    84:759:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.proxy.CookieTracker -> org.sandrop.webscarab.plugin.proxy.CookieTracker:
    org.sandrop.webscarab.model.FrameworkModel _model -> a
    boolean _injectRequests -> b
    boolean _readResponses -> c
    49:58:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    61:67:void parseProperties() -> parseProperties
    70:70:java.lang.String getPluginName() -> getPluginName
    74:77:void setInjectRequests(boolean) -> setInjectRequests
    80:80:boolean getInjectRequests() -> getInjectRequests
    84:87:void setReadResponses(boolean) -> setReadResponses
    90:90:boolean getReadResponses() -> getReadResponses
    94:94:org.sandrop.webscarab.httpclient.HTTPClient getProxyPlugin(org.sandrop.webscarab.httpclient.HTTPClient) -> getProxyPlugin
    137:137:boolean getEnabled() -> getEnabled
    47:47:boolean access$000(org.sandrop.webscarab.plugin.proxy.CookieTracker) -> a
    47:47:org.sandrop.webscarab.model.FrameworkModel access$100(org.sandrop.webscarab.plugin.proxy.CookieTracker) -> b
    47:47:boolean access$200(org.sandrop.webscarab.plugin.proxy.CookieTracker) -> c
org.sandrop.webscarab.plugin.proxy.CookieTracker$Plugin -> org.sandrop.webscarab.plugin.proxy.CookieTracker$a:
    org.sandrop.webscarab.httpclient.HTTPClient _in -> b
    org.sandrop.webscarab.plugin.proxy.CookieTracker this$0 -> a
    101:103:void <init>(org.sandrop.webscarab.plugin.proxy.CookieTracker,org.sandrop.webscarab.httpclient.HTTPClient) -> <init>
    106:129:org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
org.sandrop.webscarab.plugin.proxy.IClientResolver -> org.sandrop.webscarab.plugin.proxy.IClientResolver:
    org.sandrop.webscarab.model.ConnectionDescriptor getClientDescriptorBySocket(java.net.Socket) -> getClientDescriptorBySocket
org.sandrop.webscarab.plugin.proxy.ITransparentProxyResolver -> org.sandrop.webscarab.plugin.proxy.ITransparentProxyResolver:
    org.sandrop.webscarab.plugin.proxy.SiteData getSecureHost(java.net.Socket,int,boolean) -> getSecureHost
org.sandrop.webscarab.plugin.proxy.Listener -> org.sandrop.webscarab.plugin.proxy.Listener:
    org.sandrop.webscarab.plugin.proxy.Proxy _proxy -> a
    org.sandrop.webscarab.plugin.proxy.ListenerSpec _spec -> b
    java.net.ServerSocket _serversocket -> c
    int _socketTimeout -> d
    boolean _stop -> e
    boolean _stopped -> f
    int _count -> g
    java.util.logging.Logger _logger -> h
    54:69:void <init>(org.sandrop.webscarab.plugin.proxy.Proxy,org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> <init>
    72:124:void run() -> run
    127:138:void listen() -> a
    141:158:boolean stop() -> stop
    163:163:org.sandrop.webscarab.plugin.proxy.ListenerSpec getListenerSpec() -> getListenerSpec
org.sandrop.webscarab.plugin.proxy.ListenerSpec -> org.sandrop.webscarab.plugin.proxy.ListenerSpec:
    java.lang.String _address -> a
    int _port -> b
    org.sandrop.webscarab.model.HttpUrl _base -> c
    boolean _primaryProxy -> d
    boolean _transparentProxy -> e
    boolean _transparentProxySecure -> f
    boolean _captureData -> g
    boolean _useFakeCerts -> h
    boolean _storeSslAsPcap -> i
    java.net.InetSocketAddress _sockAddr -> j
    45:74:void <init>(java.lang.String,int,org.sandrop.webscarab.model.HttpUrl,boolean,boolean,boolean,boolean,boolean,boolean) -> <init>
    77:77:java.lang.String getAddress() -> getAddress
    81:81:int getPort() -> getPort
    85:85:org.sandrop.webscarab.model.HttpUrl getBase() -> getBase
    89:89:boolean isPrimaryProxy() -> isPrimaryProxy
    93:93:boolean isTransparentProxy() -> isTransparentProxy
    97:97:boolean isTransparentProxySecure() -> isTransparentProxySecure
    101:101:boolean mustCaptureData() -> mustCaptureData
    105:105:boolean useFakeCerts() -> useFakeCerts
    108:108:boolean storeSslAsPcap() -> storeSslAsPcap
    112:112:java.lang.String getKey() -> getKey
    116:116:int hashCode() -> hashCode
    120:120:java.lang.String toString() -> toString
    124:124:boolean equals(java.lang.Object) -> equals
    128:131:java.net.InetSocketAddress getInetSocketAddress() -> getInetSocketAddress
    136:139:void verifyAvailable() -> verifyAvailable
    145:145:int compareTo(java.lang.Object) -> compareTo
org.sandrop.webscarab.plugin.proxy.ManualEdit -> org.sandrop.webscarab.plugin.proxy.ManualEdit:
    java.lang.String INCLUDE -> a
    java.lang.String EXCLUDE -> b
    java.lang.String CONTENT -> c
    java.lang.String _includeRegex -> d
    java.lang.String _excludeRegex -> e
    java.lang.String[] _interceptMethods -> f
    boolean _interceptRequest -> g
    boolean _interceptResponse -> h
    java.lang.String _interceptResponseRegex -> i
    boolean _caseSensitive -> j
    org.sandrop.webscarab.plugin.proxy.ManualEditUI _ui -> k
    java.util.logging.Logger _logger -> l
    52:67:void <init>() -> <init>
    70:98:void parseProperties() -> parseProperties
    101:101:java.lang.String getPluginName() -> getPluginName
    105:106:void setUI(org.sandrop.webscarab.plugin.proxy.ManualEditUI) -> setUI
    109:112:void setIncludeRegex(java.lang.String) -> setIncludeRegex
    115:115:java.lang.String getIncludeRegex() -> getIncludeRegex
    119:122:void setExcludeRegex(java.lang.String) -> setExcludeRegex
    125:125:java.lang.String getExcludeRegex() -> getExcludeRegex
    129:139:void setInterceptMethods(java.lang.String[]) -> setInterceptMethods
    142:142:java.lang.String[] getInterceptMethods() -> getInterceptMethods
    146:149:void setInterceptRequest(boolean) -> setInterceptRequest
    152:152:boolean getInterceptRequest() -> getInterceptRequest
    156:159:void setInterceptResponse(boolean) -> setInterceptResponse
    162:162:boolean getInterceptResponse() -> getInterceptResponse
    166:168:void setInterceptResponseRegex(java.lang.String) -> setInterceptResponseRegex
    171:171:java.lang.String getInterceptResponseRegex() -> getInterceptResponseRegex
    175:178:void setCaseSensitive(boolean) -> setCaseSensitive
    181:181:boolean isCaseSensitive() -> isCaseSensitive
    185:185:org.sandrop.webscarab.httpclient.HTTPClient getProxyPlugin(org.sandrop.webscarab.httpclient.HTTPClient) -> getProxyPlugin
    253:253:boolean getEnabled() -> getEnabled
    46:46:boolean access$000(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> a
    46:46:java.lang.String access$100(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> b
    46:46:java.lang.String access$200(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> c
    46:46:java.lang.String access$300(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> d
    46:46:java.util.logging.Logger access$400(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> e
    46:46:java.lang.String access$500() -> a
    46:46:java.lang.String access$600() -> b
    46:46:java.lang.String access$700() -> c
    46:46:boolean access$800(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> f
    46:46:java.lang.String[] access$900(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> g
    46:46:org.sandrop.webscarab.plugin.proxy.ManualEditUI access$1000(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> h
    46:46:boolean access$1100(org.sandrop.webscarab.plugin.proxy.ManualEdit) -> i
    48:50:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.proxy.ManualEdit$Plugin -> org.sandrop.webscarab.plugin.proxy.ManualEdit$a:
    org.sandrop.webscarab.httpclient.HTTPClient _in -> b
    java.util.regex.Pattern _exclude -> c
    java.util.regex.Pattern _include -> d
    java.util.regex.Pattern _content -> e
    org.sandrop.webscarab.plugin.proxy.ManualEdit this$0 -> a
    196:212:void <init>(org.sandrop.webscarab.plugin.proxy.ManualEdit,org.sandrop.webscarab.httpclient.HTTPClient) -> <init>
    215:246:org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
org.sandrop.webscarab.plugin.proxy.ManualEditUI -> org.sandrop.webscarab.plugin.proxy.ManualEditUI:
    org.sandrop.webscarab.model.Request editRequest(org.sandrop.webscarab.model.Request) -> editRequest
    org.sandrop.webscarab.model.Response editResponse(org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> editResponse
org.sandrop.webscarab.plugin.proxy.PcapWriter -> org.sandrop.webscarab.plugin.proxy.PcapWriter:
    java.lang.String TAG -> a
    boolean LOGD -> b
    netutils.files.pcap.PCapFileWriter pcapFileWriterAll -> c
    netutils.files.pcap.PCapFileWriter pcapFileWriter -> d
    netutils.parse.IPv4Address clientAddress -> e
    netutils.parse.IPv4Address serverAddress -> f
    int clientPort -> g
    int serverPort -> h
    long sequenceNumber -> i
    56:57:void init(java.lang.String) -> init
    60:61:void release() -> release
    64:67:void writeToAll(byte[],long) -> writeToAll
    69:76:void <init>(java.net.Socket,java.net.Socket,java.lang.String) -> <init>
    79:111:void writeData(byte[],long,boolean) -> writeData
    45:46:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.proxy.Proxy -> org.sandrop.webscarab.plugin.proxy.Proxy:
    boolean _running -> a
    org.sandrop.webscarab.plugin.Framework _framework -> b
    org.sandrop.webscarab.plugin.proxy.ITransparentProxyResolver _transparentProxyResolver -> c
    org.sandrop.webscarab.plugin.proxy.IClientResolver _clientResolver -> d
    boolean _captureData -> e
    boolean _useFakeCerts -> f
    boolean _storeSslAsPcap -> g
    java.util.Map _appOptions -> h
    java.io.File storageDir -> i
    java.io.File pcapStorageDir -> j
    org.sandrop.webscarab.plugin.proxy.ProxyUI _ui -> k
    java.util.ArrayList _plugins -> l
    java.util.TreeMap _listeners -> m
    java.util.logging.Logger _logger -> n
    java.lang.String _status -> o
    int _pending -> p
    java.util.HashMap _factoryMap -> q
    char[] _keystorepass -> r
    char[] _keypassword -> s
    org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory _certGenerator -> t
    java.lang.String _certDir -> u
    org.sandrop.webscarab.plugin.proxy.Proxy$ConnectionHook _allowConnection -> v
    org.sandrop.webscarab.plugin.proxy.Proxy$ConnectionHook _interceptRequest -> w
    org.sandrop.webscarab.plugin.proxy.Proxy$ConnectionHook _interceptResponse -> x
    org.sandrop.websockets.ExtensionWebSocket _webSocketManager -> y
    89:199:void <init>(org.sandrop.webscarab.plugin.Framework,org.sandrop.webscarab.plugin.proxy.ITransparentProxyResolver,org.sandrop.webscarab.plugin.proxy.IClientResolver) -> <init>
    203:203:java.util.Map getAppOptions() -> getAppOptions
    207:207:java.io.File getStorageDir() -> getStorageDir
    211:211:java.io.File getPcapStorageDir() -> getPcapStorageDir
    215:215:org.sandrop.webscarab.plugin.Hook[] getScriptingHooks() -> getScriptingHooks
    220:220:org.sandrop.websockets.ExtensionWebSocket getWebSocketManager() -> getWebSocketManager
    224:224:java.lang.Object getScriptableObject() -> getScriptableObject
    228:228:org.sandrop.webscarab.plugin.proxy.ITransparentProxyResolver getTransparentProxyResolver() -> getTransparentProxyResolver
    232:232:org.sandrop.webscarab.plugin.proxy.IClientResolver getClientResolver() -> getClientResolver
    239:240:void allowClientConnection(org.sandrop.webscarab.plugin.proxy.ScriptableConnection) -> a
    247:248:void interceptRequest(org.sandrop.webscarab.plugin.proxy.ScriptableConnection) -> b
    255:256:void interceptResponse(org.sandrop.webscarab.plugin.proxy.ScriptableConnection) -> c
    259:262:void setUI(org.sandrop.webscarab.plugin.proxy.ProxyUI) -> setUI
    265:266:void addPlugin(org.sandrop.webscarab.plugin.proxy.ProxyPlugin) -> addPlugin
    276:283:org.sandrop.webscarab.plugin.proxy.ProxyPlugin getPlugin(java.lang.String) -> getPlugin
    293:293:java.lang.String getPluginName() -> getPluginName
    302:305:org.sandrop.webscarab.plugin.proxy.ListenerSpec[] getProxies() -> getProxies
    315:319:org.sandrop.webscarab.plugin.proxy.ProxyPlugin[] getPlugins() -> getPlugins
    333:353:void addListener(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> addListener
    356:356:java.lang.String getKey(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> a
    360:365:void startListener(org.sandrop.webscarab.plugin.proxy.Listener) -> a
    368:371:boolean stopListener(org.sandrop.webscarab.plugin.proxy.Listener) -> b
    382:409:boolean removeListener(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> removeListener
    417:439:void run() -> run
    447:468:boolean stop() -> stop
    480:482:long gotRequest(org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.ConnectionDescriptor) -> gotRequest
    496:498:void gotResponse(long,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,boolean) -> gotResponse
    501:548:javax.net.ssl.SSLSocketFactory getSocketFactory(org.sandrop.webscarab.plugin.proxy.SiteData) -> getSocketFactory
    552:562:javax.net.ssl.SSLSocketFactory loadSocketFactory(java.io.File,java.lang.String) -> a
    567:659:javax.net.ssl.SSLSocketFactory loadSocketFactory(java.io.InputStream,java.lang.String) -> a
    663:675:javax.net.ssl.SSLSocketFactory generateSocketFactory(org.sandrop.webscarab.plugin.proxy.SiteData) -> a
    688:690:void failedResponse(org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,long,java.lang.String,boolean) -> failedResponse
    693:757:void parseListenerConfig() -> a
    760:766:void createListener(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> b
    770:775:void flush() -> flush
    778:778:boolean isBusy() -> isBusy
    782:782:java.lang.String getStatus() -> getStatus
    786:786:boolean isModified() -> isModified
    792:792:void analyse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> analyse
    797:802:void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    805:805:boolean isRunning() -> isRunning
    87:87:java.util.logging.Logger access$000(org.sandrop.webscarab.plugin.proxy.Proxy) -> a
    112:117:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.proxy.Proxy$1 -> org.sandrop.webscarab.plugin.proxy.Proxy$1:
    org.sandrop.webscarab.plugin.proxy.Proxy this$0 -> a
    579:579:void <init>(org.sandrop.webscarab.plugin.proxy.Proxy) -> <init>
    581:581:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    586:592:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    596:602:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
org.sandrop.webscarab.plugin.proxy.Proxy$ConnectionHook -> org.sandrop.webscarab.plugin.proxy.Proxy$a:
    org.sandrop.webscarab.plugin.proxy.Proxy this$0 -> a
    810:812:void <init>(org.sandrop.webscarab.plugin.proxy.Proxy,java.lang.String,java.lang.String) -> <init>
    815:829:void runScripts(org.sandrop.webscarab.plugin.proxy.ScriptableConnection) -> a
org.sandrop.webscarab.plugin.proxy.ProxyPlugin -> org.sandrop.webscarab.plugin.proxy.ProxyPlugin:
    41:41:void <init>() -> <init>
    44:44:void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    47:47:void flush() -> flush
    java.lang.String getPluginName() -> getPluginName
    org.sandrop.webscarab.httpclient.HTTPClient getProxyPlugin(org.sandrop.webscarab.httpclient.HTTPClient) -> getProxyPlugin
    boolean getEnabled() -> getEnabled
org.sandrop.webscarab.plugin.proxy.ProxyUI -> org.sandrop.webscarab.plugin.proxy.ProxyUI:
    void proxyAdded(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> proxyAdded
    void proxyStarted(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> proxyStarted
    void proxyStartError(org.sandrop.webscarab.plugin.proxy.ListenerSpec,java.io.IOException) -> proxyStartError
    void proxyStopped(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> proxyStopped
    void proxyRemoved(org.sandrop.webscarab.plugin.proxy.ListenerSpec) -> proxyRemoved
    void requested(org.sandrop.webscarab.model.ConversationID,java.lang.String,org.sandrop.webscarab.model.HttpUrl) -> requested
    void received(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> received
    void aborted(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> aborted
org.sandrop.webscarab.plugin.proxy.RevealHidden -> org.sandrop.webscarab.plugin.proxy.RevealHidden:
    boolean _enabled -> a
    53:58:void <init>() -> <init>
    61:63:void parseProperties() -> parseProperties
    66:66:java.lang.String getPluginName() -> getPluginName
    78:78:boolean getEnabled() -> getEnabled
    82:82:org.sandrop.webscarab.httpclient.HTTPClient getProxyPlugin(org.sandrop.webscarab.httpclient.HTTPClient) -> getProxyPlugin
    51:51:boolean access$000(org.sandrop.webscarab.plugin.proxy.RevealHidden) -> a
org.sandrop.webscarab.plugin.proxy.RevealHidden$Plugin -> org.sandrop.webscarab.plugin.proxy.RevealHidden$a:
    org.sandrop.webscarab.httpclient.HTTPClient _in -> b
    org.sandrop.webscarab.plugin.proxy.RevealHidden this$0 -> a
    89:91:void <init>(org.sandrop.webscarab.plugin.proxy.RevealHidden,org.sandrop.webscarab.httpclient.HTTPClient) -> <init>
    94:105:org.sandrop.webscarab.model.Response fetchResponse(org.sandrop.webscarab.model.Request) -> fetchResponse
    113:138:byte[] revealHidden(byte[]) -> a
    142:150:java.lang.String constructReplacement(java.lang.String,java.lang.String) -> a
org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory -> org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory:
    java.util.logging.Logger _logger -> a
    javax.security.auth.x500.X500Principal CA_NAME -> b
    java.security.PrivateKey caKey -> c
    java.security.cert.X509Certificate[] caCerts -> d
    java.lang.String filenameCA -> e
    java.lang.String filenameCert -> f
    java.security.KeyStore keystoreCert -> g
    java.security.KeyStore keystoreCA -> h
    char[] passwordCA -> i
    char[] passwordCerts -> j
    boolean reuseKeys -> k
    java.util.Map contextCache -> l
    java.util.Set serials -> m
    101:194:void <init>(java.lang.String,java.lang.String,java.lang.String,char[]) -> <init>
    209:210:void setReuseKeys(boolean) -> setReuseKeys
    222:222:javax.net.ssl.SSLSocketFactory getSocketFactory(org.sandrop.webscarab.plugin.proxy.SiteData) -> getSocketFactory
    227:270:javax.net.ssl.SSLContext getSSLContext(org.sandrop.webscarab.plugin.proxy.SiteData) -> getSSLContext
    274:278:java.security.cert.X509Certificate[] cast(java.security.cert.Certificate[]) -> a
    282:299:javax.net.ssl.X509KeyManager loadKeyMaterial(org.sandrop.webscarab.plugin.proxy.SiteData) -> a
    303:314:void saveKeystore(java.security.KeyStore,java.lang.String,char[]) -> a
    318:343:void generateCA(javax.security.auth.x500.X500Principal) -> a
    346:354:void initSerials() -> b
    357:357:javax.security.auth.x500.X500Principal getSubjectPrincipal(java.lang.String) -> getSubjectPrincipal
    361:365:java.math.BigInteger getNextSerialNo() -> getNextSerialNo
    372:433:javax.net.ssl.X509KeyManager createKeyMaterial(org.sandrop.webscarab.plugin.proxy.SiteData) -> b
    60:60:java.util.logging.Logger access$000() -> a
    65:86:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory$1 -> org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory$1:
    org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory this$0 -> a
    239:239:void <init>(org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory) -> <init>
    241:241:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    246:252:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    256:262:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory$HostKeyManager -> org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory$a:
    org.sandrop.webscarab.plugin.proxy.SiteData hostData -> b
    java.security.PrivateKey pk -> c
    java.security.cert.X509Certificate[] certs -> d
    org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory this$0 -> a
    445:449:void <init>(org.sandrop.webscarab.plugin.proxy.SSLSocketFactoryFactory,org.sandrop.webscarab.plugin.proxy.SiteData,java.security.PrivateKey,java.security.cert.X509Certificate[]) -> <init>
    453:453:java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket) -> chooseClientAlias
    459:459:java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket) -> chooseServerAlias
    463:463:java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    467:467:java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[]) -> getClientAliases
    472:472:java.security.PrivateKey getPrivateKey(java.lang.String) -> getPrivateKey
    482:482:java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[]) -> getServerAliases
org.sandrop.webscarab.plugin.proxy.ScriptableConnection -> org.sandrop.webscarab.plugin.proxy.ScriptableConnection:
    java.net.Socket _socket -> a
    org.sandrop.webscarab.model.Request _request -> b
    org.sandrop.webscarab.model.Response _response -> c
    49:57:void <init>(java.net.Socket) -> <init>
    65:65:java.net.InetAddress getAddress() -> getAddress
    73:75:void closeConnection() -> closeConnection
    88:89:void setRequest(org.sandrop.webscarab.model.Request) -> setRequest
    96:96:org.sandrop.webscarab.model.Request getRequest() -> getRequest
    107:108:void setResponse(org.sandrop.webscarab.model.Response) -> setResponse
    115:115:org.sandrop.webscarab.model.Response getResponse() -> getResponse
org.sandrop.webscarab.plugin.proxy.SiteData -> org.sandrop.webscarab.plugin.proxy.SiteData:
    java.lang.String name -> name
    java.security.cert.X509Certificate[] certs -> certs
    java.lang.String tcpAddress -> tcpAddress
    java.lang.String hostName -> hostName
    int destPort -> destPort
    int sourcePort -> sourcePort
    int appUID -> appUID
    5:5:void <init>() -> <init>
org.sandrop.webscarab.plugin.proxy.SocketForwarder -> org.sandrop.webscarab.plugin.proxy.SocketForwarder:
    java.lang.String TAG -> a
    boolean LOGD -> b
    java.io.InputStream in -> c
    java.io.OutputStream out -> d
    org.sandrop.webscarab.plugin.proxy.PcapWriter pcapWriter -> e
    boolean flip -> f
    55:100:void connect(java.lang.String,java.net.Socket,java.net.Socket,boolean,java.io.File,org.sandrop.webscarab.model.ConnectionDescriptor) -> connect
    102:109:void <init>(java.lang.String,java.io.InputStream,java.io.OutputStream,org.sandrop.webscarab.plugin.proxy.PcapWriter,boolean) -> <init>
    113:136:void run() -> run
    45:46:void <clinit>() -> <clinit>
org.sandrop.webscarab.plugin.spider.Link -> org.sandrop.webscarab.plugin.spider.Link:
    org.sandrop.webscarab.model.HttpUrl _url -> a
    java.lang.String _referer -> b
    47:50:void <init>(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> <init>
    53:53:org.sandrop.webscarab.model.HttpUrl getURL() -> getURL
    57:57:java.lang.String getReferer() -> getReferer
    61:61:java.lang.String toString() -> toString
org.sandrop.webscarab.plugin.spider.Spider -> org.sandrop.webscarab.plugin.spider.Spider:
    org.sandrop.webscarab.plugin.spider.SpiderModel _model -> a
    org.sandrop.webscarab.plugin.Framework _framework -> b
    org.sandrop.webscarab.httpclient.FetcherQueue _fetcherQueue -> c
    int _threads -> d
    java.lang.Thread _runThread -> e
    java.util.logging.Logger _logger -> f
    84:99:void <init>(org.sandrop.webscarab.plugin.Framework) -> <init>
    102:102:org.sandrop.webscarab.plugin.spider.SpiderModel getModel() -> getModel
    106:106:java.lang.String getPluginName() -> getPluginName
    110:129:void run() -> run
    134:156:boolean queueRequests() -> a
    160:180:void responseReceived(org.sandrop.webscarab.model.Response) -> responseReceived
    183:184:void requestError(org.sandrop.webscarab.model.Request,java.io.IOException) -> requestError
    187:188:boolean isBusy() -> isBusy
    215:220:void requestLinksUnder(org.sandrop.webscarab.model.HttpUrl) -> requestLinksUnder
    224:240:void queueLinksUnder(org.sandrop.webscarab.model.HttpUrl,java.util.List,int) -> a
    244:249:void requestLinks(org.sandrop.webscarab.model.HttpUrl[]) -> requestLinks
    252:253:void clearQueue() -> clearQueue
    256:275:org.sandrop.webscarab.model.Request newGetRequest(org.sandrop.webscarab.plugin.spider.Link) -> a
    279:280:void setExtraHeaders(org.sandrop.webscarab.model.NamedValue[]) -> setExtraHeaders
    283:283:org.sandrop.webscarab.model.NamedValue[] getExtraHeaders() -> getExtraHeaders
    288:288:void flush() -> flush
    291:298:boolean stop() -> stop
    302:302:java.lang.String getStatus() -> getStatus
    306:327:void analyse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response,java.lang.String) -> analyse
    330:359:void processHtml(org.sandrop.webscarab.model.HttpUrl,org.htmlparser.util.NodeList) -> a
    362:384:void processLink(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> a
    387:392:void processScript(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> b
    395:395:boolean isModified() -> isModified
    399:399:boolean isRunning() -> isRunning
    403:403:void setSession(java.lang.String,java.lang.Object,java.lang.String) -> setSession
    406:406:java.lang.Object getScriptableObject() -> getScriptableObject
    410:410:org.sandrop.webscarab.plugin.Hook[] getScriptingHooks() -> getScriptingHooks
org.sandrop.webscarab.plugin.spider.SpiderModel -> org.sandrop.webscarab.plugin.spider.SpiderModel:
    org.sandrop.webscarab.model.FrameworkModel _model -> a
    org.sandrop.webscarab.plugin.spider.SpiderModel$SpiderUrlModel _urlModel -> b
    java.util.List _linkQueue -> c
    java.lang.String _allowedDomains -> d
    java.lang.String _forbiddenPaths -> e
    boolean _recursive -> f
    boolean _cookieSync -> g
    org.sandrop.webscarab.model.NamedValue[] _extraHeaders -> h
    java.util.logging.Logger _logger -> i
    58:74:void <init>(org.sandrop.webscarab.model.FrameworkModel) -> <init>
    77:77:org.sandrop.webscarab.model.UrlModel getUrlModel() -> getUrlModel
    81:81:boolean isUnseen(org.sandrop.webscarab.model.HttpUrl) -> isUnseen
    85:91:boolean isForbidden(org.sandrop.webscarab.model.HttpUrl) -> isForbidden
    95:104:void addUnseenLink(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.HttpUrl) -> addUnseenLink
    110:117:void queueLink(org.sandrop.webscarab.plugin.spider.Link) -> queueLink
    121:137:org.sandrop.webscarab.plugin.spider.Link dequeueLink() -> dequeueLink
    143:149:void clearLinkQueue() -> clearLinkQueue
    154:160:int getQueuedLinkCount() -> getQueuedLinkCount
    164:164:org.sandrop.webscarab.model.Cookie[] getCookiesForUrl(org.sandrop.webscarab.model.HttpUrl) -> getCookiesForUrl
    168:169:void addCookie(org.sandrop.webscarab.model.Cookie) -> addCookie
    172:187:void parseProperties() -> parseProperties
    190:190:java.lang.String getReferer(org.sandrop.webscarab.model.HttpUrl) -> getReferer
    194:195:void setExtraHeaders(org.sandrop.webscarab.model.NamedValue[]) -> setExtraHeaders
    198:198:org.sandrop.webscarab.model.NamedValue[] getExtraHeaders() -> getExtraHeaders
    202:205:void setRecursive(boolean) -> setRecursive
    208:208:boolean getRecursive() -> getRecursive
    212:215:void setCookieSync(boolean) -> setCookieSync
    218:218:boolean getCookieSync() -> getCookieSync
    222:225:void setAllowedDomains(java.lang.String) -> setAllowedDomains
    228:228:java.lang.String getAllowedDomains() -> getAllowedDomains
    232:236:void setForbiddenPaths(java.lang.String) -> setForbiddenPaths
    239:239:java.lang.String getForbiddenPaths() -> getForbiddenPaths
    243:244:void setAuthRequired(org.sandrop.webscarab.model.HttpUrl) -> setAuthRequired
org.sandrop.webscarab.plugin.spider.SpiderModel$SpiderUrlModel -> org.sandrop.webscarab.plugin.spider.SpiderModel$a:
    org.sandrop.webscarab.plugin.spider.SpiderModel this$0 -> a
    248:250:void <init>(org.sandrop.webscarab.plugin.spider.SpiderModel,org.sandrop.webscarab.model.UrlModel) -> <init>
    253:253:boolean shouldFilter(org.sandrop.webscarab.model.HttpUrl) -> shouldFilter
org.sandrop.webscarab.plugin.spider.SpiderStore -> org.sandrop.webscarab.plugin.spider.SpiderStore:
    void writeUnseenLinks(org.sandrop.webscarab.plugin.spider.Link[]) -> writeUnseenLinks
    org.sandrop.webscarab.plugin.spider.Link[] readUnseenLinks() -> readUnseenLinks
    void writeSeenLinks(java.lang.String[]) -> writeSeenLinks
    java.lang.String[] readSeenLinks() -> readSeenLinks
org.sandrop.webscarab.util.CharsetUtils -> org.sandrop.webscarab.util.CharsetUtils:
    43:60:void <init>() -> <init>
    46:57:java.lang.String getCharset(byte[]) -> getCharset
org.sandrop.webscarab.util.CharsetUtils$1 -> org.sandrop.webscarab.util.CharsetUtils$1:
org.sandrop.webscarab.util.CharsetUtils$CharsetListener -> org.sandrop.webscarab.util.CharsetUtils$a:
    java.lang.String charset -> a
    60:62:void <init>() -> <init>
    69:69:java.lang.String getCharset() -> a
    60:60:void <init>(org.sandrop.webscarab.util.CharsetUtils$1) -> <init>
org.sandrop.webscarab.util.DOMHandler -> org.sandrop.webscarab.util.DOMHandler:
    org.w3c.dom.Document _document -> a
    java.util.Stack _stack -> b
    org.w3c.dom.Node _last -> c
    java.util.List _namespaces -> d
    java.lang.String XMLNS_PREFIX -> XMLNS_PREFIX
    java.lang.String XMLNS_STRING -> XMLNS_STRING
    java.lang.String XMLNS_URI -> XMLNS_URI
    57:70:void <init>() -> <init>
    73:73:org.w3c.dom.Document getDocument() -> getDocument
    77:87:void characters(char[],int,int) -> characters
    90:91:void startDocument() -> startDocument
    94:95:void endDocument() -> endDocument
    98:134:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    137:139:void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    142:147:void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
    151:151:void endPrefixMapping(java.lang.String) -> endPrefixMapping
    155:155:void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    161:167:void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    171:171:void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    175:175:void skippedEntity(java.lang.String) -> skippedEntity
    182:188:void comment(char[],int,int) -> comment
    191:191:void startCDATA() -> startCDATA
    192:192:void endCDATA() -> endCDATA
    193:193:void startEntity(java.lang.String) -> startEntity
    194:194:void endDTD() -> endDTD
    195:195:void endEntity(java.lang.String) -> endEntity
    196:196:void startDTD(java.lang.String,java.lang.String,java.lang.String) -> startDTD
org.sandrop.webscarab.util.Diff -> org.sandrop.webscarab.util.Diff:
    java.lang.CharSequence DELETE -> a
    53:54:void <init>() -> <init>
    57:57:java.util.List getEdits(java.lang.CharSequence,java.lang.CharSequence) -> getEdits
    70:121:java.util.List getEdits(int,int,java.lang.CharSequence,int,int,java.lang.CharSequence) -> a
    125:136:java.lang.CharSequence[] split(java.lang.CharSequence,char) -> split
    140:143:java.util.List getEdits(java.lang.CharSequence,java.lang.CharSequence,char) -> getEdits
    147:170:java.util.List convertArrayToOriginal(java.lang.CharSequence[],java.lang.CharSequence[],java.util.List) -> convertArrayToOriginal
    174:174:java.util.List getEdits(java.lang.CharSequence[],java.lang.CharSequence[]) -> getEdits
    187:231:java.util.List getEdits(int,int,java.lang.CharSequence[],int,int,java.lang.CharSequence[]) -> a
    235:245:java.util.List refine(java.lang.CharSequence,java.lang.CharSequence,java.util.List) -> refine
    249:254:int getDistance(java.util.List) -> getDistance
    261:279:java.lang.String apply(java.lang.CharSequence,java.util.List) -> apply
    286:303:java.lang.String revert(java.lang.CharSequence,java.util.List) -> revert
    330:353:org.sandrop.webscarab.util.Diff$LCS lcs(int,int,java.lang.CharSequence,int,int,java.lang.CharSequence) -> b
    380:402:org.sandrop.webscarab.util.Diff$LCS lcs(int,int,java.lang.CharSequence[],int,int,java.lang.CharSequence[]) -> b
    518:534:void test(java.lang.String,java.lang.String) -> a
    537:540:void main(java.lang.String[]) -> main
    51:51:void <clinit>() -> <clinit>
org.sandrop.webscarab.util.Diff$ArrayEdit -> org.sandrop.webscarab.util.Diff$ArrayEdit:
    int srcStart -> a
    int srcEnd -> b
    int dstStart -> c
    int dstEnd -> d
    482:494:void <init>(int,int,int,int) -> <init>
    497:497:int getDstEnd() -> getDstEnd
    501:501:int getDstStart() -> getDstStart
    505:505:int getSrcEnd() -> getSrcEnd
    509:509:int getSrcStart() -> getSrcStart
    513:513:java.lang.String toString() -> toString
org.sandrop.webscarab.util.Diff$Edit -> org.sandrop.webscarab.util.Diff$Edit:
    int srcLocation -> a
    int dstLocation -> b
    java.lang.CharSequence src -> c
    java.lang.CharSequence dst -> d
    442:454:void <init>(int,java.lang.CharSequence,int,java.lang.CharSequence) -> <init>
    457:457:java.lang.CharSequence getSrc() -> getSrc
    461:461:int getSrcLocation() -> getSrcLocation
    465:465:java.lang.CharSequence getDst() -> getDst
    469:469:int getDstLocation() -> getDstLocation
    473:473:java.lang.String toString() -> toString
org.sandrop.webscarab.util.Diff$LCS -> org.sandrop.webscarab.util.Diff$a:
    int srcLocation -> a
    int dstLocation -> b
    int length -> c
    412:416:void <init>(int,int,int) -> <init>
    419:419:int getDstLocation() -> a
    423:423:int getLength() -> b
    427:427:int getSrcLocation() -> c
    431:431:java.lang.String toString() -> toString
org.sandrop.webscarab.util.Encoding -> org.sandrop.webscarab.util.Encoding:
    byte[] _base64en -> a
    byte[] _base64de -> b
    53:53:void <init>() -> <init>
    94:94:java.lang.String base64encode(byte[]) -> base64encode
    98:150:java.lang.String base64encode(byte[],boolean) -> base64encode
    165:165:byte[] base64decode(java.lang.String) -> base64decode
    169:228:byte[] base64decode(java.lang.String,boolean) -> base64decode
    238:248:java.lang.String toHexString(byte[]) -> toHexString
    258:258:java.lang.String hashMD5(java.lang.String) -> hashMD5
    262:271:java.lang.String hashMD5(byte[]) -> hashMD5
    283:293:java.lang.String hashSHA(java.lang.String) -> hashSHA
    303:322:java.lang.String rot13(java.lang.String) -> rot13
    332:335:java.lang.String urlDecode(java.lang.String) -> urlDecode
    348:351:java.lang.String urlEncode(java.lang.String) -> urlEncode
    63:82:void <clinit>() -> <clinit>
org.sandrop.webscarab.util.EventListenerList -> org.sandrop.webscarab.util.EventListenerList:
    java.lang.Object[] listenerList -> listenerList
    62:64:void <init>() -> <init>
    70:89:void remove(java.lang.Class,java.util.EventListener) -> remove
    95:105:void add(java.lang.Class,java.util.EventListener) -> add
    108:121:java.util.EventListener[] getListeners(java.lang.Class) -> getListeners
    133:139:java.lang.String toString() -> toString
    143:143:java.lang.Object[] getListenerList() -> getListenerList
    147:154:int getListenerCount(java.lang.Class) -> getListenerCount
    158:158:int getListenerCount() -> getListenerCount
org.sandrop.webscarab.util.Glob -> org.sandrop.webscarab.util.Glob:
    46:47:void <init>() -> <init>
    56:124:java.lang.String globToRE(java.lang.String) -> globToRE
org.sandrop.webscarab.util.HtmlEncoder -> org.sandrop.webscarab.util.HtmlEncoder:
    java.util.Map e2i -> a
    java.util.Map i2e -> b
    java.lang.Object[][] entities -> c
    38:38:void <init>() -> <init>
    143:169:java.lang.String encode(java.lang.String) -> encode
    183:224:java.lang.String decode(java.lang.String) -> decode
    40:128:void <clinit>() -> <clinit>
org.sandrop.webscarab.util.LevenshteinDistance -> org.sandrop.webscarab.util.LevenshteinDistance:
    java.util.List _baseline -> a
    int[] _current -> b
    int[] _previous -> c
    57:61:void <init>(java.util.List) -> <init>
    64:100:int getDistance(java.util.List) -> getDistance
    104:127:void main(java.lang.String[]) -> main
org.sandrop.webscarab.util.LogInputStream -> org.sandrop.webscarab.util.LogInputStream:
    java.io.PrintStream _ps -> a
    56:61:void <init>(java.io.InputStream,java.io.PrintStream) -> <init>
    81:89:int read() -> read
    110:117:int read(byte[],int,int) -> read
    131:131:boolean markSupported() -> markSupported
org.sandrop.webscarab.util.LogOutputStream -> org.sandrop.webscarab.util.LogOutputStream:
    java.io.OutputStream _os -> a
    java.io.PrintStream _ps -> b
    51:54:void <init>(java.io.OutputStream,java.io.PrintStream) -> <init>
    57:59:void write(int) -> write
    62:64:void write(byte[],int,int) -> write
org.sandrop.webscarab.util.MRUCache -> org.sandrop.webscarab.util.MRUCache:
    int _maxSize -> a
    56:57:void <init>(int) -> <init>
    65:66:void <init>(int,int) -> <init>
    75:77:void <init>(int,int,float) -> <init>
    86:86:boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.sandrop.webscarab.util.NullComparator -> org.sandrop.webscarab.util.NullComparator:
    44:45:void <init>() -> <init>
    49:53:int compare(java.lang.Object,java.lang.Object) -> compare
org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock -> org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock:
    EDU.oswego.cs.dl.util.concurrent.Sync _writeLock -> a
    54:56:void <init>() -> <init>
    68:68:boolean allowReader() -> allowReader
    72:84:void debug() -> debug
    87:87:EDU.oswego.cs.dl.util.concurrent.Sync writeLock() -> writeLock
org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock$LoggingLock -> org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock$a:
    EDU.oswego.cs.dl.util.concurrent.Sync _sync -> b
    org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock this$0 -> a
    94:96:void <init>(org.sandrop.webscarab.util.ReentrantReaderPreferenceReadWriteLock,EDU.oswego.cs.dl.util.concurrent.Sync) -> <init>
org.sandrop.webscarab.util.RegexExpansion -> org.sandrop.webscarab.util.RegexExpansion:
    java.lang.String regex -> a
    int size -> b
    int index -> c
    char[][] charsets -> d
    61:150:void <init>(java.lang.String) -> <init>
    61:161:void <init>(org.sandrop.webscarab.util.RegexExpansion) -> <init>
    168:168:java.lang.String getRegex() -> getRegex
    176:176:int size() -> size
    184:187:void setIndex(int) -> setIndex
    194:194:int getIndex() -> getIndex
    202:202:boolean hasNext() -> hasNext
    210:212:java.lang.String next() -> next
    221:229:java.lang.String get(int) -> get
    233:235:void main(java.lang.String[]) -> main
org.sandrop.webscarab.util.RequestConverter -> org.sandrop.webscarab.util.RequestConverter:
    java.util.logging.Logger _logger -> a
    47:47:void <init>() -> <init>
    52:82:org.sandrop.webscarab.model.Request convertGetToPost(org.sandrop.webscarab.model.Request) -> convertGetToPost
    86:107:org.sandrop.webscarab.model.Request convertPostToMultipart(org.sandrop.webscarab.model.Request) -> convertPostToMultipart
    111:111:org.sandrop.webscarab.model.Request convertGetToMultipartPost(org.sandrop.webscarab.model.Request) -> convertGetToMultipartPost
    115:138:org.sandrop.webscarab.model.Request convertPostToGet(org.sandrop.webscarab.model.Request) -> convertPostToGet
    142:153:void main(java.lang.String[]) -> main
    49:49:void <clinit>() -> <clinit>
org.sandrop.webscarab.util.TextFormatter -> org.sandrop.webscarab.util.TextFormatter:
    java.text.SimpleDateFormat _sdf -> a
    46:50:void <init>() -> <init>
    53:72:java.lang.String format(java.util.logging.LogRecord) -> format
org.sandrop.websockets.ExtensionWebSocket -> org.sandrop.websockets.ExtensionWebSocket:
    java.util.logging.Logger logger -> a
    int HANDSHAKE_LISTENER -> HANDSHAKE_LISTENER
    java.lang.String NAME -> NAME
    java.util.concurrent.ExecutorService listenerThreadPool -> b
    java.util.Map allChannelObservers -> c
    java.util.Map wsProxies -> d
    org.sandrop.websockets.WebSocketStorage storageObserver -> e
    104:109:void <init>(org.sandroproxy.webscarab.store.sql.SqlLiteStore) -> <init>
    117:121:void unload() -> unload
    130:131:void addAllChannelObserver(java.lang.String,org.sandrop.websockets.WebSocketObserver) -> addAllChannelObserver
    139:140:void removeAllChannelObserver(java.lang.String,org.sandrop.websockets.WebSocketObserver) -> removeAllChannelObserver
    146:154:boolean onHandshakeResponse(long,org.sandrop.webscarab.model.Response,java.net.Socket,java.net.Socket,java.io.InputStream) -> onHandshakeResponse
    169:226:void addWebSocketsChannel(long,org.sandrop.webscarab.model.Response,java.net.Socket,java.net.Socket,java.io.InputStream) -> addWebSocketsChannel
    242:295:java.util.Map parseWebSocketExtensions(org.sandrop.webscarab.model.Response) -> a
    311:313:java.lang.String parseWebSocketSubProtocol(org.sandrop.webscarab.model.Response) -> b
    325:339:java.lang.String parseWebSocketVersion(org.sandrop.webscarab.model.Response) -> c
    349:352:java.util.concurrent.ExecutorService getListenerThreadPool() -> a
    363:368:boolean isConnected(long) -> isConnected
    379:390:boolean sendMessage(long,org.sandrop.websockets.WebSocketMessageDTO,boolean) -> sendMessage
    398:404:java.util.Map getConnectedProxies() -> getConnectedProxies
    75:75:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketChannelDTO -> org.sandrop.websockets.WebSocketChannelDTO:
    java.lang.Long id -> id
    java.lang.String host -> host
    java.lang.Integer port -> port
    java.lang.String url -> url
    java.lang.Long startTimestamp -> startTimestamp
    java.lang.Long endTimestamp -> endTimestamp
    long historyId -> historyId
    93:95:void <init>() -> <init>
    97:99:void <init>(java.lang.String) -> <init>
    107:110:boolean isConnected() -> isConnected
    121:129:java.lang.String getContextUrl() -> getContextUrl
    134:137:java.lang.String toString() -> toString
    142:159:boolean equals(java.lang.Object) -> equals
    164:164:int hashCode() -> hashCode
    173:182:int compareTo(org.sandrop.websockets.WebSocketChannelDTO) -> compareTo
    186:204:java.lang.String getFullUri() -> getFullUri
    56:56:int compareTo(java.lang.Object) -> compareTo
org.sandrop.websockets.WebSocketException -> org.sandrop.websockets.WebSocketException:
    60:61:void <init>() -> <init>
    64:65:void <init>(java.lang.String) -> <init>
    68:69:void <init>(java.lang.Exception) -> <init>
    72:73:void <init>(java.lang.String,java.lang.Exception) -> <init>
org.sandrop.websockets.WebSocketListener -> org.sandrop.websockets.WebSocketListener:
    java.util.logging.Logger logger -> a
    java.io.InputStream in -> b
    java.io.OutputStream out -> c
    org.sandrop.websockets.WebSocketProxy wsProxy -> d
    java.lang.String name -> e
    boolean isFinished -> f
    90:106:void <init>(org.sandrop.websockets.WebSocketProxy,java.io.InputStream,java.io.OutputStream,java.lang.String) -> <init>
    113:134:void run() -> run
    141:147:void closeReaderStream() -> a
    154:160:void closeWriterStream() -> b
    167:171:void stop() -> stop
    179:179:boolean isFinished() -> isFinished
    188:188:java.io.OutputStream getOutputStream() -> getOutputStream
    65:65:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketMessage -> org.sandrop.websockets.WebSocketMessage:
    org.sandrop.websockets.WebSocketProxy proxy -> a
    int messageId -> b
    java.nio.ByteBuffer payload -> payload
    org.sandrop.websockets.WebSocketMessage$Direction direction -> direction
    boolean isFinished -> isFinished
    java.sql.Timestamp timestamp -> timestamp
    int OPCODE_CONTINUATION -> OPCODE_CONTINUATION
    int OPCODE_TEXT -> OPCODE_TEXT
    int OPCODE_BINARY -> OPCODE_BINARY
    int OPCODE_CLOSE -> OPCODE_CLOSE
    int OPCODE_PING -> OPCODE_PING
    int OPCODE_PONG -> OPCODE_PONG
    int STATUS_CODE_OK -> STATUS_CODE_OK
    int STATUS_CODE_GOING_AWAY -> STATUS_CODE_GOING_AWAY
    int STATUS_CODE_PROTOCOL_ERROR -> STATUS_CODE_PROTOCOL_ERROR
    int STATUS_CODE_INVALID_DATA_TYPE -> STATUS_CODE_INVALID_DATA_TYPE
    int STATUS_CODE_INVALID_DATA -> STATUS_CODE_INVALID_DATA
    int STATUS_CODE_POLICY_VIOLATION -> STATUS_CODE_POLICY_VIOLATION
    int STATUS_CODE_MESSAGE_TOO_LARGE -> STATUS_CODE_MESSAGE_TOO_LARGE
    int STATUS_CODE_EXTENSION_NEGOTIATION_FAILED -> STATUS_CODE_EXTENSION_NEGOTIATION_FAILED
    int STATUS_CODE_SERVER_ERROR -> STATUS_CODE_SERVER_ERROR
    int[] OPCODES -> OPCODES
    int opcode -> opcode
    int closeCode -> closeCode
    org.sandrop.websockets.WebSocketMessageDTO dto -> c
    212:213:void <init>(org.sandrop.websockets.WebSocketProxy,int) -> <init>
    197:219:void <init>(org.sandrop.websockets.WebSocketProxy,int,org.sandrop.websockets.WebSocketMessageDTO) -> <init>
    225:225:int getMessageId() -> getMessageId
    boolean forward(java.io.OutputStream) -> forward
    void readContinuation(java.io.InputStream,byte) -> readContinuation
    255:255:int getCloseCode() -> getCloseCode
    262:262:int getOpcode() -> getOpcode
    269:269:boolean isBinary() -> isBinary
    277:277:boolean isBinary(int) -> isBinary
    284:284:boolean isText() -> isText
    292:292:boolean isText(int) -> isText
    299:299:boolean isControl() -> isControl
    307:311:boolean isControl(int) -> isControl
    321:321:boolean isFinished() -> isFinished
    328:328:java.lang.String getOpcodeString() -> getOpcodeString
    336:356:java.lang.String opcode2string(int) -> opcode2string
    368:381:void appendPayload(byte[]) -> appendPayload
    390:399:java.nio.ByteBuffer reallocate(java.nio.ByteBuffer,int) -> reallocate
    409:409:java.sql.Timestamp getTimestamp() -> getTimestamp
    java.lang.Integer getPayloadLength() -> getPayloadLength
    byte[] getPayload() -> getPayload
    void setPayload(byte[]) -> setPayload
    java.lang.String getReadablePayload() -> getReadablePayload
    void setReadablePayload(java.lang.String) -> setReadablePayload
    org.sandrop.websockets.WebSocketMessage$Direction getDirection() -> getDirection
    469:492:org.sandrop.websockets.WebSocketMessageDTO getDTO() -> getDTO
    497:497:java.lang.String toString() -> toString
    191:191:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketMessage$Direction -> org.sandrop.websockets.WebSocketMessage$Direction:
    org.sandrop.websockets.WebSocketMessage$Direction INCOMING -> INCOMING
    org.sandrop.websockets.WebSocketMessage$Direction OUTGOING -> OUTGOING
    org.sandrop.websockets.WebSocketMessage$Direction[] $VALUES -> a
    69:69:org.sandrop.websockets.WebSocketMessage$Direction[] values() -> values
    69:69:org.sandrop.websockets.WebSocketMessage$Direction valueOf(java.lang.String) -> valueOf
    69:69:void <init>(java.lang.String,int) -> <init>
    69:70:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketMessageDTO -> org.sandrop.websockets.WebSocketMessageDTO:
    org.sandrop.websockets.WebSocketChannelDTO channel -> channel
    java.lang.Integer id -> id
    java.lang.Long timestamp -> timestamp
    java.lang.String dateTime -> dateTime
    java.lang.Integer opcode -> opcode
    java.lang.String readableOpcode -> readableOpcode
    java.lang.Object payload -> payload
    java.lang.Integer closeCode -> closeCode
    java.lang.Boolean isOutgoing -> isOutgoing
    java.lang.Integer payloadLength -> payloadLength
    java.lang.Object tempUserObj -> tempUserObj
    java.text.DateFormat dateFormatter -> dateFormatter
    146:148:void <init>(org.sandrop.websockets.WebSocketChannelDTO) -> <init>
    152:153:void <init>() -> <init>
    162:174:void setTime(java.sql.Timestamp) -> setTime
    178:181:java.lang.String toString() -> toString
    190:201:void copyInto(org.sandrop.websockets.WebSocketMessageDTO) -> copyInto
    218:223:java.lang.String getReadablePayload() -> getReadablePayload
    138:140:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketObserver -> org.sandrop.websockets.WebSocketObserver:
    int getObservingOrder() -> getObservingOrder
    boolean onMessageFrame(long,org.sandrop.websockets.WebSocketMessage) -> onMessageFrame
    void onStateChange(org.sandrop.websockets.WebSocketProxy$State,org.sandrop.websockets.WebSocketProxy) -> onStateChange
org.sandrop.websockets.WebSocketProtocol -> org.sandrop.websockets.WebSocketProtocol:
    java.lang.String HEADER_PROTOCOL -> HEADER_PROTOCOL
    java.lang.String HEADER_EXTENSION -> HEADER_EXTENSION
    java.lang.String HEADER_VERSION -> HEADER_VERSION
    54:54:void <init>() -> <init>
org.sandrop.websockets.WebSocketProxy -> org.sandrop.websockets.WebSocketProxy:
    java.util.logging.Logger logger -> a
    java.util.Comparator observersComparator -> b
    org.sandrop.websockets.WebSocketProxy$State state -> state
    java.sql.Timestamp start -> start
    java.sql.Timestamp end -> end
    java.util.Map unfinishedMessages -> unfinishedMessages
    java.net.Socket localSocket -> localSocket
    java.net.Socket remoteSocket -> remoteSocket
    org.sandrop.websockets.WebSocketListener remoteListener -> c
    org.sandrop.websockets.WebSocketListener localListener -> d
    java.util.Vector observerList -> e
    long handshakeReference -> f
    java.lang.String host -> g
    int port -> h
    java.lang.Long channelId -> i
    java.util.concurrent.atomic.AtomicInteger messageIdGenerator -> j
    boolean isForwardOnly -> k
    boolean isClientMode -> l
    197:216:org.sandrop.websockets.WebSocketProxy create(java.lang.String,java.net.Socket,java.net.Socket,java.lang.String,java.util.Map) -> create
    227:255:void <init>(java.net.Socket,java.net.Socket) -> <init>
    264:283:void setState(org.sandrop.websockets.WebSocketProxy$State) -> setState
    294:339:void startListeners(java.util.concurrent.ExecutorService,java.io.InputStream) -> startListeners
    354:364:org.sandrop.websockets.WebSocketListener createListener(java.net.Socket,java.io.InputStream,java.lang.String) -> a
    380:387:org.sandrop.websockets.WebSocketListener createListener(java.net.Socket,java.lang.String) -> a
    395:438:void shutdown() -> shutdown
    444:447:boolean isConnected() -> isConnected
    460:507:void processRead(java.io.InputStream,java.io.OutputStream,byte) -> processRead
    519:528:void handleInvalidContinuation(java.io.InputStream,java.io.OutputStream,byte) -> a
    org.sandrop.websockets.WebSocketMessage createWebSocketMessage(java.io.InputStream,byte) -> createWebSocketMessage
    org.sandrop.websockets.WebSocketMessage createWebSocketMessage(org.sandrop.websockets.WebSocketMessageDTO) -> createWebSocketMessage
    551:556:java.net.Socket getOppositeSocket(java.net.Socket) -> getOppositeSocket
    565:565:boolean isForwardOnly() -> isForwardOnly
    574:593:void setForwardOnly(boolean) -> setForwardOnly
    606:615:boolean notifyMessageObservers(org.sandrop.websockets.WebSocketMessage) -> notifyMessageObservers
    624:627:void notifyStateObservers(org.sandrop.websockets.WebSocketProxy$State) -> notifyStateObservers
    635:637:void addObserver(org.sandrop.websockets.WebSocketObserver) -> addObserver
    645:646:void removeObserver(org.sandrop.websockets.WebSocketObserver) -> removeObserver
    654:658:java.util.Comparator getObserversComparator() -> a
    662:680:void createObserversComparator() -> b
    683:683:java.lang.Long getChannelId() -> getChannelId
    687:687:int getIncrementedMessageCount() -> getIncrementedMessageCount
    691:691:long getHandshakeReference() -> getHandshakeReference
    695:696:void setHandshakeReference(long) -> setHandshakeReference
    699:708:org.sandrop.websockets.WebSocketChannelDTO getDTO() -> getDTO
    713:713:java.lang.String toString() -> toString
    724:740:org.sandrop.websockets.WebSocketMessage sendAndNotify(org.sandrop.websockets.WebSocketMessageDTO,boolean) -> sendAndNotify
    744:744:boolean isClientMode() -> isClientMode
    85:85:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketProxy$1 -> org.sandrop.websockets.WebSocketProxy$1:
    663:663:void <init>() -> <init>
    667:676:int compare(org.sandrop.websockets.WebSocketObserver,org.sandrop.websockets.WebSocketObserver) -> a
    663:663:int compare(java.lang.Object,java.lang.Object) -> compare
org.sandrop.websockets.WebSocketProxy$2 -> org.sandrop.websockets.WebSocketProxy$2:
    int[] $SwitchMap$org$sandrop$websockets$WebSocketProxy$State -> a
    268:268:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketProxy$State -> org.sandrop.websockets.WebSocketProxy$State:
    org.sandrop.websockets.WebSocketProxy$State CONNECTING -> CONNECTING
    org.sandrop.websockets.WebSocketProxy$State OPEN -> OPEN
    org.sandrop.websockets.WebSocketProxy$State CLOSING -> CLOSING
    org.sandrop.websockets.WebSocketProxy$State CLOSED -> CLOSED
    org.sandrop.websockets.WebSocketProxy$State EXCLUDED -> EXCLUDED
    org.sandrop.websockets.WebSocketProxy$State INCLUDED -> INCLUDED
    org.sandrop.websockets.WebSocketProxy$State[] $VALUES -> a
    90:90:org.sandrop.websockets.WebSocketProxy$State[] values() -> values
    90:90:org.sandrop.websockets.WebSocketProxy$State valueOf(java.lang.String) -> valueOf
    90:90:void <init>(java.lang.String,int) -> <init>
    90:92:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketProxyV13 -> org.sandrop.websockets.WebSocketProxyV13:
    java.util.logging.Logger logger -> a
    89:90:void <init>(java.net.Socket,java.net.Socket) -> <init>
    97:97:org.sandrop.websockets.WebSocketMessage createWebSocketMessage(java.io.InputStream,byte) -> createWebSocketMessage
    102:102:org.sandrop.websockets.WebSocketMessage createWebSocketMessage(org.sandrop.websockets.WebSocketMessageDTO) -> createWebSocketMessage
    73:73:java.util.logging.Logger access$100() -> a
    75:75:void <clinit>() -> <clinit>
org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13 -> org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13:
    java.util.List receivedFrames -> b
    org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13$WebSocketFrameV13 currentFrame -> c
    int payloadLength -> d
    boolean hasChanged -> e
    boolean isValidUtf8Payload -> f
    org.sandrop.websockets.WebSocketProxyV13 this$0 -> a
    281:340:void <init>(org.sandrop.websockets.WebSocketProxyV13,org.sandrop.websockets.WebSocketProxy,java.io.InputStream,byte) -> <init>
    281:368:void <init>(org.sandrop.websockets.WebSocketProxyV13,org.sandrop.websockets.WebSocketProxy,org.sandrop.websockets.WebSocketMessageDTO) -> <init>
    380:381:void readContinuation(java.io.InputStream,byte) -> readContinuation
    390:394:java.lang.String getByteAsBitString(byte) -> a
    407:470:void readFrame(java.io.InputStream,byte) -> a
    483:512:int determinePayloadLength(java.io.InputStream,byte) -> b
    525:542:byte[] getReadableCloseFramePayload(byte[],int) -> a
    557:575:java.nio.ByteBuffer getTransmittableCloseFramePayload(java.nio.ByteBuffer) -> a
    586:587:byte read(java.io.InputStream) -> a
    599:615:byte[] read(java.io.InputStream,int) -> a
    623:673:boolean forward(java.io.OutputStream) -> forward
    683:689:void forwardFrame(org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13$WebSocketFrameV13,java.io.OutputStream) -> a
    693:699:byte[] getPayload() -> getPayload
    704:712:void setPayload(byte[]) -> setPayload
    716:724:java.lang.Integer getPayloadLength() -> getPayloadLength
    730:734:java.lang.String getReadablePayload() -> getReadablePayload
    740:753:void setReadablePayload(java.lang.String) -> setReadablePayload
    757:757:org.sandrop.websockets.WebSocketMessage$Direction getDirection() -> getDirection
    762:767:org.sandrop.websockets.WebSocketMessageDTO getDTO() -> getDTO
    108:108:java.lang.String access$000(org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13,byte) -> a
org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13$WebSocketFrameV13 -> org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13$a:
    java.util.Random randomizer -> b
    java.nio.ByteBuffer buffer -> c
    byte[] mask -> d
    boolean isMasked -> e
    boolean isForwarded -> f
    boolean isSealed -> g
    int rsv -> h
    org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13 this$1 -> a
    114:141:void <init>(org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13) -> <init>
    114:197:void <init>(org.sandrop.websockets.WebSocketProxyV13$WebSocketMessageV13,java.nio.ByteBuffer,org.sandrop.websockets.WebSocketMessage$Direction,boolean,int,int) -> <init>
    200:204:void put(byte) -> a
    207:211:void put(byte[]) -> a
    214:215:void setMasked(boolean) -> a
    218:218:boolean isMasked() -> a
    222:223:void setMask(byte[]) -> b
    226:226:byte getMaskAt(int) -> a
    230:233:int getFreeSpace() -> b
    237:241:void reallocateFor(int) -> b
    244:244:boolean isForwarded() -> c
    248:252:void seal() -> d
    255:260:byte[] getBuffer() -> e
    264:265:void setForwarded(boolean) -> b
    273:274:void setRsv(int) -> c
org.sandrop.websockets.WebSocketStorage -> org.sandrop.websockets.WebSocketStorage:
    java.util.logging.Logger logger -> a
    int WEBSOCKET_OBSERVING_ORDER -> WEBSOCKET_OBSERVING_ORDER
    org.sandroproxy.webscarab.store.sql.SqlLiteStore store -> b
    71:73:void <init>(org.sandroproxy.webscarab.store.sql.SqlLiteStore) -> <init>
    77:83:boolean insertMessage(org.sandrop.websockets.WebSocketMessageDTO) -> insertMessage
    88:88:int getObservingOrder() -> getObservingOrder
    93:105:boolean onMessageFrame(long,org.sandrop.websockets.WebSocketMessage) -> onMessageFrame
    110:129:void onStateChange(org.sandrop.websockets.WebSocketProxy$State,org.sandrop.websockets.WebSocketProxy) -> onStateChange
    63:63:void <clinit>() -> <clinit>
org.sandrop.websockets.utility.InvalidUtf8Exception -> org.sandrop.websockets.utility.InvalidUtf8Exception:
    24:25:void <init>(java.lang.String) -> <init>
org.sandrop.websockets.utility.Utf8StringBuilder -> org.sandrop.websockets.utility.a:
    java.lang.StringBuilder _buffer -> a
    int _more -> b
    int _bits -> c
    26:28:void <init>() -> <init>
    31:33:void <init>(int) -> <init>
    37:41:void append(byte[],int,int) -> a
    45:121:void append(byte) -> a
    146:149:java.lang.String toString() -> toString
org.sandrop.websockets.utility.Utf8Util -> org.sandrop.websockets.utility.Utf8Util:
    java.nio.charset.Charset UTF8_CHARSET -> UTF8_CHARSET
    30:30:void <init>() -> <init>
    45:45:java.lang.String encodePayloadToUtf8(byte[]) -> encodePayloadToUtf8
    59:73:java.lang.String encodePayloadToUtf8(byte[],int,int) -> encodePayloadToUtf8
    85:85:byte[] decodePayloadFromUtf8(java.lang.String) -> decodePayloadFromUtf8
    35:35:void <clinit>() -> <clinit>
org.sandroproxy.constants.Constants -> org.sandroproxy.constants.Constants:
    int TRANSPARENT_PROXY_HTTP -> TRANSPARENT_PROXY_HTTP
    int TRANSPARENT_PROXY_HTTPS -> TRANSPARENT_PROXY_HTTPS
    java.lang.String CA_FILE_NAME -> CA_FILE_NAME
    java.lang.String CERTS_FILE_NAME -> CERTS_FILE_NAME
    java.lang.String CA_FILE_EXPORT_POSTFIX -> CA_FILE_EXPORT_POSTFIX
    java.lang.String CERT_DEFAULT_PASSWORD -> CERT_DEFAULT_PASSWORD
    35:35:void <init>() -> <init>
    37:38:void <clinit>() -> <clinit>
org.sandroproxy.logger.LogHandler -> org.sandroproxy.logger.LogHandler:
    android.os.Handler mHandlerCallback -> a
    java.lang.String messageBuffer -> b
    java.lang.Object messageLock -> c
    long lastSendMessageTs -> d
    48:77:void <init>(android.os.Handler) -> <init>
    83:83:void close() -> close
    89:89:void flush() -> flush
    92:98:java.lang.String getMessageBuffer() -> getMessageBuffer
    103:108:void publish(java.util.logging.LogRecord) -> publish
    40:40:java.lang.String access$000() -> a
    40:40:long access$100(org.sandroproxy.logger.LogHandler) -> a
    40:40:android.os.Handler access$200() -> b
    40:40:long access$102(org.sandroproxy.logger.LogHandler,long) -> a
    46:46:void <clinit>() -> <clinit>
org.sandroproxy.logger.LogHandler$1 -> org.sandroproxy.logger.LogHandler$1:
    org.sandroproxy.logger.LogHandler this$0 -> a
    54:54:void <init>(org.sandroproxy.logger.LogHandler) -> <init>
    58:73:void run() -> run
org.sandroproxy.logger.Logger -> org.sandroproxy.logger.Logger:
    boolean LOG_TO_HANDLER -> a
    boolean LOG_TO_FILE -> b
    boolean LOG_TO_GUI -> c
    47:52:void <init>(android.os.Handler) -> <init>
    40:42:void <clinit>() -> <clinit>
org.sandroproxy.utils.Base64 -> org.sandroproxy.utils.Base64:
    int NO_OPTIONS -> NO_OPTIONS
    int ENCODE -> ENCODE
    int DECODE -> DECODE
    int GZIP -> GZIP
    int DONT_GUNZIP -> DONT_GUNZIP
    int DO_BREAK_LINES -> DO_BREAK_LINES
    int URL_SAFE -> URL_SAFE
    int ORDERED -> ORDERED
    byte[] _STANDARD_ALPHABET -> b
    byte[] _STANDARD_DECODABET -> c
    byte[] _URL_SAFE_ALPHABET -> d
    byte[] _URL_SAFE_DECODABET -> e
    byte[] _ORDERED_ALPHABET -> f
    byte[] _ORDERED_DECODABET -> g
    boolean $assertionsDisabled -> a
    473:478:byte[] getAlphabet(int) -> b
    489:494:byte[] getDecodabet(int) -> c
    499:500:void <init>() -> <init>
    523:524:byte[] encode3to4(byte[],byte[],int,int) -> b
    560:601:byte[] encode3to4(byte[],int,int,byte[],int,int) -> b
    619:628:void encode(java.nio.ByteBuffer,java.nio.ByteBuffer) -> encode
    644:655:void encode(java.nio.ByteBuffer,java.nio.CharBuffer) -> encode
    681:681:java.lang.String encodeObject(java.io.Serializable) -> encodeObject
    723:777:java.lang.String encodeObject(java.io.Serializable,int) -> encodeObject
    796:803:java.lang.String encodeBytes(byte[]) -> encodeBytes
    846:846:java.lang.String encodeBytes(byte[],int) -> encodeBytes
    877:884:java.lang.String encodeBytes(byte[],int,int) -> encodeBytes
    933:940:java.lang.String encodeBytes(byte[],int,int,int) -> encodeBytes
    959:967:byte[] encodeBytesToBytes(byte[]) -> encodeBytesToBytes
    998:1110:byte[] encodeBytesToBytes(byte[],int,int,int) -> encodeBytesToBytes
    1158:1225:int decode4to3(byte[],int,byte[],int,int) -> b
    1243:1251:byte[] decode(byte[]) -> decode
    1279:1342:byte[] decode(byte[],int,int,int) -> decode
    1357:1357:byte[] decode(java.lang.String) -> decode
    1378:1442:byte[] decode(java.lang.String,int) -> decode
    1463:1463:java.lang.Object decodeToObject(java.lang.String) -> decodeToObject
    1492:1544:java.lang.Object decodeToObject(java.lang.String,int,java.lang.ClassLoader) -> decodeToObject
    1570:1590:void encodeToFile(byte[],java.lang.String) -> encodeToFile
    1613:1629:void decodeToFile(java.lang.String,java.lang.String) -> decodeToFile
    1651:1692:byte[] decodeFromFile(java.lang.String) -> decodeFromFile
    1715:1750:java.lang.String encodeFromFile(java.lang.String) -> encodeFromFile
    1767:1783:void encodeFileToFile(java.lang.String,java.lang.String) -> encodeFileToFile
    1799:1815:void decodeFileToFile(java.lang.String,java.lang.String) -> decodeFileToFile
    172:172:byte[] access$000(int) -> a
    172:172:byte[] access$100(byte[],int,int,byte[],int,int) -> a
    172:172:int access$200(byte[],int,byte[],int,int) -> a
    172:172:byte[] access$300(byte[],byte[],int,int) -> a
    172:412:void <clinit>() -> <clinit>
org.sandroproxy.utils.Base64$1 -> org.sandroproxy.utils.Base64$1:
    java.lang.ClassLoader val$loader -> a
    1509:1509:void <init>(java.io.InputStream,java.lang.ClassLoader) -> <init>
    1514:1519:java.lang.Class resolveClass(java.io.ObjectStreamClass) -> resolveClass
org.sandroproxy.utils.Base64$InputStream -> org.sandroproxy.utils.Base64$InputStream:
    boolean encode -> a
    int position -> b
    byte[] buffer -> c
    int bufferLength -> d
    int numSigBytes -> e
    int lineLength -> f
    boolean breakLines -> g
    int options -> h
    byte[] decodabet -> i
    1847:1848:void <init>(java.io.InputStream) -> <init>
    1876:1885:void <init>(java.io.InputStream,int) -> <init>
    1898:1989:int read() -> read
    2013:2024:int read(byte[],int,int) -> read
org.sandroproxy.utils.Base64$OutputStream -> org.sandroproxy.utils.Base64$OutputStream:
    boolean encode -> a
    int position -> b
    byte[] buffer -> c
    int bufferLength -> d
    int lineLength -> e
    boolean breakLines -> f
    byte[] b4 -> g
    boolean suspendEncoding -> h
    int options -> i
    byte[] decodabet -> j
    2061:2062:void <init>(java.io.OutputStream) -> <init>
    2089:2100:void <init>(java.io.OutputStream,int) -> <init>
    2115:2154:void write(int) -> write
    2172:2181:void write(byte[],int,int) -> write
    2191:2202:void flushBase64() -> flushBase64
    2212:2220:void close() -> close
    2231:2233:void suspendEncoding() -> suspendEncoding
    2242:2243:void resumeEncoding() -> resumeEncoding
org.sandroproxy.utils.DNSProxy -> org.sandroproxy.utils.DNSProxy:
    java.util.logging.Logger _logger -> a
    boolean LOGD -> b
    java.lang.String TAG -> c
    java.util.concurrent.ExecutorService mThreadPool -> d
    java.util.Map dnsResponseCache -> e
    java.util.List dnsLocalServers -> f
    java.util.Map dnsHostCache -> g
    java.net.DatagramSocket srvSocket -> h
    int srvPort -> i
    java.lang.String providerId -> j
    int DNS_PKG_HEADER_LEN -> DNS_PKG_HEADER_LEN
    int[] DNS_HEADERS -> k
    int[] DNS_PAYLOAD -> l
    int IP_SECTION_LEN -> m
    boolean inService -> n
    java.lang.String dnsRelayPingEuHostName -> o
    java.lang.String dnsRelayPingEuIp -> p
    java.lang.String dnsRelayWwwIpCnHostName -> q
    java.lang.String dnsRelayWwwIpCnIp -> r
    java.lang.String dnsRelayHostName -> s
    java.lang.String dnsRelayIp -> t
    boolean localProvider -> u
    org.sandroproxy.webscarab.store.sql.SqlLiteStore database -> v
    54:61:java.lang.String getHostNameFromIp(java.lang.String) -> getHostNameFromIp
    65:71:byte[] int2byte(int) -> int2byte
    127:139:void getDnsServers() -> c
    78:173:void <init>(android.content.Context,int,java.lang.String) -> <init>
    177:189:int init() -> init
    199:214:void addToCache(java.lang.String,byte[]) -> a
    218:221:boolean checkIfExpired(org.sandroproxy.utils.DNSResponseDto) -> a
    225:237:org.sandroproxy.utils.DNSResponseDto queryFromCache(java.lang.String) -> a
    242:245:void close() -> close
    261:293:byte[] createDNSResponse(byte[],byte[]) -> createDNSResponse
    297:299:byte[] replayDNSResponse(java.net.DatagramPacket) -> replayDNSResponse
    309:319:java.lang.String getRequestDomain(byte[]) -> getRequestDomain
    323:323:int getServPort() -> getServPort
    327:327:boolean isClosed() -> isClosed
    331:331:boolean isInService() -> isInService
    339:365:void loadCache() -> d
    375:389:java.lang.String parseDomain(byte[]) -> a
    400:434:byte[] parseIPString(java.lang.String) -> parseIPString
    440:587:void run() -> run
    590:621:org.sandrop.webscarab.model.Request createHttpRequest(java.lang.String) -> b
    625:660:java.lang.String parseResponse(org.sandrop.webscarab.model.Response) -> a
    667:678:java.lang.String resolveDomainName(java.lang.String) -> c
    686:714:byte[] fetchAnswerHTTP(byte[]) -> fetchAnswerHTTP
    727:738:void sendDns(byte[],java.net.DatagramPacket,java.net.DatagramSocket) -> a
    47:47:boolean access$000(org.sandroproxy.utils.DNSProxy) -> a
    47:47:void access$100(org.sandroproxy.utils.DNSProxy,java.lang.String,byte[]) -> a
    47:47:java.net.DatagramSocket access$200(org.sandroproxy.utils.DNSProxy) -> b
    47:47:void access$300(org.sandroproxy.utils.DNSProxy,byte[],java.net.DatagramPacket,java.net.DatagramSocket) -> a
    47:47:boolean access$400() -> a
    47:47:java.lang.String access$500() -> b
    49:114:void <clinit>() -> <clinit>
org.sandroproxy.utils.DNSProxy$1 -> org.sandroproxy.utils.DNSProxy$1:
    java.lang.String val$questDomain -> a
    byte[] val$udpreq -> b
    java.net.DatagramPacket val$dnsPacket -> c
    org.sandroproxy.utils.DNSProxy this$0 -> d
    534:534:void <init>(org.sandroproxy.utils.DNSProxy,java.lang.String,byte[],java.net.DatagramPacket) -> <init>
    537:569:void run() -> run
org.sandroproxy.utils.DNSResponseDto -> org.sandroproxy.utils.DNSResponseDto:
    java.lang.String providerId -> a
    java.lang.String request -> b
    long timestamp -> c
    int reqTimes -> d
    byte[] dnsResponse -> e
    7:13:void <init>(java.lang.String) -> <init>
    7:21:void <init>(java.lang.String,long,java.lang.String,byte[],int) -> <init>
    24:25:byte[] getDNSResponse() -> getDNSResponse
    29:48:java.lang.String getIPString() -> getIPString
    55:55:java.lang.String getProviderId() -> getProviderId
    62:62:int getReqTimes() -> getReqTimes
    66:66:java.lang.String getRequest() -> getRequest
    73:73:long getTimestamp() -> getTimestamp
    81:82:void setDNSResponse(byte[]) -> setDNSResponse
    86:91:java.lang.String toString() -> toString
org.sandroproxy.utils.DomainValidator -> org.sandroproxy.utils.DomainValidator:
    org.sandroproxy.utils.DomainValidator DOMAIN_VALIDATOR -> a
    org.sandroproxy.utils.RegexValidator domainRegex -> b
    java.lang.String[] INFRASTRUCTURE_TLDS -> c
    java.lang.String[] GENERIC_TLDS -> d
    java.lang.String[] COUNTRY_CODE_TLDS -> e
    java.util.List INFRASTRUCTURE_TLD_LIST -> f
    java.util.List GENERIC_TLD_LIST -> g
    java.util.List COUNTRY_CODE_TLD_LIST -> h
    92:92:org.sandroproxy.utils.DomainValidator getInstance() -> getInstance
    83:97:void <init>() -> <init>
    109:113:boolean isValid(java.lang.String) -> isValid
    127:127:boolean isValidTld(java.lang.String) -> isValidTld
    141:141:boolean isValidInfrastructureTld(java.lang.String) -> isValidInfrastructureTld
    155:155:boolean isValidGenericTld(java.lang.String) -> isValidGenericTld
    168:168:boolean isValidCountryCodeTld(java.lang.String) -> isValidCountryCodeTld
    173:176:java.lang.String chompLeadingDot(java.lang.String) -> a
    78:473:void <clinit>() -> <clinit>
org.sandroproxy.utils.NetworkHostNameResolver -> org.sandroproxy.utils.NetworkHostNameResolver:
    android.content.Context mContext -> a
    java.lang.String mHostName -> b
    boolean mListenerStarted -> c
    java.util.Map siteData -> d
    java.util.Map ipPortSiteData -> e
    java.util.List unresolvedSiteData -> f
    org.sandroproxy.utils.NetworkHostNameResolver$HostNameResolver hostNameResolver -> g
    java.lang.String DEFAULT_SITE_NAME -> DEFAULT_SITE_NAME
    java.lang.String TAG -> h
    boolean LOGD -> i
    java.lang.String getOriginalDest(java.net.Socket) -> getOriginalDest
    34:60:void <init>(android.content.Context) -> <init>
    63:66:void cleanUp() -> cleanUp
    151:169:org.sandrop.webscarab.plugin.proxy.SiteData parseData(java.net.Socket,int) -> a
    173:180:void getCertificateData(org.sandrop.webscarab.plugin.proxy.SiteData) -> a
    184:193:void startListenerForEvents() -> c
    196:200:void stopListenerForEvents() -> d
    204:242:org.sandrop.webscarab.plugin.proxy.SiteData getSecureHost(java.net.Socket,int,boolean) -> getSecureHost
    29:29:java.util.List access$000(org.sandroproxy.utils.NetworkHostNameResolver) -> a
    29:29:boolean access$100() -> a
    29:29:java.lang.String access$200() -> b
    29:29:java.util.Map access$300(org.sandroproxy.utils.NetworkHostNameResolver) -> b
    29:29:java.util.Map access$400(org.sandroproxy.utils.NetworkHostNameResolver) -> c
    40:49:void <clinit>() -> <clinit>
org.sandroproxy.utils.NetworkHostNameResolver$1 -> org.sandroproxy.utils.NetworkHostNameResolver$1:
org.sandroproxy.utils.NetworkHostNameResolver$HostNameResolver -> org.sandroproxy.utils.NetworkHostNameResolver$a:
    boolean running -> a
    org.sandroproxy.utils.NetworkHostNameResolver this$0 -> b
    69:70:void <init>(org.sandroproxy.utils.NetworkHostNameResolver) -> <init>
    73:74:void stop() -> a
    78:147:void run() -> run
    69:69:void <init>(org.sandroproxy.utils.NetworkHostNameResolver,org.sandroproxy.utils.NetworkHostNameResolver$1) -> <init>
org.sandroproxy.utils.NetworkHostNameResolver$HostNameResolver$1 -> org.sandroproxy.utils.NetworkHostNameResolver$a$1:
    org.sandrop.webscarab.plugin.proxy.SiteData val$siteDataCurrent -> a
    org.sandroproxy.utils.NetworkHostNameResolver$HostNameResolver this$1 -> b
    83:83:void <init>(org.sandroproxy.utils.NetworkHostNameResolver$HostNameResolver,org.sandrop.webscarab.plugin.proxy.SiteData) -> <init>
    85:85:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    88:88:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    91:110:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
org.sandroproxy.utils.NetworkUtils -> org.sandroproxy.utils.NetworkUtils:
    java.lang.String TAG -> a
    java.util.logging.Logger _logger -> b
    45:45:void <init>() -> <init>
    51:68:java.util.List getLocalIpAddress() -> getLocalIpAddress
    47:48:void <clinit>() -> <clinit>
org.sandroproxy.utils.PreferenceUtils -> org.sandroproxy.utils.PreferenceUtils:
    java.lang.String dataStorageKey -> dataStorageKey
    java.lang.String dataLargeSize -> dataLargeSize
    java.lang.String proxyTransparentKey -> proxyTransparentKey
    java.lang.String proxyTransparentActiveKey -> proxyTransparentActiveKey
    java.lang.String proxyTransparentHostNameKey -> proxyTransparentHostNameKey
    java.lang.String proxyCustomPluginKey -> proxyCustomPluginKey
    java.lang.String proxyCustomPluginKeyActiveSetting -> proxyCustomPluginKeyActiveSetting
    java.lang.String proxyPort -> proxyPort
    java.lang.String proxyListenNonLocal -> proxyListenNonLocal
    java.lang.String proxyCaptureData -> proxyCaptureData
    java.lang.String proxyFakeCerts -> proxyFakeCerts
    java.lang.String proxyStoreSslAsPcap -> proxyStoreSslAsPcap
    java.lang.String caFileNamePath -> caFileNamePath
    java.lang.String caFilePassword -> caFilePassword
    java.lang.String dataCaptureWhiteListRegEx -> dataCaptureWhiteListRegEx
    java.lang.String dataCaptureBlackListRegEx -> dataCaptureBlackListRegEx
    java.lang.String chainProxyEnabled -> chainProxyEnabled
    java.lang.String chainProxyActive -> chainProxyActive
    java.lang.String chainProxyHttp -> chainProxyHttp
    java.lang.String chainProxyHttps -> chainProxyHttps
    java.lang.String chainProxyExcludeList -> chainProxyExcludeList
    java.lang.String chainProxyUsername -> chainProxyUsername
    java.lang.String chainProxyPassword -> chainProxyPassword
    java.lang.String localDomainName -> localDomainName
    java.lang.String ssTrustAllManager -> ssTrustAllManager
    java.lang.String dnsProxyEnabledKey -> dnsProxyEnabledKey
    java.lang.String dnsProxyEnabledActiveKey -> dnsProxyEnabledActiveKey
    java.lang.String dnsProxyProviderKey -> dnsProxyProviderKey
    java.lang.String dnsProxyProviderActiveKey -> dnsProxyProviderActiveKey
    java.lang.String dnsProxyPortKey -> dnsProxyPortKey
    java.lang.String dnsProxyPortActiveKey -> dnsProxyPortActiveKey
    43:43:void <init>() -> <init>
    84:85:java.lang.String getProxyPort(android.content.Context) -> getProxyPort
    89:103:java.io.File getDataStorageDir(android.content.Context) -> getDataStorageDir
    108:121:java.lang.String getCAFilePath(android.content.Context) -> getCAFilePath
    125:138:java.lang.String getCAExportFilePath(android.content.Context) -> getCAExportFilePath
    144:148:java.lang.String getCertFilePath(android.content.Context) -> getCertFilePath
    152:157:java.lang.String getCAFilePassword(android.content.Context) -> getCAFilePassword
    162:165:boolean IsDirWritable(java.io.File) -> IsDirWritable
    169:170:boolean isChainProxySelected(android.content.Context) -> isChainProxySelected
    174:175:boolean isChainProxyActive(android.content.Context) -> isChainProxyActive
    179:181:void setChainProxyActive(android.content.Context,boolean) -> setChainProxyActive
    184:185:boolean isTransparentProxySelected(android.content.Context) -> isTransparentProxySelected
    189:190:boolean isTransparentProxyActive(android.content.Context) -> isTransparentProxyActive
    194:196:void setTransparentProxyActive(android.content.Context,boolean) -> setTransparentProxyActive
    199:200:boolean isCustomProxyPluginsStoreEnabled(android.content.Context) -> isCustomProxyPluginsStoreEnabled
    204:206:void setCustomProxyPluginsActive(android.content.Context,boolean) -> setCustomProxyPluginsActive
    209:210:boolean isDnsProxySelected(android.content.Context) -> isDnsProxySelected
    214:215:boolean isDnsProxyActive(android.content.Context) -> isDnsProxyActive
    219:221:void setDnsProxyActive(android.content.Context,boolean) -> setDnsProxyActive
    224:225:java.lang.String getDnsProxyProviderSelected(android.content.Context) -> getDnsProxyProviderSelected
    229:230:java.lang.String getDnsProxyProviderActive(android.content.Context) -> getDnsProxyProviderActive
    234:236:void setDnsProxyProviderActive(android.content.Context,java.lang.String) -> setDnsProxyProviderActive
    239:241:boolean isDnsLocalProviderActive(android.content.Context) -> isDnsLocalProviderActive
    245:246:java.lang.String getDnsProxyPortSelected(android.content.Context) -> getDnsProxyPortSelected
    250:251:java.lang.String getDnsProxyPortActive(android.content.Context) -> getDnsProxyPortActive
    255:257:void setDnsProxyPortActive(android.content.Context,java.lang.String) -> setDnsProxyPortActive
    46:81:void <clinit>() -> <clinit>
org.sandroproxy.utils.RegexValidator -> org.sandroproxy.utils.RegexValidator:
    java.util.regex.Pattern[] patterns -> a
    70:71:void <init>(java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,boolean) -> <init>
    96:97:void <init>(java.lang.String[]) -> <init>
    110:124:void <init>(java.lang.String[],boolean) -> <init>
    135:143:boolean isValid(java.lang.String) -> isValid
    156:170:java.lang.String[] match(java.lang.String) -> match
    183:203:java.lang.String validate(java.lang.String) -> validate
    213:222:java.lang.String toString() -> toString
org.sandroproxy.utils.network.ClientResolver -> org.sandroproxy.utils.network.ClientResolver:
    boolean LOGD -> a
    java.lang.String TAG -> b
    android.content.Context mContext -> c
    android.content.pm.PackageManager packageManager -> d
    27:30:void <init>(android.content.Context) -> <init>
    35:153:org.sandrop.webscarab.model.ConnectionDescriptor getClientDescriptorBySocket(java.net.Socket) -> getClientDescriptorBySocket
    21:22:void <clinit>() -> <clinit>
org.sandroproxy.utils.network.NetworkInfo -> org.sandroproxy.utils.network.NetworkInfo:
    boolean LOGD -> a
    java.lang.String TAG -> b
    java.lang.String TCP_TYPE -> TCP_TYPE
    java.lang.String TCP6_TYPE -> TCP6_TYPE
    java.lang.String TCP_4_FILE_PATH -> TCP_4_FILE_PATH
    java.lang.String TCP_6_FILE_PATH -> TCP_6_FILE_PATH
    java.lang.String TCP_6_PATTERN -> TCP_6_PATTERN
    java.lang.String TCP_4_PATTERN -> TCP_4_PATTERN
    java.util.Map resolvedHostnamesCache -> c
    21:21:void <init>() -> <init>
    38:61:java.lang.String getIPAddress(boolean) -> getIPAddress
    69:90:java.lang.String getHostName(java.lang.String) -> getHostName
    94:104:java.net.InetAddress getAddress(int,java.lang.String) -> getAddress
    108:108:java.lang.String hexToNumber(java.lang.String) -> a
    112:124:java.lang.String getIpv4FromIpv6(java.lang.String) -> getIpv4FromIpv6
    131:256:java.util.List getNetworkInfo(android.content.Context,boolean) -> getNetworkInfo
    23:27:void <clinit>() -> <clinit>
org.sandroproxy.utils.preference.CheckOptionApp -> org.sandroproxy.utils.preference.CheckOptionApp:
    int ALL_UID -> ALL_UID
    int ALL_5228_PORT -> ALL_5228_PORT
    boolean WH -> WH
    boolean WHS -> WHS
    java.lang.String CA -> CA
    int AUid -> AUid
    java.lang.String AN -> AN
    boolean CE -> CE
    java.util.Map CustomPortRules -> CustomPortRules
    5:5:void <init>() -> <init>
    7:8:void <clinit>() -> <clinit>
org.sandroproxy.utils.preference.CheckOptionAppList -> org.sandroproxy.utils.preference.CheckOptionAppList:
    boolean LOGD -> a
    java.lang.String TAG -> b
    java.lang.String STORED_SETTINGS -> c
    java.lang.String ACTIVE_SETTINGS -> d
    15:15:void <init>() -> <init>
    24:24:java.util.Map CreateStoredObjectListFromPreferences(android.content.Context) -> CreateStoredObjectListFromPreferences
    28:28:java.util.Map CreateActiveObjectListFromPreferences(android.content.Context) -> CreateActiveObjectListFromPreferences
    34:80:java.util.Map CreateObjectListFromPreferences(android.content.Context,java.lang.String) -> a
    84:92:org.sandroproxy.utils.preference.CheckOptionApp createDefaultEmptyApp() -> createDefaultEmptyApp
    98:110:void setAppClearExtra(android.content.Context,int) -> setAppClearExtra
    113:131:void setAppCheckedExtra(android.content.Context,int,java.lang.String,boolean) -> setAppCheckedExtra
    134:152:void setAppCheckedHttp(android.content.Context,int,java.lang.String,boolean) -> setAppCheckedHttp
    155:173:void setAppCheckedHttps(android.content.Context,int,java.lang.String,boolean) -> setAppCheckedHttps
    176:177:void StoreObjectListToPreferences(android.content.Context,java.util.Map) -> StoreObjectListToPreferences
    180:182:void StoreActiveObjectListToPreferences(android.content.Context) -> StoreActiveObjectListToPreferences
    186:218:void ObjectListToPreferences(android.content.Context,java.util.Map,java.lang.String) -> a
    17:21:void <clinit>() -> <clinit>
org.sandroproxy.utils.preference.CheckOptionCustomPorts -> org.sandroproxy.utils.preference.CheckOptionCustomPorts:
    int CP -> CP
    int CPM -> CPM
    boolean SF -> SF
    boolean TSSL -> TSSL
    3:3:void <init>() -> <init>
org.sandroproxy.utils.preference.CheckOptionPlugin -> org.sandroproxy.utils.preference.CheckOptionPlugin:
    java.lang.String FN -> FN
    java.lang.String CN -> CN
    boolean EN -> EN
    3:3:void <init>() -> <init>
org.sandroproxy.utils.preference.CheckOptionPluginList -> org.sandroproxy.utils.preference.CheckOptionPluginList:
    boolean LOGD -> a
    java.lang.String TAG -> b
    java.lang.String STORED_SETTINGS -> c
    java.lang.String ACTIVE_SETTINGS -> d
    15:15:void <init>() -> <init>
    24:24:java.util.Map CreateStoredObjectListFromPreferences(android.content.Context) -> CreateStoredObjectListFromPreferences
    28:28:java.util.Map CreateActiveObjectListFromPreferences(android.content.Context) -> CreateActiveObjectListFromPreferences
    33:53:java.util.Map CreateObjectListFromPreferences(android.content.Context,java.lang.String) -> a
    57:61:org.sandroproxy.utils.preference.CheckOptionPlugin createDefaultEmptyPlugin() -> a
    66:84:void addPlugin(android.content.Context,java.lang.String,java.lang.String,boolean) -> addPlugin
    87:96:void removePlugin(android.content.Context,java.lang.String) -> removePlugin
    99:100:void StoreObjectListToPreferences(android.content.Context,java.util.Map) -> StoreObjectListToPreferences
    103:105:void StoreActiveObjectListToPreferences(android.content.Context) -> StoreActiveObjectListToPreferences
    110:126:void ObjectListToPreferences(java.lang.String,android.content.Context,java.util.Map) -> a
    17:21:void <clinit>() -> <clinit>
org.sandroproxy.webscarab.store.sql.Conversation -> org.sandroproxy.webscarab.store.sql.Conversation:
    long UNIQUE_ID -> UNIQUE_ID
    long REQUEST_ID -> REQUEST_ID
    long REQUEST_CHANGED_ID -> REQUEST_CHANGED_ID
    long RESPONSE_ID -> RESPONSE_ID
    long TS_START -> TS_START
    long TS_END -> TS_END
    int STATUS -> STATUS
    java.lang.String STATUS_DESC -> STATUS_DESC
    int TYPE -> TYPE
    java.lang.String CLIENT_ADDRESS -> CLIENT_ADDRESS
    long CLIENT_PORT -> CLIENT_PORT
    long CLIENT_UID -> CLIENT_UID
    java.lang.String CLIENT_APP_NAME -> CLIENT_APP_NAME
    java.lang.String REQ_METHOD -> REQ_METHOD
    java.lang.String REQ_PATH -> REQ_PATH
    java.lang.String REQ_QUERY_STRING -> REQ_QUERY_STRING
    java.lang.String REQ_SCHEMA -> REQ_SCHEMA
    java.lang.String REQ_HOST -> REQ_HOST
    long RESP_STATUS_CODE -> RESP_STATUS_CODE
    java.lang.String RESP_CONTENT_TYPE -> RESP_CONTENT_TYPE
    java.lang.String RESP_FILE_TYPE -> RESP_FILE_TYPE
    java.lang.String RESP_APP_TYPE -> RESP_APP_TYPE
    3:3:void <init>() -> <init>
    29:32:long getRequestId() -> getRequestId
org.sandroproxy.webscarab.store.sql.ConversationFilter -> org.sandroproxy.webscarab.store.sql.ConversationFilter:
    java.lang.String whereClause -> whereClause
    java.util.Map arg -> arg
    java.lang.String orderBy -> orderBy
    13:17:void <init>() -> <init>
    20:29:java.lang.String[] getArgs() -> getArgs
    34:57:org.sandroproxy.webscarab.store.sql.ConversationFilter createTransFilter(java.util.Date,java.util.Date,java.lang.String,java.lang.String,java.lang.String) -> createTransFilter
org.sandroproxy.webscarab.store.sql.IStoreEventListener -> org.sandroproxy.webscarab.store.sql.IStoreEventListener:
    void newConversation(long,int,long) -> newConversation
    void startConversation(long,long) -> startConversation
    void endConversation(long,boolean,long) -> endConversation
    void socketFrameSend(long,long,long,long) -> socketFrameSend
    void socketFrameReceived(long,long,long,long) -> socketFrameReceived
    void socketChannelChanged(long,long,long) -> socketChannelChanged
org.sandroproxy.webscarab.store.sql.SqlLiteStore -> org.sandroproxy.webscarab.store.sql.SqlLiteStore:
    android.content.Context mContext -> a
    java.lang.String mRootDirName -> b
    java.lang.String DATABASE_FILE -> DATABASE_FILE
    java.lang.String LOGTAG -> LOGTAG
    boolean LOGD -> LOGD
    org.sandroproxy.webscarab.store.sql.SqlLiteStore mInstance -> c
    android.database.sqlite.SQLiteDatabase mDatabase -> d
    boolean mFirstTableCreation -> e
    java.util.Map listOfEventListeners -> f
    java.lang.String[] mTableNames -> mTableNames
    int TABLE_COVERSATION_ID -> TABLE_COVERSATION_ID
    int TABLE_REQUEST_ID -> TABLE_REQUEST_ID
    int TABLE_RESPONSE_ID -> TABLE_RESPONSE_ID
    int TABLE_CONTENT_ID -> TABLE_CONTENT_ID
    int TABLE_HEADERS_ID -> TABLE_HEADERS_ID
    int TABLE_COOKIES_ID -> TABLE_COOKIES_ID
    int TABLE_URLS_ID -> TABLE_URLS_ID
    int TABLE_SOCKET_CHANNEL -> TABLE_SOCKET_CHANNEL
    int TABLE_SOCKET_MESSAGE -> TABLE_SOCKET_MESSAGE
    int TABLE_DNS_RESPONSES -> TABLE_DNS_RESPONSES
    java.lang.String ID_COL -> ID_COL
    java.lang.String CONVERSATION_UNIQUE_ID -> CONVERSATION_UNIQUE_ID
    java.lang.String CONVERSATION_TYPE -> CONVERSATION_TYPE
    java.lang.String CONVERSATION_CLIENT_ADDRESS -> CONVERSATION_CLIENT_ADDRESS
    java.lang.String CONVERSATION_CLIENT_PORT -> CONVERSATION_CLIENT_PORT
    java.lang.String CONVERSATION_CLIENT_UID -> CONVERSATION_CLIENT_UID
    java.lang.String CONVERSATION_CLIENT_APP_NAME -> CONVERSATION_CLIENT_APP_NAME
    java.lang.String CONVERSATION_STATUS -> CONVERSATION_STATUS
    java.lang.String CONVERSATION_STATUS_DESCRIPTION -> CONVERSATION_STATUS_DESCRIPTION
    java.lang.String CONVERSATION_REQUEST_ID -> CONVERSATION_REQUEST_ID
    java.lang.String CONVERSATION_REQUEST_CHANGED_ID -> CONVERSATION_REQUEST_CHANGED_ID
    java.lang.String CONVERSATION_RESPONSE_ID -> CONVERSATION_RESPONSE_ID
    java.lang.String CONVERSATION_TS_START -> CONVERSATION_TS_START
    java.lang.String CONVERSATION_TS_END -> CONVERSATION_TS_END
    java.lang.String CONVERSATION_REQ_PATH -> CONVERSATION_REQ_PATH
    java.lang.String CONVERSATION_REQ_QUERY_STRING -> CONVERSATION_REQ_QUERY_STRING
    java.lang.String CONVERSATION_REQ_SCHEMA -> CONVERSATION_REQ_SCHEMA
    java.lang.String CONVERSATION_REQ_HOST -> CONVERSATION_REQ_HOST
    java.lang.String CONVERSATION_REQ_METHOD -> CONVERSATION_REQ_METHOD
    java.lang.String CONVERSATION_RESP_STATUS_CODE -> CONVERSATION_RESP_STATUS_CODE
    java.lang.String CONVERSATION_RESP_CONTENT_TYPE -> CONVERSATION_RESP_CONTENT_TYPE
    java.lang.String CONVERSATION_RESP_APPLICATION_TYPE -> CONVERSATION_RESP_APPLICATION_TYPE
    java.lang.String CONVERSATION_RESP_FILE_TYPE -> CONVERSATION_RESP_FILE_TYPE
    java.lang.String REQUEST_UNIQUE_ID -> REQUEST_UNIQUE_ID
    java.lang.String REQUEST_TS -> REQUEST_TS
    java.lang.String REQUEST_METHOD -> REQUEST_METHOD
    java.lang.String REQUEST_HOST -> REQUEST_HOST
    java.lang.String REQUEST_SCHEME -> REQUEST_SCHEME
    java.lang.String REQUEST_QUERY -> REQUEST_QUERY
    java.lang.String REQUEST_HEADERS_ID -> REQUEST_HEADERS_ID
    java.lang.String REQUEST_CONTENT_ID -> REQUEST_CONTENT_ID
    java.lang.String REQUEST_CONTENT_TYPE -> REQUEST_CONTENT_TYPE
    java.lang.String REQUEST_CONTENT_LENGTH -> REQUEST_CONTENT_LENGTH
    java.lang.String REQUEST_URL -> REQUEST_URL
    java.lang.String REQUEST_GZIPED -> REQUEST_GZIPED
    java.lang.String REQUEST_CHUNKED -> REQUEST_CHUNKED
    java.lang.String REQUEST_DEFLATED -> REQUEST_DEFLATED
    java.lang.String RESPONSE_UNIQUE_ID -> RESPONSE_UNIQUE_ID
    java.lang.String RESPONSE_TS -> RESPONSE_TS
    java.lang.String RESPONSE_STATUS_MESSAGE -> RESPONSE_STATUS_MESSAGE
    java.lang.String RESPONSE_STATUS_CODE -> RESPONSE_STATUS_CODE
    java.lang.String RESPONSE_HEADERS_ID -> RESPONSE_HEADERS_ID
    java.lang.String RESPONSE_CONTENT_TYPE -> RESPONSE_CONTENT_TYPE
    java.lang.String RESPONSE_CONTENT_LENGTH -> RESPONSE_CONTENT_LENGTH
    java.lang.String RESPONSE_CONTENT_ID -> RESPONSE_CONTENT_ID
    java.lang.String RESPONSE_GZIPED -> RESPONSE_GZIPED
    java.lang.String RESPONSE_CHUNKED -> RESPONSE_CHUNKED
    java.lang.String RESPONSE_DEFLATED -> RESPONSE_DEFLATED
    java.lang.String HEADERS_UNIQUE_ID -> HEADERS_UNIQUE_ID
    java.lang.String HEADERS_PARENT_ID -> HEADERS_PARENT_ID
    java.lang.String HEADERS_PARENT_TYPE -> HEADERS_PARENT_TYPE
    java.lang.String HEADERS_NAME -> HEADERS_NAME
    java.lang.String HEADERS_VALUE -> HEADERS_VALUE
    int HEADERS_PARENT_TYPE_REQUEST -> HEADERS_PARENT_TYPE_REQUEST
    int HEADERS_PARENT_TYPE_RESPONSE -> HEADERS_PARENT_TYPE_RESPONSE
    java.lang.String CONTENT_UNIQUE_ID -> CONTENT_UNIQUE_ID
    java.lang.String CONTENT_PARENT_ID -> CONTENT_PARENT_ID
    java.lang.String CONTENT_PARENT_TYPE -> CONTENT_PARENT_TYPE
    java.lang.String CONTENT_GZIPED -> CONTENT_GZIPED
    java.lang.String CONTENT_CHUNKED -> CONTENT_CHUNKED
    java.lang.String CONTENT_DEFLATED -> CONTENT_DEFLATED
    java.lang.String CONTENT_FILE_STORE -> CONTENT_FILE_STORE
    java.lang.String CONTENT_DATA -> CONTENT_DATA
    java.lang.String CONTENT_FILE_NAME -> CONTENT_FILE_NAME
    java.lang.String SOCKET_CHANNEL_UNIQUE_ID -> SOCKET_CHANNEL_UNIQUE_ID
    java.lang.String SOCKET_CHANNEL_ID -> SOCKET_CHANNEL_ID
    java.lang.String SOCKET_CHANNEL_HOST -> SOCKET_CHANNEL_HOST
    java.lang.String SOCKET_CHANNEL_PORT -> SOCKET_CHANNEL_PORT
    java.lang.String SOCKET_CHANNEL_URL -> SOCKET_CHANNEL_URL
    java.lang.String SOCKET_CHANNEL_START_TIMESTAMP -> SOCKET_CHANNEL_START_TIMESTAMP
    java.lang.String SOCKET_CHANNEL_END_TIMESTAMP -> SOCKET_CHANNEL_END_TIMESTAMP
    java.lang.String SOCKET_CHANNEL_CONV_ID -> SOCKET_CHANNEL_CONV_ID
    java.lang.String SOCKET_MSG_UNIQUE_ID -> SOCKET_MSG_UNIQUE_ID
    java.lang.String SOCKET_MSG_ID -> SOCKET_MSG_ID
    java.lang.String SOCKET_MSG_TIMESTAMP -> SOCKET_MSG_TIMESTAMP
    java.lang.String SOCKET_MSG_OPCODE -> SOCKET_MSG_OPCODE
    java.lang.String SOCKET_MSG_PAYLOAD_UTF8 -> SOCKET_MSG_PAYLOAD_UTF8
    java.lang.String SOCKET_MSG_PAYLOAD_BYTES -> SOCKET_MSG_PAYLOAD_BYTES
    java.lang.String SOCKET_MSG_PAYLOAD_LENGTH -> SOCKET_MSG_PAYLOAD_LENGTH
    java.lang.String SOCKET_MSG_IS_OUTGOING -> SOCKET_MSG_IS_OUTGOING
    java.lang.String SOCKET_MSG_CHANNEL_ID -> SOCKET_MSG_CHANNEL_ID
    java.lang.String SOCKET_MSG_HANDSHAKE_ID -> SOCKET_MSG_HANDSHAKE_ID
    java.lang.String DNS_RESPONSE_UNIQUE_ID -> DNS_RESPONSE_UNIQUE_ID
    java.lang.String DNS_RESPONSE_PROVIDER_ID -> DNS_RESPONSE_PROVIDER_ID
    java.lang.String DNS_RESPONSE_REQUEST -> DNS_RESPONSE_REQUEST
    java.lang.String DNS_RESPONSE_TS -> DNS_RESPONSE_TS
    java.lang.String DNS_RESPONSE_REQUESTS_NR -> DNS_RESPONSE_REQUESTS_NR
    java.lang.String DNS_RESPONSE_RESPONSE_BLOB -> DNS_RESPONSE_RESPONSE_BLOB
    int CONTENT_PARENT_TYPE_REQUEST -> CONTENT_PARENT_TYPE_REQUEST
    int CONTENT_PARENT_TYPE_RESPONSE -> CONTENT_PARENT_TYPE_RESPONSE
    java.util.List channelsIds -> g
    java.lang.Object mConversationLock -> h
    204:240:org.sandroproxy.webscarab.store.sql.SqlLiteStore getInstance(android.content.Context,java.lang.String) -> getInstance
    244:244:boolean firstCreationOfTables() -> firstCreationOfTables
    250:258:void createDnsTable() -> a
    261:268:void upgradeHtmlTables1() -> b
    271:277:void upgradeHtmlTables2() -> c
    281:471:void createHtmlTables() -> d
    475:498:void createWebSocketsTables() -> e
    501:534:void upgradeDatabase() -> f
    61:940:void <init>(android.content.Context,java.lang.String) -> <init>
    542:546:void addEventListeners(java.lang.String,org.sandroproxy.webscarab.store.sql.IStoreEventListener) -> addEventListeners
    549:552:void removeEventListeners(java.lang.String) -> removeEventListeners
    555:561:void eventNewConversation(long,int,long) -> a
    564:575:void eventUpdateConversation(long,int,boolean,long) -> a
    578:584:void eventSocketChannelChangedStatus(long,long,long) -> a
    587:593:void eventSocketFrameSend(long,long,long,long) -> a
    596:602:void eventSocketFrameReceived(long,long,long,long) -> b
    605:619:java.util.List buildChannelDTOs(android.database.Cursor) -> a
    626:640:java.util.List getSocketChannels(java.lang.Long,java.lang.Long,java.lang.String,java.lang.String,java.lang.String) -> getSocketChannels
    644:656:java.util.List getSocketChannels() -> getSocketChannels
    660:671:java.util.Map buildDnsResponseDTOs(android.database.Cursor) -> b
    675:682:void insertDnsResponse(org.sandroproxy.utils.DNSResponseDto) -> insertDnsResponse
    685:696:java.util.Map getDnsResponses() -> getDnsResponses
    700:715:org.sandrop.websockets.WebSocketMessageDTO buildChannelMessagesDTO(android.database.Cursor,org.sandrop.websockets.WebSocketChannelDTO) -> a
    719:724:java.util.List buildChannelMessagesDTOs(android.database.Cursor,org.sandrop.websockets.WebSocketChannelDTO) -> b
    728:766:java.util.List getSocketChannelMessagesByFilter(java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,boolean) -> getSocketChannelMessagesByFilter
    770:805:java.util.List getSocketChannelMessages(long,boolean) -> getSocketChannelMessages
    809:829:java.util.List getSocketChannelMessageIds(long) -> getSocketChannelMessageIds
    833:875:org.sandrop.websockets.WebSocketMessageDTO getSocketChannelMessage(java.lang.String,long,long) -> getSocketChannelMessage
    880:880:org.sandrop.websockets.WebSocketMessageDTO getSocketChannelMessageByConvId(long,long) -> getSocketChannelMessageByConvId
    884:884:org.sandrop.websockets.WebSocketMessageDTO getSocketChannelMessageByChannelId(long,long) -> getSocketChannelMessageByChannelId
    889:908:void insertMessage(org.sandrop.websockets.WebSocketMessageDTO) -> insertMessage
    914:933:void insertOrUpdateChannel(org.sandrop.websockets.WebSocketChannelDTO) -> insertOrUpdateChannel
    938:938:void purgeChannel(java.lang.Long) -> purgeChannel
    943:955:void addHeaders(long,org.sandrop.webscarab.model.Message,int) -> a
    959:967:void clearHttpDatabase() -> clearHttpDatabase
    971:976:void clearSocketDatabase() -> clearSocketDatabase
    980:984:void clearDnsProxyDatabase() -> clearDnsProxyDatabase
    987:1004:long addContent(long,org.sandrop.webscarab.model.Message,int,java.lang.String) -> a
    1010:1024:long createNewConversation(java.util.Date,int,org.sandrop.webscarab.model.ConnectionDescriptor) -> createNewConversation
    1030:1065:long updateFailedConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,java.lang.String) -> updateFailedConversation
    1070:1102:long updateGotRequestConversation(long,java.util.Date,org.sandrop.webscarab.model.Request) -> updateGotRequestConversation
    1108:1168:long updateGotResponseConversation(long,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> updateGotResponseConversation
    1174:1190:long insertRequest(org.sandrop.webscarab.model.Request,java.lang.String) -> a
    1196:1213:long insertResponse(org.sandrop.webscarab.model.Response,java.lang.String) -> a
    1219:1276:int addConversation(org.sandrop.webscarab.model.ConversationID,java.util.Date,org.sandrop.webscarab.model.Request,org.sandrop.webscarab.model.Response) -> addConversation
    1280:1289:org.sandrop.webscarab.model.Request createRequest(android.database.Cursor) -> c
    1293:1313:org.sandrop.webscarab.model.Request getRequest(long) -> getRequest
    1317:1320:org.sandrop.webscarab.model.Response createResponse(android.database.Cursor) -> d
    1324:1353:org.sandrop.webscarab.model.Response getResponseByRequestId(long) -> getResponseByRequestId
    1357:1377:org.sandrop.webscarab.model.Response getResponse(long) -> getResponse
    1381:1395:org.sandrop.webscarab.model.NamedValue[] getHeaders(long,int) -> getHeaders
    1400:1412:java.lang.String geContentFileName(long,int) -> a
    1417:1441:org.sandroproxy.webscarab.store.sql.Conversation createConversationObj(android.database.Cursor) -> e
    1445:1457:java.util.List getConversation(java.util.Date,java.util.Date,java.lang.String,java.lang.String,java.lang.String) -> getConversation
    1461:1473:java.util.List getConversationIds(java.util.Date,java.util.Date,java.lang.String,java.lang.String,java.lang.String) -> getConversationIds
    1479:1491:org.sandroproxy.webscarab.store.sql.Conversation getConversation(long) -> getConversation
    1495:1502:long deleteDnsProxyResponse(java.lang.String) -> deleteDnsProxyResponse
    1510:1510:void setConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> setConversationProperty
    1516:1516:boolean addConversationProperty(org.sandrop.webscarab.model.ConversationID,java.lang.String,java.lang.String) -> addConversationProperty
    1522:1522:java.lang.String[] getConversationProperties(org.sandrop.webscarab.model.ConversationID,java.lang.String) -> getConversationProperties
    1528:1528:int getIndexOfConversation(org.sandrop.webscarab.model.HttpUrl,org.sandrop.webscarab.model.ConversationID) -> getIndexOfConversation
    1534:1534:int getConversationCount(org.sandrop.webscarab.model.HttpUrl) -> getConversationCount
    1540:1540:org.sandrop.webscarab.model.ConversationID getConversationAt(org.sandrop.webscarab.model.HttpUrl,int) -> getConversationAt
    1547:1547:void addUrl(org.sandrop.webscarab.model.HttpUrl) -> addUrl
    1552:1552:boolean isKnownUrl(org.sandrop.webscarab.model.HttpUrl) -> isKnownUrl
    1559:1559:void setUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> setUrlProperty
    1564:1564:boolean addUrlProperty(org.sandrop.webscarab.model.HttpUrl,java.lang.String,java.lang.String) -> addUrlProperty
    1570:1570:java.lang.String[] getUrlProperties(org.sandrop.webscarab.model.HttpUrl,java.lang.String) -> getUrlProperties
    1576:1576:int getChildCount(org.sandrop.webscarab.model.HttpUrl) -> getChildCount
    1582:1582:org.sandrop.webscarab.model.HttpUrl getChildAt(org.sandrop.webscarab.model.HttpUrl,int) -> getChildAt
    1588:1588:int getIndexOf(org.sandrop.webscarab.model.HttpUrl) -> getIndexOf
    1595:1595:void setRequest(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Request) -> setRequest
    1600:1600:org.sandrop.webscarab.model.Request getRequest(org.sandrop.webscarab.model.ConversationID) -> getRequest
    1607:1607:void setResponse(org.sandrop.webscarab.model.ConversationID,org.sandrop.webscarab.model.Response) -> setResponse
    1612:1612:org.sandrop.webscarab.model.Response getResponse(org.sandrop.webscarab.model.ConversationID) -> getResponse
    1618:1618:int getCookieCount() -> getCookieCount
    1624:1624:int getCookieCount(java.lang.String) -> getCookieCount
    1630:1630:java.lang.String getCookieAt(int) -> getCookieAt
    1636:1636:org.sandrop.webscarab.model.Cookie getCookieAt(java.lang.String,int) -> getCookieAt
    1642:1642:org.sandrop.webscarab.model.Cookie getCurrentCookie(java.lang.String) -> getCurrentCookie
    1648:1648:int getIndexOfCookie(org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    1654:1654:int getIndexOfCookie(java.lang.String,org.sandrop.webscarab.model.Cookie) -> getIndexOfCookie
    1660:1660:boolean addCookie(org.sandrop.webscarab.model.Cookie) -> addCookie
    1666:1666:boolean removeCookie(org.sandrop.webscarab.model.Cookie) -> removeCookie
    1673:1673:void flush() -> flush
    1679:1679:void writeUnseenLinks(org.sandrop.webscarab.plugin.spider.Link[]) -> writeUnseenLinks
    1684:1684:org.sandrop.webscarab.plugin.spider.Link[] readUnseenLinks() -> readUnseenLinks
    1691:1691:void writeSeenLinks(java.lang.String[]) -> writeSeenLinks
    1696:1696:java.lang.String[] readSeenLinks() -> readSeenLinks
    1702:1702:int getFragmentTypeCount() -> getFragmentTypeCount
    1708:1708:java.lang.String getFragmentType(int) -> getFragmentType
    1714:1714:int getFragmentCount(java.lang.String) -> getFragmentCount
    1720:1720:java.lang.String getFragmentKeyAt(java.lang.String,int) -> getFragmentKeyAt
    1726:1726:int indexOfFragment(java.lang.String,java.lang.String) -> indexOfFragment
    1732:1732:int putFragment(java.lang.String,java.lang.String,java.lang.String) -> putFragment
    1738:1738:java.lang.String getFragment(java.lang.String) -> getFragment
    55:63:void <clinit>() -> <clinit>
org.sandroproxy.webscarab.store.sql.WebSocketChannelFilter -> org.sandroproxy.webscarab.store.sql.WebSocketChannelFilter:
    java.lang.String whereClause -> whereClause
    java.util.Map arg -> arg
    java.lang.String orderBy -> orderBy
    13:17:void <init>() -> <init>
    20:29:java.lang.String[] getArgs() -> getArgs
    34:57:org.sandroproxy.webscarab.store.sql.WebSocketChannelFilter createTransFilter(java.lang.Long,java.lang.Long,java.lang.String,java.lang.String,java.lang.String) -> createTransFilter
org.sandroproxy.webscarab.store.sql.WebSocketMessagesFilter -> org.sandroproxy.webscarab.store.sql.WebSocketMessagesFilter:
    java.lang.String whereClause -> whereClause
    java.util.Map arg -> arg
    java.lang.String orderBy -> orderBy
    12:16:void <init>() -> <init>
    19:28:java.lang.String[] getArgs() -> getArgs
    33:58:org.sandroproxy.webscarab.store.sql.WebSocketMessagesFilter createTransFilter(java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.String) -> createTransFilter
