/*
 *  This file is part of AntMonitor <https://athinagroup.eng.uci.edu/projects/antmonitor/>.
 *  Copyright (C) 2018 Anastasia Shuba and the UCI Networking Group
 *  <https://athinagroup.eng.uci.edu>, University of California, Irvine.
 *
 *  AntMonitor is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  AntMonitor is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with AntMonitor. If not, see <http://www.gnu.org/licenses/>.
 */
package edu.uci.calit2.antmonitor.lib.logging;

import android.content.Context;
import android.util.Log;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

/**
 * Service for uploading network traffic log files to the remote data store.
 * Uploads are handled on a single worker thread in FIFO manner (see {@link android.app.IntentService} documentation).
 * Due to the fact that this Service is implemented as an intent service, we create a new connection for each file to upload.
 * For each request, a "Connection : close" header is added to effectively ensure that each connection is closed, as it is not going to be re-used.
 *
 * @author Simon Langhoff, Janus Varmarken
 */
public class FileUploader {

    /** Tag used for logging. */
    private static final String TAG = FileUploader.class.getSimpleName();

    /** The address (including port) of the server where traffic log files are to be uploaded. */
    private final String mServerAddress;

    /** Server secret */
    private final String mServerSecret;

    /** Context, used to access various Android services */
    private final Context mContext;

    /** SSL certificate used for secure upload */
    private final int mCertificate;

    /** User id, used by the server to figure out which folder to store log files in */
    private final String mUserId;

    /**
     * Constructor
     * @param context used for accessing various Android services
     * @param certificate the raw resource identifier of an SSL certificate,
     *                      as generated by the appt tool.
     * @param serverAddress address of the server to which to upload files
     * @param serverSecret the secret used by the server
     */
    public FileUploader(Context context, int certificate, String serverAddress,
                        String serverSecret, String userId) {
        mContext = context;
        mCertificate = certificate;
        mServerAddress = serverAddress;
        mServerSecret = serverSecret;
        mUserId = userId;
    }

    /**
     * Upload all files that were marked as completed and deletes them from disk.
     * @return the number of files that could not be uploaded due to network errors
     */
    public int upload() {
        // Count how many were successfully uploaded
        int numFailed = 0;

        // Get the files that are ready for upload.
        File[] filesToUpload = TrafficLogFiles.getCompleted(mContext);
        for (File f : filesToUpload) {
            if (!upload(f))
                numFailed++;
        }

        return numFailed;
    }

    /**
     * Uploads the given file to the server specified by {@link #mServerAddress}.
     * Upload is performed using HTTP(S).
     *
     * @param fileToUpload The file that is to be uploaded.
     * @return {@code true} if the file was successfully uploaded.
     *         {@code false} if the file upload failed.
     */
    public boolean upload(File fileToUpload) {
        HttpClient client = null;

        try {
            // Load key store from resources
            InputStream in = mContext.getResources().openRawResource(mCertificate);

            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            Certificate ca;
            try {
                ca = cf.generateCertificate(in);
            } finally {
                in.close();
            }

            // Create a KeyStore containing our trusted CAs
            String keyStoreType = KeyStore.getDefaultType();
            KeyStore keyStore = KeyStore.getInstance(keyStoreType);
            keyStore.load(null, null);
            keyStore.setCertificateEntry("ca", ca);

            // Create a TrustManager that trusts the CAs in our KeyStore
            String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
            tmf.init(keyStore);

            // Create an SSLContext that uses our TrustManager
            SSLContext context = SSLContext.getInstance("TLS");
            context.init(null, tmf.getTrustManagers(), null);

            // Register Trusted key store to SSL Factory and HTTPClient using our context.
            SchemeRegistry schemeRegistry = new SchemeRegistry();
            schemeRegistry.register(new Scheme("http", PlainSocketFactory
                    .getSocketFactory(), 80));
            SSLSocketFactory sslSocketFactory = new SSLSocketFactory(keyStore);
            schemeRegistry.register(new Scheme("https", sslSocketFactory, 9050));
            HttpParams params = new BasicHttpParams();
            ClientConnectionManager cm =
                    new ThreadSafeClientConnManager(params, schemeRegistry);

            // Set the timeout in milliseconds until a connection is established.
            int timeoutConnection = 10000;
            HttpConnectionParams.setConnectionTimeout(params,
                    timeoutConnection);
            // Set the default socket timeout (SO_TIMEOUT)
            // in milliseconds which is the timeout for waiting for data.
            int timeoutSocket = 30000;
            HttpConnectionParams
                    .setSoTimeout(params, timeoutSocket);

            // Init HTTPClient with our key store.
            client = new DefaultHttpClient(cm, params);

        } catch (Exception e) {
            e.printStackTrace();
            // Could not use our trusted store, will result in SSL errors if we continue.
            Log.e(getClass().getSimpleName(), "Error Using Key Store, Cannot Upload File.");
            return false;
        }

        HttpPost post = new HttpPost(mServerAddress);

        MultipartEntityBuilder entityBuilder = MultipartEntityBuilder.create();
        entityBuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);

        entityBuilder.addTextBody("uuid", mUserId);

        entityBuilder.addBinaryBody("file", fileToUpload, ContentType.APPLICATION_OCTET_STREAM,
                                        fileToUpload.getName());

        HttpEntity entity = entityBuilder.build();

        post.setEntity(entity);
        post.addHeader(HttpHeaders.CONNECTION, "close"); // Request every connection to be closed by the server.
        post.addHeader(HttpHeaders.AUTHORIZATION, "apiKey=" + mServerSecret);

        try {
            HttpResponse response = client.execute(post);

            if (response.getStatusLine().getStatusCode() == 200) {
                Log.d(TAG, "Upload successful for file: " + fileToUpload.getName());
                // Upload successful, delete file
                if (!fileToUpload.delete()) {
                    Log.e(TAG, "Could not delete file! : " + fileToUpload.getName());
                }
                return true;
            }
            return false;
        } catch(IOException ioe) {
            Log.e(TAG, IOException.class.getSimpleName() + " while performing file upload.");
            ioe.printStackTrace();
            return false;
        }
    }
}
